<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\os_win32.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MZSCHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"if_mzsch.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>chdir</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;direct.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shellapi.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tlhelp32.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FROM_LEFT_1ST_BUTTON_PRESSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_LEFT_1ST_BUTTON_PRESSED</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RIGHTMOST_BUTTON_PRESSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIGHTMOST_BUTTON_PRESSED</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FROM_LEFT_2ND_BUTTON_PRESSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_LEFT_2ND_BUTTON_PRESSED</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FROM_LEFT_3RD_BUTTON_PRESSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_LEFT_3RD_BUTTON_PRESSED</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FROM_LEFT_4TH_BUTTON_PRESSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_LEFT_4TH_BUTTON_PRESSED</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MOUSE_MOVED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_MOVED</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DOUBLE_CLICK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUBLE_CLICK</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>fdDump</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINAPI</name></cpp:macro></cpp:define>

<typedef>typedef <type><name>char</name> <modifier>*</modifier></type> <name>LPCSTR</name>;</typedef>

<typedef>typedef <type><name>char</name> <modifier>*</modifier></type> <name>LPWSTR</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>ACCESS_MASK</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>BOOL</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>COLORREF</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>CONSOLE_CURSOR_INFO</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>COORD</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>DWORD</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>HANDLE</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>LPHANDLE</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>HDC</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>HFONT</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>HICON</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>HINSTANCE</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>HWND</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>INPUT_RECORD</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>INT</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>KEY_EVENT_RECORD</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>LOGFONT</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>LPBOOL</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>LPCTSTR</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>LPDWORD</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>LPSTR</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>LPTSTR</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>LPVOID</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>MOUSE_EVENT_RECORD</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>PACL</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>PDWORD</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>PHANDLE</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>PRINTDLG</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>PSECURITY_DESCRIPTOR</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>PSID</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>SECURITY_INFORMATION</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>SHORT</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>SMALL_RECT</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>TEXTMETRIC</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>TOKEN_INFORMATION_CLASS</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>TRUSTEE</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>WORD</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>WCHAR</name>;</typedef>

<typedef>typedef <type><name>void</name></type> <name>VOID</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>BY_HANDLE_FILE_INFORMATION</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>SE_OBJECT_TYPE</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>PSNSECINFO</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>PSNSECINFOW</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>STARTUPINFO</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>PROCESS_INFORMATION</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>LPSECURITY_ATTRIBUTES</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__stdcall</name></cpp:macro></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>g_hConIn</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>g_hConOut</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>SMALL_RECT</name></type> <name>g_srScrollRegion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>COORD</name></type> <name>g_coord</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>WORD</name></type> <name>g_attrDefault</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>WORD</name></type> <name>g_attrCurrent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_fCBrkPressed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_fCtrlCPressed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_fForceExit</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>scroll</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>cLines</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_scroll_region</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>top</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>bottom</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_scroll_region_tb</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>bottom</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_scroll_region_lr</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>right</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>insert_lines</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>cLines</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>delete_lines</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>cLines</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gotoxy</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>standout</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_cursor_visible</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>did_create_conin</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_dont_use_vimrun</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>need_vimrun_warning</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>vimrun_path</name> <init>= <expr><literal type="string">"vimrun "</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>win32_getattrs</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>win32_setattrs</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attrs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>win32_set_archive</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>conpty_working</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>conpty_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>conpty_stable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vtp_flag_init</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>vtp_working</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vtp_init</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vtp_exit</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vtp_printf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vtp_sgr_bulk</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vtp_sgr_bulks</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>guicolor_T</name></type> <name>save_console_bg_rgb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>guicolor_T</name></type> <name>save_console_fg_rgb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>guicolor_T</name></type> <name>store_console_bg_rgb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>guicolor_T</name></type> <name>store_console_fg_rgb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_color_index_bg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_color_index_fg</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>default_console_color_bg</name> <init>= <expr><literal type="number">0x000000</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>default_console_color_fg</name> <init>= <expr><literal type="number">0xc0c0c0</literal></expr></init></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_VTP</name></cpp:macro> <cpp:value>(vtp_working &amp;&amp; is_term_win32() &amp;&amp; (p_tgc || (!p_tgc &amp;&amp; t_colors &gt;= 256)))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_VTP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_console_color_rgb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>reset_console_color_rgb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>restore_console_color_rgb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_VIRTUAL_TERMINAL_PROCESSING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_VIRTUAL_TERMINAL_PROCESSING</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>suppress_winsize</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>exe_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>win8_or_later</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>_DYN_CONSOLE_SCREEN_BUFFER_INFOEX</name>

<block>{

<decl_stmt><decl><type><name>ULONG</name></type> <name>cbSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COORD</name></type> <name>dwSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COORD</name></type> <name>dwCursorPosition</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>wAttributes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SMALL_RECT</name></type> <name>srWindow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COORD</name></type> <name>dwMaximumWindowSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>wPopupAttributes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>bFullscreenSupported</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COLORREF</name></type> <name><name>ColorTable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DYN_CONSOLE_SCREEN_BUFFER_INFOEX</name><operator>,</operator> *<name>PDYN_CONSOLE_SCREEN_BUFFER_INFOEX</name>;</typedef>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>PfnGetConsoleScreenBufferInfoEx</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>PDYN_CONSOLE_SCREEN_BUFFER_INFOEX</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PfnGetConsoleScreenBufferInfoEx</name></type> <name>pGetConsoleScreenBufferInfoEx</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>PfnSetConsoleScreenBufferInfoEx</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>PDYN_CONSOLE_SCREEN_BUFFER_INFOEX</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PfnSetConsoleScreenBufferInfoEx</name></type> <name>pSetConsoleScreenBufferInfoEx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>has_csbiex</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>PfnRtlGetVersion</name>)<parameter_list>(<parameter><decl><type><name>LPOSVERSIONINFOW</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_VER</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>build</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((major) &lt;&lt; 24) | ((minor) &lt;&lt; 16) | (build))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>DWORD</name></type>

<name>get_build_number</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSVERSIONINFOW</name></type> <name>osver</name> <init>= <expr><block>{<expr>sizeof<operator>(</operator><name>OSVERSIONINFOW</name><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>hNtdll</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PfnRtlGetVersion</name></type> <name>pRtlGetVersion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ver</name> <init>= <expr><call><name>MAKE_VER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hNtdll</name> <operator>=</operator> <call><name>GetModuleHandle</name><argument_list>(<argument><expr><literal type="string">"ntdll.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hNtdll</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pRtlGetVersion</name> <operator>=</operator>

<operator>(</operator><name>PfnRtlGetVersion</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hNtdll</name></expr></argument>, <argument><expr><literal type="string">"RtlGetVersion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pRtlGetVersion</name><argument_list>(<argument><expr><operator>&amp;</operator><name>osver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ver</name> <operator>=</operator> <call><name>MAKE_VER</name><argument_list>(<argument><expr><call><name>min</name><argument_list>(<argument><expr><name><name>osver</name><operator>.</operator><name>dwMajorVersion</name></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>min</name><argument_list>(<argument><expr><name><name>osver</name><operator>.</operator><name>dwMinorVersion</name></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>min</name><argument_list>(<argument><expr><name><name>osver</name><operator>.</operator><name>dwBuildNumber</name></name></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ver</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>BOOL</name></type>

<name>read_console_input</name><parameter_list>(

<parameter><decl><type><name>HANDLE</name></type> <name>hInput</name></decl></parameter>,

<parameter><decl><type><name>INPUT_RECORD</name> <modifier>*</modifier></type><name>lpBuffer</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>nLength</name></decl></parameter>,

<parameter><decl><type><name>LPDWORD</name></type> <name>lpEvents</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<enum>enum

<block>{

<decl><name>IRSIZE</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name>INPUT_RECORD</name></type> <name><name>s_irCache</name><index>[<expr><name>IRSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>DWORD</name></type> <name>s_dwIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>DWORD</name></type> <name>s_dwMax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwEvents</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nLength</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>s_dwMax</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>win8_or_later</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nLength</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>PeekConsoleInputW</name><argument_list>(<argument><expr><name>hInput</name></expr></argument>, <argument><expr><name>lpBuffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>lpEvents</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ReadConsoleInputW</name><argument_list>(<argument><expr><name>hInput</name></expr></argument>, <argument><expr><name>lpBuffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwEvents</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s_dwMax</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nLength</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>PeekConsoleInputW</name><argument_list>(<argument><expr><name>hInput</name></expr></argument>, <argument><expr><name>lpBuffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>lpEvents</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadConsoleInputW</name><argument_list>(<argument><expr><name>hInput</name></expr></argument>, <argument><expr><name>s_irCache</name></expr></argument>, <argument><expr><name>IRSIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwEvents</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s_dwIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s_dwMax</name> <operator>=</operator> <name>dwEvents</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dwEvents</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lpEvents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s_dwMax</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>head</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>s_dwMax</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>head</name> <operator>!=</operator> <name>tail</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s_irCache</name><index>[<expr><name>head</name></expr>]</index></name><operator>.</operator><name>EventType</name> <operator>==</operator> <name>WINDOW_BUFFER_SIZE_EVENT</name>

<operator>&amp;&amp;</operator> <name><name>s_irCache</name><index>[<expr><name>head</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>EventType</name>

<operator>==</operator> <name>WINDOW_BUFFER_SIZE_EVENT</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>head</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tail</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s_irCache</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s_irCache</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>--</operator><name>tail</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>head</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>s_dwMax</name> <operator>=</operator> <name>tail</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>lpBuffer</name> <operator>=</operator> <name><name>s_irCache</name><index>[<expr><name>s_dwIndex</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>nLength</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>nLength</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>++</operator><name>s_dwIndex</name> <operator>&gt;=</operator> <name>s_dwMax</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s_dwMax</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>lpEvents</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name></type>

<name>peek_console_input</name><parameter_list>(

<parameter><decl><type><name>HANDLE</name></type> <name>hInput</name></decl></parameter>,

<parameter><decl><type><name>INPUT_RECORD</name> <modifier>*</modifier></type><name>lpBuffer</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name> <name>nLength</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>LPDWORD</name></type> <name>lpEvents</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>read_console_input</name><argument_list>(<argument><expr><name>hInput</name></expr></argument>, <argument><expr><name>lpBuffer</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>lpEvents</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>DWORD</name></type>

<name>msg_wait_for_multiple_objects</name><parameter_list>(

<parameter><decl><type><name>DWORD</name></type> <name>nCount</name></decl></parameter>,

<parameter><decl><type><name>LPHANDLE</name></type> <name>pHandles</name></decl></parameter>,

<parameter><decl><type><name>BOOL</name></type> <name>fWaitAll</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>dwMilliseconds</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>dwWakeMask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read_console_input</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>WAIT_OBJECT_0</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>MsgWaitForMultipleObjects</name><argument_list>(<argument><expr><name>nCount</name></expr></argument>, <argument><expr><name>pHandles</name></expr></argument>, <argument><expr><name>fWaitAll</name></expr></argument>,

<argument><expr><name>dwMilliseconds</name></expr></argument>, <argument><expr><name>dwWakeMask</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>DWORD</name></type>

<name>wait_for_single_object</name><parameter_list>(

<parameter><decl><type><name>HANDLE</name></type> <name>hHandle</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>dwMilliseconds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read_console_input</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>WAIT_OBJECT_0</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>hHandle</name></expr></argument>, <argument><expr><name>dwMilliseconds</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>get_exe_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ENV_PATH_LEN</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name></type> <name><name>temp</name><index>[<expr><name>MAX_ENV_PATH_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>exe_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GetModuleFileName</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>MAX_ENV_PATH_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>temp</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>exe_name</name> <operator>=</operator> <call><name>FullName_save</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>temp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>exe_path</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>exe_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>exe_path</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>exe_name</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>gettail_sep</name><argument_list>(<argument><expr><name>exe_name</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>exe_name</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exe_path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mch_getenv</name><argument_list>(<argument><expr><literal type="string">"PATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>exe_path</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>MAX_ENV_PATH_LEN</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>exe_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_setenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"PATH"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>unescape_shellxquote</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>escaped</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'^'</literal> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name><operator>--</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>HINSTANCE</name></type>

<name>vimLoadLib</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>dll</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>exe_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_exe_name</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>exe_path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>old_dirw</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetCurrentDirectoryW</name><argument_list>(<argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>old_dirw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SetCurrentDirectory</name><argument_list>(<argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator><name>exe_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dll</name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetCurrentDirectoryW</name><argument_list>(<argument><expr><name>old_dirw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dll</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>dll</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>mch_is_gui_executable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PBYTE</name></type> <name>pImage</name> <init>= <expr><operator>(</operator><name>PBYTE</name><operator>)</operator><call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PIMAGE_DOS_HEADER</name></type> <name>pDOS</name> <init>= <expr><operator>(</operator><name>PIMAGE_DOS_HEADER</name><operator>)</operator><name>pImage</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PIMAGE_NT_HEADERS</name></type> <name>pPE</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pDOS</name><operator>-&gt;</operator><name>e_magic</name></name> <operator>!=</operator> <name>IMAGE_DOS_SIGNATURE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pPE</name> <operator>=</operator> <operator>(</operator><name>PIMAGE_NT_HEADERS</name><operator>)</operator><operator>(</operator><name>pImage</name> <operator>+</operator> <name><name>pDOS</name><operator>-&gt;</operator><name>e_lfanew</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pPE</name><operator>-&gt;</operator><name>Signature</name></name> <operator>!=</operator> <name>IMAGE_NT_SIGNATURE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pPE</name><operator>-&gt;</operator><name>OptionalHeader</name><operator>.</operator><name>Subsystem</name></name> <operator>==</operator> <name>IMAGE_SUBSYSTEM_WINDOWS_GUI</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_ICONV</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_GETTEXT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>

<name>get_imported_func_info</name><parameter_list>(<parameter><decl><type><name>HINSTANCE</name></type> <name>hInst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PBYTE</name></type> <name>pImage</name> <init>= <expr><operator>(</operator><name>PBYTE</name><operator>)</operator><name>hInst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PIMAGE_DOS_HEADER</name></type> <name>pDOS</name> <init>= <expr><operator>(</operator><name>PIMAGE_DOS_HEADER</name><operator>)</operator><name>hInst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PIMAGE_NT_HEADERS</name></type> <name>pPE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PIMAGE_IMPORT_DESCRIPTOR</name></type> <name>pImpDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PIMAGE_THUNK_DATA</name></type> <name>pIAT</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PIMAGE_THUNK_DATA</name></type> <name>pINT</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PIMAGE_IMPORT_BY_NAME</name></type> <name>pImpName</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pDOS</name><operator>-&gt;</operator><name>e_magic</name></name> <operator>!=</operator> <name>IMAGE_DOS_SIGNATURE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pPE</name> <operator>=</operator> <operator>(</operator><name>PIMAGE_NT_HEADERS</name><operator>)</operator><operator>(</operator><name>pImage</name> <operator>+</operator> <name><name>pDOS</name><operator>-&gt;</operator><name>e_lfanew</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pPE</name><operator>-&gt;</operator><name>Signature</name></name> <operator>!=</operator> <name>IMAGE_NT_SIGNATURE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pImpDesc</name> <operator>=</operator> <operator>(</operator><name>PIMAGE_IMPORT_DESCRIPTOR</name><operator>)</operator><operator>(</operator><name>pImage</name>

<operator>+</operator> <name><name>pPE</name><operator>-&gt;</operator><name>OptionalHeader</name><operator>.</operator><name>DataDirectory</name><index>[<expr><name>IMAGE_DIRECTORY_ENTRY_IMPORT</name></expr>]</index></name>

<operator>.</operator><name>VirtualAddress</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>pImpDesc</name><operator>-&gt;</operator><name>FirstThunk</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>pImpDesc</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pImpDesc</name><operator>-&gt;</operator><name>OriginalFirstThunk</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pIAT</name> <operator>=</operator> <operator>(</operator><name>PIMAGE_THUNK_DATA</name><operator>)</operator><operator>(</operator><name>pImage</name> <operator>+</operator> <name><name>pImpDesc</name><operator>-&gt;</operator><name>FirstThunk</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pINT</name> <operator>=</operator> <operator>(</operator><name>PIMAGE_THUNK_DATA</name><operator>)</operator><operator>(</operator><name>pImage</name> <operator>+</operator> <name><name>pImpDesc</name><operator>-&gt;</operator><name>OriginalFirstThunk</name></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>pIAT</name><operator>-&gt;</operator><name>u1</name><operator>.</operator><name>Function</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>pIAT</name></expr><operator>,</operator> <expr><operator>++</operator><name>pINT</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IMAGE_SNAP_BY_ORDINAL</name><argument_list>(<argument><expr><name><name>pINT</name><operator>-&gt;</operator><name>u1</name><operator>.</operator><name>Ordinal</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pImpName</name> <operator>=</operator> <operator>(</operator><name>PIMAGE_IMPORT_BY_NAME</name><operator>)</operator><operator>(</operator><name>pImage</name>

<operator>+</operator> <operator>(</operator><name>UINT_PTR</name><operator>)</operator><operator>(</operator><name><name>pINT</name><operator>-&gt;</operator><name>u1</name><operator>.</operator><name>AddressOfData</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>pImpName</name><operator>-&gt;</operator><name>Name</name></name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name>info</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pIAT</name><operator>-&gt;</operator><name>u1</name><operator>.</operator><name>Function</name></name></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>pImage</name> <operator>+</operator> <name><name>pImpDesc</name><operator>-&gt;</operator><name>Name</name></name><operator>)</operator></expr>;</return>

<default>default:</default>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>HINSTANCE</name></type>

<name>find_imported_module_by_funcname</name><parameter_list>(<parameter><decl><type><name>HINSTANCE</name></type> <name>hInst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>modulename</name></decl>;</decl_stmt>

<expr_stmt><expr><name>modulename</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>get_imported_func_info</name><argument_list>(<argument><expr><name>hInst</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>modulename</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>GetModuleHandleA</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>

<name>get_dll_import_func</name><parameter_list>(<parameter><decl><type><name>HINSTANCE</name></type> <name>hInst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>get_imported_func_info</name><argument_list>(<argument><expr><name>hInst</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_GETTEXT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GETTEXT_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETTEXT_DLL</name></cpp:macro> <cpp:value>"libintl.dll"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETTEXT_DLL_ALT1</name></cpp:macro> <cpp:value>"libintl-8.dll"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETTEXT_DLL_ALT2</name></cpp:macro> <cpp:value>"intl.dll"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>null_libintl_gettext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>null_libintl_ngettext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>null_libintl_textdomain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>null_libintl_bindtextdomain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>null_libintl_bind_textdomain_codeset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>null_libintl_wputenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>HINSTANCE</name></type> <name>hLibintlDLL</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>dyn_libintl_gettext</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>null_libintl_gettext</name></expr></init>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>dyn_libintl_ngettext</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>

<init>= <expr><name>null_libintl_ngettext</name></expr></init>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>dyn_libintl_textdomain</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>null_libintl_textdomain</name></expr></init>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>dyn_libintl_bindtextdomain</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>

<init>= <expr><name>null_libintl_bindtextdomain</name></expr></init>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>dyn_libintl_bind_textdomain_codeset</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>

<init>= <expr><name>null_libintl_bind_textdomain_codeset</name></expr></init>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>dyn_libintl_wputenv</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>null_libintl_wputenv</name></expr></init>;</function_decl>

<function><type><name>int</name></type>

<name>dyn_libintl_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<struct><specifier>static</specifier> struct

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FARPROC</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

}</block> <decl><name><name>libintl_entry</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"gettext"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dyn_libintl_gettext</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ngettext"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dyn_libintl_ngettext</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"textdomain"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dyn_libintl_textdomain</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bindtextdomain"</literal></expr>, <expr><operator>(</operator><name>FARPROC</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dyn_libintl_bindtextdomain</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>hmsvcrt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hLibintlDLL</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hLibintlDLL</name> <operator>=</operator> <call><name>vimLoadLib</name><argument_list>(<argument><expr><name>GETTEXT_DLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GETTEXT_DLL_ALT1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hLibintlDLL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hLibintlDLL</name> <operator>=</operator> <call><name>vimLoadLib</name><argument_list>(<argument><expr><name>GETTEXT_DLL_ALT1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GETTEXT_DLL_ALT2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hLibintlDLL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hLibintlDLL</name> <operator>=</operator> <call><name>vimLoadLib</name><argument_list>(<argument><expr><name>GETTEXT_DLL_ALT2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hLibintlDLL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_loadlib</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GETTEXT_DLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>libintl_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>libintl_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name><name>libintl_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>=</operator> <operator>(</operator><name>FARPROC</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLibintlDLL</name></expr></argument>,

<argument><expr><name><name>libintl_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dyn_libintl_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_loadfunc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>libintl_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dyn_libintl_bind_textdomain_codeset</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hLibintlDLL</name></expr></argument>,

<argument><expr><literal type="string">"bind_textdomain_codeset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dyn_libintl_bind_textdomain_codeset</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dyn_libintl_bind_textdomain_codeset</name> <operator>=</operator>

<name>null_libintl_bind_textdomain_codeset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hmsvcrt</name> <operator>=</operator> <call><name>find_imported_module_by_funcname</name><argument_list>(<argument><expr><name>hLibintlDLL</name></expr></argument>, <argument><expr><literal type="string">"getenv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hmsvcrt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dyn_libintl_wputenv</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hmsvcrt</name></expr></argument>, <argument><expr><literal type="string">"_wputenv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dyn_libintl_wputenv</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dyn_libintl_wputenv</name> <operator>==</operator> <name>_wputenv</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dyn_libintl_wputenv</name> <operator>=</operator> <name>null_libintl_wputenv</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>dyn_libintl_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hLibintlDLL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hLibintlDLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hLibintlDLL</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dyn_libintl_gettext</name> <operator>=</operator> <name>null_libintl_gettext</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dyn_libintl_ngettext</name> <operator>=</operator> <name>null_libintl_ngettext</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dyn_libintl_textdomain</name> <operator>=</operator> <name>null_libintl_textdomain</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dyn_libintl_bindtextdomain</name> <operator>=</operator> <name>null_libintl_bindtextdomain</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dyn_libintl_bind_textdomain_codeset</name> <operator>=</operator> <name>null_libintl_bind_textdomain_codeset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dyn_libintl_wputenv</name> <operator>=</operator> <name>null_libintl_wputenv</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>null_libintl_gettext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msgid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>msgid</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>null_libintl_ngettext</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msgid</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msgid_plural</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>msgid</name></expr> </then><else>: <expr><name>msgid_plural</name></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>null_libintl_bindtextdomain</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>domainname</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>dirname</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>null_libintl_bind_textdomain_codeset</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>domainname</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>codeset</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>null_libintl_textdomain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>domainname</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>null_libintl_wputenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><name>envstring</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VER_PLATFORM_WIN32_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VER_PLATFORM_WIN32_WINDOWS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ACL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;aclapi.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTECTED_DACL_SECURITY_INFORMATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTECTED_DACL_SECURITY_INFORMATION</name></cpp:macro> <cpp:value>0x80000000L</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ACL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>BOOL</name></type>

<name>win32_enable_privilege</name><parameter_list>(<parameter><decl><type><name>LPTSTR</name></type> <name>lpszPrivilege</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>bEnable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BOOL</name></type> <name>bResult</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LUID</name></type> <name>luid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hToken</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TOKEN_PRIVILEGES</name></type> <name>tokenPrivileges</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OpenProcessToken</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><name>TOKEN_ADJUST_PRIVILEGES</name> <operator>|</operator> <name>TOKEN_QUERY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hToken</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LookupPrivilegeValue</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>lpszPrivilege</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>luid</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tokenPrivileges</name><operator>.</operator><name>PrivilegeCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tokenPrivileges</name><operator>.</operator><name>Privileges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Luid</name> <operator>=</operator> <name>luid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tokenPrivileges</name><operator>.</operator><name>Privileges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Attributes</name> <operator>=</operator> <ternary><condition><expr><name>bEnable</name></expr> ?</condition><then>

<expr><name>SE_PRIVILEGE_ENABLED</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>bResult</name> <operator>=</operator> <call><name>AdjustTokenPrivileges</name><argument_list>(<argument><expr><name>hToken</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokenPrivileges</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TOKEN_PRIVILEGES</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bResult</name> <operator>&amp;&amp;</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>PlatformId</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>OSVERSIONINFO</name></type> <name>ovi</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ovi</name><operator>.</operator><name>dwOSVersionInfoSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ovi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetVersionEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ovi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>windowsVersion</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>windowsVersion</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d.%d"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovi</name><operator>.</operator><name>dwMajorVersion</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovi</name><operator>.</operator><name>dwMinorVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ovi</name><operator>.</operator><name>dwMajorVersion</name></name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name><name>ovi</name><operator>.</operator><name>dwMinorVersion</name></name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator>

<operator>||</operator> <name><name>ovi</name><operator>.</operator><name>dwMajorVersion</name></name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>win8_or_later</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ACL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>win32_enable_privilege</name><argument_list>(<argument><expr><name>SE_SECURITY_NAME</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT</name></cpp:macro> <cpp:value>(SHIFT_PRESSED)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL</name></cpp:macro> <cpp:value>(RIGHT_CTRL_PRESSED | LEFT_CTRL_PRESSED)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALT</name></cpp:macro> <cpp:value>(RIGHT_ALT_PRESSED | LEFT_ALT_PRESSED)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALT_GR</name></cpp:macro> <cpp:value>(RIGHT_ALT_PRESSED | LEFT_CTRL_PRESSED)</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>WORD</name></type> <name>wVirtKey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>fAnsiKey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chAlone</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chShift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chCtrl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chAlt</name></decl>;</decl_stmt>

}</block> <decl><name><name>VirtKeyMap</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>VK_ESCAPE</name></expr>,<expr><name>FALSE</name></expr>, <expr><name>ESC</name></expr>, <expr><name>ESC</name></expr>, <expr><name>ESC</name></expr>, <expr><name>ESC</name></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_F1</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">';'</literal></expr>, <expr><literal type="char">'T'</literal></expr>, <expr><literal type="char">'^'</literal></expr>, <expr><literal type="char">'h'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_F2</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'&lt;'</literal></expr>, <expr><literal type="char">'U'</literal></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_F3</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'='</literal></expr>, <expr><literal type="char">'V'</literal></expr>, <expr><literal type="char">'`'</literal></expr>, <expr><literal type="char">'j'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_F4</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'&gt;'</literal></expr>, <expr><literal type="char">'W'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'k'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_F5</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'?'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_F6</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><literal type="char">'Y'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_F7</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'A'</literal></expr>, <expr><literal type="char">'Z'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_F8</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="char">'['</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_F9</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'\\'</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'p'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_F10</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><literal type="char">']'</literal></expr>, <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'q'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_F11</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'\205'</literal></expr>, <expr><literal type="char">'\207'</literal></expr>, <expr><literal type="char">'\211'</literal></expr>, <expr><literal type="char">'\213'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_F12</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'\206'</literal></expr>, <expr><literal type="char">'\210'</literal></expr>, <expr><literal type="char">'\212'</literal></expr>, <expr><literal type="char">'\214'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_HOME</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'G'</literal></expr>, <expr><literal type="char">'\302'</literal></expr>, <expr><literal type="char">'w'</literal></expr>, <expr><literal type="char">'\303'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_UP</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'H'</literal></expr>, <expr><literal type="char">'\304'</literal></expr>, <expr><literal type="char">'\305'</literal></expr>, <expr><literal type="char">'\306'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_PRIOR</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="char">'\307'</literal></expr>, <expr><literal type="char">'\204'</literal></expr>, <expr><literal type="char">'\310'</literal></expr>, }</block></expr>, 

<expr><block>{ <expr><name>VK_LEFT</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'\311'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'\312'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_RIGHT</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'M'</literal></expr>, <expr><literal type="char">'\313'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'\314'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_END</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'O'</literal></expr>, <expr><literal type="char">'\315'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'\316'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_DOWN</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'P'</literal></expr>, <expr><literal type="char">'\317'</literal></expr>, <expr><literal type="char">'\320'</literal></expr>, <expr><literal type="char">'\321'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_NEXT</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'Q'</literal></expr>, <expr><literal type="char">'\322'</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="char">'\323'</literal></expr>, }</block></expr>, 

<expr><block>{ <expr><name>VK_INSERT</name></expr>,<expr><name>TRUE</name></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="char">'\324'</literal></expr>, <expr><literal type="char">'\325'</literal></expr>, <expr><literal type="char">'\326'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_DELETE</name></expr>,<expr><name>TRUE</name></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'\327'</literal></expr>, <expr><literal type="char">'\330'</literal></expr>, <expr><literal type="char">'\331'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_BACK</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'x'</literal></expr>, <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'{'</literal></expr>, }</block></expr>, 

<expr><block>{ <expr><name>VK_SNAPSHOT</name></expr>,<expr><name>TRUE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'r'</literal></expr>, }</block></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

{ VK_F13, TRUE, '\332', '\333', '\334', '\335', },

{ VK_F14, TRUE, '\336', '\337', '\340', '\341', },

{ VK_F15, TRUE, '\342', '\343', '\344', '\345', },

{ VK_F16, TRUE, '\346', '\347', '\350', '\351', },

{ VK_F17, TRUE, '\352', '\353', '\354', '\355', },

{ VK_F18, TRUE, '\356', '\357', '\360', '\361', },

{ VK_F19, TRUE, '\362', '\363', '\364', '\365', },

{ VK_F20, TRUE, '\366', '\367', '\370', '\371', },

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><name>VK_ADD</name></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="char">'N'</literal></expr>, }</block></expr>, 

<expr><block>{ <expr><name>VK_SUBTRACT</name></expr>, <expr><name>TRUE</name></expr>,<expr><literal type="char">'J'</literal></expr>, <expr><literal type="char">'J'</literal></expr>, <expr><literal type="char">'J'</literal></expr>, <expr><literal type="char">'J'</literal></expr>, }</block></expr>, 

<expr><block>{ <expr><name>VK_MULTIPLY</name></expr>, <expr><name>TRUE</name></expr>,<expr><literal type="char">'7'</literal></expr>, <expr><literal type="char">'7'</literal></expr>, <expr><literal type="char">'7'</literal></expr>, <expr><literal type="char">'7'</literal></expr>, }</block></expr>, 

<expr><block>{ <expr><name>VK_NUMPAD0</name></expr>,<expr><name>TRUE</name></expr>, <expr><literal type="char">'\332'</literal></expr>, <expr><literal type="char">'\333'</literal></expr>, <expr><literal type="char">'\334'</literal></expr>, <expr><literal type="char">'\335'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_NUMPAD1</name></expr>,<expr><name>TRUE</name></expr>, <expr><literal type="char">'\336'</literal></expr>, <expr><literal type="char">'\337'</literal></expr>, <expr><literal type="char">'\340'</literal></expr>, <expr><literal type="char">'\341'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_NUMPAD2</name></expr>,<expr><name>TRUE</name></expr>, <expr><literal type="char">'\342'</literal></expr>, <expr><literal type="char">'\343'</literal></expr>, <expr><literal type="char">'\344'</literal></expr>, <expr><literal type="char">'\345'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_NUMPAD3</name></expr>,<expr><name>TRUE</name></expr>, <expr><literal type="char">'\346'</literal></expr>, <expr><literal type="char">'\347'</literal></expr>, <expr><literal type="char">'\350'</literal></expr>, <expr><literal type="char">'\351'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_NUMPAD4</name></expr>,<expr><name>TRUE</name></expr>, <expr><literal type="char">'\352'</literal></expr>, <expr><literal type="char">'\353'</literal></expr>, <expr><literal type="char">'\354'</literal></expr>, <expr><literal type="char">'\355'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_NUMPAD5</name></expr>,<expr><name>TRUE</name></expr>, <expr><literal type="char">'\356'</literal></expr>, <expr><literal type="char">'\357'</literal></expr>, <expr><literal type="char">'\360'</literal></expr>, <expr><literal type="char">'\361'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_NUMPAD6</name></expr>,<expr><name>TRUE</name></expr>, <expr><literal type="char">'\362'</literal></expr>, <expr><literal type="char">'\363'</literal></expr>, <expr><literal type="char">'\364'</literal></expr>, <expr><literal type="char">'\365'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_NUMPAD7</name></expr>,<expr><name>TRUE</name></expr>, <expr><literal type="char">'\366'</literal></expr>, <expr><literal type="char">'\367'</literal></expr>, <expr><literal type="char">'\370'</literal></expr>, <expr><literal type="char">'\371'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_NUMPAD8</name></expr>,<expr><name>TRUE</name></expr>, <expr><literal type="char">'\372'</literal></expr>, <expr><literal type="char">'\373'</literal></expr>, <expr><literal type="char">'\374'</literal></expr>, <expr><literal type="char">'\375'</literal></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_NUMPAD9</name></expr>,<expr><name>TRUE</name></expr>, <expr><literal type="char">'\376'</literal></expr>, <expr><literal type="char">'\377'</literal></expr>, <expr><literal type="char">'|'</literal></expr>, <expr><literal type="char">'}'</literal></expr>, }</block></expr>,

}</block></expr></init></decl>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UChar</name></cpp:macro> <cpp:value>UnicodeChar</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UChar</name></cpp:macro> <cpp:value>uChar.UnicodeChar</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>win32_kbd_patch_key</name><parameter_list>(

<parameter><decl><type><name>KEY_EVENT_RECORD</name> <modifier>*</modifier></type><name>pker</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UINT</name></type> <name>uMods</name> <init>= <expr><name><name>pker</name><operator>-&gt;</operator><name>dwControlKeyState</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_iIsDead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>WORD</name></type> <name><name>awAnsiCode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>BYTE</name></type> <name><name>abKeystate</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s_iIsDead</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pker</name><operator>-&gt;</operator><name>UChar</name></name> <operator>=</operator> <operator>(</operator><name>WCHAR</name><operator>)</operator> <name><name>awAnsiCode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s_iIsDead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pker</name><operator>-&gt;</operator><name>UChar</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>abKeystate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>abKeystate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ToUnicode</name><argument_list>(<argument><expr><name>VK_SPACE</name></expr></argument>, <argument><expr><call><name>MapVirtualKey</name><argument_list>(<argument><expr><name>VK_SPACE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>abKeystate</name></expr></argument>, <argument><expr><name>awAnsiCode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>uMods</name> <operator>&amp;</operator> <name>SHIFT_PRESSED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>abKeystate</name><index>[<expr><name>VK_SHIFT</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uMods</name> <operator>&amp;</operator> <name>CAPSLOCK_ON</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>abKeystate</name><index>[<expr><name>VK_CAPITAL</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uMods</name> <operator>&amp;</operator> <name>ALT_GR</name><operator>)</operator> <operator>==</operator> <name>ALT_GR</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>abKeystate</name><index>[<expr><name>VK_CONTROL</name></expr>]</index></name> <operator>=</operator> <name><name>abKeystate</name><index>[<expr><name>VK_LCONTROL</name></expr>]</index></name> <operator>=</operator>

<name><name>abKeystate</name><index>[<expr><name>VK_MENU</name></expr>]</index></name> <operator>=</operator> <name><name>abKeystate</name><index>[<expr><name>VK_RMENU</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s_iIsDead</name> <operator>=</operator> <call><name>ToUnicode</name><argument_list>(<argument><expr><name><name>pker</name><operator>-&gt;</operator><name>wVirtualKeyCode</name></name></expr></argument>, <argument><expr><name><name>pker</name><operator>-&gt;</operator><name>wVirtualScanCode</name></name></expr></argument>,

<argument><expr><name>abKeystate</name></expr></argument>, <argument><expr><name>awAnsiCode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s_iIsDead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pker</name><operator>-&gt;</operator><name>UChar</name></name> <operator>=</operator> <operator>(</operator><name>WCHAR</name><operator>)</operator> <name><name>awAnsiCode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>s_iIsDead</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>g_fJustGotFocus</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>BOOL</name></type>

<name>decode_key_event</name><parameter_list>(

<parameter><decl><type><name>KEY_EVENT_RECORD</name> <modifier>*</modifier></type><name>pker</name></decl></parameter>,

<parameter><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>pch</name></decl></parameter>,

<parameter><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>pch2</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pmodifiers</name></decl></parameter>,

<parameter><decl><type><name>BOOL</name> <name>fDoPost</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nModifs</name> <init>= <expr><name><name>pker</name><operator>-&gt;</operator><name>dwControlKeyState</name></name> <operator>&amp;</operator> <operator>(</operator><name>SHIFT</name> <operator>|</operator> <name>ALT</name> <operator>|</operator> <name>CTRL</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pch</name> <operator>=</operator> <operator>*</operator><name>pch2</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g_fJustGotFocus</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pker</name><operator>-&gt;</operator><name>bKeyDown</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>pker</name><operator>-&gt;</operator><name>wVirtualKeyCode</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VK_SHIFT</name></expr>:</case>

<case>case <expr><name>VK_CONTROL</name></expr>:</case>

<case>case <expr><name>VK_MENU</name></expr>:</case> 

<return>return <expr><name>FALSE</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nModifs</name> <operator>&amp;</operator> <name>CTRL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>nModifs</name> <operator>&amp;</operator> <operator>~</operator><name>CTRL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pker</name><operator>-&gt;</operator><name>UChar</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pker</name><operator>-&gt;</operator><name>wVirtualKeyCode</name></name> <operator>==</operator> <literal type="char">'6'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pch</name> <operator>=</operator> <name>Ctrl_HAT</name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>pker</name><operator>-&gt;</operator><name>wVirtualKeyCode</name></name> <operator>==</operator> <literal type="char">'2'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pch</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>pker</name><operator>-&gt;</operator><name>wVirtualKeyCode</name></name> <operator>==</operator> <literal type="number">0xBD</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pch</name> <operator>=</operator> <name>Ctrl__</name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pker</name><operator>-&gt;</operator><name>wVirtualKeyCode</name></name> <operator>==</operator> <name>VK_TAB</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>nModifs</name> <operator>&amp;</operator> <name>SHIFT_PRESSED</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pch</name> <operator>=</operator> <name>K_NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pch2</name> <operator>=</operator> <literal type="char">'\017'</literal></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VirtKeyMap</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>VirtKeyMap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>VirtKeyMap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wVirtKey</name> <operator>==</operator> <name><name>pker</name><operator>-&gt;</operator><name>wVirtualKeyCode</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nModifs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pch</name> <operator>=</operator> <name><name>VirtKeyMap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>chAlone</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>nModifs</name> <operator>&amp;</operator> <name>SHIFT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>nModifs</name> <operator>&amp;</operator> <operator>~</operator><name>SHIFT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pch</name> <operator>=</operator> <name><name>VirtKeyMap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>chShift</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>nModifs</name> <operator>&amp;</operator> <name>CTRL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>nModifs</name> <operator>&amp;</operator> <operator>~</operator><name>CTRL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pch</name> <operator>=</operator> <name><name>VirtKeyMap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>chCtrl</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>nModifs</name> <operator>&amp;</operator> <name>ALT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>nModifs</name> <operator>&amp;</operator> <operator>~</operator><name>ALT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pch</name> <operator>=</operator> <name><name>VirtKeyMap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>chAlt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pch</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>VirtKeyMap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fAnsiKey</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pch2</name> <operator>=</operator> <operator>*</operator><name>pch</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pch</name> <operator>=</operator> <name>K_NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>win32_kbd_patch_key</name><argument_list>(<argument><expr><name>pker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pch</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pch</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>pker</name><operator>-&gt;</operator><name>UChar</name></name></expr> </then><else>: <expr><name>NUL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pmodifiers</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nModifs</name> <operator>&amp;</operator> <name>ALT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>nModifs</name> <operator>&amp;</operator> <name>CTRL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pmodifiers</name> <operator>|=</operator> <name>MOD_MASK_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nModifs</name> <operator>&amp;</operator> <name>SHIFT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>pch</name> <operator>&lt;=</operator> <literal type="number">0x20</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pmodifiers</name> <operator>|=</operator> <name>MOD_MASK_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nModifs</name> <operator>&amp;</operator> <name>CTRL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>nModifs</name> <operator>&amp;</operator> <name>ALT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>*</operator><name>pch</name> <operator>&gt;=</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>pch</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pmodifiers</name> <operator>|=</operator> <name>MOD_MASK_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><operator>*</operator><name>pch</name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>mch_setmouse</name><parameter_list>(<parameter><decl><type><name>int</name> <name>on</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_fMouseAvail</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_fMouseActive</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_nMouseClick</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_xMouse</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_yMouse</name></decl>;</decl_stmt> 

<function><type><name>void</name></type>

<name>mch_setmouse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>on</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>cmodein</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_fMouseAvail</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>g_fMouseActive</name> <operator>=</operator> <name>on</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmodein</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>g_fMouseActive</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cmodein</name> <operator>|=</operator> <name>ENABLE_MOUSE_INPUT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cmodein</name> <operator>&amp;=</operator> <operator>~</operator><name>ENABLE_MOUSE_INPUT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><name>cmodein</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TERM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>mch_bevalterm_changed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_setmouse</name><argument_list>(<argument><expr><name>g_fMouseActive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>BOOL</name></type>

<name>decode_mouse_event</name><parameter_list>(

<parameter><decl><type><name>MOUSE_EVENT_RECORD</name> <modifier>*</modifier></type><name>pmer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_nOldButton</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_nOldMouseClick</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_xOldMouse</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_yOldMouse</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>s_old_topline</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_old_topfill</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_cClicks</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>s_fReleased</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>DWORD</name></type> <name>s_dwLastClickTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>s_fNextIsMiddle</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>DWORD</name></type> <name>cButtons</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>LEFT</name> <init>= <expr><name>FROM_LEFT_1ST_BUTTON_PRESSED</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>MIDDLE</name> <init>= <expr><name>FROM_LEFT_2ND_BUTTON_PRESSED</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>RIGHT</name> <init>= <expr><name>RIGHTMOST_BUTTON_PRESSED</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>LEFT_RIGHT</name> <init>= <expr><name>LEFT</name> <operator>|</operator> <name>RIGHT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nButton</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cButtons</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>GetNumberOfConsoleMouseButtons</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cButtons</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cButtons</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_fMouseAvail</name> <operator>||</operator> <operator>!</operator><name>g_fMouseActive</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>g_nMouseClick</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>g_fJustGotFocus</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>g_fJustGotFocus</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>g_nMouseClick</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nButton</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g_xMouse</name> <operator>=</operator> <name><name>pmer</name><operator>-&gt;</operator><name>dwMousePosition</name><operator>.</operator><name>X</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g_yMouse</name> <operator>=</operator> <name><name>pmer</name><operator>-&gt;</operator><name>dwMousePosition</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pmer</name><operator>-&gt;</operator><name>dwEventFlags</name></name> <operator>==</operator> <name>MOUSE_MOVED</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s_xOldMouse</name> <operator>==</operator> <name>g_xMouse</name> <operator>&amp;&amp;</operator> <name>s_yOldMouse</name> <operator>==</operator> <name>g_yMouse</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pmer</name><operator>-&gt;</operator><name>dwButtonState</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>cButtons</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>nButton</name> <operator>=</operator> <name>MOUSE_RELEASE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s_fReleased</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_bevalterm</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nButton</name> <operator>=</operator> <name>MOUSE_DRAG</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s_fReleased</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cButtons</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>s_nOldButton</name> <operator>!=</operator> <name>MOUSE_DRAG</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwLR</name> <init>= <expr><operator>(</operator><name><name>pmer</name><operator>-&gt;</operator><name>dwButtonState</name></name> <operator>&amp;</operator> <name>LEFT_RIGHT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dwLR</name> <operator>==</operator> <name>LEFT</name> <operator>||</operator> <name>dwLR</name> <operator>==</operator> <name>RIGHT</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><name>p_mouset</name> <operator>/</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call>

<operator>!=</operator> <name>WAIT_OBJECT_0</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>cRecords</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INPUT_RECORD</name></type> <name>ir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOUSE_EVENT_RECORD</name><modifier>*</modifier></type> <name>pmer2</name> <init>= <expr><operator>&amp;</operator><name><name>ir</name><operator>.</operator><name>Event</name><operator>.</operator><name>MouseEvent</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>peek_console_input</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ir</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cRecords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cRecords</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ir</name><operator>.</operator><name>EventType</name></name> <operator>!=</operator> <name>MOUSE_EVENT</name>

<operator>||</operator> <operator>!</operator><operator>(</operator><name><name>pmer2</name><operator>-&gt;</operator><name>dwButtonState</name></name> <operator>&amp;</operator> <name>LEFT_RIGHT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pmer2</name><operator>-&gt;</operator><name>dwEventFlags</name></name> <operator>!=</operator> <name>MOUSE_MOVED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>read_console_input</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ir</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cRecords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>decode_mouse_event</name><argument_list>(<argument><expr><name>pmer2</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>s_xOldMouse</name> <operator>==</operator> <name><name>pmer2</name><operator>-&gt;</operator><name>dwMousePosition</name><operator>.</operator><name>X</name></name> <operator>&amp;&amp;</operator>

<name>s_yOldMouse</name> <operator>==</operator> <name><name>pmer2</name><operator>-&gt;</operator><name>dwMousePosition</name><operator>.</operator><name>Y</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>read_console_input</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ir</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cRecords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>peek_console_input</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ir</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cRecords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cRecords</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>ir</name><operator>.</operator><name>EventType</name></name> <operator>!=</operator> <name>MOUSE_EVENT</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s_fNextIsMiddle</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>nButton</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pmer</name><operator>-&gt;</operator><name>dwEventFlags</name></name> <operator>==</operator> <name>MOUSE_MOVED</name><operator>)</operator></expr>

?</condition><then> <expr><name>MOUSE_DRAG</name></expr> </then><else>: <expr><name>MOUSE_MIDDLE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>s_fNextIsMiddle</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>cButtons</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>pmer</name><operator>-&gt;</operator><name>dwButtonState</name></name> <operator>&amp;</operator> <name>LEFT_RIGHT</name><operator>)</operator> <operator>==</operator> <name>LEFT_RIGHT</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>nButton</name> <operator>=</operator> <name>MOUSE_MIDDLE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>s_fReleased</name> <operator>&amp;&amp;</operator> <name><name>pmer</name><operator>-&gt;</operator><name>dwEventFlags</name></name> <operator>!=</operator> <name>MOUSE_MOVED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>s_fNextIsMiddle</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nButton</name> <operator>=</operator> <name>MOUSE_RELEASE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>pmer</name><operator>-&gt;</operator><name>dwButtonState</name></name> <operator>&amp;</operator> <name>LEFT</name><operator>)</operator> <operator>==</operator> <name>LEFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nButton</name> <operator>=</operator> <name>MOUSE_LEFT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>pmer</name><operator>-&gt;</operator><name>dwButtonState</name></name> <operator>&amp;</operator> <name>MIDDLE</name><operator>)</operator> <operator>==</operator> <name>MIDDLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nButton</name> <operator>=</operator> <name>MOUSE_MIDDLE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>pmer</name><operator>-&gt;</operator><name>dwButtonState</name></name> <operator>&amp;</operator> <name>RIGHT</name><operator>)</operator> <operator>==</operator> <name>RIGHT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nButton</name> <operator>=</operator> <name>MOUSE_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>s_fReleased</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name>s_fNextIsMiddle</name>

<operator>&amp;&amp;</operator> <name>nButton</name> <operator>!=</operator> <name>s_nOldButton</name> <operator>&amp;&amp;</operator> <name>s_nOldButton</name> <operator>!=</operator> <name>MOUSE_DRAG</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s_fReleased</name> <operator>=</operator> <name>s_fNextIsMiddle</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pmer</name><operator>-&gt;</operator><name>dwEventFlags</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pmer</name><operator>-&gt;</operator><name>dwEventFlags</name></name> <operator>==</operator> <name>DOUBLE_CLICK</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nButton</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nButton</name> <operator>!=</operator> <name>MOUSE_RELEASE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwCurrentTime</name> <init>= <expr><call><name>GetTickCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s_xOldMouse</name> <operator>!=</operator> <name>g_xMouse</name>

<operator>||</operator> <name>s_yOldMouse</name> <operator>!=</operator> <name>g_yMouse</name>

<operator>||</operator> <name>s_nOldButton</name> <operator>!=</operator> <name>nButton</name>

<operator>||</operator> <name>s_old_topline</name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>s_old_topfill</name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dwCurrentTime</name> <operator>-</operator> <name>s_dwLastClickTime</name><operator>)</operator> <operator>&gt;</operator> <name>p_mouset</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>s_cClicks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>++</operator><name>s_cClicks</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>s_cClicks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s_dwLastClickTime</name> <operator>=</operator> <name>dwCurrentTime</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>pmer</name><operator>-&gt;</operator><name>dwEventFlags</name></name> <operator>==</operator> <name>MOUSE_MOVED</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nButton</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nButton</name> <operator>!=</operator> <name>MOUSE_RELEASE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nButton</name> <operator>=</operator> <name>MOUSE_DRAG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s_cClicks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nButton</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nButton</name> <operator>!=</operator> <name>MOUSE_RELEASE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s_nOldButton</name> <operator>=</operator> <name>nButton</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>g_nMouseClick</name> <operator>=</operator> <name>nButton</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pmer</name><operator>-&gt;</operator><name>dwControlKeyState</name></name> <operator>&amp;</operator> <name>SHIFT_PRESSED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>g_nMouseClick</name> <operator>|=</operator> <name>MOUSE_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pmer</name><operator>-&gt;</operator><name>dwControlKeyState</name></name> <operator>&amp;</operator> <operator>(</operator><name>RIGHT_CTRL_PRESSED</name> <operator>|</operator> <name>LEFT_CTRL_PRESSED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>g_nMouseClick</name> <operator>|=</operator> <name>MOUSE_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pmer</name><operator>-&gt;</operator><name>dwControlKeyState</name></name> <operator>&amp;</operator> <operator>(</operator><name>RIGHT_ALT_PRESSED</name> <operator>|</operator> <name>LEFT_ALT_PRESSED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>g_nMouseClick</name> <operator>|=</operator> <name>MOUSE_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nButton</name> <operator>!=</operator> <name>MOUSE_DRAG</name> <operator>&amp;&amp;</operator> <name>nButton</name> <operator>!=</operator> <name>MOUSE_RELEASE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SET_NUM_MOUSE_CLICKS</name><argument_list>(<argument><expr><name>g_nMouseClick</name></expr></argument>, <argument><expr><name>s_cClicks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s_xOldMouse</name> <operator>==</operator> <name>g_xMouse</name>

<operator>&amp;&amp;</operator> <name>s_yOldMouse</name> <operator>==</operator> <name>g_yMouse</name>

<operator>&amp;&amp;</operator> <name>s_nOldMouseClick</name> <operator>==</operator> <name>g_nMouseClick</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>g_nMouseClick</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s_xOldMouse</name> <operator>=</operator> <name>g_xMouse</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s_yOldMouse</name> <operator>=</operator> <name>g_yMouse</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s_old_topline</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>s_old_topfill</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>s_nOldMouseClick</name> <operator>=</operator> <name>g_nMouseClick</name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_CURSOR_SHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>mch_set_cursor_shape</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>thickness</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CONSOLE_CURSOR_INFO</name></type> <name>ConsoleCursorInfo</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ConsoleCursorInfo</name><operator>.</operator><name>dwSize</name></name> <operator>=</operator> <name>thickness</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ConsoleCursorInfo</name><operator>.</operator><name>bVisible</name></name> <operator>=</operator> <name>s_cursor_visible</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetConsoleCursorInfo</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ConsoleCursorInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s_cursor_visible</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>g_coord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>mch_update_cursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>thickness</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>get_shape_idx</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shape_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>shape</name> <operator>==</operator> <name>SHAPE_BLOCK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>thickness</name> <operator>=</operator> <literal type="number">99</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>thickness</name> <operator>=</operator> <name><name>shape_table</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>percentage</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>mch_set_cursor_shape</name><argument_list>(<argument><expr><name>thickness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>handle_focus_event</name><parameter_list>(<parameter><decl><type><name>INPUT_RECORD</name></type> <name>ir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>g_fJustGotFocus</name> <operator>=</operator> <name><name>ir</name><operator>.</operator><name>Event</name><operator>.</operator><name>FocusEvent</name><operator>.</operator><name>bSetFocus</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_focus_change</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>g_fJustGotFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ResizeConBuf</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>hConsole</name></decl></parameter>, <parameter><decl><type><name>COORD</name></type> <name>coordScreen</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>WaitForChar</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>msec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ignore_input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwNow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dwEndTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INPUT_RECORD</name></type> <name>ir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>cRecords</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>ch2</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>tb_change_cnt</name> <init>= <expr><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>msec</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dwEndTime</name> <operator>=</operator> <call><name>GetTickCount</name><argument_list>()</argument_list></call> <operator>+</operator> <name>msec</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>msec</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dwEndTime</name> <operator>=</operator> <name>INFINITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msec</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MESSAGE_QUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>parse_queued_messages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MZSCHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mzvim_check_threads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>serverProcessPendingMessages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>g_nMouseClick</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><operator>!</operator><name>ignore_input</name> <operator>&amp;&amp;</operator> <call><name>input_available</name><argument_list>()</argument_list></call><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msec</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dwNow</name> <operator>=</operator> <call><name>GetTickCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dwNow</name> <operator>-</operator> <name>dwEndTime</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msec</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwWaitTime</name> <init>= <expr><name>dwEndTime</name> <operator>-</operator> <name>dwNow</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>dwWaitTime</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dwWaitTime</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>channel_any_readahead</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dwWaitTime</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_beval</name> <operator>&amp;&amp;</operator> <name>dwWaitTime</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dwWaitTime</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MZSCHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>mzthreads_allowed</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>p_mzq</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>msec</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>long</name><operator>)</operator><name>dwWaitTime</name></expr></argument> &gt;</argument_list></name> <name>p_mzq</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dwWaitTime</name> <operator>=</operator> <name>p_mzq</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>dwWaitTime</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>due_time</name></decl>;</decl_stmt>

<expr_stmt><expr><name>due_time</name> <operator>=</operator> <call><name>check_due_timer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>!=</operator> <name>tb_change_cnt</name></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>due_time</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dwWaitTime</name> <operator>&gt;</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name>due_time</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dwWaitTime</name> <operator>=</operator> <name>due_time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>msg_wait_for_multiple_objects</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>g_hConIn</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,

<argument><expr><name>dwWaitTime</name></expr></argument>, <argument><expr><name>QS_SENDMESSAGE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>WAIT_OBJECT_0</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<call><name>wait_for_single_object</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><name>dwWaitTime</name></expr></argument>)</argument_list></call>

<operator>!=</operator> <name>WAIT_OBJECT_0</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cRecords</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>peek_console_input</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ir</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cRecords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name> <operator>&amp;&amp;</operator> <name>msg_row</name> <operator>==</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>csbi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>!=</operator> <name>msg_row</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmdline_row</name> <operator>-=</operator> <operator>(</operator><name>msg_row</name> <operator>-</operator> <name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redrawcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>cRecords</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ir</name><operator>.</operator><name>EventType</name></name> <operator>==</operator> <name>KEY_EVENT</name> <operator>&amp;&amp;</operator> <name><name>ir</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>bKeyDown</name></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ir</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>UChar</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>ir</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualKeyCode</name></name> <operator>==</operator> <literal type="number">13</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>read_console_input</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ir</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cRecords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>decode_key_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ir</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch2</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>read_console_input</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ir</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cRecords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ir</name><operator>.</operator><name>EventType</name></name> <operator>==</operator> <name>FOCUS_EVENT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>handle_focus_event</name><argument_list>(<argument><expr><name>ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>ir</name><operator>.</operator><name>EventType</name></name> <operator>==</operator> <name>WINDOW_BUFFER_SIZE_EVENT</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>COORD</name></type> <name>dwSize</name> <init>= <expr><name><name>ir</name><operator>.</operator><name>Event</name><operator>.</operator><name>WindowBufferSizeEvent</name><operator>.</operator><name>dwSize</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>!=</operator> <name>Columns</name> <operator>||</operator> <name><name>dwSize</name><operator>.</operator><name>Y</name></name> <operator>!=</operator> <name>Rows</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>csbi</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name> <operator>-</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Left</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dwSize</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name> <operator>-</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>!=</operator> <name>Columns</name> <operator>||</operator> <name><name>dwSize</name><operator>.</operator><name>Y</name></name> <operator>!=</operator> <name>Rows</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ResizeConBuf</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>dwSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shell_resized</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>ir</name><operator>.</operator><name>EventType</name></name> <operator>==</operator> <name>MOUSE_EVENT</name>

<operator>&amp;&amp;</operator> <call><name>decode_mouse_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ir</name><operator>.</operator><name>Event</name><operator>.</operator><name>MouseEvent</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>msec</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>input_available</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_char_avail</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>WaitForChar</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>mch_check_messages</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>WaitForChar</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>create_conin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>g_hConIn</name> <operator>=</operator> <call><name>CreateFile</name><argument_list>(<argument><expr><literal type="string">"CONIN$"</literal></expr></argument>, <argument><expr><name>GENERIC_READ</name><operator>|</operator><name>GENERIC_WRITE</name></expr></argument>,

<argument><expr><name>FILE_SHARE_READ</name><operator>|</operator><name>FILE_SHARE_WRITE</name></expr></argument>,

<argument><expr><operator>(</operator><name>LPSECURITY_ATTRIBUTES</name><operator>)</operator> <name>NULL</name></expr></argument>,

<argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_create_conin</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WCHAR</name></type>

<name>tgetch</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pmodifiers</name></decl></parameter>, <parameter><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>pch2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name></type> <name>ch</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>INPUT_RECORD</name></type> <name>ir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>cRecords</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>WaitForChar</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>input_available</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>g_nMouseClick</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>read_console_input</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ir</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cRecords</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>did_create_conin</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>read_error_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>create_conin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ir</name><operator>.</operator><name>EventType</name></name> <operator>==</operator> <name>KEY_EVENT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>decode_key_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ir</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><name>pch2</name></expr></argument>,

<argument><expr><name>pmodifiers</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ch</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>ir</name><operator>.</operator><name>EventType</name></name> <operator>==</operator> <name>FOCUS_EVENT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>handle_focus_event</name><argument_list>(<argument><expr><name>ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>ir</name><operator>.</operator><name>EventType</name></name> <operator>==</operator> <name>WINDOW_BUFFER_SIZE_EVENT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>shell_resized</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>ir</name><operator>.</operator><name>EventType</name></name> <operator>==</operator> <name>MOUSE_EVENT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>decode_mouse_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ir</name><operator>.</operator><name>Event</name><operator>.</operator><name>MouseEvent</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>int</name></type>

<name>mch_inchar</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>buf</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>maxlen</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>long</name> <name>time</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>tb_change_cnt</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPEAHEADSPACE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPEAHEADSPACE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPEAHEADLEN</name></cpp:macro> <cpp:value>(20 + TYPEAHEADSPACE)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>typeahead</name><index>[<expr><name>TYPEAHEADLEN</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>typeaheadlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>typeaheadlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>time</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WaitForChar</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><call><name>mch_set_winsize_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WaitForChar</name><argument_list>(<argument><expr><name>p_ut</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>trigger_cursorhold</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>maxlen</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_CURSORHOLD</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">3</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>before_blocking</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>g_fCBrkPressed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fdDump</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>, <argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><operator>(</operator><name>typeaheadlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>WaitForChar</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <name>typeaheadlen</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>TYPEAHEADSPACE</name> <operator>&lt;=</operator> <name>TYPEAHEADLEN</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>typebuf_changed</name><argument_list>(<argument><expr><name>tb_change_cnt</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>typeaheadlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>g_nMouseClick</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fdDump</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fdDump</name></expr></argument>, <argument><expr><literal type="string">"{%02x @ %d, %d}"</literal></expr></argument>,

<argument><expr><name>g_nMouseClick</name></expr></argument>, <argument><expr><name>g_xMouse</name></expr></argument>, <argument><expr><name>g_yMouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ESC</name> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'M'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>g_nMouseClick</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>g_xMouse</name> <operator>+</operator> <literal type="char">'!'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>g_yMouse</name> <operator>+</operator> <literal type="char">'!'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g_nMouseClick</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name></type> <name>ch2</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>tgetch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>modifiers</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>typebuf_changed</name><argument_list>(<argument><expr><name>tb_change_cnt</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>typeaheadlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_C</name> <operator>&amp;&amp;</operator> <name>ctrl_c_interrupts</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>trash_input_buf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>g_nMouseClick</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch2</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>ch</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0xD800</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xDBFF</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>tgetch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>modifiers</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>utf16_to_enc</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name> <operator>+</operator> <name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>CSI</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name> <operator>+</operator> <name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name> <operator>+</operator> <name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>KE_CSI</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>CSI</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>KE_CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch2</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_NUL</name></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name>ch2</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><operator>(</operator><name>WCHAR</name><operator>)</operator><literal type="char">'\324'</literal></expr>:</case> 

<case>case <expr><operator>(</operator><name>WCHAR</name><operator>)</operator><literal type="char">'\325'</literal></expr>:</case> 

<case>case <expr><operator>(</operator><name>WCHAR</name><operator>)</operator><literal type="char">'\327'</literal></expr>:</case> 

<case>case <expr><operator>(</operator><name>WCHAR</name><operator>)</operator><literal type="char">'\330'</literal></expr>:</case> 

<expr_stmt><expr><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>ch2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>ch2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>ch2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name>MOD_MASK_ALT</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><name>enc_dbcs</name></expr>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name></expr>]</index></name> <operator>|</operator> <literal type="number">0x80</literal></expr></argument>,

<argument><expr><name>typeahead</name> <operator>+</operator> <name>typeaheadlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>modifiers</name> <operator>&amp;=</operator> <operator>~</operator><name>MOD_MASK_ALT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>typeahead</name> <operator>+</operator> <name>typeaheadlen</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>,

<argument><expr><name>typeahead</name> <operator>+</operator> <name>typeaheadlen</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>KS_MODIFIER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typeahead</name><index>[<expr><name>typeaheadlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>modifiers</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>typeaheadlen</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fdDump</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fdDump</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>theend</name>:</label>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>len</name> <argument_list type="generic">&lt; <argument><expr><name>maxlen</name> <operator>&amp;&amp;</operator> <name>typeaheadlen</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>typeahead</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>typeahead</name></expr></argument>, <argument><expr><name>typeahead</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>--</operator><name>typeaheadlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>len</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shellapi.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>executable_exists</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>fnamew</name><index>[<expr><name>_MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>dumw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wcurpath</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wnewpath</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_path</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mch_getperm</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>mch_isdir</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mch_isFullName</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>path</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>path</name> <operator>=</operator> <call><name>FullName_save</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wcurpath</name> <operator>=</operator> <call><name>_wgetenv</name><argument_list>(<argument><expr><literal type="string">L"PATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wnewpath</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><call><name>wcslen</name><argument_list>(<argument><expr><name>wcurpath</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wnewpath</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><name>wnewpath</name></expr></argument>, <argument><expr><literal type="string">L".;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wcscat</name><argument_list>(<argument><expr><name>wnewpath</name></expr></argument>, <argument><expr><name>wcurpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>SearchPathW</name><argument_list>(<argument><expr><name>wnewpath</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>_MAX_PATH</name></expr></argument>, <argument><expr><name>fnamew</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dumw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wnewpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetFileAttributesW</name><argument_list>(<argument><expr><name>fnamew</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>path</name> <operator>=</operator> <call><name>utf16_to_enc</name><argument_list>(<argument><expr><name>fnamew</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__MSVCRT_VERSION__</name> <operator>&gt;=</operator> <literal type="number">0x800</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal><operator>)</operator></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>bad_param_handler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>expression</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>function</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>line</name></decl></parameter>,

<parameter><decl><type><name>uintptr_t</name></type> <name>pReserved</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_INVALID_PARAM_HANDLER</name></cpp:macro> <cpp:value>((void)_set_invalid_parameter_handler(bad_param_handler))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_INVALID_PARAM_HANDLER</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>mch_init_g</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>_fmode</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>SET_INVALID_PARAM_HANDLER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetErrorMode</name><argument_list>(<argument><expr><name>SEM_FAILCRITICALERRORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_fmode</name> <operator>=</operator> <name>O_BINARY</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>Rows</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Columns</name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>vimrun_location</name><index>[<expr><name>_MAX_PATH</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>vimrun_location</name></expr></argument>, <argument><expr><name>exe_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><call><name>gettail</name><argument_list>(<argument><expr><name>vimrun_location</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"vimrun.exe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_getperm</name><argument_list>(<argument><expr><name>vimrun_location</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>skiptowhite</name><argument_list>(<argument><expr><name>vimrun_location</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>vimrun_location</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>vimrun_location</name></expr></argument>,

<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>vimrun_location</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vimrun_location</name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><call><name>gettail</name><argument_list>(<argument><expr><name>vimrun_location</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"vimrun\" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><call><name>gettail</name><argument_list>(<argument><expr><name>vimrun_location</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"vimrun "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>vimrun_path</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_strsave</name><argument_list>(<argument><expr><name>vimrun_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_dont_use_vimrun</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>executable_exists</name><argument_list>(<argument><expr><literal type="string">"vimrun.exe"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s_dont_use_vimrun</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s_dont_use_vimrun</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>need_vimrun_warning</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>executable_exists</name><argument_list>(<argument><expr><literal type="string">"findstr.exe"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"grepprg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"grep -n"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>win_clip_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vtp_flag_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRWIDTH</name><parameter_list>(<parameter><type><name>sr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((sr).Right - (sr).Left + 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRHEIGHT</name><parameter_list>(<parameter><type><name>sr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((sr).Bottom - (sr).Top + 1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>BOOL</name></type>

<name>ClearConsoleBuffer</name><parameter_list>(<parameter><decl><type><name>WORD</name></type> <name>wAttribute</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>csbi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COORD</name></type> <name>coord</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>NumCells</name></decl>, <decl><type ref="prev"/><name>dummy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>NumCells</name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>*</operator> <name><name>csbi</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coord</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coord</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FillConsoleOutputCharacter</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>NumCells</name></expr></argument>,

<argument><expr><name>coord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FillConsoleOutputAttribute</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>wAttribute</name></expr></argument>, <argument><expr><name>NumCells</name></expr></argument>,

<argument><expr><name>coord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name></type>

<name>FitConsoleWindow</name><parameter_list>(

<parameter><decl><type><name>COORD</name></type> <name>dwBufferSize</name></decl></parameter>,

<parameter><decl><type><name>BOOL</name></type> <name>WantAdjust</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>csbi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COORD</name></type> <name>dwWindowSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>NeedAdjust</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name> <operator>&gt;=</operator> <name><name>dwBufferSize</name><operator>.</operator><name>X</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>dwWindowSize</name><operator>.</operator><name>X</name></name> <operator>=</operator> <call><name>SRWIDTH</name><argument_list>(<argument><expr><name><name>csbi</name><operator>.</operator><name>srWindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dwWindowSize</name><operator>.</operator><name>X</name></name> <operator>&gt;</operator> <name><name>dwBufferSize</name><operator>.</operator><name>X</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dwWindowSize</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>dwBufferSize</name><operator>.</operator><name>X</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name> <operator>=</operator> <name><name>dwBufferSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Left</name></name> <operator>=</operator> <name><name>dwBufferSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <name><name>dwWindowSize</name><operator>.</operator><name>X</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>NeedAdjust</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name> <operator>&gt;=</operator> <name><name>dwBufferSize</name><operator>.</operator><name>Y</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>dwWindowSize</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <call><name>SRHEIGHT</name><argument_list>(<argument><expr><name><name>csbi</name><operator>.</operator><name>srWindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dwWindowSize</name><operator>.</operator><name>Y</name></name> <operator>&gt;</operator> <name><name>dwBufferSize</name><operator>.</operator><name>Y</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dwWindowSize</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>dwBufferSize</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name> <operator>=</operator> <name><name>dwBufferSize</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name> <operator>=</operator> <name><name>dwBufferSize</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <name><name>dwWindowSize</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>NeedAdjust</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>NeedAdjust</name> <operator>&amp;&amp;</operator> <name>WantAdjust</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetConsoleWindowInfo</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>csbi</name><operator>.</operator><name>srWindow</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ConsoleBufferStruct</name>

<block>{

<decl_stmt><decl><type><name>BOOL</name></type> <name>IsValid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>Info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PCHAR_INFO</name></type> <name>Buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COORD</name></type> <name>BufferSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PSMALL_RECT</name></type> <name>Regions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>NumRegions</name></decl>;</decl_stmt>

}</block></struct></type> <name>ConsoleBuffer</name>;</typedef>

<function><type><specifier>static</specifier> <name>BOOL</name></type>

<name>SaveConsoleBuffer</name><parameter_list>(

<parameter><decl><type><name>ConsoleBuffer</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>NumCells</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COORD</name></type> <name>BufferCoord</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SMALL_RECT</name></type> <name>ReadRegion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>Y</name></decl>, <decl><type ref="prev"/><name>Y_incr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>numregions</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>Info</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>IsValid</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>IsValid</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cb</name><operator>-&gt;</operator><name>IsValid</name></name> <operator>||</operator> <name><name>cb</name><operator>-&gt;</operator><name>Buffer</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<name><name>cb</name><operator>-&gt;</operator><name>BufferSize</name><operator>.</operator><name>X</name></name> <operator>!=</operator> <name><name>cb</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>||</operator>

<name><name>cb</name><operator>-&gt;</operator><name>BufferSize</name><operator>.</operator><name>Y</name></name> <operator>!=</operator> <name><name>cb</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>BufferSize</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>BufferSize</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>NumCells</name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>BufferSize</name><operator>.</operator><name>X</name></name> <operator>*</operator> <name><name>cb</name><operator>-&gt;</operator><name>BufferSize</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>Buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>Buffer</name></name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>CHAR_INFO</name></expr></argument>, <argument><expr><name>NumCells</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>Buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>BufferCoord</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ReadRegion</name><operator>.</operator><name>Left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ReadRegion</name><operator>.</operator><name>Right</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Y_incr</name> <operator>=</operator> <literal type="number">12000</literal> <operator>/</operator> <name><name>cb</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>numregions</name> <operator>=</operator> <operator>(</operator><name><name>cb</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <name>Y_incr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>Y_incr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>Regions</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>numregions</name> <operator>!=</operator> <name><name>cb</name><operator>-&gt;</operator><name>NumRegions</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>NumRegions</name></name> <operator>=</operator> <name>numregions</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>Regions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>Regions</name></name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>SMALL_RECT</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>NumRegions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>Regions</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>Buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>Y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cb</name><operator>-&gt;</operator><name>NumRegions</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>Y</name> <operator>+=</operator> <name>Y_incr</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>BufferCoord</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name>Y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ReadRegion</name><operator>.</operator><name>Top</name></name> <operator>=</operator> <name>Y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ReadRegion</name><operator>.</operator><name>Bottom</name></name> <operator>=</operator> <name>Y</name> <operator>+</operator> <name>Y_incr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadConsoleOutputW</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, 

<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>Buffer</name></name></expr></argument>, 

<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>BufferSize</name></name></expr></argument>, 

<argument><expr><name>BufferCoord</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name>ReadRegion</name></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>Buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>Regions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>Regions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ReadRegion</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name></type>

<name>RestoreConsoleBuffer</name><parameter_list>(

<parameter><decl><type><name>ConsoleBuffer</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>,

<parameter><decl><type><name>BOOL</name></type> <name>RestoreScreen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>COORD</name></type> <name>BufferCoord</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SMALL_RECT</name></type> <name>WriteRegion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name><name>cb</name><operator>-&gt;</operator><name>IsValid</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>RestoreScreen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ClearConsoleBuffer</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>wAttributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FitConsoleWindow</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>dwSize</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetConsoleScreenBufferSize</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>dwSize</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetConsoleTextAttribute</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>wAttributes</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>RestoreScreen</name></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>dwCursorPosition</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetConsoleWindowInfo</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>srWindow</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>Buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cb</name><operator>-&gt;</operator><name>NumRegions</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>BufferCoord</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>Regions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>BufferCoord</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>Regions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Top</name></expr>;</expr_stmt>

<expr_stmt><expr><name>WriteRegion</name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>Regions</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WriteConsoleOutputW</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, 

<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>Buffer</name></name></expr></argument>, 

<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>BufferSize</name></name></expr></argument>, 

<argument><expr><name>BufferCoord</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name>WriteRegion</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FEAT_RESTORE_ORIG_SCREEN</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RESTORE_ORIG_SCREEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>ConsoleBuffer</name></type> <name>g_cbOrig</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>ConsoleBuffer</name></type> <name>g_cbNonTermcap</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ConsoleBuffer</name></type> <name>g_cbTermcap</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>g_szOrigTitle</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>g_hWnd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>HICON</name></type> <name>g_hOrigIconSmall</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HICON</name></type> <name>g_hOrigIcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HICON</name></type> <name>g_hVimIcon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>g_fCanChangeIcon</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ICON_SMALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICON_SMALL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ICON_BIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICON_BIG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>BOOL</name></type>

<name>GetConsoleIcon</name><parameter_list>(

<parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>,

<parameter><decl><type><name>HICON</name> <modifier>*</modifier></type><name>phIconSmall</name></decl></parameter>,

<parameter><decl><type><name>HICON</name> <modifier>*</modifier></type><name>phIcon</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hWnd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>phIconSmall</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>phIconSmall</name> <operator>=</operator> <operator>(</operator><name>HICON</name><operator>)</operator><call><name>SendMessage</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>WM_GETICON</name></expr></argument>,

<argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>ICON_SMALL</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>phIcon</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>phIcon</name> <operator>=</operator> <operator>(</operator><name>HICON</name><operator>)</operator><call><name>SendMessage</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>WM_GETICON</name></expr></argument>,

<argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>ICON_BIG</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name></type>

<name>SetConsoleIcon</name><parameter_list>(

<parameter><decl><type><name>HWND</name></type> <name>hWnd</name></decl></parameter>,

<parameter><decl><type><name>HICON</name></type> <name>hIconSmall</name></decl></parameter>,

<parameter><decl><type><name>HICON</name></type> <name>hIcon</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hWnd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hIconSmall</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>WM_SETICON</name></expr></argument>,

<argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>ICON_SMALL</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator><name>hIconSmall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hIcon</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>WM_SETICON</name></expr></argument>,

<argument><expr><operator>(</operator><name>WPARAM</name><operator>)</operator><name>ICON_BIG</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator> <name>hIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>SaveConsoleTitleAndIcon</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetConsoleTitle</name><argument_list>(<argument><expr><name>g_szOrigTitle</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>g_szOrigTitle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>g_hWnd</name> <operator>=</operator> <call><name>GetConsoleWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>g_hWnd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetConsoleIcon</name><argument_list>(<argument><expr><name>g_hWnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g_hOrigIconSmall</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g_hOrigIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>g_hOrigIconSmall</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>g_hOrigIcon</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_icon_load</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>g_hVimIcon</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name> <operator>||</operator> <name>g_hVimIcon</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>g_hVimIcon</name> <operator>=</operator> <call><name>ExtractIcon</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator><name>exe_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>g_hVimIcon</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>g_fCanChangeIcon</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_fWindInitCalled</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_fTermcapMode</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CONSOLE_CURSOR_INFO</name></type> <name>g_cci</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>DWORD</name></type> <name>g_cmodein</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>DWORD</name></type> <name>g_cmodeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>mch_init_c</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RESTORE_ORIG_SCREEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>csbi</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>_fmode</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>SET_INVALID_PARAM_HANDLER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetErrorMode</name><argument_list>(<argument><expr><name>SEM_FAILCRITICALERRORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_fmode</name> <operator>=</operator> <name>O_BINARY</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>read_cmd_fd</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>g_hConIn</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>create_conin</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>g_hConOut</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RESTORE_ORIG_SCREEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SaveConsoleBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_cbOrig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g_attrCurrent</name> <operator>=</operator> <name>g_attrDefault</name> <operator>=</operator> <name><name>g_cbOrig</name><operator>.</operator><name>Info</name><operator>.</operator><name>wAttributes</name></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g_attrCurrent</name> <operator>=</operator> <name>g_attrDefault</name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>wAttributes</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>cterm_normal_fg_color</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cterm_normal_fg_color</name> <operator>=</operator> <operator>(</operator><name>g_attrCurrent</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cterm_normal_bg_color</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cterm_normal_bg_color</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>g_attrCurrent</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>g_color_index_fg</name> <operator>=</operator> <name>g_attrDefault</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g_color_index_bg</name> <operator>=</operator> <operator>(</operator><name>g_attrDefault</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_tcap</name><argument_list>(<argument><expr><name>g_attrCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetConsoleCursorInfo</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g_cci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g_cmodein</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g_cmodeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SaveConsoleTitleAndIcon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>g_fCanChangeIcon</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetConsoleIcon</name><argument_list>(<argument><expr><name>g_hWnd</name></expr></argument>, <argument><expr><name>g_hVimIcon</name></expr></argument>, <argument><expr><name>g_hVimIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ui_get_shellsize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>fdDump</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"dump"</literal></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fdDump</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>ctime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>g_fWindInitCalled</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g_fMouseAvail</name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_MOUSEPRESENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>win_clip_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vtp_flag_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vtp_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>mch_exit_c</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>exiting</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vtp_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stoptermcap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>g_fWindInitCalled</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>settmode</name><argument_list>(<argument><expr><name>TMODE_COOK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ml_close_all</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>g_fWindInitCalled</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mch_restore_title</name><argument_list>(<argument><expr><name>SAVE_RESTORE_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>g_fCanChangeIcon</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>g_fForceExit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetConsoleIcon</name><argument_list>(<argument><expr><name>g_hWnd</name></expr></argument>, <argument><expr><name>g_hOrigIconSmall</name></expr></argument>, <argument><expr><name>g_hOrigIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fdDump</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>ctime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fdDump</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetConsoleCursorInfo</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g_cci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><name>g_cmodein</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>g_cmodeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_GETTEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dyn_libintl_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type>

<name>mch_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_init_g</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_init_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><call><name>mch_init_g</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>mch_init_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>mch_exit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_exit_g</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_exit_c</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><call><name>mch_exit_g</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>mch_exit_c</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_check_win</name><parameter_list>(

<parameter><decl><type><name>int</name> <name>argc</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_exe_name</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><name>OK</name></expr>;</return> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>isatty</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>fname_case</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>buf</name><index>[<expr><name>_MAX_PATH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>flen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>slash_adjust</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetLongPathNameW</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>_MAX_PATH</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>utf16_to_enc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>flen</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>flen</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_get_user_name</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>wszUserName</name><index>[<expr><literal type="number">256</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DWORD</name></type> <name>wcch</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>wszUserName</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetUserNameW</name><argument_list>(<argument><expr><name>wszUserName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wcch</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>utf16_to_enc</name><argument_list>(<argument><expr><name>wszUserName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>mch_get_host_name</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>wszHostName</name><index>[<expr><literal type="number">256</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>wcch</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>wszHostName</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetComputerNameW</name><argument_list>(<argument><expr><name>wszHostName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wcch</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>utf16_to_enc</name><argument_list>(<argument><expr><name>wszHostName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>long</name></type>

<name>mch_get_pid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>long</name><operator>)</operator><call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_process_running</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>pid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hProcess</name> <init>= <expr><call><name>OpenProcess</name><argument_list>(<argument><expr><name>PROCESS_QUERY_INFORMATION</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hProcess</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>GetExitCodeProcess</name><argument_list>(<argument><expr><name>hProcess</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>status</name> <operator>==</operator> <name>STILL_ACTIVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hProcess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_dirname</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>wbuf</name><index>[<expr><name>_MAX_PATH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetCurrentDirectoryW</name><argument_list>(<argument><expr><name>_MAX_PATH</name></expr></argument>, <argument><expr><name>wbuf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>wcbuf</name><index>[<expr><name>_MAX_PATH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetLongPathNameW</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>, <argument><expr><name>wcbuf</name></expr></argument>, <argument><expr><name>_MAX_PATH</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>utf16_to_enc</name><argument_list>(<argument><expr><name>wcbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>utf16_to_enc</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name></type>

<name>mch_getperm</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stat_T</name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1L</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_setperm</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>perm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>_wchmod</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>win32_set_archive</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>mch_hide</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>attrs</name> <init>= <expr><call><name>win32_getattrs</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>attrs</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>attrs</name> <operator>|=</operator> <name>FILE_ATTRIBUTE_HIDDEN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win32_setattrs</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_ishidden</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><call><name>win32_getattrs</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><operator>(</operator><name>f</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_HIDDEN</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_isdir</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><call><name>win32_getattrs</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><operator>(</operator><name>f</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_isrealdir</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>mch_isdir</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>mch_is_symbolic_link</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_mkdir</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_wmkdir</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_rmdir</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_wrmdir</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_is_hard_link</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BY_HANDLE_FILE_INFORMATION</name></type> <name>info</name></decl>;</decl_stmt>

<return>return <expr><call><name>win32_fileinfo</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FILEINFO_OK</name>

<operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>nNumberOfLinks</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_is_symbolic_link</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hFind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>fileFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>reparseTag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WIN32_FIND_DATAW</name></type> <name>findDataW</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wn</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hFind</name> <operator>=</operator> <call><name>FindFirstFileW</name><argument_list>(<argument><expr><name>wn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>findDataW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hFind</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>fileFlags</name> <operator>=</operator> <name><name>findDataW</name><operator>.</operator><name>dwFileAttributes</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>reparseTag</name> <operator>=</operator> <name><name>findDataW</name><operator>.</operator><name>dwReserved0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name>hFind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fileFlags</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_REPARSE_POINT</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>reparseTag</name> <operator>==</operator> <name>IO_REPARSE_TAG_SYMLINK</name>

<operator>||</operator> <name>reparseTag</name> <operator>==</operator> <name>IO_REPARSE_TAG_MOUNT_POINT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_is_linked</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mch_is_hard_link</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>mch_is_symbolic_link</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>win32_fileinfo</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>BY_HANDLE_FILE_INFORMATION</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hFile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>FILEINFO_READ_FAIL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wn</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FILEINFO_ENC_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hFile</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><name>wn</name></expr></argument>, 

<argument><expr><name>GENERIC_READ</name></expr></argument>, 

<argument><expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><name>OPEN_EXISTING</name></expr></argument>, 

<argument><expr><name>FILE_FLAG_BACKUP_SEMANTICS</name></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hFile</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>GetFileInformationByHandle</name><argument_list>(<argument><expr><name>hFile</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>FILEINFO_OK</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>FILEINFO_INFO_FAIL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>win32_getattrs</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INVALID_FILE_ATTRIBUTES</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>GetFileAttributesW</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>attr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>win32_setattrs</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attrs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>SetFileAttributesW</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>res</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>win32_set_archive</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>attrs</name> <init>= <expr><call><name>win32_getattrs</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>attrs</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>attrs</name> <operator>|=</operator> <name>FILE_ATTRIBUTE_ARCHIVE</name></expr>;</expr_stmt>

<return>return <expr><call><name>win32_setattrs</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_writable</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>attrs</name> <init>= <expr><call><name>win32_getattrs</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>attrs</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>attrs</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_READONLY</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>attrs</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_can_exe</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>_MAX_PATH</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>saved</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>gettail</name><argument_list>(<argument><expr><name>p_sh</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sh"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>executable_exists</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>use_path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mch_getenv</name><argument_list>(<argument><expr><literal type="string">"PATHEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".com;.exe;.bat;.cmd"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>saved</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>saved</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>saved</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_stricoll</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name> <operator>+</operator> <name>len</name> <operator>-</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>executable_exists</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>use_path</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>saved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>saved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mch_getenv</name><argument_list>(<argument><expr><literal type="string">"PATHEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".com;.exe;.bat;.cmd"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>executable_exists</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>use_path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_nodetype</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hFile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"\\\\.\\"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NODE_WRITABLE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wn</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NODE_NORMAL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hFile</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><name>wn</name></expr></argument>, 

<argument><expr><name>GENERIC_WRITE</name></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><name>OPEN_EXISTING</name></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hFile</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NODE_NORMAL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>GetFileType</name><argument_list>(<argument><expr><name>hFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>FILE_TYPE_CHAR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NODE_WRITABLE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>FILE_TYPE_DISK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NODE_NORMAL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NODE_OTHER</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ACL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>my_acl</name>

<block>{

<decl_stmt><decl><type><name>PSECURITY_DESCRIPTOR</name></type> <name>pSecurityDescriptor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PSID</name></type> <name>pSidOwner</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PSID</name></type> <name>pSidGroup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PACL</name></type> <name>pDacl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PACL</name></type> <name>pSacl</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>vim_acl_T</name></type>

<name>mch_get_acl</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ACL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vim_acl_T</name><operator>)</operator><name>NULL</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>my_acl</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr>struct <name>my_acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wn</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>GetNamedSecurityInfoW</name><argument_list>(

<argument><expr><name>wn</name></expr></argument>, 

<argument><expr><name>SE_FILE_OBJECT</name></expr></argument>, 

<argument><expr><name>OWNER_SECURITY_INFORMATION</name> <operator>|</operator>

<name>GROUP_SECURITY_INFORMATION</name> <operator>|</operator>

<name>DACL_SECURITY_INFORMATION</name> <operator>|</operator>

<name>SACL_SECURITY_INFORMATION</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pSidOwner</name></name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pSidGroup</name></name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pDacl</name></name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pSacl</name></name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pSecurityDescriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_ACCESS_DENIED</name> <operator>||</operator>

<name>err</name> <operator>==</operator> <name>ERROR_PRIVILEGE_NOT_HELD</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>GetNamedSecurityInfoW</name><argument_list>(

<argument><expr><name>wn</name></expr></argument>,

<argument><expr><name>SE_FILE_OBJECT</name></expr></argument>,

<argument><expr><name>DACL_SECURITY_INFORMATION</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pDacl</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pSecurityDescriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pSecurityDescriptor</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_free_acl</name><argument_list>(<argument><expr><operator>(</operator><name>vim_acl_T</name><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>vim_acl_T</name><operator>)</operator><name>p</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ACL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>BOOL</name></type>

<name>is_acl_inherited</name><parameter_list>(<parameter><decl><type><name>PACL</name></type> <name>acl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ACL_SIZE_INFORMATION</name></type> <name>acl_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PACCESS_ALLOWED_ACE</name></type> <name>ace</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>acl_info</name><operator>.</operator><name>AceCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetAclInformation</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acl_info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acl_info</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>AclSizeInformation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>acl_info</name><operator>.</operator><name>AceCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>GetAce</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>LPVOID</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ace</name><operator>-&gt;</operator><name>Header</name><operator>.</operator><name>AceFlags</name></name> <operator>&amp;</operator> <name>INHERITED_ACE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>mch_set_acl</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>vim_acl_T</name></type> <name>acl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ACL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>my_acl</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator>struct <name>my_acl</name> <operator>*</operator><operator>)</operator><name>acl</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SECURITY_INFORMATION</name></type> <name>sec_info</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wn</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pSidOwner</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sec_info</name> <operator>|=</operator> <name>OWNER_SECURITY_INFORMATION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pSidGroup</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sec_info</name> <operator>|=</operator> <name>GROUP_SECURITY_INFORMATION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pDacl</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>sec_info</name> <operator>|=</operator> <name>DACL_SECURITY_INFORMATION</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_acl_inherited</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDacl</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sec_info</name> <operator>|=</operator> <name>PROTECTED_DACL_SECURITY_INFORMATION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pSacl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sec_info</name> <operator>|=</operator> <name>SACL_SECURITY_INFORMATION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SetNamedSecurityInfoW</name><argument_list>(

<argument><expr><name>wn</name></expr></argument>, 

<argument><expr><name>SE_FILE_OBJECT</name></expr></argument>, 

<argument><expr><name>sec_info</name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSidOwner</name></name></expr></argument>, 

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSidGroup</name></name></expr></argument>, 

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDacl</name></name></expr></argument>, 

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSacl</name></name></expr></argument> 

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>mch_free_acl</name><parameter_list>(<parameter><decl><type><name>vim_acl_T</name></type> <name>acl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ACL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>my_acl</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator>struct <name>my_acl</name> <operator>*</operator><operator>)</operator><name>acl</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSecurityDescriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>WINAPI</name></type>

<name>handler_routine</name><parameter_list>(

<parameter><decl><type><name>DWORD</name></type> <name>dwCtrlType</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>INPUT_RECORD</name></type> <name>ir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>out</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>dwCtrlType</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>CTRL_C_EVENT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>ctrl_c_interrupts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>g_fCtrlCPressed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

<case>case <expr><name>CTRL_BREAK_EVENT</name></expr>:</case>

<expr_stmt><expr><name>g_fCBrkPressed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ctrl_break_was_pressed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ir</name><operator>.</operator><name>EventType</name></name> <operator>=</operator> <name>KEY_EVENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ir</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>bKeyDown</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ir</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wRepeatCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ir</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualKeyCode</name></name> <operator>=</operator> <name>VK_CANCEL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ir</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualScanCode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ir</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>dwControlKeyState</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ir</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>uChar</name><operator>.</operator><name>UnicodeChar</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WriteConsoleInput</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ir</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

<case>case <expr><name>CTRL_CLOSE_EVENT</name></expr>:</case>

<case>case <expr><name>CTRL_LOGOFF_EVENT</name></expr>:</case>

<case>case <expr><name>CTRL_SHUTDOWN_EVENT</name></expr>:</case>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g_fForceExit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Vim: Caught %s event\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>dwCtrlType</name> <operator>==</operator> <name>CTRL_CLOSE_EVENT</name></expr>

?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><ternary><condition><expr><name>dwCtrlType</name> <operator>==</operator> <name>CTRL_LOGOFF_EVENT</name></expr>

?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"logoff"</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"shutdown"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>OutputDebugString</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>preserve_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>TRUE</name></expr>;</return> 

<default>default:</default>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>mch_settmode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tmode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>cmodein</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>cmodeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>bEnableHandler</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmodein</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmodeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmode</name> <operator>==</operator> <name>TMODE_RAW</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cmodein</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ENABLE_LINE_INPUT</name> <operator>|</operator> <name>ENABLE_PROCESSED_INPUT</name> <operator>|</operator>

<name>ENABLE_ECHO_INPUT</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>g_fMouseActive</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cmodein</name> <operator>|=</operator> <name>ENABLE_MOUSE_INPUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cmodeout</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>(</operator><ternary><condition><expr><operator>(</operator><name>vtp_working</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>ENABLE_PROCESSED_OUTPUT</name></expr></else></ternary><operator>)</operator> <operator>|</operator>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>ENABLE_PROCESSED_OUTPUT</name> <operator>|</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>ENABLE_WRAP_AT_EOL_OUTPUT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bEnableHandler</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>cmodein</name> <operator>|=</operator> <operator>(</operator><name>ENABLE_LINE_INPUT</name> <operator>|</operator> <name>ENABLE_PROCESSED_INPUT</name> <operator>|</operator>

<name>ENABLE_ECHO_INPUT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmodeout</name> <operator>|=</operator> <operator>(</operator><name>ENABLE_PROCESSED_OUTPUT</name> <operator>|</operator> <name>ENABLE_WRAP_AT_EOL_OUTPUT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bEnableHandler</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><name>cmodein</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>cmodeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetConsoleCtrlHandler</name><argument_list>(<argument><expr><name>handler_routine</name></expr></argument>, <argument><expr><name>bEnableHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fdDump</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fdDump</name></expr></argument>, <argument><expr><literal type="string">"mch_settmode(%s, in = %x, out = %x)\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>tmode</name> <operator>==</operator> <name>TMODE_RAW</name></expr> ?</condition><then> <expr><literal type="string">"raw"</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>tmode</name> <operator>==</operator> <name>TMODE_COOK</name></expr> ?</condition><then> <expr><literal type="string">"cooked"</literal></expr> </then><else>: <expr><literal type="string">"normal"</literal></expr></else></ternary></expr></else></ternary></expr></argument>,

<argument><expr><name>cmodein</name></expr></argument>, <argument><expr><name>cmodeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_get_shellsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>csbi</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_fTermcapMode</name> <operator>&amp;&amp;</operator> <name><name>g_cbTermcap</name><operator>.</operator><name>IsValid</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>Rows</name> <operator>=</operator> <name><name>g_cbTermcap</name><operator>.</operator><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Columns</name> <operator>=</operator> <name><name>g_cbTermcap</name><operator>.</operator><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>Rows</name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name> <operator>-</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Columns</name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name> <operator>-</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Left</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>Rows</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Columns</name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ResizeConBuf</name><parameter_list>(

<parameter><decl><type><name>HANDLE</name></type> <name>hConsole</name></decl></parameter>,

<parameter><decl><type><name>COORD</name></type> <name>coordScreen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetConsoleScreenBufferSize</name><argument_list>(<argument><expr><name>hConsole</name></expr></argument>, <argument><expr><name>coordScreen</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fdDump</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fdDump</name></expr></argument>, <argument><expr><literal type="string">"SetConsoleScreenBufferSize failed: %lx\n"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ResizeWindow</name><parameter_list>(

<parameter><decl><type><name>HANDLE</name></type> <name>hConsole</name></decl></parameter>,

<parameter><decl><type><name>SMALL_RECT</name></type> <name>srWindowRect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetConsoleWindowInfo</name><argument_list>(<argument><expr><name>hConsole</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>srWindowRect</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fdDump</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fdDump</name></expr></argument>, <argument><expr><literal type="string">"SetConsoleWindowInfo failed: %lx\n"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ResizeConBufAndWindow</name><parameter_list>(

<parameter><decl><type><name>HANDLE</name></type> <name>hConsole</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>xSize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ySize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>csbi</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>SMALL_RECT</name></type> <name>srWindowRect</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>COORD</name></type> <name>coordScreen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COORD</name></type> <name>cursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>resized</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fdDump</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fdDump</name></expr></argument>, <argument><expr><literal type="string">"ResizeConBufAndWindow(%d, %d)\n"</literal></expr></argument>, <argument><expr><name>xSize</name></expr></argument>, <argument><expr><name>ySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>coordScreen</name> <operator>=</operator> <call><name>GetLargestConsoleWindowSize</name><argument_list>(<argument><expr><name>hConsole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srWindowRect</name><operator>.</operator><name>Left</name></name> <operator>=</operator> <name><name>srWindowRect</name><operator>.</operator><name>Top</name></name> <operator>=</operator> <operator>(</operator><name>SHORT</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srWindowRect</name><operator>.</operator><name>Right</name></name> <operator>=</operator> <operator>(</operator><name>SHORT</name><operator>)</operator> <operator>(</operator><call><name>min</name><argument_list>(<argument><expr><name>xSize</name></expr></argument>, <argument><expr><name><name>coordScreen</name><operator>.</operator><name>X</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srWindowRect</name><operator>.</operator><name>Bottom</name></name> <operator>=</operator> <operator>(</operator><name>SHORT</name><operator>)</operator> <operator>(</operator><call><name>min</name><argument_list>(<argument><expr><name>ySize</name></expr></argument>, <argument><expr><name><name>coordScreen</name><operator>.</operator><name>Y</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sx</name></decl>, <decl><type ref="prev"/><name>sy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sx</name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name> <operator>-</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Left</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sy</name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name> <operator>-</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sy</name> <operator>&lt;</operator> <name>ySize</name> <operator>||</operator> <name>sx</name> <operator>&lt;</operator> <name>xSize</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sy</name> <operator>&lt;</operator> <name>ySize</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coordScreen</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name>ySize</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coordScreen</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name>sy</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sx</name> <operator>&lt;</operator> <name>xSize</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coordScreen</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name>xSize</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coordScreen</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name>sx</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>SetConsoleScreenBufferSize</name><argument_list>(<argument><expr><name>hConsole</name></expr></argument>, <argument><expr><name>coordScreen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>coordScreen</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name>xSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coordScreen</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name>ySize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vtp_working</name> <operator>||</operator> <name>resized</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ResizeWindow</name><argument_list>(<argument><expr><name>hConsole</name></expr></argument>, <argument><expr><name>srWindowRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ResizeConBuf</name><argument_list>(<argument><expr><name>hConsole</name></expr></argument>, <argument><expr><name>coordScreen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>cursor</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>srWindowRect</name><operator>.</operator><name>Left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cursor</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>srWindowRect</name><operator>.</operator><name>Top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>hConsole</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ResizeConBuf</name><argument_list>(<argument><expr><name>hConsole</name></expr></argument>, <argument><expr><name>coordScreen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ResizeWindow</name><argument_list>(<argument><expr><name>hConsole</name></expr></argument>, <argument><expr><name>srWindowRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>resized</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>mch_set_shellsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>COORD</name></type> <name>coordScreen</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>suppress_winsize</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>suppress_winsize</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>term_console</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>coordScreen</name> <operator>=</operator> <call><name>GetLargestConsoleWindowSize</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Rows</name> <operator>&gt;</operator> <name><name>coordScreen</name><operator>.</operator><name>Y</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Rows</name> <operator>=</operator> <name><name>coordScreen</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>Columns</name> <operator>&gt;</operator> <name><name>coordScreen</name><operator>.</operator><name>X</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Columns</name> <operator>=</operator> <name><name>coordScreen</name><operator>.</operator><name>X</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ResizeConBufAndWindow</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>Columns</name></expr></argument>, <argument><expr><name>Rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>mch_new_shellsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>set_scroll_region</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>mch_set_winsize_now</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>suppress_winsize</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>suppress_winsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_set_shellsize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shell_resized</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>suppress_winsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>BOOL</name></type>

<name>vim_create_process</name><parameter_list>(

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>BOOL</name></type> <name>inherit_handles</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>STARTUPINFO</name> <modifier>*</modifier></type><name>si</name></decl></parameter>,

<parameter><decl><type><name>PROCESS_INFORMATION</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>,

<parameter><decl><type><name>LPVOID</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cwd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BOOL</name></type> <name>ret</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wcmd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wcwd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>wcmd</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wcmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cwd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>wcwd</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>cwd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wcwd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CreateProcessW</name><argument_list>(

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><name>wcmd</name></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><name>inherit_handles</name></expr></argument>, 

<argument><expr><name>flags</name></expr></argument>, 

<argument><expr><name>env</name></expr></argument>, 

<argument><expr><name>wcwd</name></expr></argument>, 

<argument><expr><operator>(</operator><name>LPSTARTUPINFOW</name><operator>)</operator><name>si</name></expr></argument>, 

<argument><expr><name>pi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<label><name>theend</name>:</label>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wcwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HINSTANCE</name></type>

<name>vim_shell_execute</name><parameter_list>(

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>INT</name></type> <name>n_show_cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wcmd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wcmd</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wcmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>HINSTANCE</name><operator>)</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ShellExecuteW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>wcmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n_show_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>mch_system_classic</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>STARTUPINFO</name></type> <name>si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PROCESS_INFORMATION</name></type> <name>pi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name> <init>= <expr><call><name>GetFocus</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>lpReserved</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>lpDesktop</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>lpTitle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>dwFlags</name></name> <operator>=</operator> <name>STARTF_USESHOWWINDOW</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>SHELL_DOOUT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>wShowWindow</name></name> <operator>=</operator> <name>SW_SHOWMINNOACTIVE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>wShowWindow</name></name> <operator>=</operator> <name>SW_SHOWNORMAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>cbReserved2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>lpReserved2</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_create_process</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,

<argument><expr><name>CREATE_DEFAULT_ERROR_MODE</name> <operator>|</operator> <name>CREATE_NEW_CONSOLE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>delay</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pPeekMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>HWND</name><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PM_REMOVE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TranslateMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pDispatchMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>WAIT_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delay</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>GetExitCodeProcess</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>WM_SETFOCUS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name> <name>__stdcall</name></type>

<name>sub_process_writer</name><parameter_list>(<parameter><decl><type><name>LPVOID</name></type> <name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>g_hChildStd_IN_Wr</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lp</name> <init>= <expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>lp</name> <operator>+</operator> <name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>lp</name><index>[<expr><name>written</name></expr>]</index></name> <operator>==</operator> <name>NL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>WriteFile</name><argument_list>(<argument><expr><name>g_hChildStd_IN_Wr</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>lp</name> <operator>+</operator> <name>written</name></expr></argument>, <argument><expr><name>NL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WriteFile</name><argument_list>(<argument><expr><name>g_hChildStd_IN_Wr</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>lp</name> <operator>+</operator> <name>written</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>s</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>l</name></expr> </then><else>: <expr><operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <operator>(</operator><name>lp</name> <operator>+</operator> <name>written</name><operator>)</operator><operator>)</operator></expr></else></ternary></expr></argument>,

<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>l</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>!=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name>

<operator>||</operator> <operator>(</operator><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bin</name></name>

<operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fixeol</name></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>lnum</name> <operator>!=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_no_eol_lnum</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>lnum</name> <operator>!=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>||</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_eol</name></name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>WriteFile</name><argument_list>(<argument><expr><name>g_hChildStd_IN_Wr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name>LPDWORD</name><operator>)</operator><operator>&amp;</operator><name>vim_ignored</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>lnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lp</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>written</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>written</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>g_hChildStd_IN_Wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFLEN</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>void</name></type>

<name>dump_pipe</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,

<parameter><decl><type><name>HANDLE</name></type> <name>g_hChildStd_OUT_Rd</name></decl></parameter>,

<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>ga</name></decl></parameter>,

<parameter><decl><type><name>char_u</name></type> <name><name>buffer</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type><name>buffer_off</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>availableBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>toRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>repeatCount</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PeekNamedPipe</name><argument_list>(<argument><expr><name>g_hChildStd_OUT_Rd</name></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name>availableBytes</name></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>repeatCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>availableBytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>repeatCount</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>toRead</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><name>BUFLEN</name> <operator>-</operator> <operator>*</operator><name>buffer_off</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>toRead</name> <operator>=</operator> <ternary><condition><expr><name>availableBytes</name> <operator>&lt;</operator> <name>toRead</name></expr> ?</condition><then> <expr><name>availableBytes</name></expr> </then><else>: <expr><name>toRead</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReadFile</name><argument_list>(<argument><expr><name>g_hChildStd_OUT_Rd</name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <operator>*</operator><name>buffer_off</name></expr></argument>, <argument><expr><name>toRead</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>availableBytes</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>SHELL_READ</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>append_ga_line</name><argument_list>(<argument><expr><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><name>ga</name></expr></argument>, <argument><expr><name>NL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><name>ga</name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>*</operator><name>buffer_off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>buffer</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>buffer</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <name>l</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>MB_CPTR2LEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>buffer</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>buffer_off</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>buffer</name> <operator>+</operator> <name>len</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buffer_off</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><operator>(</operator><name>buffer</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>-</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>*</operator><name>buffer_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>buffer_off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>msg_row</name></expr></argument>, <argument><expr><name>msg_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cursor_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>mch_system_piped</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>STARTUPINFO</name></type> <name>si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PROCESS_INFORMATION</name></type> <name>pi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>g_hChildStd_IN_Rd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>g_hChildStd_IN_Wr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>g_hChildStd_OUT_Rd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>g_hChildStd_OUT_Wr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buffer</name><index>[<expr><name>BUFLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>ta_buf</name><index>[<expr><name>BUFLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ta_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DWORD</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>noread_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delay</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>buffer_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SECURITY_ATTRIBUTES</name></type> <name>saAttr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>saAttr</name><operator>.</operator><name>nLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SECURITY_ATTRIBUTES</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>saAttr</name><operator>.</operator><name>bInheritHandle</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>saAttr</name><operator>.</operator><name>lpSecurityDescriptor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name>CreatePipe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_hChildStd_OUT_Rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g_hChildStd_OUT_Wr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saAttr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator> <call><name>SetHandleInformation</name><argument_list>(<argument><expr><name>g_hChildStd_OUT_Rd</name></expr></argument>, <argument><expr><name>HANDLE_FLAG_INHERIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator> <call><name>CreatePipe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_hChildStd_IN_Rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g_hChildStd_IN_Wr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saAttr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator> <call><name>SetHandleInformation</name><argument_list>(<argument><expr><name>g_hChildStd_IN_Wr</name></expr></argument>, <argument><expr><name>HANDLE_FLAG_INHERIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>g_hChildStd_IN_Rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>g_hChildStd_IN_Wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>g_hChildStd_OUT_Rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>g_hChildStd_OUT_Wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nCannot create pipes\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>lpReserved</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>lpDesktop</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>lpTitle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>dwFlags</name></name> <operator>=</operator> <name>STARTF_USESHOWWINDOW</name> <operator>|</operator> <name>STARTF_USESTDHANDLES</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>hStdError</name></name> <operator>=</operator> <name>g_hChildStd_OUT_Wr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>hStdOutput</name></name> <operator>=</operator> <name>g_hChildStd_OUT_Wr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>hStdInput</name></name> <operator>=</operator> <name>g_hChildStd_IN_Rd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>wShowWindow</name></name> <operator>=</operator> <name>SW_HIDE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>cbReserved2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>lpReserved2</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>SHELL_READ</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>BUFLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>unescape_shellxquote</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>p_sxe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_create_process</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>CREATE_DEFAULT_ERROR_MODE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>cmd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>g_hChildStd_IN_Rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>g_hChildStd_OUT_Wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>SHELL_WRITE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>thread</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator>

<call><name>_beginthreadex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><name>sub_process_writer</name></expr></argument>, 

<argument><expr><name>g_hChildStd_IN_Wr</name></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g_hChildStd_IN_Wr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pPeekMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>HWND</name><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PM_REMOVE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TranslateMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pDispatchMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <operator>(</operator><name>SHELL_READ</name><operator>|</operator><name>SHELL_WRITE</name><operator>)</operator><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SHELL_EXPAND</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>options</name> <operator>&amp;</operator>

<operator>(</operator><name>SHELL_READ</name><operator>|</operator><name>SHELL_WRITE</name><operator>|</operator><name>SHELL_COOKED</name><operator>)</operator><operator>)</operator>

<operator>!=</operator> <operator>(</operator><name>SHELL_READ</name><operator>|</operator><name>SHELL_WRITE</name><operator>|</operator><name>SHELL_COOKED</name><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>gui</name><operator>.</operator><name>in_use</name></name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>ta_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>noread_cnt</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ta_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>noread_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ui_inchar</name><argument_list>(<argument><expr><name>ta_buf</name></expr></argument>, <argument><expr><name>BUFLEN</name></expr></argument>, <argument><expr><literal type="number">10L</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ta_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>cmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ta_buf</name><index>[<expr><name>ta_len</name></expr>]</index></name> <operator>==</operator> <name>Ctrl_C</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TerminateProcess</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ta_buf</name><index>[<expr><name>ta_len</name></expr>]</index></name> <operator>==</operator> <name>Ctrl_D</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>g_hChildStd_IN_Wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g_hChildStd_IN_Wr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>term_replace_bs_del_keycode</name><argument_list>(<argument><expr><name>ta_buf</name></expr></argument>, <argument><expr><name>ta_len</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ta_len</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ta_len</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ta_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>ta_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\b'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><name><name>ta_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>ta_buf</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_outtrans_len</name><argument_list>(<argument><expr><name>ta_buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_outtrans_len</name><argument_list>(<argument><expr><name>ta_buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>msg_row</name></expr></argument>, <argument><expr><name>msg_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ta_len</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>SHELL_WRITE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ta_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>g_hChildStd_IN_Wr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>WriteFile</name><argument_list>(<argument><expr><name>g_hChildStd_IN_Wr</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>ta_buf</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ta_len</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>ta_buf</name></expr></argument>, <argument><expr><name>ta_buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>ta_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ta_len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ui_inchar_undo</name><argument_list>(<argument><expr><name>ta_buf</name></expr></argument>, <argument><expr><name>ta_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>WAIT_TIMEOUT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dump_pipe</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>g_hChildStd_OUT_Rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>noread_cnt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dump_pipe</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>g_hChildStd_OUT_Rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delay</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>g_hChildStd_OUT_Rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>g_hChildStd_IN_Wr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>g_hChildStd_IN_Wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetExitCodeProcess</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>SHELL_READ</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>append_ga_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_no_eol_lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_no_eol_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>mch_system_g</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_stmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>mch_system_piped</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>mch_system_classic</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>mch_system_c</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>options</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wcmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name><name>cmd</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"(%s)"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wcmd</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>wcmd</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wcmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_wsystem</name><argument_list>(<argument><expr><name>wcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>mch_system</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>mch_system_g</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>mch_system_c</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<return>return <expr><call><name>mch_system_g</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>mch_system_c</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>mch_call_shell_terminal</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>options</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>jobopt_T</name></type> <name>opt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newcmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argvar</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>cmdlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aco_save_T</name></type> <name>aco</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>oparg_T</name></type> <name>oa</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cmdlen</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p_sh</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cmdlen</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p_sh</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p_shcf</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>newcmd</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>cmdlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newcmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">255</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>newcmd</name></expr></argument>, <argument><expr><name>p_sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"starting terminal to run a shell"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newcmd</name></expr></argument>, <argument><expr><name>cmdlen</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s"</literal></expr></argument>, <argument><expr><name>p_sh</name></expr></argument>, <argument><expr><name>p_shcf</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"starting terminal for system command '%s'"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>init_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argvar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argvar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>newcmd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argvar</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>term_start</name><argument_list>(<argument><expr><name>argvar</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name>TERM_START_SYSTEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>newcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">255</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>job</name> <operator>=</operator> <call><name>term_getjob</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>job</name><operator>-&gt;</operator><name>jv_refcount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aucmd_prepbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_oparg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>term_use_loop</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oa</name><operator>.</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name> <operator>&amp;&amp;</operator> <name><name>oa</name><operator>.</operator><name>regname</name></name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>terminal_loop</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>normal_cmd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oa</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>normal_cmd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oa</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>jv_exitval</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"system command finished"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>job_unref</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aucmd_restbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_return</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_buffer</name><argument_list>(<argument><expr><name>DOBUF_WIPE</name></expr></argument>, <argument><expr><name>DOBUF_FIRST</name></expr></argument>, <argument><expr><name>FORWARD</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>newcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>mch_call_shell</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tmode</name> <init>= <expr><name>cur_tmode</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>szShellTitle</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetConsoleTitleW</name><argument_list>(<argument><expr><name>szShellTitle</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>szShellTitle</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wcscat</name><argument_list>(<argument><expr><name>szShellTitle</name></expr></argument>, <argument><expr><literal type="string">L" :sh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wn</name> <init>= <expr><call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>wcscat</name><argument_list>(<argument><expr><name>szShellTitle</name></expr></argument>, <argument><expr><literal type="string">L" - !"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>wcslen</name><argument_list>(<argument><expr><name>szShellTitle</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator>

<sizeof>sizeof<argument_list>(<argument><expr><name>szShellTitle</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wcscat</name><argument_list>(<argument><expr><name>szShellTitle</name></expr></argument>, <argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetConsoleTitleW</name><argument_list>(<argument><expr><name>szShellTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fdDump</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fdDump</name></expr></argument>, <argument><expr><literal type="string">"mch_call_shell(\"%s\", %d)\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_TERMINAL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>options</name> <operator>&amp;</operator> <operator>(</operator><name>SHELL_FILTER</name><operator>|</operator><name>SHELL_DOOUT</name><operator>|</operator><name>SHELL_WRITE</name><operator>|</operator><name>SHELL_READ</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmdbase</name> <init>= <expr><name>cmd</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdbase</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><operator>*</operator><name>cmdbase</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>*</operator><name>cmdbase</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>cmdbase</name></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdbase</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name>cmdbase</name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>cmdbase</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>mch_call_shell_terminal</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>resettitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGKILL</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGILL</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGFPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGSEGV</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGABRT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>SHELL_COOKED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>settmode</name><argument_list>(<argument><expr><name>TMODE_COOK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>mch_system</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_sh</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newcmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmdbase</name> <init>= <expr><name>cmd</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>cmdlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmdbase</name> <operator>==</operator> <literal type="char">'"'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>cmdbase</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmdbase</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>cmdbase</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>STRNICMP</name><argument_list>(<argument><expr><name>cmdbase</name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>cmdbase</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>STARTUPINFO</name></type> <name>si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PROCESS_INFORMATION</name></type> <name>pi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>flags</name> <init>= <expr><name>CREATE_NEW_CONSOLE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INT</name></type> <name>n_show_cmd</name> <init>= <expr><name>SW_SHOWNORMAL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>lpReserved</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>lpDesktop</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>lpTitle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>dwFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>cbReserved2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>lpReserved2</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmdbase</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>cmdbase</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>STRNICMP</name><argument_list>(<argument><expr><name>cmdbase</name></expr></argument>, <argument><expr><literal type="string">"/min"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>cmdbase</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cmdbase</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>cmdbase</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>dwFlags</name></name> <operator>=</operator> <name>STARTF_USESHOWWINDOW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>wShowWindow</name></name> <operator>=</operator> <name>SW_SHOWMINNOACTIVE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n_show_cmd</name> <operator>=</operator> <name>SW_SHOWMINNOACTIVE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>STRNICMP</name><argument_list>(<argument><expr><name>cmdbase</name></expr></argument>, <argument><expr><literal type="string">"/b"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>cmdbase</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cmdbase</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>cmdbase</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>CREATE_NO_WINDOW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>dwFlags</name></name> <operator>=</operator> <name>STARTF_USESTDHANDLES</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>hStdInput</name></name> <operator>=</operator> <call><name>CreateFile</name><argument_list>(<argument><expr><literal type="string">"\\\\.\\NUL"</literal></expr></argument>, 

<argument><expr><name>GENERIC_READ</name></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><name>OPEN_EXISTING</name></expr></argument>, 

<argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>hStdOutput</name></name> <operator>=</operator> <name><name>si</name><operator>.</operator><name>hStdInput</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>hStdError</name></name> <operator>=</operator> <name><name>si</name><operator>.</operator><name>hStdInput</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdbase</name> <operator>&gt;</operator> <name>cmd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>cmdbase</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>cmdbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>cmdbase</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>cmdbase</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>cmd</name> <operator>==</operator><literal type="char">'('</literal> <operator>||</operator> <name><name>cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>newcmd</name> <operator>=</operator> <name>cmdbase</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unescape_shellxquote</name><argument_list>(<argument><expr><name>cmdbase</name></expr></argument>, <argument><expr><name>p_sxe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>!=</operator> <name>CREATE_NEW_CONSOLE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>subcmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd_shell</name> <init>= <expr><call><name>mch_getenv</name><argument_list>(<argument><expr><literal type="string">"COMSPEC"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd_shell</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>cmd_shell</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cmd_shell</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>default_shell</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>subcmd</name> <operator>=</operator> <call><name>vim_strsave_escaped_ext</name><argument_list>(<argument><expr><name>cmdbase</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"|"</literal></expr></argument>, <argument><expr><literal type="char">'^'</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>subcmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cmdlen</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>cmd_shell</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>subcmd</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>newcmd</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>cmdlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newcmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newcmd</name></expr></argument>, <argument><expr><name>cmdlen</name></expr></argument>, <argument><expr><literal type="string">"%s /c %s"</literal></expr></argument>,

<argument><expr><name>cmd_shell</name></expr></argument>, <argument><expr><name>subcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>newcmd</name> <operator>=</operator> <name>cmdbase</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>subcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_create_process</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newcmd</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>vim_shell_execute</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newcmd</name></expr></argument>, <argument><expr><name>n_show_cmd</name></expr></argument>)</argument_list></call>

<operator>&gt;</operator> <operator>(</operator><name>HINSTANCE</name><operator>)</operator><literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E371: Command not found"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>newcmd</name> <operator>!=</operator> <name>cmdbase</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>newcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>.</operator><name>dwFlags</name></name> <operator>==</operator> <name>STARTF_USESTDHANDLES</name> <operator>&amp;&amp;</operator> <name><name>si</name><operator>.</operator><name>hStdInput</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>si</name><operator>.</operator><name>hStdInput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>cmdlen</name> <operator>=</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>starting</name></name><operator>)</operator></expr> ?</condition><then>

<expr><operator>(</operator><ternary><condition><expr><operator>!</operator><name>s_dont_use_vimrun</name> <operator>&amp;&amp;</operator> <name>p_stmp</name></expr> ?</condition><then>

<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>vimrun_path</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p_sh</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p_shcf</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>

</then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<call><name>STRLEN</name><argument_list>(<argument><expr><name>p_sh</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p_shcf</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>newcmd</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>cmdlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newcmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>starting</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>need_vimrun_warning</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"VIMRUN.EXE not found in your $PATH.\n"</literal>

<literal type="string">"External commands will not pause after completion.\n"</literal>

<literal type="string">"See :help win32-vimrun for more information."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Vim Warning"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wmsg</name> <init>= <expr><call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wtitle</name> <init>= <expr><call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>title</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wmsg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>wtitle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MessageBoxW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>wmsg</name></expr></argument>, <argument><expr><name>wtitle</name></expr></argument>, <argument><expr><name>MB_ICONWARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wtitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_vimrun_warning</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>starting</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>!</operator><name>s_dont_use_vimrun</name> <operator>&amp;&amp;</operator> <name>p_stmp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newcmd</name></expr></argument>, <argument><expr><name>cmdlen</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s %s %s"</literal></expr></argument>,

<argument><expr><name>vimrun_path</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>msg_silent</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SHELL_DOOUT</name><operator>)</operator><operator>)</operator></expr>

?</condition><then> <expr><literal type="string">"-s "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>p_sh</name></expr></argument>, <argument><expr><name>p_shcf</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>starting</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>s_dont_use_vimrun</name> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>p_shcf</name></expr></argument>, <argument><expr><literal type="string">"/c"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newcmd</name></expr></argument>, <argument><expr><name>cmdlen</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s %s %s"</literal></expr></argument>,

<argument><expr><name>p_sh</name></expr></argument>, <argument><expr><name>p_shcf</name></expr></argument>, <argument><expr><name>p_sh</name></expr></argument>, <argument><expr><name>p_shcf</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newcmd</name></expr></argument>, <argument><expr><name>cmdlen</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s"</literal></expr></argument>,

<argument><expr><name>p_sh</name></expr></argument>, <argument><expr><name>p_shcf</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>mch_system</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>newcmd</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>newcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tmode</name> <operator>==</operator> <name>TMODE_RAW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>settmode</name><argument_list>(<argument><expr><name>TMODE_RAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SHELL_SILENT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>emsg_silent</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>starting</name></name><operator>)</operator></expr> ?</condition><then>

<expr><operator>(</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SHELL_DOOUT</name><operator>)</operator> <operator>||</operator> <name>s_dont_use_vimrun</name> <operator>||</operator> <operator>!</operator><name>p_stmp</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"shell returned %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>resettitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGKILL</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGILL</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGFPE</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGSEGV</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGABRT</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>HANDLE</name></type>

<name>job_io_file_open</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>dwDesiredAccess</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>dwShareMode</name></decl></parameter>,

<parameter><decl><type><name>LPSECURITY_ATTRIBUTES</name></type> <name>lpSecurityAttributes</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>dwCreationDisposition</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>dwFlagsAndAttributes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wn</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INVALID_HANDLE_VALUE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><name>wn</name></expr></argument>, <argument><expr><name>dwDesiredAccess</name></expr></argument>, <argument><expr><name>dwShareMode</name></expr></argument>,

<argument><expr><name>lpSecurityAttributes</name></expr></argument>, <argument><expr><name>dwCreationDisposition</name></expr></argument>,

<argument><expr><name>dwFlagsAndAttributes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>h</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>win32_build_env</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_terminal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>todo</name> <init>= <expr><ternary><condition><expr><name>env</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>env</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_used</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPVOID</name></type> <name>base</name> <init>= <expr><call><name>GetEnvironmentStringsW</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>env</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>env</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><operator>&amp;</operator><call><name>dict_lookup</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>di_tv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wkey</name> <init>= <expr><call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wval</name> <init>= <expr><call><name>enc_to_utf16</name><argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wkey</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>wval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>lkey</name> <init>= <expr><call><name>wcslen</name><argument_list>(<argument><expr><name>wkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>lval</name> <init>= <expr><call><name>wcslen</name><argument_list>(<argument><expr><name>wval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>lkey</name> <operator>+</operator> <name>lval</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>lkey</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>WCHAR</name><operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>wkey</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>WCHAR</name><operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>L</name><literal type="char">'='</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>lval</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>WCHAR</name><operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>wval</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>WCHAR</name><operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>WCHAR</name><operator>*</operator><operator>)</operator> <name>base</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>WCHAR</name><operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>FreeEnvironmentStrings</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>WCHAR</name><operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>servername</name> <init>= <expr><call><name>get_vim_var_str</name><argument_list>(<argument><expr><name>VV_SEND_SERVER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>servername_len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>servername</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>version</name> <init>= <expr><call><name>get_vim_var_str</name><argument_list>(<argument><expr><name>VV_VERSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>version_len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>+</operator> <literal type="number">15</literal> <operator>+</operator> <name>servername_len</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>+</operator> <literal type="number">13</literal> <operator>+</operator> <name>version_len</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>WCHAR</name><operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator><operator>)</operator> <operator>=</operator>

<operator>(</operator><name>WCHAR</name><operator>)</operator><literal type="string">"VIM_SERVERNAME="</literal><index>[<expr><name>n</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>servername_len</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>WCHAR</name><operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator><operator>)</operator> <operator>=</operator>

<operator>(</operator><name>WCHAR</name><operator>)</operator><name><name>servername</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>WCHAR</name><operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>is_terminal</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>WCHAR</name><operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator><operator>)</operator> <operator>=</operator>

<operator>(</operator><name>WCHAR</name><operator>)</operator><literal type="string">"VIM_TERMINAL="</literal><index>[<expr><name>n</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>version_len</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>WCHAR</name><operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator><operator>)</operator> <operator>=</operator>

<operator>(</operator><name>WCHAR</name><operator>)</operator><name><name>version</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>WCHAR</name><operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name> <operator>+</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name></type>

<name>create_pipe_pair</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name><name>handles</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>LONG</name></type> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SECURITY_ATTRIBUTES</name></type> <name>sa</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"\\\\?\\pipe\\vim-%08lx-%08lx"</literal></expr></argument>,

<argument><expr><call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><call><name>InterlockedIncrement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CreateNamedPipe</name><argument_list>(

<argument><expr><name>name</name></expr></argument>,

<argument><expr><name>PIPE_ACCESS_OUTBOUND</name> <operator>|</operator> <name>FILE_FLAG_OVERLAPPED</name></expr></argument>,

<argument><expr><name>PIPE_TYPE_BYTE</name> <operator>|</operator> <name>PIPE_NOWAIT</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MAX_NAMED_PIPE_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>nLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>bInheritHandle</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>lpSecurityDescriptor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>handles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CreateFile</name><argument_list>(<argument><expr><name>name</name></expr></argument>,

<argument><expr><name>FILE_GENERIC_READ</name></expr></argument>,

<argument><expr><name>FILE_SHARE_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>,

<argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>mch_job_start</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>STARTUPINFO</name></type> <name>si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PROCESS_INFORMATION</name></type> <name>pi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>jo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SECURITY_ATTRIBUTES</name></type> <name>saAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name><name>ifd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name><name>ofd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name><name>efd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_null_for_in</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>PART_IN</name></expr>]</index></name> <operator>==</operator> <name>JIO_NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_null_for_out</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>PART_OUT</name></expr>]</index></name> <operator>==</operator> <name>JIO_NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_null_for_err</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>PART_ERR</name></expr>]</index></name> <operator>==</operator> <name>JIO_NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_file_for_in</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>PART_IN</name></expr>]</index></name> <operator>==</operator> <name>JIO_FILE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_file_for_out</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>PART_OUT</name></expr>]</index></name> <operator>==</operator> <name>JIO_FILE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_file_for_err</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>PART_ERR</name></expr>]</index></name> <operator>==</operator> <name>JIO_FILE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_out_for_err</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>PART_ERR</name></expr>]</index></name> <operator>==</operator> <name>JIO_OUT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>use_out_for_err</name> <operator>&amp;&amp;</operator> <name>use_null_for_out</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>use_null_for_err</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ifd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ofd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ofd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>efd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>efd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>jo</name> <operator>=</operator> <call><name>CreateJobObject</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>jo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>=</operator> <name>JOB_FAILED</name></expr>;</expr_stmt>

<goto>goto <name>failed</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>jo_env</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>win32_build_env</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>jo_env</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>dwFlags</name></name> <operator>|=</operator> <name>STARTF_USESHOWWINDOW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>wShowWindow</name></name> <operator>=</operator> <name>SW_HIDE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>saAttr</name><operator>.</operator><name>nLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SECURITY_ATTRIBUTES</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>saAttr</name><operator>.</operator><name>bInheritHandle</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>saAttr</name><operator>.</operator><name>lpSecurityDescriptor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_file_for_in</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>jo_io_name</name><index>[<expr><name>PART_IN</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ifd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>job_io_file_open</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>GENERIC_READ</name></expr></argument>,

<argument><expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>saAttr</name></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ifd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notopen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>failed</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>use_null_for_in</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>create_pipe_pair</name><argument_list>(<argument><expr><name>ifd</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>SetHandleInformation</name><argument_list>(<argument><expr><name><name>ifd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>HANDLE_FLAG_INHERIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_file_for_out</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>jo_io_name</name><index>[<expr><name>PART_OUT</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ofd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>job_io_file_open</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>GENERIC_WRITE</name></expr></argument>,

<argument><expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>saAttr</name></expr></argument>, <argument><expr><name>CREATE_ALWAYS</name></expr></argument>, <argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ofd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notopen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>failed</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>use_null_for_out</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><call><name>CreatePipe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ofd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ofd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saAttr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>SetHandleInformation</name><argument_list>(<argument><expr><name><name>ofd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>HANDLE_FLAG_INHERIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_file_for_err</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>jo_io_name</name><index>[<expr><name>PART_ERR</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>efd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>job_io_file_open</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>GENERIC_WRITE</name></expr></argument>,

<argument><expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>saAttr</name></expr></argument>, <argument><expr><name>CREATE_ALWAYS</name></expr></argument>, <argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>efd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notopen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>failed</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>use_out_for_err</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>use_null_for_err</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><call><name>CreatePipe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>efd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>efd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saAttr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>!</operator><call><name>SetHandleInformation</name><argument_list>(<argument><expr><name><name>efd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>HANDLE_FLAG_INHERIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>dwFlags</name></name> <operator>|=</operator> <name>STARTF_USESTDHANDLES</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>hStdInput</name></name> <operator>=</operator> <name><name>ifd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>hStdOutput</name></name> <operator>=</operator> <name><name>ofd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>hStdError</name></name> <operator>=</operator> <ternary><condition><expr><name>use_out_for_err</name></expr> ?</condition><then> <expr><name><name>ofd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>efd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_null_for_in</name> <operator>||</operator> <operator>!</operator><name>use_null_for_out</name> <operator>||</operator> <operator>!</operator><name>use_null_for_err</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_CHANNEL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>jo_channel</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_refcount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>add_channel</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_create_process</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,

<argument><expr><name>CREATE_SUSPENDED</name> <operator>|</operator>

<name>CREATE_DEFAULT_ERROR_MODE</name> <operator>|</operator>

<name>CREATE_NEW_PROCESS_GROUP</name> <operator>|</operator>

<name>CREATE_UNICODE_ENVIRONMENT</name> <operator>|</operator>

<name>CREATE_NEW_CONSOLE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pi</name></expr></argument>,

<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>options</name><operator>-&gt;</operator><name>jo_cwd</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>jo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>=</operator> <name>JOB_FAILED</name></expr>;</expr_stmt>

<goto>goto <name>failed</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AssignProcessToJobObject</name><argument_list>(<argument><expr><name>jo</name></expr></argument>, <argument><expr><name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>jo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>jo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ResumeThread</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_proc_info</name></name> <operator>=</operator> <name>pi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_job_object</name></name> <operator>=</operator> <name>jo</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>=</operator> <name>JOB_STARTED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ifd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ofd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_out_for_err</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>use_null_for_err</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>efd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_set_pipes</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>use_file_for_in</name> <operator>||</operator> <name>use_null_for_in</name></expr>

?</condition><then> <expr><name>INVALID_FD</name></expr> </then><else>: <expr><operator>(</operator><name>sock_T</name><operator>)</operator><name><name>ifd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>use_file_for_out</name> <operator>||</operator> <name>use_null_for_out</name></expr>

?</condition><then> <expr><name>INVALID_FD</name></expr> </then><else>: <expr><operator>(</operator><name>sock_T</name><operator>)</operator><name><name>ofd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>use_out_for_err</name> <operator>||</operator> <name>use_file_for_err</name> <operator>||</operator> <name>use_null_for_err</name></expr>

?</condition><then> <expr><name>INVALID_FD</name></expr> </then><else>: <expr><operator>(</operator><name>sock_T</name><operator>)</operator><name><name>efd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_set_job</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>job</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

<label><name>failed</name>:</label>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ifd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ofd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>efd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ifd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ofd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>efd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_unref</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>mch_job_status</name><parameter_list>(<parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwExitCode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetExitCodeProcess</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_proc_info</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwExitCode</name></expr></argument>)</argument_list></call>

<operator>||</operator> <name>dwExitCode</name> <operator>!=</operator> <name>STILL_ACTIVE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_exitval</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>dwExitCode</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>&lt;</operator> <name>JOB_ENDED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>, <argument><expr><literal type="string">"Job ended"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>=</operator> <name>JOB_ENDED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="string">"dead"</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="string">"run"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>job_T</name> <modifier>*</modifier></type>

<name>mch_detect_ended_job</name><parameter_list>(<parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job_list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name><name>jobHandles</name><index>[<expr><name>MAXIMUM_WAIT_OBJECTS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name><name>jobArray</name><index>[<expr><name>MAXIMUM_WAIT_OBJECTS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><name>job_list</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>job</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>result</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>MAXIMUM_WAIT_OBJECTS</name>

<operator>&amp;&amp;</operator> <name>job</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>job</name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>jv_next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>==</operator> <name>JOB_STARTED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>jobHandles</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>jv_proc_info</name><operator>.</operator><name>hProcess</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>jobArray</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>WaitForMultipleObjects</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>jobHandles</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;=</operator> <name>WAIT_OBJECT_0</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>&lt;</operator> <name>WAIT_OBJECT_0</name> <operator>+</operator> <name>n</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>wait_job</name> <init>= <expr><name><name>jobArray</name><index>[<expr><name>result</name> <operator>-</operator> <name>WAIT_OBJECT_0</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><call><name>mch_job_status</name><argument_list>(<argument><expr><name>wait_job</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"dead"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>wait_job</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name></type>

<name>terminate_all</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>process</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PROCESSENTRY32</name></type> <name>pe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>pid</name> <init>= <expr><call><name>GetProcessId</name><argument_list>(<argument><expr><name>process</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>CreateToolhelp32Snapshot</name><argument_list>(<argument><expr><name>TH32CS_SNAPPROCESS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pe</name><operator>.</operator><name>dwSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PROCESSENTRY32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Process32First</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pe</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<do>do

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pe</name><operator>.</operator><name>th32ParentProcessID</name></name> <operator>==</operator> <name>pid</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>ph</name> <init>= <expr><call><name>OpenProcess</name><argument_list>(

<argument><expr><name>PROCESS_ALL_ACCESS</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>pe</name><operator>.</operator><name>th32ProcessID</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ph</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>terminate_all</name><argument_list>(<argument><expr><name>ph</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><call><name>Process32Next</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pe</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>theend</name>:</label>

<return>return <expr><call><name>TerminateProcess</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_signal_job</name><parameter_list>(<parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>how</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>how</name></expr></argument>, <argument><expr><literal type="string">"term"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>how</name></expr></argument>, <argument><expr><literal type="string">"kill"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>how</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_job_object</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>job</name><operator>-&gt;</operator><name>jv_channel</name><operator>-&gt;</operator><name>ch_anonymous_pipe</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name><operator>-&gt;</operator><name>ch_killing</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><call><name>TerminateJobObject</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_job_object</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>OK</name></expr> </then><else>: <expr><name>FAIL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><call><name>terminate_all</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_proc_info</name><operator>.</operator><name>hProcess</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>OK</name></expr> </then><else>: <expr><name>FAIL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AttachConsole</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_proc_info</name><operator>.</operator><name>dwProcessId</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><call><name>GenerateConsoleCtrlEvent</name><argument_list>(

<argument><expr><ternary><condition><expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>how</name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>CTRL_C_EVENT</name></expr> </then><else>: <expr><name>CTRL_BREAK_EVENT</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_proc_info</name><operator>.</operator><name>dwProcessId</name></name></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name>OK</name></expr> </then><else>: <expr><name>FAIL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeConsole</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>mch_clear_job</name><parameter_list>(<parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>!=</operator> <name>JOB_FAILED</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_job_object</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_job_object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_proc_info</name><operator>.</operator><name>hProcess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>termcap_mode_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>cmodein</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>g_fTermcapMode</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_rs</name> <operator>&amp;&amp;</operator> <name>USE_VTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vtp_printf</name><argument_list>(<argument><expr><literal type="string">"\033[?1049h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SaveConsoleBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_cbNonTermcap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g_cbTermcap</name><operator>.</operator><name>IsValid</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RestoreConsoleBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_cbTermcap</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_console_color_rgb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetConsoleWindowInfo</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g_cbTermcap</name><operator>.</operator><name>Info</name><operator>.</operator><name>srWindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Rows</name> <operator>=</operator> <name><name>g_cbTermcap</name><operator>.</operator><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Columns</name> <operator>=</operator> <name><name>g_cbTermcap</name><operator>.</operator><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ClearConsoleBuffer</name><argument_list>(<argument><expr><name>g_attrCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_console_color_rgb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ResizeConBufAndWindow</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>Columns</name></expr></argument>, <argument><expr><name>Rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>resettitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmodein</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>g_fMouseActive</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cmodein</name> <operator>|=</operator> <name>ENABLE_MOUSE_INPUT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cmodein</name> <operator>&amp;=</operator> <operator>~</operator><name>ENABLE_MOUSE_INPUT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>cmodein</name> <operator>|=</operator> <name>ENABLE_WINDOW_INPUT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><name>cmodein</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_later_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g_fTermcapMode</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>termcap_mode_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>cmodein</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ConsoleBuffer</name> <modifier>*</modifier></type><name>cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COORD</name></type> <name>coord</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDummy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_fTermcapMode</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SaveConsoleBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_cbTermcap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmodein</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmodein</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ENABLE_MOUSE_INPUT</name> <operator>|</operator> <name>ENABLE_WINDOW_INPUT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>g_hConIn</name></expr></argument>, <argument><expr><name>cmodein</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RESTORE_ORIG_SCREEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <ternary><condition><expr><name>exiting</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>g_cbOrig</name></expr> </then><else>: <expr><operator>&amp;</operator><name>g_cbNonTermcap</name></expr></else></ternary></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <operator>&amp;</operator><name>g_cbNonTermcap</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>RestoreConsoleBuffer</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>p_rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_console_color_rgb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetConsoleCursorInfo</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g_cci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_rs</name> <operator>||</operator> <name>exiting</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>coord</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coord</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <operator>(</operator><name>SHORT</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><name>p_rs</name></expr> ?</condition><then> <expr><name><name>cb</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name></expr> </then><else>: <expr><operator>(</operator><name>Rows</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FillConsoleOutputCharacter</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>,

<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name></expr></argument>, <argument><expr><name>coord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwDummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exiting</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_rs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coord</name><operator>.</operator><name>Y</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_rs</name> <operator>&amp;&amp;</operator> <name>USE_VTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vtp_printf</name><argument_list>(<argument><expr><literal type="string">"\033[?1049l"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>g_fTermcapMode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>mch_write</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>s</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>len</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>clear_chars</name><parameter_list>(

<parameter><decl><type><name>COORD</name></type> <name>coord</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDummy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FillConsoleOutputCharacter</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>coord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwDummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>USE_VTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FillConsoleOutputAttribute</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>g_attrCurrent</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>coord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwDummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>set_console_color_rgb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><name><name>coord</name><operator>.</operator><name>X</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>coord</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vtp_printf</name><argument_list>(<argument><expr><literal type="string">"\033[%dX"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>clear_screen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>g_coord</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>g_coord</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>USE_VTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_chars</name><argument_list>(<argument><expr><name>g_coord</name></expr></argument>, <argument><expr><name>Rows</name> <operator>*</operator> <name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>set_console_color_rgb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vtp_printf</name><argument_list>(<argument><expr><literal type="string">"\033[2J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>clear_to_end_of_display</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>COORD</name></type> <name>save</name> <init>= <expr><name>g_coord</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>USE_VTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_chars</name><argument_list>(<argument><expr><name>g_coord</name></expr></argument>, <argument><expr><operator>(</operator><name>Rows</name> <operator>-</operator> <name><name>g_coord</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>

<operator>*</operator> <name>Columns</name> <operator>+</operator> <operator>(</operator><name>Columns</name> <operator>-</operator> <name><name>g_coord</name><operator>.</operator><name>X</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>set_console_color_rgb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><name><name>g_coord</name><operator>.</operator><name>X</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>g_coord</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vtp_printf</name><argument_list>(<argument><expr><literal type="string">"\033[0J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><name><name>save</name><operator>.</operator><name>X</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>save</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g_coord</name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>clear_to_end_of_line</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>COORD</name></type> <name>save</name> <init>= <expr><name>g_coord</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>USE_VTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_chars</name><argument_list>(<argument><expr><name>g_coord</name></expr></argument>, <argument><expr><name>Columns</name> <operator>-</operator> <name><name>g_coord</name><operator>.</operator><name>X</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>set_console_color_rgb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><name><name>g_coord</name><operator>.</operator><name>X</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>g_coord</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vtp_printf</name><argument_list>(<argument><expr><literal type="string">"\033[0K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><name><name>save</name><operator>.</operator><name>X</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>save</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g_coord</name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>scroll</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>cLines</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>COORD</name></type> <name>oldcoord</name> <init>= <expr><name>g_coord</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Left</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Top</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delete_lines</name><argument_list>(<argument><expr><name>cLines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g_coord</name> <operator>=</operator> <name>oldcoord</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_scroll_region</name><parameter_list>(

<parameter><decl><type><name>unsigned</name></type> <name>left</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>top</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>right</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>bottom</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&gt;=</operator> <name>right</name>

<operator>||</operator> <name>top</name> <operator>&gt;=</operator> <name>bottom</name>

<operator>||</operator> <name>right</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal>

<operator>||</operator> <name>bottom</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Left</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Top</name></name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Right</name></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Bottom</name></name> <operator>=</operator> <name>bottom</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_scroll_region_tb</name><parameter_list>(

<parameter><decl><type><name>unsigned</name></type> <name>top</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>bottom</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&gt;=</operator> <name>bottom</name> <operator>||</operator> <name>bottom</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Top</name></name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Bottom</name></name> <operator>=</operator> <name>bottom</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_scroll_region_lr</name><parameter_list>(

<parameter><decl><type><name>unsigned</name></type> <name>left</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>right</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&gt;=</operator> <name>right</name> <operator>||</operator> <name>right</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Left</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Right</name></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>insert_lines</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>cLines</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SMALL_RECT</name></type> <name>source</name></decl>, <decl><type ref="prev"/><name>clip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COORD</name></type> <name>dest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CHAR_INFO</name></type> <name>fill</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Left</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Top</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>g_srScrollRegion</name><operator>.</operator><name>Left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>g_coord</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <name>cLines</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>.</operator><name>Left</name></name> <operator>=</operator> <name><name>g_srScrollRegion</name><operator>.</operator><name>Left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>.</operator><name>Top</name></name> <operator>=</operator> <name><name>g_coord</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>.</operator><name>Right</name></name> <operator>=</operator> <name><name>g_srScrollRegion</name><operator>.</operator><name>Right</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>.</operator><name>Bottom</name></name> <operator>=</operator> <name><name>g_srScrollRegion</name><operator>.</operator><name>Bottom</name></name> <operator>-</operator> <name>cLines</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clip</name><operator>.</operator><name>Left</name></name> <operator>=</operator> <name><name>g_srScrollRegion</name><operator>.</operator><name>Left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clip</name><operator>.</operator><name>Top</name></name> <operator>=</operator> <name><name>g_coord</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clip</name><operator>.</operator><name>Right</name></name> <operator>=</operator> <name><name>g_srScrollRegion</name><operator>.</operator><name>Right</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clip</name><operator>.</operator><name>Bottom</name></name> <operator>=</operator> <name><name>g_srScrollRegion</name><operator>.</operator><name>Bottom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fill</name><operator>.</operator><name>Char</name><operator>.</operator><name>AsciiChar</name></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>USE_VTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fill</name><operator>.</operator><name>Attributes</name></name> <operator>=</operator> <name>g_attrCurrent</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fill</name><operator>.</operator><name>Attributes</name></name> <operator>=</operator> <name>g_attrDefault</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>set_console_color_rgb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ScrollConsoleScreenBuffer</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clip</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>.</operator><name>Bottom</name></name> <operator>&lt;</operator> <name><name>dest</name><operator>.</operator><name>Y</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>COORD</name></type> <name>coord</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>coord</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>Left</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>clip</name><operator>.</operator><name>Top</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dest</name><operator>.</operator><name>Y</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>coord</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_chars</name><argument_list>(<argument><expr><name>coord</name></expr></argument>, <argument><expr><name><name>source</name><operator>.</operator><name>Right</name></name> <operator>-</operator> <name><name>source</name><operator>.</operator><name>Left</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>delete_lines</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>cLines</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SMALL_RECT</name></type> <name>source</name></decl>, <decl><type ref="prev"/><name>clip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COORD</name></type> <name>dest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CHAR_INFO</name></type> <name>fill</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Left</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Top</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>g_srScrollRegion</name><operator>.</operator><name>Left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>g_coord</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>.</operator><name>Left</name></name> <operator>=</operator> <name><name>g_srScrollRegion</name><operator>.</operator><name>Left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>.</operator><name>Top</name></name> <operator>=</operator> <name><name>g_coord</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <name>cLines</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>.</operator><name>Right</name></name> <operator>=</operator> <name><name>g_srScrollRegion</name><operator>.</operator><name>Right</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>source</name><operator>.</operator><name>Bottom</name></name> <operator>=</operator> <name><name>g_srScrollRegion</name><operator>.</operator><name>Bottom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clip</name><operator>.</operator><name>Left</name></name> <operator>=</operator> <name><name>g_srScrollRegion</name><operator>.</operator><name>Left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clip</name><operator>.</operator><name>Top</name></name> <operator>=</operator> <name><name>g_coord</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clip</name><operator>.</operator><name>Right</name></name> <operator>=</operator> <name><name>g_srScrollRegion</name><operator>.</operator><name>Right</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clip</name><operator>.</operator><name>Bottom</name></name> <operator>=</operator> <name><name>g_srScrollRegion</name><operator>.</operator><name>Bottom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fill</name><operator>.</operator><name>Char</name><operator>.</operator><name>AsciiChar</name></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>USE_VTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fill</name><operator>.</operator><name>Attributes</name></name> <operator>=</operator> <name>g_attrCurrent</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fill</name><operator>.</operator><name>Attributes</name></name> <operator>=</operator> <name>g_attrDefault</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>set_console_color_rgb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ScrollConsoleScreenBuffer</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clip</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nb</name> <operator>=</operator> <name><name>dest</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <operator>(</operator><name><name>source</name><operator>.</operator><name>Bottom</name></name> <operator>-</operator> <name><name>source</name><operator>.</operator><name>Top</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb</name> <operator>&lt;</operator> <name><name>source</name><operator>.</operator><name>Top</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>COORD</name></type> <name>coord</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>coord</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>Left</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nb</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>clip</name><operator>.</operator><name>Bottom</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>coord</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_chars</name><argument_list>(<argument><expr><name>coord</name></expr></argument>, <argument><expr><name><name>source</name><operator>.</operator><name>Right</name></name> <operator>-</operator> <name><name>source</name><operator>.</operator><name>Left</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gotoxy</name><parameter_list>(

<parameter><decl><type><name>unsigned</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><macro><name>x</name></macro> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>x</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>Columns</name> <operator>||</operator> <macro><name>y</name></macro> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>y</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>Rows</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>USE_VTP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>g_coord</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>g_coord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g_coord</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g_coord</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>g_coord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vtp_printf</name><argument_list>(<argument><expr><literal type="string">"\033[%d;%dH"</literal></expr></argument>, <argument><expr><name><name>g_coord</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vtp_printf</name><argument_list>(<argument><expr><literal type="string">"\033[%d;%dH"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g_coord</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g_coord</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>textattr</name><parameter_list>(<parameter><decl><type><name>WORD</name></type> <name>wAttr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>g_attrCurrent</name> <operator>=</operator> <name>wAttr</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetConsoleTextAttribute</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>wAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>textcolor</name><parameter_list>(<parameter><decl><type><name>WORD</name></type> <name>wAttr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>g_attrCurrent</name> <operator>=</operator> <operator>(</operator><name>g_attrCurrent</name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>wAttr</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>USE_VTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetConsoleTextAttribute</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>g_attrCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vtp_sgr_bulk</name><argument_list>(<argument><expr><name>wAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>textbackground</name><parameter_list>(<parameter><decl><type><name>WORD</name></type> <name>wAttr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>g_attrCurrent</name> <operator>=</operator> <operator>(</operator><name>g_attrCurrent</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>wAttr</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>USE_VTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetConsoleTextAttribute</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>g_attrCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vtp_sgr_bulk</name><argument_list>(<argument><expr><name>wAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>normvideo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>USE_VTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>textattr</name><argument_list>(<argument><expr><name>g_attrDefault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vtp_sgr_bulk</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>WORD</name></type> <name>g_attrPreStandout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>standout</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>g_attrPreStandout</name> <operator>=</operator> <name>g_attrCurrent</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>textattr</name><argument_list>(<argument><expr><operator>(</operator><name>WORD</name><operator>)</operator> <operator>(</operator><name>g_attrCurrent</name><operator>|</operator><name>FOREGROUND_INTENSITY</name><operator>|</operator><name>BACKGROUND_INTENSITY</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>standend</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>g_attrPreStandout</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>textattr</name><argument_list>(<argument><expr><name>g_attrPreStandout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>g_attrPreStandout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>mch_set_normal_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cterm_normal_fg_color</name> <operator>=</operator> <operator>(</operator><name>g_attrDefault</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cterm_normal_bg_color</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>g_attrDefault</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>!</operator><name>p_tgc</name> <operator>&amp;&amp;</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>T_ME</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ESC</name> <operator>&amp;&amp;</operator> <name><name>T_ME</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>T_ME</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'m'</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cterm_normal_fg_color</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cterm_normal_bg_color</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cterm_normal_fg_gui_color</name> <operator>=</operator> <name>INVALCOLOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cterm_normal_bg_gui_color</name> <operator>=</operator> <name>INVALCOLOR</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>visual_bell</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>COORD</name></type> <name>coordOrigin</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>attrFlash</name> <init>= <expr><operator>~</operator><name>g_attrCurrent</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwDummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPWORD</name></type> <name>oldattrs</name> <init>= <expr><call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>WORD</name></expr></argument>, <argument><expr><name>Rows</name> <operator>*</operator> <name>Columns</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>oldattrs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ReadConsoleOutputAttribute</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>oldattrs</name></expr></argument>, <argument><expr><name>Rows</name> <operator>*</operator> <name>Columns</name></expr></argument>,

<argument><expr><name>coordOrigin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwDummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FillConsoleOutputAttribute</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>attrFlash</name></expr></argument>, <argument><expr><name>Rows</name> <operator>*</operator> <name>Columns</name></expr></argument>,

<argument><expr><name>coordOrigin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwDummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>USE_VTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WriteConsoleOutputAttribute</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>oldattrs</name></expr></argument>, <argument><expr><name>Rows</name> <operator>*</operator> <name>Columns</name></expr></argument>,

<argument><expr><name>coordOrigin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwDummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>oldattrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>cursor_visible</name><parameter_list>(<parameter><decl><type><name>BOOL</name></type> <name>fVisible</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>s_cursor_visible</name> <operator>=</operator> <name>fVisible</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_CURSOR_SHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mch_update_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DWORD</name></type>

<name>write_chars</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pchBuf</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>cbToWrite</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>COORD</name></type> <name>coord</name> <init>= <expr><name>g_coord</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>written</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>cchwritten</name></decl>, <decl><type ref="prev"/><name>cells</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>unicodebuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>unibuflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cp</name> <init>= <expr><ternary><condition><expr><name>enc_utf8</name></expr> ?</condition><then> <expr><name>CP_UTF8</name></expr> </then><else>: <expr><name>enc_codepage</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator><name>pchBuf</name></expr></argument>, <argument><expr><name>cbToWrite</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>unicodebuf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>length</name> <operator>&gt;</operator> <name>unibuflen</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>unicodebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>unicodebuf</name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>unibuflen</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator><name>pchBuf</name></expr></argument>, <argument><expr><name>cbToWrite</name></expr></argument>,

<argument><expr><name>unicodebuf</name></expr></argument>, <argument><expr><name>unibuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cells</name> <operator>=</operator> <call><name>mb_string2cells</name><argument_list>(<argument><expr><name>pchBuf</name></expr></argument>, <argument><expr><name>cbToWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>USE_VTP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FillConsoleOutputAttribute</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>g_attrCurrent</name></expr></argument>, <argument><expr><name>cells</name></expr></argument>,

<argument><expr><name>coord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WriteConsoleOutputCharacterW</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>unicodebuf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,

<argument><expr><name>coord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cchwritten</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name>cchwritten</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>cchwritten</name> <operator>==</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cchwritten</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>WriteConsoleW</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>unicodebuf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cchwritten</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>cchwritten</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cchwritten</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cchwritten</name> <operator>==</operator> <name>length</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>written</name> <operator>=</operator> <name>cbToWrite</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g_coord</name><operator>.</operator><name>X</name></name> <operator>+=</operator> <operator>(</operator><name>SHORT</name><operator>)</operator><name>cells</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>pchBuf</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>cchwritten</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MB_CPTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>written</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>pchBuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g_coord</name><operator>.</operator><name>X</name></name> <operator>+=</operator> <operator>(</operator><name>SHORT</name><operator>)</operator><call><name>mb_string2cells</name><argument_list>(<argument><expr><name>pchBuf</name></expr></argument>, <argument><expr><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name><name>g_coord</name><operator>.</operator><name>X</name></name> <operator>&gt;</operator> <name><name>g_srScrollRegion</name><operator>.</operator><name>Right</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>g_coord</name><operator>.</operator><name>X</name></name> <operator>-=</operator> <operator>(</operator><name>SHORT</name><operator>)</operator> <name>Columns</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g_coord</name><operator>.</operator><name>Y</name></name> <operator>&lt;</operator> <name><name>g_srScrollRegion</name><operator>.</operator><name>Bottom</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>g_coord</name><operator>.</operator><name>Y</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><name><name>g_coord</name><operator>.</operator><name>X</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>g_coord</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>written</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>mch_write</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>s</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>term_console</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>prefix</name> <init>= <expr><operator>(</operator><name>DWORD</name><operator>)</operator><call><name>strcspn</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"\n\r\b\a\033"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_wd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>WaitForChar</name><argument_list>(<argument><expr><name>p_wd</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>nWritten</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nWritten</name> <operator>=</operator> <call><name>write_chars</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fdDump</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nWritten</name></expr></argument>, <argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"&lt;\n"</literal></expr></argument>, <argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <operator>(</operator><name>nWritten</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>nWritten</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>g_coord</name><operator>.</operator><name>Y</name></name> <operator>==</operator> <name><name>g_srScrollRegion</name><operator>.</operator><name>Bottom</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>scroll</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Left</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Bottom</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Left</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>g_coord</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fdDump</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\\n\n"</literal></expr></argument>, <argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Left</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>g_coord</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fdDump</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\\r\n"</literal></expr></argument>, <argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\b'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>g_coord</name><operator>.</operator><name>X</name></name> <operator>&gt;</operator> <name><name>g_srScrollRegion</name><operator>.</operator><name>Left</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>g_coord</name><operator>.</operator><name>X</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>g_coord</name><operator>.</operator><name>Y</name></name> <operator>&gt;</operator> <name><name>g_srScrollRegion</name><operator>.</operator><name>Top</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>g_coord</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>g_srScrollRegion</name><operator>.</operator><name>Right</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g_coord</name><operator>.</operator><name>Y</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><name><name>g_coord</name><operator>.</operator><name>X</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>g_coord</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fdDump</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\\b\n"</literal></expr></argument>, <argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\a'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MessageBeep</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fdDump</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\\a\n"</literal></expr></argument>, <argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ESC</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;=</operator> <literal type="number">3</literal><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>old_s</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>arg1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>arg2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>args</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>

<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>argc</name> <operator>&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>s</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>s</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>arg1</name> <operator>=</operator> <name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg2</name> <operator>=</operator> <name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>normvideo</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>USE_VTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>textcolor</name><argument_list>(<argument><expr><operator>(</operator><name>WORD</name><operator>)</operator> <name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>textattr</name><argument_list>(<argument><expr><operator>(</operator><name>WORD</name><operator>)</operator> <name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>USE_VTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vtp_sgr_bulks</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'H'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>set_scroll_region</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>arg1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>arg2</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>set_scroll_region_tb</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>set_scroll_region_lr</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'A'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><name><name>g_coord</name><operator>.</operator><name>X</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><call><name>max</name><argument_list>(<argument><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Top</name></name></expr></argument>, <argument><expr><name><name>g_coord</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <name>arg1</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>textbackground</name><argument_list>(<argument><expr><operator>(</operator><name>WORD</name><operator>)</operator> <name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><call><name>min</name><argument_list>(<argument><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Right</name></name></expr></argument>, <argument><expr><name><name>g_coord</name><operator>.</operator><name>X</name></name> <operator>+</operator> <name>arg1</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>g_coord</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'f'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>textcolor</name><argument_list>(<argument><expr><operator>(</operator><name>WORD</name><operator>)</operator> <name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'H'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>insert_lines</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>delete_lines</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'A'</literal></expr>:</case>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><name><name>g_coord</name><operator>.</operator><name>X</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><call><name>max</name><argument_list>(<argument><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Top</name></name></expr></argument>, <argument><expr><name><name>g_coord</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>got3</name>;</goto>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<expr_stmt><expr><call><name>visual_bell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>got3</name>;</goto>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><call><name>min</name><argument_list>(<argument><expr><name><name>g_srScrollRegion</name><operator>.</operator><name>Right</name></name></expr></argument>, <argument><expr><name><name>g_coord</name><operator>.</operator><name>X</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>g_coord</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>got3</name>;</goto>

<case>case <expr><literal type="char">'E'</literal></expr>:</case>

<expr_stmt><expr><call><name>termcap_mode_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>got3</name>;</goto>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>

<expr_stmt><expr><call><name>standout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>got3</name>;</goto>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<expr_stmt><expr><call><name>standend</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>got3</name>;</goto>

<case>case <expr><literal type="char">'H'</literal></expr>:</case>

<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>got3</name>;</goto>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><call><name>clear_to_end_of_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>got3</name>;</goto>

<case>case <expr><literal type="char">'J'</literal></expr>:</case>

<expr_stmt><expr><call><name>clear_screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>got3</name>;</goto>

<case>case <expr><literal type="char">'K'</literal></expr>:</case>

<expr_stmt><expr><call><name>clear_to_end_of_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>got3</name>;</goto>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>

<expr_stmt><expr><call><name>insert_lines</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>got3</name>;</goto>

<case>case <expr><literal type="char">'M'</literal></expr>:</case>

<expr_stmt><expr><call><name>delete_lines</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>got3</name>;</goto>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<expr_stmt><expr><call><name>termcap_mode_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>got3</name>;</goto>

<case>case <expr><literal type="char">'V'</literal></expr>:</case>

<expr_stmt><expr><call><name>cursor_visible</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>got3</name>;</goto>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>

<expr_stmt><expr><call><name>cursor_visible</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>got3</name>;</goto>

<label><name>got3</name>:</label>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fdDump</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"ESC | "</literal></expr></argument>, <argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>old_s</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>s</name> <operator>-</operator> <name>old_s</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>nWritten</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nWritten</name> <operator>=</operator> <call><name>write_chars</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fdDump</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nWritten</name></expr></argument>, <argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"&lt;\n"</literal></expr></argument>, <argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <operator>(</operator><name>nWritten</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>nWritten</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MCH_WRITE_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fdDump</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>fdDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type>

<name>mch_delay</name><parameter_list>(

<parameter><decl><type><name>long</name></type> <name>msec</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>ignoreinput</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>msec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>msec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ignoreinput</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MZSCHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>mzthreads_allowed</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>p_mzq</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>msec</name> <operator>&gt;</operator> <name>p_mzq</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>towait</name> <init>= <expr><name>p_mzq</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>msec</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mzvim_check_threads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msec</name> <operator>&lt;</operator> <name>towait</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>towait</name> <operator>=</operator> <name>msec</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>towait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msec</name> <operator>-=</operator> <name>towait</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>msec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WaitForChar</name><argument_list>(<argument><expr><name>msec</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_remove</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_isdir</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>mch_is_symbolic_link</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>mch_rmdir</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>win32_setattrs</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wn</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><call><name>DeleteFileW</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>mch_breakcheck</name><parameter_list>(<parameter><decl><type><name>int</name> <name>force</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>g_fCtrlCPressed</name> <operator>||</operator> <name>g_fCBrkPressed</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ctrl_break_was_pressed</name> <operator>=</operator> <name>g_fCBrkPressed</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g_fCtrlCPressed</name> <operator>=</operator> <name>g_fCBrkPressed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINNT_RESERVE_BYTES</name></cpp:macro> <cpp:value>(256*1024*1024)</cpp:value></cpp:define>

<function><type><name>long_u</name></type>

<name>mch_total_mem</name><parameter_list>(<parameter><decl><type><name>int</name> <name>special</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MEMORYSTATUSEX</name></type> <name>ms</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ms</name><operator>.</operator><name>dwLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MEMORYSTATUSEX</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GlobalMemoryStatusEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>.</operator><name>ullAvailVirtual</name></name> <operator>&lt;</operator> <name><name>ms</name><operator>.</operator><name>ullTotalPhys</name></name></expr>)</condition>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>long_u</name><operator>)</operator><operator>(</operator><name><name>ms</name><operator>.</operator><name>ullAvailVirtual</name></name> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>.</operator><name>ullTotalPhys</name></name> <operator>&lt;=</operator> <name>WINNT_RESERVE_BYTES</name></expr>)</condition>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>long_u</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>ms</name><operator>.</operator><name>ullTotalPhys</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>long_u</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>ms</name><operator>.</operator><name>ullTotalPhys</name></name> <operator>-</operator> <name>WINNT_RESERVE_BYTES</name><operator>)</operator> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_wrename</name><parameter_list>(<parameter><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wold</name></decl></parameter>, <parameter><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wnew</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>szTempFile</name><index>[<expr><name>_MAX_PATH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>szNewPath</name><index>[<expr><name>_MAX_PATH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>wold</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>wold</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wold</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>wold</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <name><name>wold</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>wold</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>wold</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>wold</name> <operator>+</operator> <name>i</name> <operator>-</operator> <name>p</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">8</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'~'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><call><name>MoveFileW</name><argument_list>(<argument><expr><name>wold</name></expr></argument>, <argument><expr><name>wnew</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetFullPathNameW</name><argument_list>(<argument><expr><name>wnew</name></expr></argument>, <argument><expr><name>_MAX_PATH</name></expr></argument>, <argument><expr><name>szNewPath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetTempFileNameW</name><argument_list>(<argument><expr><name>szNewPath</name></expr></argument>, <argument><expr><literal type="string">L"VIM"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>szTempFile</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DeleteFileW</name><argument_list>(<argument><expr><name>szTempFile</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MoveFileW</name><argument_list>(<argument><expr><name>wold</name></expr></argument>, <argument><expr><name>szTempFile</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hf</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><name>wold</name></expr></argument>, <argument><expr><name>GENERIC_WRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CREATE_NEW</name></expr></argument>,

<argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">5</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">6</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MoveFileW</name><argument_list>(<argument><expr><name>szTempFile</name></expr></argument>, <argument><expr><name>wnew</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>MoveFileW</name><argument_list>(<argument><expr><name>szTempFile</name></expr></argument>, <argument><expr><name>wold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">7</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DeleteFileW</name><argument_list>(<argument><expr><name>szTempFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DeleteFileW</name><argument_list>(<argument><expr><name>wold</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">8</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_rename</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pszOldFile</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pszNewFile</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wold</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wnew</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>wold</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>pszOldFile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wnew</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>pszNewFile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wold</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>wnew</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>mch_wrename</name><argument_list>(<argument><expr><name>wold</name></expr></argument>, <argument><expr><name>wnew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wnew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>default_shell</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="string">"cmd.exe"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_access</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hFile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wn</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_isdir</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>TempNameW</name><index>[<expr><name>_MAX_PATH</name> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name> <init>= <expr><literal type="string">L""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;</operator> <name>R_OK</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WIN32_FIND_DATAW</name></type> <name>d</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>_MAX_PATH</name> <operator>&amp;&amp;</operator> <name><name>wn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>TempNameW</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>wn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>TempNameW</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>TempNameW</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>TempNameW</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>TempNameW</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TempNameW</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hFile</name> <operator>=</operator> <call><name>FindFirstFileW</name><argument_list>(<argument><expr><name>TempNameW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hFile</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>getout</name>;</goto></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>FindClose</name><argument_list>(<argument><expr><name>hFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;</operator> <name>W_OK</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetTempFileNameW</name><argument_list>(<argument><expr><name>wn</name></expr></argument>, <argument><expr><literal type="string">L"VIM"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TempNameW</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>getout</name>;</goto></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DeleteFileW</name><argument_list>(<argument><expr><name>TempNameW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>share_mode</name> <init>= <expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>access_mode</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>p</name> <operator>&amp;</operator> <name>W_OK</name><operator>)</operator></expr> ?</condition><then> <expr><name>GENERIC_WRITE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>p</name> <operator>&amp;</operator> <name>R_OK</name><operator>)</operator></expr> ?</condition><then> <expr><name>GENERIC_READ</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hFile</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><name>wn</name></expr></argument>, <argument><expr><name>access_mode</name></expr></argument>, <argument><expr><name>share_mode</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hFile</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>getout</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<label><name>getout</name>:</label>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wn</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>_wopen</name><argument_list>(<argument><expr><name>wn</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>f</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>FILE</name> <modifier>*</modifier></type>

<name>mch_fopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:if>

<decl_stmt><decl><type><name>char</name></type> <name>newMode</name> <init>= <expr><name><name>mode</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>oldMode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_get_fmode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oldMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newMode</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_set_fmode</name><argument_list>(<argument><expr><name>_O_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>newMode</name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>_set_fmode</name><argument_list>(<argument><expr><name>_O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>wn</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wm</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>mode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wn</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>wm</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>_wfopen</name><argument_list>(<argument><expr><name>wn</name></expr></argument>, <argument><expr><name>wm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:if>

<expr_stmt><expr><call><name>_set_fmode</name><argument_list>(<argument><expr><name>oldMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>f</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>copy_substream</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>sh</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>substream</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hTo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>to_name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>to_name</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><call><name>wcslen</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>substream</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><name>to_name</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wcscat</name><argument_list>(<argument><expr><name>to_name</name></expr></argument>, <argument><expr><name>substream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hTo</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><name>to_name</name></expr></argument>, <argument><expr><name>GENERIC_WRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_ALWAYS</name></expr></argument>,

<argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hTo</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>done</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>todo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>readcnt</name></decl>, <decl><type ref="prev"/><name>written</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>done</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>done</name> <operator>+=</operator> <name>written</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <name>done</name><operator>)</operator> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>

</then><else>: <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <name>done</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BackupRead</name><argument_list>(<argument><expr><name>sh</name></expr></argument>, <argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>todo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readcnt</name></expr></argument>,

<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call>

<operator>||</operator> <name>readcnt</name> <operator>!=</operator> <name>todo</name>

<operator>||</operator> <operator>!</operator><call><name>WriteFile</name><argument_list>(<argument><expr><name>hTo</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>todo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>

<operator>||</operator> <name>written</name> <operator>!=</operator> <name>todo</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>to_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>copy_infostreams</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>fromw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>tow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>sh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WIN32_STREAM_ID</name></type> <name>sid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>headersize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>streamname</name><index>[<expr><name>_MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>readcount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>lo</name></decl>, <decl><type ref="prev"/><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fromw</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tow</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fromw</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tow</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>sh</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><name>fromw</name></expr></argument>, <argument><expr><name>GENERIC_READ</name></expr></argument>, <argument><expr><name>FILE_SHARE_READ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><name>FILE_FLAG_BACKUP_SEMANTICS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sh</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WIN32_STREAM_ID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>headersize</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sid</name><operator>.</operator><name>cStreamName</name></name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sid</name><operator>.</operator><name>dwStreamId</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BackupRead</name><argument_list>(<argument><expr><name>sh</name></expr></argument>, <argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator><operator>&amp;</operator><name>sid</name></expr></argument>, <argument><expr><name>headersize</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>readcount</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call>

<operator>||</operator> <name>readcount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sid</name><operator>.</operator><name>dwStreamNameSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BackupRead</name><argument_list>(<argument><expr><name>sh</name></expr></argument>, <argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator><name>streamname</name></expr></argument>,

<argument><expr><name><name>sid</name><operator>.</operator><name>dwStreamNameSize</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>readcount</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>readcount</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>streamname</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <call><name>wcsicmp</name><argument_list>(<argument><expr><name>streamname</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>,

<argument><expr><literal type="string">L":$DATA"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>streamname</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_substream</name><argument_list>(<argument><expr><name>sh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>tow</name></expr></argument>, <argument><expr><name>streamname</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>sid</name><operator>.</operator><name>Size</name><operator>.</operator><name>u</name><operator>.</operator><name>LowPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>BackupSeek</name><argument_list>(<argument><expr><name>sh</name></expr></argument>, <argument><expr><name><name>sid</name><operator>.</operator><name>Size</name><operator>.</operator><name>u</name><operator>.</operator><name>LowPart</name></name></expr></argument>, <argument><expr><name><name>sid</name><operator>.</operator><name>Size</name><operator>.</operator><name>u</name><operator>.</operator><name>HighPart</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>lo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>BackupRead</name><argument_list>(<argument><expr><name>sh</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>readcount</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fromw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_copy_file_attribute</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>copy_infostreams</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MYRESETSTKOFLW</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_STACK_WINNT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><name>int</name></type>

<name>myresetstkoflw</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>pStackPtr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>pGuardPage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>pStackBase</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>pLowestPossiblePage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MEMORY_BASIC_INFORMATION</name></type> <name>mbi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SYSTEM_INFO</name></type> <name>si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>nPageSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dummy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetSystemInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nPageSize</name> <operator>=</operator> <name><name>si</name><operator>.</operator><name>dwPageSize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pStackPtr</name> <operator>=</operator> <operator>(</operator><name>BYTE</name><operator>*</operator><operator>)</operator><call><name>_alloca</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VirtualQuery</name><argument_list>(<argument><expr><name>pStackPtr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mbi</name></expr></argument>, <argument><expr><sizeof>sizeof <name>mbi</name></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pStackBase</name> <operator>=</operator> <operator>(</operator><name>BYTE</name><operator>*</operator><operator>)</operator><name><name>mbi</name><operator>.</operator><name>AllocationBase</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pLowestPossiblePage</name> <operator>=</operator> <name>pStackBase</name> <operator>+</operator> <name>MIN_STACK_WINNT</name> <operator>*</operator> <name>nPageSize</name></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>pBlock</name> <init>= <expr><name>pStackBase</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>VirtualQuery</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mbi</name></expr></argument>, <argument><expr><sizeof>sizeof <name>mbi</name></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pBlock</name> <operator>+=</operator> <name><name>mbi</name><operator>.</operator><name>RegionSize</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mbi</name><operator>.</operator><name>State</name></name> <operator>&amp;</operator> <name>MEM_COMMIT</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>mbi</name><operator>.</operator><name>Protect</name></name> <operator>&amp;</operator> <name>PAGE_GUARD</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long_u</name><operator>)</operator><operator>(</operator><name><name>mbi</name><operator>.</operator><name>BaseAddress</name></name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>long_u</name><operator>)</operator><name>pLowestPossiblePage</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pGuardPage</name> <operator>=</operator> <name>pLowestPossiblePage</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pGuardPage</name> <operator>=</operator> <operator>(</operator><name>BYTE</name><operator>*</operator><operator>)</operator><name><name>mbi</name><operator>.</operator><name>BaseAddress</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VirtualAlloc</name><argument_list>(<argument><expr><name>pGuardPage</name></expr></argument>, <argument><expr><name>nPageSize</name></expr></argument>, <argument><expr><name>MEM_COMMIT</name></expr></argument>, <argument><expr><name>PAGE_READWRITE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VirtualProtect</name><argument_list>(<argument><expr><name>pGuardPage</name></expr></argument>, <argument><expr><name>nPageSize</name></expr></argument>, <argument><expr><name>PAGE_READWRITE</name> <operator>|</operator> <name>PAGE_GUARD</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nArgsW</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>LPWSTR</name> <modifier>*</modifier></type><name>ArglistW</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>global_argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>global_argv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>used_file_argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>used_file_indexes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>used_file_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>used_file_literal</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>used_file_full_path</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>used_file_diff_mode</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>used_alist_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>

<name>get_cmd_argsW</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>argvp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free_cmd_argsW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ArglistW</name> <operator>=</operator> <call><name>CommandLineToArgvW</name><argument_list>(<argument><expr><call><name>GetCommandLineW</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>nArgsW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ArglistW</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>nArgsW</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <name>nArgsW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>WideCharToMultiByte_alloc</name><argument_list>(<argument><expr><call><name>GetACP</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>ArglistW</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>wcslen</name><argument_list>(<argument><expr><name><name>ArglistW</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name>LPSTR</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>global_argc</name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>global_argv</name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>used_file_indexes</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>used_file_indexes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>used_file_indexes</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>argc</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argvp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>argvp</name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>argc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>free_cmd_argsW</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ArglistW</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GlobalFree</name><argument_list>(<argument><expr><name>ArglistW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ArglistW</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>used_file_arg</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>literal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>full_path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>diff_mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>used_file_indexes</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>used_file_argc</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>global_argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>global_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>used_file_argc</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>used_file_indexes</name><index>[<expr><name>used_file_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>used_file_literal</name> <operator>=</operator> <name>literal</name></expr>;</expr_stmt>

<expr_stmt><expr><name>used_file_full_path</name> <operator>=</operator> <name>full_path</name></expr>;</expr_stmt>

<expr_stmt><expr><name>used_file_diff_mode</name> <operator>=</operator> <name>diff_mode</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>set_alist_count</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>used_alist_count</name> <operator>=</operator> <name>GARGCOUNT</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>fix_arg_enc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>fnum_list</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>global_argc</name> <operator>!=</operator> <name>nArgsW</name>

<operator>||</operator> <name>ArglistW</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>used_file_indexes</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>used_file_count</name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name>used_alist_count</name> <operator>!=</operator> <name>GARGCOUNT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fnum_list</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>GARGCOUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fnum_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GARGCOUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fnum_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>GARGLIST</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ae_fnum</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>alist_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>global_alist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global_alist</name><operator>.</operator><name>al_ga</name></name></expr></argument>, <argument><expr><name>used_file_count</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>used_file_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>used_file_indexes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>utf16_to_enc</name><argument_list>(<argument><expr><name><name>ArglistW</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>literal</name> <init>= <expr><name>used_file_literal</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>used_file_diff_mode</name> <operator>&amp;&amp;</operator> <call><name>mch_isdir</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>GARGCOUNT</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>mch_isdir</name><argument_list>(<argument><expr><call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GARGLIST</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>concat_fnames</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>gettail</name><argument_list>(<argument><expr><call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GARGLIST</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>used_file_literal</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>buf_set_name</name><argument_list>(<argument><expr><name><name>fnum_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>literal</name> <operator>==</operator> <name>FALSE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'`'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'`'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>literal</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>alist_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>global_alist</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><ternary><condition><expr><name>literal</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>used_file_literal</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">":let SaVe_ISF = &amp;isf|set isf+=(,)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">":let SaVe_WIG = &amp;wig|set wig="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>alist_expand</name><argument_list>(<argument><expr><name>fnum_list</name></expr></argument>, <argument><expr><name>used_alist_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">":let &amp;isf = SaVe_ISF|unlet SaVe_ISF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">":let &amp;wig = SaVe_WIG|unlet SaVe_WIG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">":rewind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>GARGCOUNT</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>used_file_full_path</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vim_chdirfile</name><argument_list>(<argument><expr><call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GARGLIST</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"drop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_alist_count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>mch_setenv</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>x</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>envbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>envbuf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>envbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>envbuf</name></expr></argument>, <argument><expr><literal type="string">"%s=%s"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><name>envbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>envbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_wputenv</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>libintl_wputenv</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>libintl_wputenv</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTP_FIRST_SUPPORT_BUILD</name></cpp:macro> <cpp:value>MAKE_VER(10, 0, 15063)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONPTY_FIRST_SUPPORT_BUILD</name></cpp:macro> <cpp:value>MAKE_VER(10, 0, 17763)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONPTY_1903_BUILD</name></cpp:macro> <cpp:value>MAKE_VER(10, 0, 18362)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONPTY_1909_BUILD</name></cpp:macro> <cpp:value>MAKE_VER(10, 0, 18363)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONPTY_INSIDER_BUILD</name></cpp:macro> <cpp:value>MAKE_VER(10, 0, 18995)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONPTY_STABLE_BUILD</name></cpp:macro> <cpp:value>MAKE_VER(10, 0, 32767)</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vtp_flag_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ver</name> <init>= <expr><call><name>get_build_number</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>DWORD</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>out</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtp_working</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ver</name> <operator>&gt;=</operator> <name>VTP_FIRST_SUPPORT_BUILD</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mode</name> <operator>|=</operator> <operator>(</operator><name>ENABLE_PROCESSED_OUTPUT</name> <operator>|</operator> <name>ENABLE_VIRTUAL_TERMINAL_PROCESSING</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vtp_working</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&gt;=</operator> <name>CONPTY_FIRST_SUPPORT_BUILD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>conpty_working</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&gt;=</operator> <name>CONPTY_STABLE_BUILD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>conpty_stable</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&lt;=</operator> <name>CONPTY_INSIDER_BUILD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>conpty_type</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&lt;=</operator> <name>CONPTY_1909_BUILD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>conpty_type</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&lt;=</operator> <name>CONPTY_1903_BUILD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>conpty_type</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&lt;</operator> <name>CONPTY_FIRST_SUPPORT_BUILD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>conpty_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vtp_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>hKerneldll</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DYN_CONSOLE_SCREEN_BUFFER_INFOEX</name></type> <name>csbi</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>COLORREF</name></type> <name>fg</name></decl>, <decl><type ref="prev"/><name>bg</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>hKerneldll</name> <operator>=</operator> <call><name>GetModuleHandle</name><argument_list>(<argument><expr><literal type="string">"kernel32.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hKerneldll</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pGetConsoleScreenBufferInfoEx</name> <operator>=</operator>

<operator>(</operator><name>PfnGetConsoleScreenBufferInfoEx</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(

<argument><expr><name>hKerneldll</name></expr></argument>, <argument><expr><literal type="string">"GetConsoleScreenBufferInfoEx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pSetConsoleScreenBufferInfoEx</name> <operator>=</operator>

<operator>(</operator><name>PfnSetConsoleScreenBufferInfoEx</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(

<argument><expr><name>hKerneldll</name></expr></argument>, <argument><expr><literal type="string">"SetConsoleScreenBufferInfoEx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pGetConsoleScreenBufferInfoEx</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name>pSetConsoleScreenBufferInfoEx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>has_csbiex</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>csbi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_csbiex</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pGetConsoleScreenBufferInfoEx</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>save_console_bg_rgb</name> <operator>=</operator> <operator>(</operator><name>guicolor_T</name><operator>)</operator><name><name>csbi</name><operator>.</operator><name>ColorTable</name><index>[<expr><name>g_color_index_bg</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_console_fg_rgb</name> <operator>=</operator> <operator>(</operator><name>guicolor_T</name><operator>)</operator><name><name>csbi</name><operator>.</operator><name>ColorTable</name><index>[<expr><name>g_color_index_fg</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>store_console_bg_rgb</name> <operator>=</operator> <name>save_console_bg_rgb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>store_console_fg_rgb</name> <operator>=</operator> <name>save_console_fg_rgb</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <operator>(</operator><name>COLORREF</name><operator>)</operator><name><name>csbi</name><operator>.</operator><name>ColorTable</name><index>[<expr><name>g_color_index_bg</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fg</name> <operator>=</operator> <operator>(</operator><name>COLORREF</name><operator>)</operator><name><name>csbi</name><operator>.</operator><name>ColorTable</name><index>[<expr><name>g_color_index_fg</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bg</name> <operator>=</operator> <operator>(</operator><call><name>GetRValue</name><argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><call><name>GetGValue</name><argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <call><name>GetBValue</name><argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fg</name> <operator>=</operator> <operator>(</operator><call><name>GetRValue</name><argument_list>(<argument><expr><name>fg</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><call><name>GetGValue</name><argument_list>(<argument><expr><name>fg</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <call><name>GetBValue</name><argument_list>(<argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>default_console_color_bg</name> <operator>=</operator> <name>bg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>default_console_color_fg</name> <operator>=</operator> <name>fg</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>set_console_color_rgb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vtp_exit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>restore_console_color_rgb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>vtp_printf</name><parameter_list>(

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,

<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_vsnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>format</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WriteConsoleA</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vtp_sgr_bulk</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vtp_sgr_bulks</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>vtp_sgr_bulks</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>args</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\033'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">';'</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'m'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vtp_printf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>

<name>ctermtoxterm</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>cterm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cterm_color2rgb</name><argument_list>(<argument><expr><name>cterm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>int</name><operator>)</operator><name>b</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_console_color_rgb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>DYN_CONSOLE_SCREEN_BUFFER_INFOEX</name></type> <name>csbi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guicolor_T</name></type> <name>fg</name></decl>, <decl><type ref="prev"/><name>bg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctermfg</name></decl>, <decl><type ref="prev"/><name>ctermbg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>USE_VTP</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>get_default_console_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctermfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctermbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fg</name> <operator>=</operator> <operator>(</operator><call><name>GetRValue</name><argument_list>(<argument><expr><name>fg</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><call><name>GetGValue</name><argument_list>(<argument><expr><name>fg</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <call><name>GetBValue</name><argument_list>(<argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bg</name> <operator>=</operator> <operator>(</operator><call><name>GetRValue</name><argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><call><name>GetGValue</name><argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <call><name>GetBValue</name><argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>csbi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_csbiex</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pGetConsoleScreenBufferInfoEx</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>csbi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>store_console_bg_rgb</name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>ColorTable</name><index>[<expr><name>g_color_index_bg</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>store_console_fg_rgb</name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>ColorTable</name><index>[<expr><name>g_color_index_fg</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>ColorTable</name><index>[<expr><name>g_color_index_bg</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>COLORREF</name><operator>)</operator><name>bg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>ColorTable</name><index>[<expr><name>g_color_index_fg</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>COLORREF</name><operator>)</operator><name>fg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_csbiex</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pSetConsoleScreenBufferInfoEx</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>get_default_console_color</name><parameter_list>(

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cterm_fg</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cterm_bg</name></decl></parameter>,

<parameter><decl><type><name>guicolor_T</name> <modifier>*</modifier></type><name>gui_fg</name></decl></parameter>,

<parameter><decl><type><name>guicolor_T</name> <modifier>*</modifier></type><name>gui_bg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guicolor_T</name></type> <name>guifg</name> <init>= <expr><name>INVALCOLOR</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guicolor_T</name></type> <name>guibg</name> <init>= <expr><name>INVALCOLOR</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctermfg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctermbg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Normal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p_tgc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_id2colors</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guifg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guibg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>guifg</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ctermfg</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_id2cterm_bg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctermfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctermbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>guifg</name> <operator>=</operator> <ternary><condition><expr><name>ctermfg</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>ctermtoxterm</name><argument_list>(<argument><expr><name>ctermfg</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>default_console_color_fg</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>cterm_normal_fg_gui_color</name> <operator>=</operator> <name>guifg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ctermfg</name> <operator>=</operator> <ternary><condition><expr><name>ctermfg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>ctermfg</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>guibg</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ctermbg</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_id2cterm_bg</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctermfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctermbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>guibg</name> <operator>=</operator> <ternary><condition><expr><name>ctermbg</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>ctermtoxterm</name><argument_list>(<argument><expr><name>ctermbg</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>default_console_color_bg</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>cterm_normal_bg_gui_color</name> <operator>=</operator> <name>guibg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ctermbg</name> <operator>=</operator> <ternary><condition><expr><name>ctermbg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>ctermbg</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cterm_fg</name> <operator>=</operator> <name>ctermfg</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cterm_bg</name> <operator>=</operator> <name>ctermbg</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>gui_fg</name> <operator>=</operator> <name>guifg</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>gui_bg</name> <operator>=</operator> <name>guibg</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>reset_console_color_rgb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>DYN_CONSOLE_SCREEN_BUFFER_INFOEX</name></type> <name>csbi</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>csbi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_csbiex</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pGetConsoleScreenBufferInfoEx</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>csbi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>ColorTable</name><index>[<expr><name>g_color_index_bg</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>COLORREF</name><operator>)</operator><name>store_console_bg_rgb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>ColorTable</name><index>[<expr><name>g_color_index_fg</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>COLORREF</name><operator>)</operator><name>store_console_fg_rgb</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_csbiex</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pSetConsoleScreenBufferInfoEx</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>restore_console_color_rgb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>DYN_CONSOLE_SCREEN_BUFFER_INFOEX</name></type> <name>csbi</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>csbi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_csbiex</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pGetConsoleScreenBufferInfoEx</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>csbi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>ColorTable</name><index>[<expr><name>g_color_index_bg</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>COLORREF</name><operator>)</operator><name>save_console_bg_rgb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>ColorTable</name><index>[<expr><name>g_color_index_fg</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>COLORREF</name><operator>)</operator><name>save_console_fg_rgb</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_csbiex</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pSetConsoleScreenBufferInfoEx</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>control_console_color_rgb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>USE_VTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_console_color_rgb</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>reset_console_color_rgb</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>use_vtp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>USE_VTP</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>is_term_win32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>T_NAME</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>T_NAME</name></expr></argument>, <argument><expr><literal type="string">"win32"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>has_vtp_working</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>vtp_working</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>has_conpty_working</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>conpty_working</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>get_conpty_type</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>conpty_type</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>is_conpty_stable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>conpty_stable</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>resize_console_buf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>csbi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COORD</name></type> <name>coord</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SMALL_RECT</name></type> <name>newsize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>coord</name><operator>.</operator><name>X</name></name> <operator>=</operator> <call><name>SRWIDTH</name><argument_list>(<argument><expr><name><name>csbi</name><operator>.</operator><name>srWindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coord</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <call><name>SRHEIGHT</name><argument_list>(<argument><expr><name><name>csbi</name><operator>.</operator><name>srWindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetConsoleScreenBufferSize</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newsize</name><operator>.</operator><name>Left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newsize</name><operator>.</operator><name>Top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newsize</name><operator>.</operator><name>Right</name></name> <operator>=</operator> <name><name>coord</name><operator>.</operator><name>X</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newsize</name><operator>.</operator><name>Bottom</name></name> <operator>=</operator> <name><name>coord</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetConsoleWindowInfo</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetConsoleScreenBufferSize</name><argument_list>(<argument><expr><name>g_hConOut</name></expr></argument>, <argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
