<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\version.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Version</name> <init>= <expr><name>VIM_VERSION_SHORT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>mediumVersion</name> <init>= <expr><name>VIM_VERSION_MEDIUM</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DATE_TIME</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VAXC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>char</name></type> <name><name>longVersion</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>VIM_VERSION_LONG_DATE</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>__DATE__</name></expr></argument>)</argument_list></sizeof>

<operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>__TIME__</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>init_longVersion</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>longVersion</name></expr></argument>, <argument><expr><name>VIM_VERSION_LONG_DATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>longVersion</name></expr></argument>, <argument><expr><name>__DATE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>longVersion</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>longVersion</name></expr></argument>, <argument><expr><name>__TIME__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>longVersion</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>void</name></type>

<name>init_longVersion</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>date_time</name> <init>= <expr><name>__DATE__</name> <literal type="string">" "</literal> <name>__TIME__</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s (%s, compiled %s)"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>VIM_VERSION_LONG_ONLY</name></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>VIM_VERSION_DATE_ONLY</name></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>date_time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>longVersion</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>longVersion</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>longVersion</name> <operator>=</operator> <name>VIM_VERSION_LONG</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>longVersion</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>,

<argument><expr><name>VIM_VERSION_LONG_ONLY</name></expr></argument>, <argument><expr><name>VIM_VERSION_DATE_ONLY</name></expr></argument>, <argument><expr><name>date_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>longVersion</name> <init>= <expr><name>VIM_VERSION_LONG</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>init_longVersion</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>features</name><index>[]</index></name><operator>)</operator> <operator>=</operator>

<block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ACL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+acl"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-acl"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+ARP"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-ARP"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+arabic"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-arabic"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"+autocmd"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_AUTOCHDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+autochdir"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-autochdir"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_AUTOSERVERNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+autoservername"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-autoservername"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+balloon_eval"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-balloon_eval"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+balloon_eval_term"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-balloon_eval_term"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+browse"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-browse"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_BUILTIN_TCAPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"-builtin_terms"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOME_BUILTIN_TCAPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+builtin_terms"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALL_BUILTIN_TCAPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"++builtin_terms"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BYTEOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+byte_offset"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-byte_offset"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+channel"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-channel"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+cindent"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-cindent"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+clientserver"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-clientserver"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+clipboard"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-clipboard"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"+cmdline_compl"</literal></expr>,

<expr><literal type="string">"+cmdline_hist"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+cmdline_info"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-cmdline_info"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"+comments"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+conceal"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-conceal"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+cryptv"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-cryptv"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CSCOPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+cscope"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-cscope"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"+cursorbind"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURSOR_SHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+cursorshape"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-cursorshape"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CON_DIALOG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="string">"+dialog_con_gui"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CON_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="string">"+dialog_con"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="string">"+dialog_gui"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-dialog"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+diff"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-diff"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIGRAPHS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+digraphs"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-digraphs"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+directx"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-directx"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+dnd"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-dnd"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+ebcdic"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-ebcdic"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EMACS_TAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+emacs_tags"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-emacs_tags"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+eval"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-eval"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"+ex_extra"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+extra_search"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-extra_search"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"-farsi"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+file_in_path"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-file_in_path"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+find_in_path"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-find_in_path"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+float"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-float"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+folding"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-folding"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOOTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+footer"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-footer"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSTEM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="string">"+fork()"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GETTEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_GETTEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+gettext/dyn"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"+gettext"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-gettext"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"-hangul_input"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_ICONV</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+iconv/dyn"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"+iconv"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-iconv"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"+insert_expand"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+job"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-job"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JUMPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+jumplist"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-jumplist"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_KEYMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+keymap"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-keymap"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+lambda"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-lambda"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LANGMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+langmap"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-langmap"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LIBCALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+libcall"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-libcall"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+linebreak"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-linebreak"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+lispindent"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-lispindent"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"+listcmds"</literal></expr>,

<expr><literal type="string">"+localmap"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LUA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_LUA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+lua/dyn"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"+lua"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-lua"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+menu"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-menu"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+mksession"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-mksession"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"+modify_fname"</literal></expr>,

<expr><literal type="string">"+mouse"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+mouseshape"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-mouseshape"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_DEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+mouse_dec"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-mouse_dec"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_GPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+mouse_gpm"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-mouse_gpm"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_JSB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+mouse_jsbterm"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-mouse_jsbterm"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_NET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+mouse_netterm"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-mouse_netterm"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__QNX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_PTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+mouse_pterm"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-mouse_pterm"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="string">"+mouse_sgr"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYSMOUSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+mouse_sysmouse"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-mouse_sysmouse"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_URXVT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+mouse_urxvt"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-mouse_urxvt"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"+mouse_xterm"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+multi_byte_ime/dyn"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"+multi_byte_ime"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"+multi_byte"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+multi_lang"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-multi_lang"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MZSCHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_MZSCHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+mzscheme/dyn"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"+mzscheme"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-mzscheme"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+netbeans_intg"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-netbeans_intg"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"+num64"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_OLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+ole"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-ole"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+packages"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-packages"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+path_extra"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-path_extra"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PERL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PERL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+perl/dyn"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"+perl"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-perl"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PERSISTENT_UNDO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+persistent_undo"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-persistent_undo"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+popupwin"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-popupwin"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PRINTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_POSTSCRIPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+postscript"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-postscript"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"+printer"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-printer"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+profile"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-profile"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+python/dyn"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"+python"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-python"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+python3/dyn"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"+python3"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-python3"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+quickfix"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-quickfix"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+reltime"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-reltime"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+rightleft"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-rightleft"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+ruby/dyn"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"+ruby"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-ruby"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"+scrollbind"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+signs"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-signs"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SMARTINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+smartindent"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-smartindent"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SOUND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+sound"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-sound"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+spell"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-spell"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STARTUPTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+startuptime"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-startuptime"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+statusline"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-statusline"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"-sun_workshop"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+syntax"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-syntax"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSTEM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="string">"+system()"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TAG_BINS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+tag_binary"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-tag_binary"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"-tag_old_static"</literal></expr>,

<expr><literal type="string">"-tag_any_white"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TCL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_TCL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+tcl/dyn"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"+tcl"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-tcl"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+termguicolors"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-termguicolors"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+terminal"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-terminal"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+terminfo"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-terminfo"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+termresponse"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-termresponse"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEXTOBJ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+textobjects"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-textobjects"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+textprop"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-textprop"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+tgetent"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-tgetent"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+timers"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-timers"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+title"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-title"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+toolbar"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-toolbar"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"+user_commands"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+vartabs"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-vartabs"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"+vertsplit"</literal></expr>,

<expr><literal type="string">"+virtualedit"</literal></expr>,

<expr><literal type="string">"+visual"</literal></expr>,

<expr><literal type="string">"+visualextra"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VIMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+viminfo"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-viminfo"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"+vreplace"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+vtp"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-vtp"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+wildignore"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-wildignore"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+wildmenu"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-wildmenu"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"+windows"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WRITEBACKUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+writebackup"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-writebackup"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+X11"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-X11"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+xfontset"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-xfontset"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+xim"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-xim"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XPM_W32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+xpm_w32"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-xpm_w32"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+xpm"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-xpm"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_XSMP_INTERACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+xsmp_interact"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_XSMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+xsmp"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-xsmp"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+xterm_clipboard"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-xterm_clipboard"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XTERM_SAVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"+xterm_save"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="string">"-xterm_save"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>NULL</name></expr>

}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>included_patches</name><index>[]</index></name> <init>=

<expr><block>{ 

<expr><literal type="number">505</literal></expr>,

<expr><literal type="number">504</literal></expr>,

<expr><literal type="number">503</literal></expr>,

<expr><literal type="number">502</literal></expr>,

<expr><literal type="number">501</literal></expr>,

<expr><literal type="number">500</literal></expr>,

<expr><literal type="number">499</literal></expr>,

<expr><literal type="number">498</literal></expr>,

<expr><literal type="number">497</literal></expr>,

<expr><literal type="number">496</literal></expr>,

<expr><literal type="number">495</literal></expr>,

<expr><literal type="number">494</literal></expr>,

<expr><literal type="number">493</literal></expr>,

<expr><literal type="number">492</literal></expr>,

<expr><literal type="number">491</literal></expr>,

<expr><literal type="number">490</literal></expr>,

<expr><literal type="number">489</literal></expr>,

<expr><literal type="number">488</literal></expr>,

<expr><literal type="number">487</literal></expr>,

<expr><literal type="number">486</literal></expr>,

<expr><literal type="number">485</literal></expr>,

<expr><literal type="number">484</literal></expr>,

<expr><literal type="number">483</literal></expr>,

<expr><literal type="number">482</literal></expr>,

<expr><literal type="number">481</literal></expr>,

<expr><literal type="number">480</literal></expr>,

<expr><literal type="number">479</literal></expr>,

<expr><literal type="number">478</literal></expr>,

<expr><literal type="number">477</literal></expr>,

<expr><literal type="number">476</literal></expr>,

<expr><literal type="number">475</literal></expr>,

<expr><literal type="number">474</literal></expr>,

<expr><literal type="number">473</literal></expr>,

<expr><literal type="number">472</literal></expr>,

<expr><literal type="number">471</literal></expr>,

<expr><literal type="number">470</literal></expr>,

<expr><literal type="number">469</literal></expr>,

<expr><literal type="number">468</literal></expr>,

<expr><literal type="number">467</literal></expr>,

<expr><literal type="number">466</literal></expr>,

<expr><literal type="number">465</literal></expr>,

<expr><literal type="number">464</literal></expr>,

<expr><literal type="number">463</literal></expr>,

<expr><literal type="number">462</literal></expr>,

<expr><literal type="number">461</literal></expr>,

<expr><literal type="number">460</literal></expr>,

<expr><literal type="number">459</literal></expr>,

<expr><literal type="number">458</literal></expr>,

<expr><literal type="number">457</literal></expr>,

<expr><literal type="number">456</literal></expr>,

<expr><literal type="number">455</literal></expr>,

<expr><literal type="number">454</literal></expr>,

<expr><literal type="number">453</literal></expr>,

<expr><literal type="number">452</literal></expr>,

<expr><literal type="number">451</literal></expr>,

<expr><literal type="number">450</literal></expr>,

<expr><literal type="number">449</literal></expr>,

<expr><literal type="number">448</literal></expr>,

<expr><literal type="number">447</literal></expr>,

<expr><literal type="number">446</literal></expr>,

<expr><literal type="number">445</literal></expr>,

<expr><literal type="number">444</literal></expr>,

<expr><literal type="number">443</literal></expr>,

<expr><literal type="number">442</literal></expr>,

<expr><literal type="number">441</literal></expr>,

<expr><literal type="number">440</literal></expr>,

<expr><literal type="number">439</literal></expr>,

<expr><literal type="number">438</literal></expr>,

<expr><literal type="number">437</literal></expr>,

<expr><literal type="number">436</literal></expr>,

<expr><literal type="number">435</literal></expr>,

<expr><literal type="number">434</literal></expr>,

<expr><literal type="number">433</literal></expr>,

<expr><literal type="number">432</literal></expr>,

<expr><literal type="number">431</literal></expr>,

<expr><literal type="number">430</literal></expr>,

<expr><literal type="number">429</literal></expr>,

<expr><literal type="number">428</literal></expr>,

<expr><literal type="number">427</literal></expr>,

<expr><literal type="number">426</literal></expr>,

<expr><literal type="number">425</literal></expr>,

<expr><literal type="number">424</literal></expr>,

<expr><literal type="number">423</literal></expr>,

<expr><literal type="number">422</literal></expr>,

<expr><literal type="number">421</literal></expr>,

<expr><literal type="number">420</literal></expr>,

<expr><literal type="number">419</literal></expr>,

<expr><literal type="number">418</literal></expr>,

<expr><literal type="number">417</literal></expr>,

<expr><literal type="number">416</literal></expr>,

<expr><literal type="number">415</literal></expr>,

<expr><literal type="number">414</literal></expr>,

<expr><literal type="number">413</literal></expr>,

<expr><literal type="number">412</literal></expr>,

<expr><literal type="number">411</literal></expr>,

<expr><literal type="number">410</literal></expr>,

<expr><literal type="number">409</literal></expr>,

<expr><literal type="number">408</literal></expr>,

<expr><literal type="number">407</literal></expr>,

<expr><literal type="number">406</literal></expr>,

<expr><literal type="number">405</literal></expr>,

<expr><literal type="number">404</literal></expr>,

<expr><literal type="number">403</literal></expr>,

<expr><literal type="number">402</literal></expr>,

<expr><literal type="number">401</literal></expr>,

<expr><literal type="number">400</literal></expr>,

<expr><literal type="number">399</literal></expr>,

<expr><literal type="number">398</literal></expr>,

<expr><literal type="number">397</literal></expr>,

<expr><literal type="number">396</literal></expr>,

<expr><literal type="number">395</literal></expr>,

<expr><literal type="number">394</literal></expr>,

<expr><literal type="number">393</literal></expr>,

<expr><literal type="number">392</literal></expr>,

<expr><literal type="number">391</literal></expr>,

<expr><literal type="number">390</literal></expr>,

<expr><literal type="number">389</literal></expr>,

<expr><literal type="number">388</literal></expr>,

<expr><literal type="number">387</literal></expr>,

<expr><literal type="number">386</literal></expr>,

<expr><literal type="number">385</literal></expr>,

<expr><literal type="number">384</literal></expr>,

<expr><literal type="number">383</literal></expr>,

<expr><literal type="number">382</literal></expr>,

<expr><literal type="number">381</literal></expr>,

<expr><literal type="number">380</literal></expr>,

<expr><literal type="number">379</literal></expr>,

<expr><literal type="number">378</literal></expr>,

<expr><literal type="number">377</literal></expr>,

<expr><literal type="number">376</literal></expr>,

<expr><literal type="number">375</literal></expr>,

<expr><literal type="number">374</literal></expr>,

<expr><literal type="number">373</literal></expr>,

<expr><literal type="number">372</literal></expr>,

<expr><literal type="number">371</literal></expr>,

<expr><literal type="number">370</literal></expr>,

<expr><literal type="number">369</literal></expr>,

<expr><literal type="number">368</literal></expr>,

<expr><literal type="number">367</literal></expr>,

<expr><literal type="number">366</literal></expr>,

<expr><literal type="number">365</literal></expr>,

<expr><literal type="number">364</literal></expr>,

<expr><literal type="number">363</literal></expr>,

<expr><literal type="number">362</literal></expr>,

<expr><literal type="number">361</literal></expr>,

<expr><literal type="number">360</literal></expr>,

<expr><literal type="number">359</literal></expr>,

<expr><literal type="number">358</literal></expr>,

<expr><literal type="number">357</literal></expr>,

<expr><literal type="number">356</literal></expr>,

<expr><literal type="number">355</literal></expr>,

<expr><literal type="number">354</literal></expr>,

<expr><literal type="number">353</literal></expr>,

<expr><literal type="number">352</literal></expr>,

<expr><literal type="number">351</literal></expr>,

<expr><literal type="number">350</literal></expr>,

<expr><literal type="number">349</literal></expr>,

<expr><literal type="number">348</literal></expr>,

<expr><literal type="number">347</literal></expr>,

<expr><literal type="number">346</literal></expr>,

<expr><literal type="number">345</literal></expr>,

<expr><literal type="number">344</literal></expr>,

<expr><literal type="number">343</literal></expr>,

<expr><literal type="number">342</literal></expr>,

<expr><literal type="number">341</literal></expr>,

<expr><literal type="number">340</literal></expr>,

<expr><literal type="number">339</literal></expr>,

<expr><literal type="number">338</literal></expr>,

<expr><literal type="number">337</literal></expr>,

<expr><literal type="number">336</literal></expr>,

<expr><literal type="number">335</literal></expr>,

<expr><literal type="number">334</literal></expr>,

<expr><literal type="number">333</literal></expr>,

<expr><literal type="number">332</literal></expr>,

<expr><literal type="number">331</literal></expr>,

<expr><literal type="number">330</literal></expr>,

<expr><literal type="number">329</literal></expr>,

<expr><literal type="number">328</literal></expr>,

<expr><literal type="number">327</literal></expr>,

<expr><literal type="number">326</literal></expr>,

<expr><literal type="number">325</literal></expr>,

<expr><literal type="number">324</literal></expr>,

<expr><literal type="number">323</literal></expr>,

<expr><literal type="number">322</literal></expr>,

<expr><literal type="number">321</literal></expr>,

<expr><literal type="number">320</literal></expr>,

<expr><literal type="number">319</literal></expr>,

<expr><literal type="number">318</literal></expr>,

<expr><literal type="number">317</literal></expr>,

<expr><literal type="number">316</literal></expr>,

<expr><literal type="number">315</literal></expr>,

<expr><literal type="number">314</literal></expr>,

<expr><literal type="number">313</literal></expr>,

<expr><literal type="number">312</literal></expr>,

<expr><literal type="number">311</literal></expr>,

<expr><literal type="number">310</literal></expr>,

<expr><literal type="number">309</literal></expr>,

<expr><literal type="number">308</literal></expr>,

<expr><literal type="number">307</literal></expr>,

<expr><literal type="number">306</literal></expr>,

<expr><literal type="number">305</literal></expr>,

<expr><literal type="number">304</literal></expr>,

<expr><literal type="number">303</literal></expr>,

<expr><literal type="number">302</literal></expr>,

<expr><literal type="number">301</literal></expr>,

<expr><literal type="number">300</literal></expr>,

<expr><literal type="number">299</literal></expr>,

<expr><literal type="number">298</literal></expr>,

<expr><literal type="number">297</literal></expr>,

<expr><literal type="number">296</literal></expr>,

<expr><literal type="number">295</literal></expr>,

<expr><literal type="number">294</literal></expr>,

<expr><literal type="number">293</literal></expr>,

<expr><literal type="number">292</literal></expr>,

<expr><literal type="number">291</literal></expr>,

<expr><literal type="number">290</literal></expr>,

<expr><literal type="number">289</literal></expr>,

<expr><literal type="number">288</literal></expr>,

<expr><literal type="number">287</literal></expr>,

<expr><literal type="number">286</literal></expr>,

<expr><literal type="number">285</literal></expr>,

<expr><literal type="number">284</literal></expr>,

<expr><literal type="number">283</literal></expr>,

<expr><literal type="number">282</literal></expr>,

<expr><literal type="number">281</literal></expr>,

<expr><literal type="number">280</literal></expr>,

<expr><literal type="number">279</literal></expr>,

<expr><literal type="number">278</literal></expr>,

<expr><literal type="number">277</literal></expr>,

<expr><literal type="number">276</literal></expr>,

<expr><literal type="number">275</literal></expr>,

<expr><literal type="number">274</literal></expr>,

<expr><literal type="number">273</literal></expr>,

<expr><literal type="number">272</literal></expr>,

<expr><literal type="number">271</literal></expr>,

<expr><literal type="number">270</literal></expr>,

<expr><literal type="number">269</literal></expr>,

<expr><literal type="number">268</literal></expr>,

<expr><literal type="number">267</literal></expr>,

<expr><literal type="number">266</literal></expr>,

<expr><literal type="number">265</literal></expr>,

<expr><literal type="number">264</literal></expr>,

<expr><literal type="number">263</literal></expr>,

<expr><literal type="number">262</literal></expr>,

<expr><literal type="number">261</literal></expr>,

<expr><literal type="number">260</literal></expr>,

<expr><literal type="number">259</literal></expr>,

<expr><literal type="number">258</literal></expr>,

<expr><literal type="number">257</literal></expr>,

<expr><literal type="number">256</literal></expr>,

<expr><literal type="number">255</literal></expr>,

<expr><literal type="number">254</literal></expr>,

<expr><literal type="number">253</literal></expr>,

<expr><literal type="number">252</literal></expr>,

<expr><literal type="number">251</literal></expr>,

<expr><literal type="number">250</literal></expr>,

<expr><literal type="number">249</literal></expr>,

<expr><literal type="number">248</literal></expr>,

<expr><literal type="number">247</literal></expr>,

<expr><literal type="number">246</literal></expr>,

<expr><literal type="number">245</literal></expr>,

<expr><literal type="number">244</literal></expr>,

<expr><literal type="number">243</literal></expr>,

<expr><literal type="number">242</literal></expr>,

<expr><literal type="number">241</literal></expr>,

<expr><literal type="number">240</literal></expr>,

<expr><literal type="number">239</literal></expr>,

<expr><literal type="number">238</literal></expr>,

<expr><literal type="number">237</literal></expr>,

<expr><literal type="number">236</literal></expr>,

<expr><literal type="number">235</literal></expr>,

<expr><literal type="number">234</literal></expr>,

<expr><literal type="number">233</literal></expr>,

<expr><literal type="number">232</literal></expr>,

<expr><literal type="number">231</literal></expr>,

<expr><literal type="number">230</literal></expr>,

<expr><literal type="number">229</literal></expr>,

<expr><literal type="number">228</literal></expr>,

<expr><literal type="number">227</literal></expr>,

<expr><literal type="number">226</literal></expr>,

<expr><literal type="number">225</literal></expr>,

<expr><literal type="number">224</literal></expr>,

<expr><literal type="number">223</literal></expr>,

<expr><literal type="number">222</literal></expr>,

<expr><literal type="number">221</literal></expr>,

<expr><literal type="number">220</literal></expr>,

<expr><literal type="number">219</literal></expr>,

<expr><literal type="number">218</literal></expr>,

<expr><literal type="number">217</literal></expr>,

<expr><literal type="number">216</literal></expr>,

<expr><literal type="number">215</literal></expr>,

<expr><literal type="number">214</literal></expr>,

<expr><literal type="number">213</literal></expr>,

<expr><literal type="number">212</literal></expr>,

<expr><literal type="number">211</literal></expr>,

<expr><literal type="number">210</literal></expr>,

<expr><literal type="number">209</literal></expr>,

<expr><literal type="number">208</literal></expr>,

<expr><literal type="number">207</literal></expr>,

<expr><literal type="number">206</literal></expr>,

<expr><literal type="number">205</literal></expr>,

<expr><literal type="number">204</literal></expr>,

<expr><literal type="number">203</literal></expr>,

<expr><literal type="number">202</literal></expr>,

<expr><literal type="number">201</literal></expr>,

<expr><literal type="number">200</literal></expr>,

<expr><literal type="number">199</literal></expr>,

<expr><literal type="number">198</literal></expr>,

<expr><literal type="number">197</literal></expr>,

<expr><literal type="number">196</literal></expr>,

<expr><literal type="number">195</literal></expr>,

<expr><literal type="number">194</literal></expr>,

<expr><literal type="number">193</literal></expr>,

<expr><literal type="number">192</literal></expr>,

<expr><literal type="number">191</literal></expr>,

<expr><literal type="number">190</literal></expr>,

<expr><literal type="number">189</literal></expr>,

<expr><literal type="number">188</literal></expr>,

<expr><literal type="number">187</literal></expr>,

<expr><literal type="number">186</literal></expr>,

<expr><literal type="number">185</literal></expr>,

<expr><literal type="number">184</literal></expr>,

<expr><literal type="number">183</literal></expr>,

<expr><literal type="number">182</literal></expr>,

<expr><literal type="number">181</literal></expr>,

<expr><literal type="number">180</literal></expr>,

<expr><literal type="number">179</literal></expr>,

<expr><literal type="number">178</literal></expr>,

<expr><literal type="number">177</literal></expr>,

<expr><literal type="number">176</literal></expr>,

<expr><literal type="number">175</literal></expr>,

<expr><literal type="number">174</literal></expr>,

<expr><literal type="number">173</literal></expr>,

<expr><literal type="number">172</literal></expr>,

<expr><literal type="number">171</literal></expr>,

<expr><literal type="number">170</literal></expr>,

<expr><literal type="number">169</literal></expr>,

<expr><literal type="number">168</literal></expr>,

<expr><literal type="number">167</literal></expr>,

<expr><literal type="number">166</literal></expr>,

<expr><literal type="number">165</literal></expr>,

<expr><literal type="number">164</literal></expr>,

<expr><literal type="number">163</literal></expr>,

<expr><literal type="number">162</literal></expr>,

<expr><literal type="number">161</literal></expr>,

<expr><literal type="number">160</literal></expr>,

<expr><literal type="number">159</literal></expr>,

<expr><literal type="number">158</literal></expr>,

<expr><literal type="number">157</literal></expr>,

<expr><literal type="number">156</literal></expr>,

<expr><literal type="number">155</literal></expr>,

<expr><literal type="number">154</literal></expr>,

<expr><literal type="number">153</literal></expr>,

<expr><literal type="number">152</literal></expr>,

<expr><literal type="number">151</literal></expr>,

<expr><literal type="number">150</literal></expr>,

<expr><literal type="number">149</literal></expr>,

<expr><literal type="number">148</literal></expr>,

<expr><literal type="number">147</literal></expr>,

<expr><literal type="number">146</literal></expr>,

<expr><literal type="number">145</literal></expr>,

<expr><literal type="number">144</literal></expr>,

<expr><literal type="number">143</literal></expr>,

<expr><literal type="number">142</literal></expr>,

<expr><literal type="number">141</literal></expr>,

<expr><literal type="number">140</literal></expr>,

<expr><literal type="number">139</literal></expr>,

<expr><literal type="number">138</literal></expr>,

<expr><literal type="number">137</literal></expr>,

<expr><literal type="number">136</literal></expr>,

<expr><literal type="number">135</literal></expr>,

<expr><literal type="number">134</literal></expr>,

<expr><literal type="number">133</literal></expr>,

<expr><literal type="number">132</literal></expr>,

<expr><literal type="number">131</literal></expr>,

<expr><literal type="number">130</literal></expr>,

<expr><literal type="number">129</literal></expr>,

<expr><literal type="number">128</literal></expr>,

<expr><literal type="number">127</literal></expr>,

<expr><literal type="number">126</literal></expr>,

<expr><literal type="number">125</literal></expr>,

<expr><literal type="number">124</literal></expr>,

<expr><literal type="number">123</literal></expr>,

<expr><literal type="number">122</literal></expr>,

<expr><literal type="number">121</literal></expr>,

<expr><literal type="number">120</literal></expr>,

<expr><literal type="number">119</literal></expr>,

<expr><literal type="number">118</literal></expr>,

<expr><literal type="number">117</literal></expr>,

<expr><literal type="number">116</literal></expr>,

<expr><literal type="number">115</literal></expr>,

<expr><literal type="number">114</literal></expr>,

<expr><literal type="number">113</literal></expr>,

<expr><literal type="number">112</literal></expr>,

<expr><literal type="number">111</literal></expr>,

<expr><literal type="number">110</literal></expr>,

<expr><literal type="number">109</literal></expr>,

<expr><literal type="number">108</literal></expr>,

<expr><literal type="number">107</literal></expr>,

<expr><literal type="number">106</literal></expr>,

<expr><literal type="number">105</literal></expr>,

<expr><literal type="number">104</literal></expr>,

<expr><literal type="number">103</literal></expr>,

<expr><literal type="number">102</literal></expr>,

<expr><literal type="number">101</literal></expr>,

<expr><literal type="number">100</literal></expr>,

<expr><literal type="number">99</literal></expr>,

<expr><literal type="number">98</literal></expr>,

<expr><literal type="number">97</literal></expr>,

<expr><literal type="number">96</literal></expr>,

<expr><literal type="number">95</literal></expr>,

<expr><literal type="number">94</literal></expr>,

<expr><literal type="number">93</literal></expr>,

<expr><literal type="number">92</literal></expr>,

<expr><literal type="number">91</literal></expr>,

<expr><literal type="number">90</literal></expr>,

<expr><literal type="number">89</literal></expr>,

<expr><literal type="number">88</literal></expr>,

<expr><literal type="number">87</literal></expr>,

<expr><literal type="number">86</literal></expr>,

<expr><literal type="number">85</literal></expr>,

<expr><literal type="number">84</literal></expr>,

<expr><literal type="number">83</literal></expr>,

<expr><literal type="number">82</literal></expr>,

<expr><literal type="number">81</literal></expr>,

<expr><literal type="number">80</literal></expr>,

<expr><literal type="number">79</literal></expr>,

<expr><literal type="number">78</literal></expr>,

<expr><literal type="number">77</literal></expr>,

<expr><literal type="number">76</literal></expr>,

<expr><literal type="number">75</literal></expr>,

<expr><literal type="number">74</literal></expr>,

<expr><literal type="number">73</literal></expr>,

<expr><literal type="number">72</literal></expr>,

<expr><literal type="number">71</literal></expr>,

<expr><literal type="number">70</literal></expr>,

<expr><literal type="number">69</literal></expr>,

<expr><literal type="number">68</literal></expr>,

<expr><literal type="number">67</literal></expr>,

<expr><literal type="number">66</literal></expr>,

<expr><literal type="number">65</literal></expr>,

<expr><literal type="number">64</literal></expr>,

<expr><literal type="number">63</literal></expr>,

<expr><literal type="number">62</literal></expr>,

<expr><literal type="number">61</literal></expr>,

<expr><literal type="number">60</literal></expr>,

<expr><literal type="number">59</literal></expr>,

<expr><literal type="number">58</literal></expr>,

<expr><literal type="number">57</literal></expr>,

<expr><literal type="number">56</literal></expr>,

<expr><literal type="number">55</literal></expr>,

<expr><literal type="number">54</literal></expr>,

<expr><literal type="number">53</literal></expr>,

<expr><literal type="number">52</literal></expr>,

<expr><literal type="number">51</literal></expr>,

<expr><literal type="number">50</literal></expr>,

<expr><literal type="number">49</literal></expr>,

<expr><literal type="number">48</literal></expr>,

<expr><literal type="number">47</literal></expr>,

<expr><literal type="number">46</literal></expr>,

<expr><literal type="number">45</literal></expr>,

<expr><literal type="number">44</literal></expr>,

<expr><literal type="number">43</literal></expr>,

<expr><literal type="number">42</literal></expr>,

<expr><literal type="number">41</literal></expr>,

<expr><literal type="number">40</literal></expr>,

<expr><literal type="number">39</literal></expr>,

<expr><literal type="number">38</literal></expr>,

<expr><literal type="number">37</literal></expr>,

<expr><literal type="number">36</literal></expr>,

<expr><literal type="number">35</literal></expr>,

<expr><literal type="number">34</literal></expr>,

<expr><literal type="number">33</literal></expr>,

<expr><literal type="number">32</literal></expr>,

<expr><literal type="number">31</literal></expr>,

<expr><literal type="number">30</literal></expr>,

<expr><literal type="number">29</literal></expr>,

<expr><literal type="number">28</literal></expr>,

<expr><literal type="number">27</literal></expr>,

<expr><literal type="number">26</literal></expr>,

<expr><literal type="number">25</literal></expr>,

<expr><literal type="number">24</literal></expr>,

<expr><literal type="number">23</literal></expr>,

<expr><literal type="number">22</literal></expr>,

<expr><literal type="number">21</literal></expr>,

<expr><literal type="number">20</literal></expr>,

<expr><literal type="number">19</literal></expr>,

<expr><literal type="number">18</literal></expr>,

<expr><literal type="number">17</literal></expr>,

<expr><literal type="number">16</literal></expr>,

<expr><literal type="number">15</literal></expr>,

<expr><literal type="number">14</literal></expr>,

<expr><literal type="number">13</literal></expr>,

<expr><literal type="number">12</literal></expr>,

<expr><literal type="number">11</literal></expr>,

<expr><literal type="number">10</literal></expr>,

<expr><literal type="number">9</literal></expr>,

<expr><literal type="number">8</literal></expr>,

<expr><literal type="number">7</literal></expr>,

<expr><literal type="number">6</literal></expr>,

<expr><literal type="number">5</literal></expr>,

<expr><literal type="number">4</literal></expr>,

<expr><literal type="number">3</literal></expr>,

<expr><literal type="number">2</literal></expr>,

<expr><literal type="number">1</literal></expr>,

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>extra_patches</name><index>[]</index></name><operator>)</operator> <operator>=</operator>

<block>{ 

<expr><name>NULL</name></expr>

}</block></expr>;</expr_stmt>

<function><type><name>int</name></type>

<name>highest_patch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>included_patches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>has_patch</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>included_patches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>included_patches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>ex_version</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>version_msg_wrap</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wrap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>vim_strsize</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>wrap</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_int</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>Columns</name> <operator>&amp;&amp;</operator> <name>msg_col</name> <operator>+</operator> <name>len</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>Columns</name>

<operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wrap</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wrap</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>version_msg</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>version_msg_wrap</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>list_features</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>list_in_columns</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>features</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>list_in_columns</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>items</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ncol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nrow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_row</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>item_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>use_highlight</name> <init>= <expr><operator>(</operator><name>items</name> <operator>==</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>features</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr> </then><else>: <expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr></else></ternary></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>vim_strsize</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>==</operator> <name>current</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>item_count</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>width</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Columns</name> <operator>&lt;</operator> <name>width</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>item_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>version_msg_wrap</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>==</operator> <name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>item_count</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ncol</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>Columns</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nrow</name> <operator>=</operator> <name>item_count</name> <operator>/</operator> <name>ncol</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>item_count</name> <operator>%</operator> <name>ncol</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name>got_int</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>nrow</name> <operator>*</operator> <name>ncol</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>(</operator><name>i</name> <operator>/</operator> <name>ncol</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>i</name> <operator>%</operator> <name>ncol</name><operator>)</operator> <operator>*</operator> <name>nrow</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>item_count</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>last_col</name> <init>= <expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>ncol</name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>current</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>use_highlight</name> <operator>&amp;&amp;</operator> <name><name>items</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>items</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_W</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>items</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>current</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last_col</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cur_row</name> <operator>&lt;</operator> <name>nrow</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>cur_row</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<while>while <condition>(<expr><name>msg_col</name> <operator>%</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cur_row</name> <operator>&lt;</operator> <name>nrow</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>cur_row</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>list_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_longVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><name>longVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nMS-Windows 64-bit GUI/console version"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nMS-Windows 32-bit GUI/console version"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nMS-Windows 64-bit GUI version"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nMS-Windows 32-bit GUI version"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_OLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" with OLE support"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nMS-Windows 64-bit console version"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nMS-Windows 32-bit console version"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X_DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nmacOS version"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nmacOS version w/o darwin feat."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nOpenVMS version"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PATHDEF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>compiled_arch</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>compiled_arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>included_patches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nIncluded patches: "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>included_patches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<while>while <condition>(<expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>included_patches</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>included_patches</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>included_patches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">", "</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>!=</operator> <name><name>included_patches</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>included_patches</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>extra_patches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nExtra patches: "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>extra_patches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">", "</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><name><name>extra_patches</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODIFIED_BY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Modified by "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><name>MODIFIED_BY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PATHDEF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>compiled_user</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>compiled_sys</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nCompiled "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>compiled_user</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"by "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>compiled_user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>compiled_sys</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>compiled_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_HUGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nHuge version "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nBig version "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NORMAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nNormal version "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SMALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nSmall version "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nTiny version "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"without GUI."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GTK3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"with GTK3 GUI."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"with GTK2-GNOME GUI."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"with GTK2 GUI."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"with X11-Motif GUI."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"with X11-neXtaw GUI."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"with X11-Athena GUI."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"with Haiku GUI."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_PHOTON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"with Photon GUI."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"with GUI."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TARGET_API_MAC_CARBON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>TARGET_API_MAC_CARBON</name></expr></cpp:if>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"with Carbon GUI."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TARGET_API_MAC_OSX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>TARGET_API_MAC_OSX</name></expr></cpp:if>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"with Cocoa GUI."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" Features included (+) or not (-):\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_features</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_VIMRC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" system vimrc file: \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><name>SYS_VIMRC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USR_VIMRC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" user vimrc file: \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><name>USR_VIMRC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USR_VIMRC_FILE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" 2nd user vimrc file: \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><name>USR_VIMRC_FILE2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USR_VIMRC_FILE3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" 3rd user vimrc file: \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><name>USR_VIMRC_FILE3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USR_EXRC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" user exrc file: \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><name>USR_EXRC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USR_EXRC_FILE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" 2nd user exrc file: \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><name>USR_EXRC_FILE2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_GVIMRC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" system gvimrc file: \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><name>SYS_GVIMRC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" user gvimrc file: \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><name>USR_GVIMRC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USR_GVIMRC_FILE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"2nd user gvimrc file: \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><name>USR_GVIMRC_FILE2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USR_GVIMRC_FILE3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"3rd user gvimrc file: \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><name>USR_GVIMRC_FILE3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" defaults file: \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><name>VIM_DEFAULTS_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_MENU_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" system menu file: \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><name>SYS_MENU_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PATHDEF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>default_vim_dir</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" fall-back for $VIM: \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>default_vim_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>default_vimruntime_dir</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" f-b for $VIMRUNTIME: \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>default_vimruntime_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Compilation: "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>all_cflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>compiler_version</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Compiler: "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>compiler_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Linking: "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>all_lflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" DEBUG BUILD"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>do_intro_line</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mesg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add_version</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>

<name>maybe_intro_message</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>BUFEMPTY</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>firstwin</name><operator>-&gt;</operator><name>w_next</name></name> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_shm</name></expr></argument>, <argument><expr><name>SHM_INTRO</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>intro_message</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>intro_message</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>colon</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blanklines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sponsor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>lines</name><index>[]</index></name><operator>)</operator> <operator>=</operator>

<block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"VIM - Vi IMproved"</literal></expr></argument>)</argument_list></call></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"version "</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"by Bram Moolenaar et al."</literal></expr></argument>)</argument_list></call></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODIFIED_BY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">" "</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Vim is open source and freely distributable"</literal></expr></argument>)</argument_list></call></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Help poor children in Uganda!"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"type :help iccf&lt;Enter&gt; for information "</literal></expr></argument>)</argument_list></call></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"type :q&lt;Enter&gt; to exit "</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"type :help&lt;Enter&gt; or &lt;F1&gt; for on-line help"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"type :help version8&lt;Enter&gt; for version info"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>NULL</name></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Running in Vi compatible mode"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"type :set nocp&lt;Enter&gt; for Vim defaults"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"type :help cp-default&lt;Enter&gt; for info on this"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>gui_lines</name><index>[]</index></name><operator>)</operator> <operator>=</operator>

<block>{

<expr><name>NULL</name></expr>,

<expr><name>NULL</name></expr>,

<expr><name>NULL</name></expr>,

<expr><name>NULL</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODIFIED_BY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>NULL</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>NULL</name></expr>,

<expr><name>NULL</name></expr>,

<expr><name>NULL</name></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"menu Help-&gt;Orphans for information "</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>NULL</name></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Running modeless, typed text is inserted"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"menu Edit-&gt;Global Settings-&gt;Toggle Insert Mode "</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">" for two modes "</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>NULL</name></expr>,

<expr><name>NULL</name></expr>,

<expr><name>NULL</name></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"menu Edit-&gt;Global Settings-&gt;Toggle Vi Compatible"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">" for Vim defaults "</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>blanklines</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>Rows</name> <operator>-</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_cp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>blanklines</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>p_ls</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>blanklines</name> <operator>-=</operator> <name>Rows</name> <operator>-</operator> <name><name>topframe</name><operator>-&gt;</operator><name>fr_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>blanklines</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>blanklines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sponsor</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sponsor</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sponsor</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>sponsor</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name>blanklines</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>row</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>Columns</name> <operator>&gt;=</operator> <literal type="number">50</literal><operator>)</operator> <operator>||</operator> <name>colon</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_im</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <name><name>gui_lines</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>gui_lines</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_cp</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sponsor</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"children"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><name>sponsor</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Sponsor Vim development!"</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Become a registered Vim user!"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"iccf"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><name>sponsor</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"type :help sponsor&lt;Enter&gt; for information "</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"type :help register&lt;Enter&gt; for information "</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Orphans"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"menu Help-&gt;Sponsor/Register for information "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_intro_line</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>row</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>colon</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>do_intro_line</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mesg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>add_version</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>vers</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>clen</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MODIFIED_BY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODBY_LEN</name></cpp:macro> <cpp:value>150</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>modby</name><index>[<expr><name>MODBY_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>mesg</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>modby</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Modified by "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MODBY_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>modby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>modby</name> <operator>+</operator> <name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>MODIFIED_BY</name></expr></argument>, <argument><expr><name>MODBY_LEN</name> <operator>-</operator> <name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mesg</name> <operator>=</operator> <name>modby</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>add_version</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>vers</name></expr></argument>, <argument><expr><name>mediumVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>highest_patch</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>vers</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name>isalpha</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>vers</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>vers</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">".%d%s"</literal></expr></argument>, <argument><expr><call><name>highest_patch</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><name>mediumVersion</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>vers</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">".%d"</literal></expr></argument>, <argument><expr><call><name>highest_patch</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>vers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>Columns</name> <operator>-</operator> <name>col</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>mesg</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <name>l</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><index>[<expr><name>l</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>l</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><name>l</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&gt;'</literal><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>l</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>clen</name> <operator>+=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>l</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>clen</name> <operator>+=</operator> <call><name>byte2cells</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>screen_puts_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr> ?</condition><then> <expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>attr</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>add_version</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_puts</name><argument_list>(<argument><expr><name>vers</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_intro</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier><name>eap</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>screenclear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>intro_message</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_return</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
