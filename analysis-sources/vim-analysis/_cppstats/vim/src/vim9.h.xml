<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\vim9.h"><typedef>typedef <type><enum>enum <block>{

<decl><name>ISN_EXEC</name></decl>, 

<decl><name>ISN_ECHO</name></decl>, 

<decl><name>ISN_EXECUTE</name></decl>, 

<decl><name>ISN_LOAD</name></decl>, 

<decl><name>ISN_LOADV</name></decl>, 

<decl><name>ISN_LOADG</name></decl>, 

<decl><name>ISN_LOADS</name></decl>, 

<decl><name>ISN_LOADSCRIPT</name></decl>, 

<decl><name>ISN_LOADOPT</name></decl>, 

<decl><name>ISN_LOADENV</name></decl>, 

<decl><name>ISN_LOADREG</name></decl>, 

<decl><name>ISN_STORE</name></decl>, 

<decl><name>ISN_STOREV</name></decl>, 

<decl><name>ISN_STOREG</name></decl>, 

<decl><name>ISN_STORES</name></decl>, 

<decl><name>ISN_STORESCRIPT</name></decl>, 

<decl><name>ISN_STOREOPT</name></decl>, 

<decl><name>ISN_STOREENV</name></decl>, 

<decl><name>ISN_STOREREG</name></decl>, 

<decl><name>ISN_STORENR</name></decl>, 

<decl><name>ISN_PUSHNR</name></decl>, 

<decl><name>ISN_PUSHBOOL</name></decl>, 

<decl><name>ISN_PUSHSPEC</name></decl>, 

<decl><name>ISN_PUSHF</name></decl>, 

<decl><name>ISN_PUSHS</name></decl>, 

<decl><name>ISN_PUSHBLOB</name></decl>, 

<decl><name>ISN_PUSHFUNC</name></decl>, 

<decl><name>ISN_PUSHPARTIAL</name></decl>, 

<decl><name>ISN_PUSHCHANNEL</name></decl>, 

<decl><name>ISN_PUSHJOB</name></decl>, 

<decl><name>ISN_NEWLIST</name></decl>, 

<decl><name>ISN_NEWDICT</name></decl>, 

<decl><name>ISN_BCALL</name></decl>, 

<decl><name>ISN_DCALL</name></decl>, 

<decl><name>ISN_UCALL</name></decl>, 

<decl><name>ISN_PCALL</name></decl>, 

<decl><name>ISN_PCALL_END</name></decl>, 

<decl><name>ISN_RETURN</name></decl>, 

<decl><name>ISN_FUNCREF</name></decl>, 

<decl><name>ISN_JUMP</name></decl>, 

<decl><name>ISN_FOR</name></decl>, 

<decl><name>ISN_TRY</name></decl>, 

<decl><name>ISN_THROW</name></decl>, 

<decl><name>ISN_PUSHEXC</name></decl>, 

<decl><name>ISN_CATCH</name></decl>, 

<decl><name>ISN_ENDTRY</name></decl>, 

<decl><name>ISN_ADDLIST</name></decl>,

<decl><name>ISN_ADDBLOB</name></decl>,

<decl><name>ISN_OPNR</name></decl>,

<decl><name>ISN_OPFLOAT</name></decl>,

<decl><name>ISN_OPANY</name></decl>,

<decl><name>ISN_COMPAREBOOL</name></decl>,

<decl><name>ISN_COMPARESPECIAL</name></decl>,

<decl><name>ISN_COMPARENR</name></decl>,

<decl><name>ISN_COMPAREFLOAT</name></decl>,

<decl><name>ISN_COMPARESTRING</name></decl>,

<decl><name>ISN_COMPAREBLOB</name></decl>,

<decl><name>ISN_COMPARELIST</name></decl>,

<decl><name>ISN_COMPAREDICT</name></decl>,

<decl><name>ISN_COMPAREFUNC</name></decl>,

<decl><name>ISN_COMPAREPARTIAL</name></decl>,

<decl><name>ISN_COMPAREANY</name></decl>,

<decl><name>ISN_CONCAT</name></decl>,

<decl><name>ISN_INDEX</name></decl>, 

<decl><name>ISN_MEMBER</name></decl>, 

<decl><name>ISN_2BOOL</name></decl>, 

<decl><name>ISN_2STRING</name></decl>, 

<decl><name>ISN_NEGATENR</name></decl>, 

<decl><name>ISN_CHECKNR</name></decl>, 

<decl><name>ISN_CHECKTYPE</name></decl>, 

<decl><name>ISN_DROP</name></decl> 

}</block></enum></type> <name>isntype_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>cbf_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cbf_argcount</name></decl>;</decl_stmt> 

}</block></struct></type> <name>cbfunc_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>cdf_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cdf_argcount</name></decl>;</decl_stmt> 

}</block></struct></type> <name>cdfunc_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>cpf_top</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cpf_argcount</name></decl>;</decl_stmt> 

}</block></struct></type> <name>cpfunc_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cuf_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cuf_argcount</name></decl>;</decl_stmt> 

}</block></struct></type> <name>cufunc_T</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>JUMP_ALWAYS</name></decl>,

<decl><name>JUMP_IF_FALSE</name></decl>, 

<decl><name>JUMP_AND_KEEP_IF_TRUE</name></decl>, 

<decl><name>JUMP_AND_KEEP_IF_FALSE</name></decl>, 

}</block></enum></type> <name>jumpwhen_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>jumpwhen_T</name></type> <name>jump_when</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>jump_where</name></decl>;</decl_stmt> 

}</block></struct></type> <name>jump_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>for_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>for_end</name></decl>;</decl_stmt> 

}</block></struct></type> <name>forloop_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>try_catch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>try_finally</name></decl>;</decl_stmt> 

}</block></struct></type> <name>try_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>echo_with_white</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>echo_count</name></decl>;</decl_stmt> 

}</block></struct></type> <name>echo_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>exptype_T</name></type> <name>op_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>op_ic</name></decl>;</decl_stmt> 

}</block></struct></type> <name>opexpr_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>vartype_T</name></type> <name>ct_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ct_off</name></decl>;</decl_stmt> 

}</block></struct></type> <name>checktype_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>stnr_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>stnr_val</name></decl>;</decl_stmt>

}</block></struct></type> <name>storenr_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>so_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>so_flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>storeopt_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ls_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ls_sid</name></decl>;</decl_stmt> 

}</block></struct></type> <name>loadstore_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>script_sid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>script_idx</name></decl>;</decl_stmt> 

}</block></struct></type> <name>script_T</name>;</typedef>

<struct>struct <name>isn_S</name> <block>{

<decl_stmt><decl><type><name>isntype_T</name></type> <name>isn_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>isn_lnum</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>blob_T</name> <modifier>*</modifier></type><name>blob</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>float_T</name></type> <name>fnumber</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>partial</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jump_T</name></type> <name>jump</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>forloop_T</name></type> <name>forloop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>try_T</name></type> <name>try</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cbfunc_T</name></type> <name>bfunc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cdfunc_T</name></type> <name>dfunc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cpfunc_T</name></type> <name>pfunc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cufunc_T</name></type> <name>ufunc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>echo_T</name></type> <name>echo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>opexpr_T</name></type> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>checktype_T</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>storenr_T</name></type> <name>storenr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>storeopt_T</name></type> <name>storeopt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>loadstore_T</name></type> <name>loadstore</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>script_T</name></type> <name>script</name></decl>;</decl_stmt>

}</block> <decl><name>isn_arg</name></decl>;</union>

}</block>;</struct>

<struct>struct <name>dfunc_S</name> <block>{

<decl_stmt><decl><type><name>ufunc_T</name> <modifier>*</modifier></type><name>df_ufunc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>df_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>df_deleted</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>garray_T</name></type> <name>df_def_args_isn</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>isn_T</name> <modifier>*</modifier></type><name>df_instr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>df_instr_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>df_varcount</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_FRAME_SIZE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFINE_VIM9_GLOBALS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>garray_T</name></type> <name>def_functions</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>dfunc_T</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">50</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>extern</specifier> <name>garray_T</name></type> <name>def_functions</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
