<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\VisVim\OleAut.h"><decl_stmt><decl><type><name>class</name></type> <name>COleAutomationControl</name> <range>: <expr><name>public</name> <name>CObject</name>

<block>{

<expr><name>public</name><operator>:</operator>

<call><name>COleAutomationControl</name> <argument_list>()</argument_list></call></expr>;

<expr><operator>~</operator><call><name>COleAutomationControl</name> <argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <call><name>CreateObject</name> <argument_list>(<argument><expr><name>char</name><operator>*</operator> <name>ProgId</name></expr></argument>)</argument_list></call></expr>;

<expr><name>DISPID</name> <call><name>GetDispatchId</name> <argument_list>(<argument><expr><name>char</name><operator>*</operator> <name>Name</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <call><name>GetProperty</name> <argument_list>(<argument><expr><name>char</name><operator>*</operator> <name>Name</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>GetProperty</name> <argument_list>(<argument>DISPID DispatchId</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>PutProperty</name> <argument_list>(<argument>char* Name</argument>, <argument>LPCTSTR Format</argument>, <argument>...</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>PutProperty</name> <argument_list>(<argument>DISPID DispatchId</argument>, <argument>LPCTSTR Format</argument>, <argument>...</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>Method</name> <argument_list>(<argument>char* Name</argument>, <argument>LPCTSTR Format = NULL</argument>, <argument>...</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>Method</name> <argument_list>(<argument>DISPID DispatchId</argument>, <argument>LPCTSTR Format = NULL</argument>, <argument>...</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <call><name>DeleteObject</name> <argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <call><name>ErrDiag</name> <argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>IsCreated</name> <argument_list>()</argument_list></macro>

<block>{

<return>return <expr><name>m_pDispatch</name> <operator>?</operator> <name>true</name> <operator>:</operator> <name>false</name></expr>;</return>

}</block>

<name>bool</name> <call><name>IsAlive</name> <argument_list>()</argument_list></call></expr>;

<expr><name>HRESULT</name> <macro><name>GetResult</name> <argument_list>()</argument_list></macro>

<block>{

<return>return <expr><name>m_hResult</name></expr>;</return>

}</block>

<name>UINT</name> <macro><name>GetErrArgNr</name> <argument_list>()</argument_list></macro>

<block>{

<return>return <expr><name>m_nErrArg</name></expr>;</return>

}</block>

<name>EXCEPINFO</name><operator>*</operator> <macro><name>GetExceptionInfo</name> <argument_list>()</argument_list></macro>

<block>{

<return>return <expr><operator>&amp;</operator><name>m_ExceptionInfo</name></expr>;</return>

}</block>

<name>LPVARIANT</name> <macro><name>GetResultVariant</name> <argument_list>()</argument_list></macro>

<block>{

<return>return <expr><operator>&amp;</operator><name>m_VariantResult</name></expr>;</return>

}</block>

<name>protected</name><operator>:</operator>

<name>bool</name> <macro><name>Invoke</name> <argument_list>(<argument>WORD Flags</argument>, <argument>char* Name</argument>, <argument>LPCTSTR Format</argument>, <argument>va_list ArgList</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>Invoke</name> <argument_list>(<argument>WORD Flags</argument>, <argument>DISPID DispatchId</argument>, <argument>LPCTSTR Format</argument>, <argument>va_list ArgList</argument>)</argument_list></macro></expr>;

<expr><name>protected</name><operator>:</operator>

<name>IDispatch</name><operator>*</operator> <name>m_pDispatch</name></expr>;

<expr><name>HRESULT</name> <name>m_hResult</name></expr>;

<expr><name>UINT</name> <name>m_nErrArg</name></expr>;

<expr><name>EXCEPINFO</name> <name>m_ExceptionInfo</name></expr>;

<expr><name>VARIANTARG</name> <name>m_VariantResult</name></expr>;

}</block></expr></range></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_OLE_STRING</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>str</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_OLE_STRING_BUF</name><parameter_list>(<parameter><type><name>str</name></type></parameter>,<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>str</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_OLE_STR</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>str</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_OLE_STR_BUF</name><parameter_list>(<parameter><type><name>str</name></type></parameter>,<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>str</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_OLE_STR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_OLE_STR</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ConvertToAnsi(str)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_OLE_STR_BUF</name><parameter_list>(<parameter><type><name>str</name></type></parameter>,<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ConvertToAnsiBuf(str,buf)</cpp:value></cpp:define>

<function_decl><type><name>char</name><modifier>*</modifier></type> <name>ConvertToAnsi</name> <parameter_list>(<parameter><decl><type><name>OLECHAR</name><modifier>*</modifier></type> <name>sUnicode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name><modifier>*</modifier></type> <name>ConvertToAnsiBuf</name> <parameter_list>(<parameter><decl><type><name>OLECHAR</name><modifier>*</modifier></type> <name>sUnicode</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>Buf</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_OLE_STR</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ConvertToUnicode(str)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_OLE_STR_BUF</name><parameter_list>(<parameter><type><name>str</name></type></parameter>,<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ConvertToUnicodeBuf(str,buf)</cpp:value></cpp:define>

<function_decl><type><name>OLECHAR</name><modifier>*</modifier></type> <name>ConvertToUnicode</name> <parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>sAscii</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>OLECHAR</name><modifier>*</modifier></type> <name>ConvertToUnicodeBuf</name> <parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>sAscii</name></decl></parameter>, <parameter><decl><type><name>OLECHAR</name><modifier>*</modifier></type> <name>Buf</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_OLE_STR</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
