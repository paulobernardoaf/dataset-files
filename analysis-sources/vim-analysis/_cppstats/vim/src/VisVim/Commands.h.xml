<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\VisVim\Commands.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vsvtypes.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>CCommands</name> <range>:

<expr><name>public</name> <name><name>CComDualImpl</name> <argument_list type="generic">&lt; <argument><expr><name>ICommands</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_ICommands</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>LIBID_VisVim</name></expr></argument> &gt;</argument_list></name></expr></range></decl>,

<decl><type ref="prev"/><name>public</name> <name>CComObjectRoot</name></decl>,

<decl><type ref="prev"/><name>public</name> <name><name>CComCoClass</name> <argument_list type="generic">&lt; <argument><expr><name>CCommands</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>CLSID_Commands</name></expr></argument> &gt;</argument_list></name>

<block>{<block_content>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>IApplication</name> <modifier>*</modifier></type> <name>m_pApplication</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<expr_stmt><expr><call><name>CCommands</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>CCommands</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>SetApplicationObject</name> <parameter_list>(<parameter><decl><type><name>IApplication</name> <modifier>*</modifier></type> <name>m_pApplication</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>IApplication</name> <modifier>*</modifier></type><name>GetApplicationObject</name> <parameter_list>()</parameter_list>

<block>{<block_content>

<return>return <expr><name>m_pApplication</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>UnadviseFromEvents</name> <parameter_list>()</parameter_list>;</function_decl>

<macro><name>BEGIN_COM_MAP</name> <argument_list>(<argument>CCommands</argument>)</argument_list></macro>

<macro><name>COM_INTERFACE_ENTRY</name> <argument_list>(<argument>IDispatch</argument>)</argument_list></macro>

<macro><name>COM_INTERFACE_ENTRY</name> <argument_list>(<argument>ICommands</argument>)</argument_list></macro>

<macro><name>END_COM_MAP</name> <argument_list>()</argument_list></macro>

<macro><name>DECLARE_NOT_AGGREGATABLE</name> <argument_list>(<argument>CCommands</argument>)</argument_list></macro>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt; <argument><expr><name>class</name> <name>IEvents</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>IID</name> <modifier>*</modifier> <name>piidEvents</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier> <name>plibid</name></expr></argument>,

<argument><expr><name>class</name> <name>XEvents</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>CLSID</name> <modifier>*</modifier> <name>pClsidEvents</name></expr></argument> &gt;</argument_list></name>

<name>class</name></type> <name>XEventHandler</name> <range>:

<expr><name>public</name> <name><name>CComDualImpl</name> <argument_list type="generic">&lt; <argument><expr><name>IEvents</name></expr></argument>,

<argument><expr><name>piidEvents</name></expr></argument>,

<argument><expr><name>plibid</name></expr></argument> &gt;</argument_list></name></expr></range></decl>,

<decl><type ref="prev"/><name>public</name> <name>CComObjectRoot</name></decl>,

<decl><type ref="prev"/><name>public</name> <name><name>CComCoClass</name> <argument_list type="generic">&lt; <argument><expr><name>XEvents</name></expr></argument>,

<argument><expr><name>pClsidEvents</name></expr></argument> &gt;</argument_list></name>

<block>{<block_content>

<label><name>public</name>:</label>

<macro><name>BEGIN_COM_MAP</name> <argument_list>(<argument>XEvents</argument>)</argument_list></macro>

<macro><name>COM_INTERFACE_ENTRY</name> <argument_list>(<argument>IDispatch</argument>)</argument_list></macro>

<macro><name>COM_INTERFACE_ENTRY_IID</name> <argument_list>(<argument>*piidEvents</argument>, <argument>IEvents</argument>)</argument_list></macro>

<macro><name>END_COM_MAP</name> <argument_list>()</argument_list></macro>

<macro><name>DECLARE_NOT_AGGREGATABLE</name> <argument_list>(<argument>XEvents</argument>)</argument_list></macro>

<function><type><name>void</name></type> <name>Connect</name> <parameter_list>(<parameter><decl><type><name>IUnknown</name> <modifier>*</modifier></type> <name>pUnk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VERIFY</name> <argument_list>(<argument><expr><call><name>SUCCEEDED</name> <argument_list>(<argument><expr><call><name>AtlAdvise</name> <argument_list>(<argument><expr><name>pUnk</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>*</operator><name>piidEvents</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>m_dwAdvise</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Disconnect</name> <parameter_list>(<parameter><decl><type><name>IUnknown</name> <modifier>*</modifier></type> <name>pUnk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>AtlUnadvise</name> <argument_list>(<argument><expr><name>pUnk</name></expr></argument>, <argument><expr><operator>*</operator><name>piidEvents</name></expr></argument>, <argument><expr><name>m_dwAdvise</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>CCommands</name> <modifier>*</modifier></type><name>m_pCommands</name></decl>;</decl_stmt>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>DWORD</name></type> <name>m_dwAdvise</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>XApplicationEvents</name> <range>: <expr><name>public</name> <name><name>XEventHandler</name> <argument_list type="generic">&lt; <argument><expr><name>IApplicationEvents</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_IApplicationEvents</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>LIBID_VisVim</name></expr></argument>,

<argument><expr><name>XApplicationEvents</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>CLSID_ApplicationEvents</name></expr></argument> &gt;</argument_list></name>

<block>{

<expr><name>public</name><operator>:</operator>

<call><call><name>STDMETHOD</name> <argument_list>(<argument><expr><name>BeforeBuildStart</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>THIS</name></expr></argument>)</argument_list></call></expr>;

<macro><name>STDMETHOD</name> <argument_list>(<argument>BuildFinish</argument>)</argument_list></macro> <expr><operator>(</operator><name>THIS_</name> <name>long</name> <name>nNumErrors</name>, <name>long</name> <name>nNumWarnings</name><operator>)</operator></expr>;

<expr><call><call><name>STDMETHOD</name> <argument_list>(<argument><expr><name>BeforeApplicationShutDown</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>THIS</name></expr></argument>)</argument_list></call></expr>;

<macro><name>STDMETHOD</name> <argument_list>(<argument>DocumentOpen</argument>)</argument_list></macro> <expr><operator>(</operator><name>THIS_</name> <name>IDispatch</name> <operator>*</operator> <name>theDocument</name><operator>)</operator></expr>;

<macro><name>STDMETHOD</name> <argument_list>(<argument>BeforeDocumentClose</argument>)</argument_list></macro> <expr><operator>(</operator><name>THIS_</name> <name>IDispatch</name> <operator>*</operator> <name>theDocument</name><operator>)</operator></expr>;

<macro><name>STDMETHOD</name> <argument_list>(<argument>DocumentSave</argument>)</argument_list></macro> <expr><operator>(</operator><name>THIS_</name> <name>IDispatch</name> <operator>*</operator> <name>theDocument</name><operator>)</operator></expr>;

<macro><name>STDMETHOD</name> <argument_list>(<argument>NewDocument</argument>)</argument_list></macro> <expr><operator>(</operator><name>THIS_</name> <name>IDispatch</name> <operator>*</operator> <name>theDocument</name><operator>)</operator></expr>;

<macro><name>STDMETHOD</name> <argument_list>(<argument>WindowActivate</argument>)</argument_list></macro> <expr><operator>(</operator><name>THIS_</name> <name>IDispatch</name> <operator>*</operator> <name>theWindow</name><operator>)</operator></expr>;

<macro><name>STDMETHOD</name> <argument_list>(<argument>WindowDeactivate</argument>)</argument_list></macro> <expr><operator>(</operator><name>THIS_</name> <name>IDispatch</name> <operator>*</operator> <name>theWindow</name><operator>)</operator></expr>;

<expr><call><call><name>STDMETHOD</name> <argument_list>(<argument><expr><name>WorkspaceOpen</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>THIS</name></expr></argument>)</argument_list></call></expr>;

<expr><call><call><name>STDMETHOD</name> <argument_list>(<argument><expr><name>WorkspaceClose</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>THIS</name></expr></argument>)</argument_list></call></expr>;

<expr><call><call><name>STDMETHOD</name> <argument_list>(<argument><expr><name>NewWorkspace</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>THIS</name></expr></argument>)</argument_list></call></expr>;

}</block></expr></range></decl>;</decl_stmt>

<typedef>typedef <type><name><name>CComObject</name> <argument_list type="generic">&lt; <argument><expr><name>XApplicationEvents</name></expr></argument> &gt;</argument_list></name></type> <name>XApplicationEventsObj</name>;</typedef>

<decl_stmt><decl><type><name>XApplicationEventsObj</name> <modifier>*</modifier></type><name>m_pApplicationEventsObj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>XDebuggerEvents</name> <range>: <expr><name>public</name> <name><name>XEventHandler</name> <argument_list type="generic">&lt; <argument><expr><name>IDebuggerEvents</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_IDebuggerEvents</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>LIBID_VisVim</name></expr></argument>,

<argument><expr><name>XDebuggerEvents</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>CLSID_DebuggerEvents</name></expr></argument> &gt;</argument_list></name>

<block>{

<expr><name>public</name><operator>:</operator>

<macro><name>STDMETHOD</name> <argument_list>(<argument>BreakpointHit</argument>)</argument_list></macro> <operator>(</operator><name>THIS_</name> <name>IDispatch</name> <operator>*</operator> <name>pBreakpoint</name><operator>)</operator></expr>;

}</block></expr></range></decl>;</decl_stmt>

<typedef>typedef <type><name><name>CComObject</name> <argument_list type="generic">&lt; <argument><expr><name>XDebuggerEvents</name></expr></argument> &gt;</argument_list></name></type> <name>XDebuggerEventsObj</name>;</typedef>

<decl_stmt><decl><type><name>XDebuggerEventsObj</name> <modifier>*</modifier></type><name>m_pDebuggerEventsObj</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<function_decl><type><name>STDMETHOD</name></type> (<name>VisVimDialog</name>) <parameter_list>(<parameter><decl><type><name>THIS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type> (<name>VisVimEnable</name>) <parameter_list>(<parameter><decl><type><name>THIS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type> (<name>VisVimDisable</name>) <parameter_list>(<parameter><decl><type><name>THIS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type> (<name>VisVimToggle</name>) <parameter_list>(<parameter><decl><type><name>THIS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>STDMETHOD</name></type> (<name>VisVimLoad</name>) <parameter_list>(<parameter><decl><type><name>THIS</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>CComObject</name> <argument_list type="generic">&lt; <argument><expr><name>CCommands</name></expr></argument> &gt;</argument_list></name></type> <name>CCommandsObj</name>;</typedef>

</unit>
