<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\term.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tgetstr</name></cpp:macro> <cpp:value>tgetstr_defined_wrong</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TERMIOS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TERMCAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termcap.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TPUTSFUNCAST</name></cpp:macro></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OUTFUNTYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TPUTSFUNCAST</name></cpp:macro> <cpp:value>(outfuntype)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TPUTSFUNCAST</name></cpp:macro> <cpp:value>(int (*)())</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>tgetstr</name></cpp:undef>

<struct>struct <name>builtin_term</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>bt_entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bt_string</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BT_EXTRA_KEYS</name></cpp:macro> <cpp:value>0x101</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>parse_builtin_tcap</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gather_termleader</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>req_codes_from_term</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>req_more_codes_from_term</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>got_code_from_term</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_for_codes_from_term</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>del_termcode_idx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>find_term_bykeys</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>term_is_builtin</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>term_7to8bit</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>tgetent_error</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>tgetstr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_TERMRESPONSE</name></cpp:macro></cpp:define>

static void log_tr(const char *fmt, ...);

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_TR</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>log_tr msg</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_TR</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while (0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <block>{

<decl><name>STATUS_GET</name></decl>, 

<decl><name>STATUS_SENT</name></decl>, 

<decl><name>STATUS_GOT</name></decl>, 

<decl><name>STATUS_FAIL</name></decl> 

}</block></enum></type> <name>request_progress_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>request_progress_T</name></type> <name>tr_progress</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>tr_start</name></decl>;</decl_stmt> 

}</block></struct></type> <name>termrequest_T</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TERMREQUEST_INIT</name></cpp:macro> <cpp:value>{STATUS_GET, -1}</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>termrequest_T</name></type> <name>crv_status</name> <init>= <expr><name>TERMREQUEST_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>termrequest_T</name></type> <name>u7_status</name> <init>= <expr><name>TERMREQUEST_INIT</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>termrequest_T</name></type> <name>rfg_status</name> <init>= <expr><name>TERMREQUEST_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fg_r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fg_g</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fg_b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bg_r</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bg_g</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>bg_b</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>termrequest_T</name></type> <name>rbg_status</name> <init>= <expr><name>TERMREQUEST_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>termrequest_T</name></type> <name>rbm_status</name> <init>= <expr><name>TERMREQUEST_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>termrequest_T</name></type> <name>rcs_status</name> <init>= <expr><name>TERMREQUEST_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>termrequest_T</name></type> <name>winpos_status</name> <init>= <expr><name>TERMREQUEST_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>termrequest_T</name> <modifier>*</modifier></type><name><name>all_termrequests</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>&amp;</operator><name>crv_status</name></expr>,

<expr><operator>&amp;</operator><name>u7_status</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>rfg_status</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>&amp;</operator><name>rbg_status</name></expr>,

<expr><operator>&amp;</operator><name>rbm_status</name></expr>,

<expr><operator>&amp;</operator><name>rcs_status</name></expr>,

<expr><operator>&amp;</operator><name>winpos_status</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OSPEED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OSPEED_EXTERN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>short</name></type> <name>ospeed</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>short</name></type> <name>ospeed</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UP_BC_PC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UP_BC_PC_EXTERN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>UP</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>BC</name></decl>, <decl><type ref="prev"/><name>PC</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>UP</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>BC</name></decl>, <decl><type ref="prev"/><name>PC</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TGETSTR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vim_tgetstr((s), (p))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TGETENT</name><parameter_list>(<parameter><type><name>b</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tgetent((char *)(b), (char *)(t))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>vim_tgetstr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>detected_8bit</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initial_cursor_shape</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initial_cursor_shape_blink</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initial_cursor_blink</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>builtin_term</name></name></type> <name><name>builtin_termcaps</name><index>[]</index></name> <init>=

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name></expr>, <expr><literal type="string">"gui"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|$"</literal></argument>, <argument>ESC_STR <literal type="string">"|$"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_AL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|i"</literal></argument>, <argument>ESC_STR <literal type="string">"|i"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|%p1%dI"</literal></argument>, <argument>ESC_STR <literal type="string">"|%p1%dI"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|%dI"</literal></argument>, <argument>ESC_STR <literal type="string">"|%dI"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_DL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|d"</literal></argument>, <argument>ESC_STR <literal type="string">"|d"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CDL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|%p1%dD"</literal></argument>, <argument>ESC_STR <literal type="string">"|%p1%dD"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|%p1%d;%p2%dR"</literal></argument>, <argument>ESC_STR <literal type="string">"|%p1%d;%p2%dR"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSV</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|%p1%d;%p2%dV"</literal></argument>, <argument>ESC_STR <literal type="string">"|%p1%d;%p2%dV"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CDL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|%dD"</literal></argument>, <argument>ESC_STR <literal type="string">"|%dD"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|%d;%dR"</literal></argument>, <argument>ESC_STR <literal type="string">"|%d;%dR"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSV</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|%d;%dV"</literal></argument>, <argument>ESC_STR <literal type="string">"|%d;%dV"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|C"</literal></argument>, <argument>ESC_STR <literal type="string">"|C"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_ME</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|31H"</literal></argument>, <argument>ESC_STR <literal type="string">"|31H"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MR</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|1h"</literal></argument>, <argument>ESC_STR <literal type="string">"|1h"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MD</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|2h"</literal></argument>, <argument>ESC_STR <literal type="string">"|2h"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|16H"</literal></argument>, <argument>ESC_STR <literal type="string">"|16H"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SO</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|16h"</literal></argument>, <argument>ESC_STR <literal type="string">"|16h"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|8H"</literal></argument>, <argument>ESC_STR <literal type="string">"|8H"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_US</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|8h"</literal></argument>, <argument>ESC_STR <literal type="string">"|8h"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UCE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|8C"</literal></argument>, <argument>ESC_STR <literal type="string">"|8C"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UCS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|8c"</literal></argument>, <argument>ESC_STR <literal type="string">"|8c"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_STE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|4C"</literal></argument>, <argument>ESC_STR <literal type="string">"|4C"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_STS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|4c"</literal></argument>, <argument>ESC_STR <literal type="string">"|4c"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CZR</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|4H"</literal></argument>, <argument>ESC_STR <literal type="string">"|4H"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CZH</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|4h"</literal></argument>, <argument>ESC_STR <literal type="string">"|4h"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_VB</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|f"</literal></argument>, <argument>ESC_STR <literal type="string">"|f"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MS</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UT</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_XN</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_LE</name></expr>, <expr><literal type="string">"\b"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_ND</name></expr>, <expr><literal type="string">"\014"</literal></expr>}</block></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|%p1%d;%p2%dM"</literal></argument>, <argument>ESC_STR <literal type="string">"|%p1%d;%p2%dM"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033|%d;%dM"</literal></argument>, <argument>ESC_STR <literal type="string">"|%d;%dM"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_BUILTIN_TCAPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALL_BUILTIN_TCAPS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name></expr>, <expr><literal type="string">"amiga"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CE</name></expr>, <expr><literal type="string">"\033[K"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CD</name></expr>, <expr><literal type="string">"\033[J"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_AL</name></expr>, <expr><literal type="string">"\033[L"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAL</name></expr>, <expr><literal type="string">"\033[%p1%dL"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAL</name></expr>, <expr><literal type="string">"\033[%dL"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_DL</name></expr>, <expr><literal type="string">"\033[M"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CDL</name></expr>, <expr><literal type="string">"\033[%p1%dM"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CDL</name></expr>, <expr><literal type="string">"\033[%dM"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CL</name></expr>, <expr><literal type="string">"\014"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_VI</name></expr>, <expr><literal type="string">"\033[0 p"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_VE</name></expr>, <expr><literal type="string">"\033[1 p"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_ME</name></expr>, <expr><literal type="string">"\033[0m"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MR</name></expr>, <expr><literal type="string">"\033[7m"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MD</name></expr>, <expr><literal type="string">"\033[1m"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SE</name></expr>, <expr><literal type="string">"\033[0m"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SO</name></expr>, <expr><literal type="string">"\033[33m"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_US</name></expr>, <expr><literal type="string">"\033[4m"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UE</name></expr>, <expr><literal type="string">"\033[0m"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CZH</name></expr>, <expr><literal type="string">"\033[3m"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CZR</name></expr>, <expr><literal type="string">"\033[0m"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MORPHOS__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AROS__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CCO</name></expr>, <expr><literal type="string">"8"</literal></expr>}</block></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAB</name></expr>, <expr><literal type="string">"\033[4%p1%dm"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAF</name></expr>, <expr><literal type="string">"\033[3%p1%dm"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAB</name></expr>, <expr><literal type="string">"\033[4%dm"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAF</name></expr>, <expr><literal type="string">"\033[3%dm"</literal></expr>}</block></expr>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_OP</name></expr>, <expr><literal type="string">"\033[m"</literal></expr>}</block></expr>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MS</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UT</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_LE</name></expr>, <expr><literal type="string">"\b"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <expr><literal type="string">"\033[%i%p1%d;%p2%dH"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <expr><literal type="string">"\033[%i%d;%dH"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MORPHOS__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SR</name></expr>, <expr><literal type="string">"\033M"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRI</name></expr>, <expr><literal type="string">"\033[%p1%dC"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRI</name></expr>, <expr><literal type="string">"\033[%dC"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><name>K_UP</name></expr>, <expr><literal type="string">"\233A"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_DOWN</name></expr>, <expr><literal type="string">"\233B"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_LEFT</name></expr>, <expr><literal type="string">"\233D"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_RIGHT</name></expr>, <expr><literal type="string">"\233C"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_UP</name></expr>, <expr><literal type="string">"\233T"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_DOWN</name></expr>, <expr><literal type="string">"\233S"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_LEFT</name></expr>, <expr><literal type="string">"\233 A"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_RIGHT</name></expr>, <expr><literal type="string">"\233 @"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_TAB</name></expr>, <expr><literal type="string">"\233Z"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F1</name></expr>, <expr><literal type="string">"\233\060~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F2</name></expr>, <expr><literal type="string">"\233\061~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F3</name></expr>, <expr><literal type="string">"\233\062~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F4</name></expr>, <expr><literal type="string">"\233\063~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F5</name></expr>, <expr><literal type="string">"\233\064~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F6</name></expr>, <expr><literal type="string">"\233\065~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F7</name></expr>, <expr><literal type="string">"\233\066~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F8</name></expr>, <expr><literal type="string">"\233\067~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F9</name></expr>, <expr><literal type="string">"\233\070~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F10</name></expr>, <expr><literal type="string">"\233\071~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F1</name></expr>, <expr><literal type="string">"\233\061\060~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F2</name></expr>, <expr><literal type="string">"\233\061\061~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F3</name></expr>, <expr><literal type="string">"\233\061\062~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F4</name></expr>, <expr><literal type="string">"\233\061\063~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F5</name></expr>, <expr><literal type="string">"\233\061\064~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F6</name></expr>, <expr><literal type="string">"\233\061\065~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F7</name></expr>, <expr><literal type="string">"\233\061\066~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F8</name></expr>, <expr><literal type="string">"\233\061\067~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F9</name></expr>, <expr><literal type="string">"\233\061\070~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F10</name></expr>, <expr><literal type="string">"\233\061\071~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_HELP</name></expr>, <expr><literal type="string">"\233?~"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_INS</name></expr>, <expr><literal type="string">"\233\064\060~"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>K_PAGEUP</name></expr>, <expr><literal type="string">"\233\064\061~"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>K_PAGEDOWN</name></expr>, <expr><literal type="string">"\233\064\062~"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>K_HOME</name></expr>, <expr><literal type="string">"\233\064\064~"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>K_END</name></expr>, <expr><literal type="string">"\233\064\065~"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>BT_EXTRA_KEYS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"\233\065\064~"</literal></expr>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"\233\065\060~"</literal></expr>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><literal type="char">'7'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"\233\065\065~"</literal></expr>}</block></expr>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BEOS__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALL_BUILTIN_TCAPS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name></expr>, <expr><literal type="string">"beos-ansi"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CE</name></expr>, <expr><literal type="string">"\033[K"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CD</name></expr>, <expr><literal type="string">"\033[J"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_AL</name></expr>, <expr><literal type="string">"\033[L"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAL</name></expr>, <expr><literal type="string">"\033[%p1%dL"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAL</name></expr>, <expr><literal type="string">"\033[%dL"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_DL</name></expr>, <expr><literal type="string">"\033[M"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CDL</name></expr>, <expr><literal type="string">"\033[%p1%dM"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CDL</name></expr>, <expr><literal type="string">"\033[%dM"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BEOS_PR_OR_BETTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CS</name></expr>, <expr><literal type="string">"\033[%i%p1%d;%p2%dr"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CS</name></expr>, <expr><literal type="string">"\033[%i%d;%dr"</literal></expr>}</block></expr>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CL</name></expr>, <expr><literal type="string">"\033[H\033[2J"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>notyet</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_VI</name></expr>, <expr><literal type="string">"[VI]"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_VE</name></expr>, <expr><literal type="string">"[VE]"</literal></expr>}</block></expr>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_ME</name></expr>, <expr><literal type="string">"\033[m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MR</name></expr>, <expr><literal type="string">"\033[7m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MD</name></expr>, <expr><literal type="string">"\033[1m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SO</name></expr>, <expr><literal type="string">"\033[31m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SE</name></expr>, <expr><literal type="string">"\033[m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CZH</name></expr>, <expr><literal type="string">"\033[35m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CZR</name></expr>, <expr><literal type="string">"\033[m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_US</name></expr>, <expr><literal type="string">"\033[4m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UE</name></expr>, <expr><literal type="string">"\033[m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CCO</name></expr>, <expr><literal type="string">"8"</literal></expr>}</block></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAB</name></expr>, <expr><literal type="string">"\033[4%p1%dm"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAF</name></expr>, <expr><literal type="string">"\033[3%p1%dm"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAB</name></expr>, <expr><literal type="string">"\033[4%dm"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAF</name></expr>, <expr><literal type="string">"\033[3%dm"</literal></expr>}</block></expr>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_OP</name></expr>, <expr><literal type="string">"\033[m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MS</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UT</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_LE</name></expr>, <expr><literal type="string">"\b"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <expr><literal type="string">"\033[%i%p1%d;%p2%dH"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <expr><literal type="string">"\033[%i%d;%dH"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SR</name></expr>, <expr><literal type="string">"\033M"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRI</name></expr>, <expr><literal type="string">"\033[%p1%dC"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRI</name></expr>, <expr><literal type="string">"\033[%dC"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BEOS_DR8</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_DB</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><name>K_UP</name></expr>, <expr><literal type="string">"\033[A"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_DOWN</name></expr>, <expr><literal type="string">"\033[B"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_LEFT</name></expr>, <expr><literal type="string">"\033[D"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_RIGHT</name></expr>, <expr><literal type="string">"\033[C"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALL_BUILTIN_TCAPS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SOME_BUILTIN_TCAPS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name></expr>, <expr><literal type="string">"ansi"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[K"</literal></argument>, <argument>ESC_STR <literal type="string">"[K"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_AL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[L"</literal></argument>, <argument>ESC_STR <literal type="string">"[L"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%p1%dL"</literal></argument>, <argument>ESC_STR <literal type="string">"[%p1%dL"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%dL"</literal></argument>, <argument>ESC_STR <literal type="string">"[%dL"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_DL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[M"</literal></argument>, <argument>ESC_STR <literal type="string">"[M"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CDL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%p1%dM"</literal></argument>, <argument>ESC_STR <literal type="string">"[%p1%dM"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CDL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%dM"</literal></argument>, <argument>ESC_STR <literal type="string">"[%dM"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[H\033[2J"</literal></argument>, <argument>ESC_STR <literal type="string">"[H"</literal> ESC_STR_nc <literal type="string">"[2J"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_ME</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[0m"</literal></argument>, <argument>ESC_STR <literal type="string">"[0m"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MR</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[7m"</literal></argument>, <argument>ESC_STR <literal type="string">"[7m"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MS</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UT</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_LE</name></expr>, <expr><literal type="string">"\b"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%i%p1%d;%p2%dH"</literal></argument>, <argument>ESC_STR <literal type="string">"[%i%p1%d;%p2%dH"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%i%d;%dH"</literal></argument>, <argument>ESC_STR <literal type="string">"[%i%d;%dH"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRI</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%p1%dC"</literal></argument>, <argument>ESC_STR <literal type="string">"[%p1%dC"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRI</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%dC"</literal></argument>, <argument>ESC_STR <literal type="string">"[%dC"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALL_BUILTIN_TCAPS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name></expr>, <expr><literal type="string">"pcansi"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_DL</name></expr>, <expr><literal type="string">"\033[M"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_AL</name></expr>, <expr><literal type="string">"\033[L"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CE</name></expr>, <expr><literal type="string">"\033[K"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CL</name></expr>, <expr><literal type="string">"\033[2J"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_ME</name></expr>, <expr><literal type="string">"\033[0m"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MR</name></expr>, <expr><literal type="string">"\033[5m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MD</name></expr>, <expr><literal type="string">"\033[1m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SE</name></expr>, <expr><literal type="string">"\033[0m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SO</name></expr>, <expr><literal type="string">"\033[31m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CZH</name></expr>, <expr><literal type="string">"\033[34;43m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CZR</name></expr>, <expr><literal type="string">"\033[0m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_US</name></expr>, <expr><literal type="string">"\033[36;41m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UE</name></expr>, <expr><literal type="string">"\033[0m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CCO</name></expr>, <expr><literal type="string">"8"</literal></expr>}</block></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAB</name></expr>, <expr><literal type="string">"\033[4%p1%dm"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAF</name></expr>, <expr><literal type="string">"\033[3%p1%dm"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAB</name></expr>, <expr><literal type="string">"\033[4%dm"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAF</name></expr>, <expr><literal type="string">"\033[3%dm"</literal></expr>}</block></expr>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_OP</name></expr>, <expr><literal type="string">"\033[0m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MS</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UT</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_LE</name></expr>, <expr><literal type="string">"\b"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <expr><literal type="string">"\033[%i%p1%d;%p2%dH"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <expr><literal type="string">"\033[%i%d;%dH"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRI</name></expr>, <expr><literal type="string">"\033[%p1%dC"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRI</name></expr>, <expr><literal type="string">"\033[%dC"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><name>K_UP</name></expr>, <expr><literal type="string">"\316H"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_DOWN</name></expr>, <expr><literal type="string">"\316P"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_LEFT</name></expr>, <expr><literal type="string">"\316K"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_RIGHT</name></expr>, <expr><literal type="string">"\316M"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_LEFT</name></expr>, <expr><literal type="string">"\316s"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_RIGHT</name></expr>, <expr><literal type="string">"\316t"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F1</name></expr>, <expr><literal type="string">"\316;"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F2</name></expr>, <expr><literal type="string">"\316&lt;"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F3</name></expr>, <expr><literal type="string">"\316="</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F4</name></expr>, <expr><literal type="string">"\316&gt;"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F5</name></expr>, <expr><literal type="string">"\316?"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F6</name></expr>, <expr><literal type="string">"\316@"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F7</name></expr>, <expr><literal type="string">"\316A"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F8</name></expr>, <expr><literal type="string">"\316B"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F9</name></expr>, <expr><literal type="string">"\316C"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F10</name></expr>, <expr><literal type="string">"\316D"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F11</name></expr>, <expr><literal type="string">"\316\205"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>K_F12</name></expr>, <expr><literal type="string">"\316\206"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>K_S_F1</name></expr>, <expr><literal type="string">"\316T"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F2</name></expr>, <expr><literal type="string">"\316U"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F3</name></expr>, <expr><literal type="string">"\316V"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F4</name></expr>, <expr><literal type="string">"\316W"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F5</name></expr>, <expr><literal type="string">"\316X"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F6</name></expr>, <expr><literal type="string">"\316Y"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F7</name></expr>, <expr><literal type="string">"\316Z"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F8</name></expr>, <expr><literal type="string">"\316["</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F9</name></expr>, <expr><literal type="string">"\316\\"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F10</name></expr>, <expr><literal type="string">"\316]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F11</name></expr>, <expr><literal type="string">"\316\207"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>K_S_F12</name></expr>, <expr><literal type="string">"\316\210"</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>K_INS</name></expr>, <expr><literal type="string">"\316R"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_DEL</name></expr>, <expr><literal type="string">"\316S"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_HOME</name></expr>, <expr><literal type="string">"\316G"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_END</name></expr>, <expr><literal type="string">"\316O"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_PAGEDOWN</name></expr>, <expr><literal type="string">"\316Q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_PAGEUP</name></expr>, <expr><literal type="string">"\316I"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALL_BUILTIN_TCAPS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name></expr>, <expr><literal type="string">"win32"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CE</name></expr>, <expr><literal type="string">"\033|K"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_AL</name></expr>, <expr><literal type="string">"\033|L"</literal></expr>}</block></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAL</name></expr>, <expr><literal type="string">"\033|%p1%dL"</literal></expr>}</block></expr>, 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAL</name></expr>, <expr><literal type="string">"\033|%dL"</literal></expr>}</block></expr>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_DL</name></expr>, <expr><literal type="string">"\033|M"</literal></expr>}</block></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CDL</name></expr>, <expr><literal type="string">"\033|%p1%dM"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSV</name></expr>, <expr><literal type="string">"\033|%p1%d;%p2%dV"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CDL</name></expr>, <expr><literal type="string">"\033|%dM"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSV</name></expr>, <expr><literal type="string">"\033|%d;%dV"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CL</name></expr>, <expr><literal type="string">"\033|J"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CD</name></expr>, <expr><literal type="string">"\033|j"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_VI</name></expr>, <expr><literal type="string">"\033|v"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_VE</name></expr>, <expr><literal type="string">"\033|V"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_ME</name></expr>, <expr><literal type="string">"\033|0m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MR</name></expr>, <expr><literal type="string">"\033|112m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MD</name></expr>, <expr><literal type="string">"\033|15m"</literal></expr>}</block></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SO</name></expr>, <expr><literal type="string">"\033|31m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SE</name></expr>, <expr><literal type="string">"\033|0m"</literal></expr>}</block></expr>, 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SO</name></expr>, <expr><literal type="string">"\033|F"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SE</name></expr>, <expr><literal type="string">"\033|f"</literal></expr>}</block></expr>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CZH</name></expr>, <expr><literal type="string">"\033|225m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CZR</name></expr>, <expr><literal type="string">"\033|0m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_US</name></expr>, <expr><literal type="string">"\033|67m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UE</name></expr>, <expr><literal type="string">"\033|0m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CCO</name></expr>, <expr><literal type="string">"16"</literal></expr>}</block></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAB</name></expr>, <expr><literal type="string">"\033|%p1%db"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAF</name></expr>, <expr><literal type="string">"\033|%p1%df"</literal></expr>}</block></expr>, 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAB</name></expr>, <expr><literal type="string">"\033|%db"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAF</name></expr>, <expr><literal type="string">"\033|%df"</literal></expr>}</block></expr>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MS</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UT</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_XN</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_LE</name></expr>, <expr><literal type="string">"\b"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <expr><literal type="string">"\033|%i%p1%d;%p2%dH"</literal></expr>}</block></expr>, 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <expr><literal type="string">"\033|%i%d;%dH"</literal></expr>}</block></expr>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_VB</name></expr>, <expr><literal type="string">"\033|B"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_TI</name></expr>, <expr><literal type="string">"\033|S"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_TE</name></expr>, <expr><literal type="string">"\033|E"</literal></expr>}</block></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CS</name></expr>, <expr><literal type="string">"\033|%i%p1%d;%p2%dr"</literal></expr>}</block></expr>, 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CS</name></expr>, <expr><literal type="string">"\033|%i%d;%dr"</literal></expr>}</block></expr>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_8F</name></expr>, <expr><literal type="string">"\033|38;2;%lu;%lu;%lum"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_8B</name></expr>, <expr><literal type="string">"\033|48;2;%lu;%lu;%lum"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><name>K_UP</name></expr>, <expr><literal type="string">"\316H"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_DOWN</name></expr>, <expr><literal type="string">"\316P"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_LEFT</name></expr>, <expr><literal type="string">"\316K"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_RIGHT</name></expr>, <expr><literal type="string">"\316M"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_UP</name></expr>, <expr><literal type="string">"\316\304"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_DOWN</name></expr>, <expr><literal type="string">"\316\317"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_LEFT</name></expr>, <expr><literal type="string">"\316\311"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_C_LEFT</name></expr>, <expr><literal type="string">"\316s"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_RIGHT</name></expr>, <expr><literal type="string">"\316\313"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_C_RIGHT</name></expr>, <expr><literal type="string">"\316t"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_TAB</name></expr>, <expr><literal type="string">"\316\017"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F1</name></expr>, <expr><literal type="string">"\316;"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F2</name></expr>, <expr><literal type="string">"\316&lt;"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F3</name></expr>, <expr><literal type="string">"\316="</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F4</name></expr>, <expr><literal type="string">"\316&gt;"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F5</name></expr>, <expr><literal type="string">"\316?"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F6</name></expr>, <expr><literal type="string">"\316@"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F7</name></expr>, <expr><literal type="string">"\316A"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F8</name></expr>, <expr><literal type="string">"\316B"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F9</name></expr>, <expr><literal type="string">"\316C"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F10</name></expr>, <expr><literal type="string">"\316D"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F11</name></expr>, <expr><literal type="string">"\316\205"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F12</name></expr>, <expr><literal type="string">"\316\206"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F1</name></expr>, <expr><literal type="string">"\316T"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F2</name></expr>, <expr><literal type="string">"\316U"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F3</name></expr>, <expr><literal type="string">"\316V"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F4</name></expr>, <expr><literal type="string">"\316W"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F5</name></expr>, <expr><literal type="string">"\316X"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F6</name></expr>, <expr><literal type="string">"\316Y"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F7</name></expr>, <expr><literal type="string">"\316Z"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F8</name></expr>, <expr><literal type="string">"\316["</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F9</name></expr>, <expr><literal type="string">"\316\\"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F10</name></expr>, <expr><literal type="string">"\316]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F11</name></expr>, <expr><literal type="string">"\316\207"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F12</name></expr>, <expr><literal type="string">"\316\210"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_INS</name></expr>, <expr><literal type="string">"\316R"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_DEL</name></expr>, <expr><literal type="string">"\316S"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_HOME</name></expr>, <expr><literal type="string">"\316G"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_HOME</name></expr>, <expr><literal type="string">"\316\302"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_C_HOME</name></expr>, <expr><literal type="string">"\316w"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_END</name></expr>, <expr><literal type="string">"\316O"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_END</name></expr>, <expr><literal type="string">"\316\315"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_C_END</name></expr>, <expr><literal type="string">"\316u"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_PAGEDOWN</name></expr>, <expr><literal type="string">"\316Q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_PAGEUP</name></expr>, <expr><literal type="string">"\316I"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_KPLUS</name></expr>, <expr><literal type="string">"\316N"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_KMINUS</name></expr>, <expr><literal type="string">"\316J"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_KMULTIPLY</name></expr>, <expr><literal type="string">"\316\067"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_K0</name></expr>, <expr><literal type="string">"\316\332"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_K1</name></expr>, <expr><literal type="string">"\316\336"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_K2</name></expr>, <expr><literal type="string">"\316\342"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_K3</name></expr>, <expr><literal type="string">"\316\346"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_K4</name></expr>, <expr><literal type="string">"\316\352"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_K5</name></expr>, <expr><literal type="string">"\316\356"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_K6</name></expr>, <expr><literal type="string">"\316\362"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_K7</name></expr>, <expr><literal type="string">"\316\366"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_K8</name></expr>, <expr><literal type="string">"\316\372"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_K9</name></expr>, <expr><literal type="string">"\316\376"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_BS</name></expr>, <expr><literal type="string">"\316x"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALL_BUILTIN_TCAPS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name></expr>, <expr><literal type="string">"vt320"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[K"</literal></argument>, <argument>ESC_STR <literal type="string">"[K"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_AL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[L"</literal></argument>, <argument>ESC_STR <literal type="string">"[L"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%p1%dL"</literal></argument>, <argument>ESC_STR <literal type="string">"[%p1%dL"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%dL"</literal></argument>, <argument>ESC_STR <literal type="string">"[%dL"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_DL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[M"</literal></argument>, <argument>ESC_STR <literal type="string">"[M"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CDL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%p1%dM"</literal></argument>, <argument>ESC_STR <literal type="string">"[%p1%dM"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CDL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%dM"</literal></argument>, <argument>ESC_STR <literal type="string">"[%dM"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[H\033[2J"</literal></argument>, <argument>ESC_STR <literal type="string">"[H"</literal> ESC_STR_nc <literal type="string">"[2J"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CD</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[J"</literal></argument>, <argument>ESC_STR <literal type="string">"[J"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CCO</name></expr>, <expr><literal type="string">"8"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_ME</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[0m"</literal></argument>, <argument>ESC_STR <literal type="string">"[0m"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MR</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[7m"</literal></argument>, <argument>ESC_STR <literal type="string">"[7m"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MD</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[1m"</literal></argument>, <argument>ESC_STR <literal type="string">"[1m"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[22m"</literal></argument>, <argument>ESC_STR <literal type="string">"[22m"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[24m"</literal></argument>, <argument>ESC_STR <literal type="string">"[24m"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_US</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[4m"</literal></argument>, <argument>ESC_STR <literal type="string">"[4m"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CZH</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[34;43m"</literal></argument>, <argument>ESC_STR <literal type="string">"[34;43m"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CZR</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[0m"</literal></argument>, <argument>ESC_STR <literal type="string">"[0m"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAB</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[4%dm"</literal></argument>, <argument>ESC_STR <literal type="string">"[4%dm"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAF</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[3%dm"</literal></argument>, <argument>ESC_STR <literal type="string">"[3%dm"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSB</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[102;%dm"</literal></argument>, <argument>ESC_STR <literal type="string">"[102;%dm"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSF</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[101;%dm"</literal></argument>, <argument>ESC_STR <literal type="string">"[101;%dm"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MS</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UT</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_XN</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_LE</name></expr>, <expr><literal type="string">"\b"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%i%p1%d;%p2%dH"</literal></argument>,

<argument>ESC_STR <literal type="string">"[%i%p1%d;%p2%dH"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%i%d;%dH"</literal></argument>, <argument>ESC_STR <literal type="string">"[%i%d;%dH"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRI</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%p1%dC"</literal></argument>, <argument>ESC_STR <literal type="string">"[%p1%dC"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRI</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%dC"</literal></argument>, <argument>ESC_STR <literal type="string">"[%dC"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><name>K_UP</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[A"</literal></argument>, <argument>ESC_STR <literal type="string">"[A"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_DOWN</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[B"</literal></argument>, <argument>ESC_STR <literal type="string">"[B"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_RIGHT</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[C"</literal></argument>, <argument>ESC_STR <literal type="string">"[C"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_LEFT</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[D"</literal></argument>, <argument>ESC_STR <literal type="string">"[D"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F1</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[11~"</literal></argument>, <argument>ESC_STR <literal type="string">"[11~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F2</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[12~"</literal></argument>, <argument>ESC_STR <literal type="string">"[12~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F3</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[13~"</literal></argument>, <argument>ESC_STR <literal type="string">"[13~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F4</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[14~"</literal></argument>, <argument>ESC_STR <literal type="string">"[14~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F5</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[15~"</literal></argument>, <argument>ESC_STR <literal type="string">"[15~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F6</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[17~"</literal></argument>, <argument>ESC_STR <literal type="string">"[17~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F7</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[18~"</literal></argument>, <argument>ESC_STR <literal type="string">"[18~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F8</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[19~"</literal></argument>, <argument>ESC_STR <literal type="string">"[19~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F9</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[20~"</literal></argument>, <argument>ESC_STR <literal type="string">"[20~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F10</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[21~"</literal></argument>, <argument>ESC_STR <literal type="string">"[21~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F11</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[23~"</literal></argument>, <argument>ESC_STR <literal type="string">"[23~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F12</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[24~"</literal></argument>, <argument>ESC_STR <literal type="string">"[24~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F13</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[25~"</literal></argument>, <argument>ESC_STR <literal type="string">"[25~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F14</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[26~"</literal></argument>, <argument>ESC_STR <literal type="string">"[26~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F15</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[28~"</literal></argument>, <argument>ESC_STR <literal type="string">"[28~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_F16</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[29~"</literal></argument>, <argument>ESC_STR <literal type="string">"[29~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_F17</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[31~"</literal></argument>, <argument>ESC_STR <literal type="string">"[31~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F18</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[32~"</literal></argument>, <argument>ESC_STR <literal type="string">"[32~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F19</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[33~"</literal></argument>, <argument>ESC_STR <literal type="string">"[33~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F20</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[34~"</literal></argument>, <argument>ESC_STR <literal type="string">"[34~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_INS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[2~"</literal></argument>, <argument>ESC_STR <literal type="string">"[2~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_DEL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[3~"</literal></argument>, <argument>ESC_STR <literal type="string">"[3~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_HOME</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[1~"</literal></argument>, <argument>ESC_STR <literal type="string">"[1~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_END</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[4~"</literal></argument>, <argument>ESC_STR <literal type="string">"[4~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_PAGEUP</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[5~"</literal></argument>, <argument>ESC_STR <literal type="string">"[5~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_PAGEDOWN</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[6~"</literal></argument>, <argument>ESC_STR <literal type="string">"[6~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_KPLUS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033Ok"</literal></argument>, <argument>ESC_STR <literal type="string">"Ok"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_KMINUS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033Om"</literal></argument>, <argument>ESC_STR <literal type="string">"Om"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_KDIVIDE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033Oo"</literal></argument>, <argument>ESC_STR <literal type="string">"Oo"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_KMULTIPLY</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033Oj"</literal></argument>, <argument>ESC_STR <literal type="string">"Oj"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_KENTER</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033OM"</literal></argument>, <argument>ESC_STR <literal type="string">"OM"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_K0</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033Op"</literal></argument>, <argument>ESC_STR <literal type="string">"Op"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_K1</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033Oq"</literal></argument>, <argument>ESC_STR <literal type="string">"Oq"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_K2</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033Or"</literal></argument>, <argument>ESC_STR <literal type="string">"Or"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_K3</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033Os"</literal></argument>, <argument>ESC_STR <literal type="string">"Os"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_K4</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033Ot"</literal></argument>, <argument>ESC_STR <literal type="string">"Ot"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_K5</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033Ou"</literal></argument>, <argument>ESC_STR <literal type="string">"Ou"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_K6</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033Ov"</literal></argument>, <argument>ESC_STR <literal type="string">"Ov"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_K7</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033Ow"</literal></argument>, <argument>ESC_STR <literal type="string">"Ow"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_K8</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033Ox"</literal></argument>, <argument>ESC_STR <literal type="string">"Ox"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_K9</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033Oy"</literal></argument>, <argument>ESC_STR <literal type="string">"Oy"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_BS</name></expr>, <expr><literal type="string">"\x7f"</literal></expr>}</block></expr>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALL_BUILTIN_TCAPS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINT__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name></expr>, <expr><literal type="string">"vt52"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033K"</literal></argument>, <argument>ESC_STR <literal type="string">"K"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CD</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033J"</literal></argument>, <argument>ESC_STR <literal type="string">"J"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033Y%p1%' '%+%c%p2%' '%+%c"</literal></argument>,

<argument>ESC_STR <literal type="string">"Y%p1%' '%+%c%p2%' '%+%c"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033Y%+ %+ "</literal></argument>, <argument>ESC_STR <literal type="string">"Y%+ %+ "</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_LE</name></expr>, <expr><literal type="string">"\b"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SR</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033I"</literal></argument>, <argument>ESC_STR <literal type="string">"I"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_AL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033L"</literal></argument>, <argument>ESC_STR <literal type="string">"L"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_DL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033M"</literal></argument>, <argument>ESC_STR <literal type="string">"M"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_UP</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033A"</literal></argument>, <argument>ESC_STR <literal type="string">"A"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_DOWN</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033B"</literal></argument>, <argument>ESC_STR <literal type="string">"B"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_LEFT</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033D"</literal></argument>, <argument>ESC_STR <literal type="string">"D"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_RIGHT</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033C"</literal></argument>, <argument>ESC_STR <literal type="string">"C"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F1</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033P"</literal></argument>, <argument>ESC_STR <literal type="string">"P"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F2</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033Q"</literal></argument>, <argument>ESC_STR <literal type="string">"Q"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F3</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033R"</literal></argument>, <argument>ESC_STR <literal type="string">"R"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINT__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033E"</literal></argument>, <argument>ESC_STR <literal type="string">"E"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_VE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033e"</literal></argument>, <argument>ESC_STR <literal type="string">"e"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_VI</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033f"</literal></argument>, <argument>ESC_STR <literal type="string">"f"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SO</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033p"</literal></argument>, <argument>ESC_STR <literal type="string">"p"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033q"</literal></argument>, <argument>ESC_STR <literal type="string">"q"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_S_UP</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033a"</literal></argument>, <argument>ESC_STR <literal type="string">"a"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_S_DOWN</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033b"</literal></argument>, <argument>ESC_STR <literal type="string">"b"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_S_LEFT</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033d"</literal></argument>, <argument>ESC_STR <literal type="string">"d"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_S_RIGHT</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033c"</literal></argument>, <argument>ESC_STR <literal type="string">"c"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F4</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033S"</literal></argument>, <argument>ESC_STR <literal type="string">"S"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F5</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033T"</literal></argument>, <argument>ESC_STR <literal type="string">"T"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F6</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033U"</literal></argument>, <argument>ESC_STR <literal type="string">"U"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F7</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033V"</literal></argument>, <argument>ESC_STR <literal type="string">"V"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F8</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033W"</literal></argument>, <argument>ESC_STR <literal type="string">"W"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F9</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033X"</literal></argument>, <argument>ESC_STR <literal type="string">"X"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F10</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033Y"</literal></argument>, <argument>ESC_STR <literal type="string">"Y"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_S_F1</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033p"</literal></argument>, <argument>ESC_STR <literal type="string">"p"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_S_F2</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033q"</literal></argument>, <argument>ESC_STR <literal type="string">"q"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_S_F3</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033r"</literal></argument>, <argument>ESC_STR <literal type="string">"r"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_S_F4</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033s"</literal></argument>, <argument>ESC_STR <literal type="string">"s"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_S_F5</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033t"</literal></argument>, <argument>ESC_STR <literal type="string">"t"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_S_F6</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033u"</literal></argument>, <argument>ESC_STR <literal type="string">"u"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_S_F7</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033v"</literal></argument>, <argument>ESC_STR <literal type="string">"v"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_S_F8</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033w"</literal></argument>, <argument>ESC_STR <literal type="string">"w"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_S_F9</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033x"</literal></argument>, <argument>ESC_STR <literal type="string">"x"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_S_F10</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033y"</literal></argument>, <argument>ESC_STR <literal type="string">"y"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_INS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033I"</literal></argument>, <argument>ESC_STR <literal type="string">"I"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_HOME</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033E"</literal></argument>, <argument>ESC_STR <literal type="string">"E"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_PAGEDOWN</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033b"</literal></argument>, <argument>ESC_STR <literal type="string">"b"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_PAGEUP</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033a"</literal></argument>, <argument>ESC_STR <literal type="string">"a"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033H\033J"</literal></argument>, <argument>ESC_STR <literal type="string">"H"</literal> ESC_STR_nc <literal type="string">"J"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MS</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALL_BUILTIN_TCAPS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SOME_BUILTIN_TCAPS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name></expr>, <expr><literal type="string">"xterm"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[K"</literal></argument>, <argument>ESC_STR <literal type="string">"[K"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_AL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[L"</literal></argument>, <argument>ESC_STR <literal type="string">"[L"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%p1%dL"</literal></argument>, <argument>ESC_STR <literal type="string">"[%p1%dL"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%dL"</literal></argument>, <argument>ESC_STR <literal type="string">"[%dL"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_DL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[M"</literal></argument>, <argument>ESC_STR <literal type="string">"[M"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CDL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%p1%dM"</literal></argument>, <argument>ESC_STR <literal type="string">"[%p1%dM"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CDL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%dM"</literal></argument>, <argument>ESC_STR <literal type="string">"[%dM"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%i%p1%d;%p2%dr"</literal></argument>,

<argument>ESC_STR <literal type="string">"[%i%p1%d;%p2%dr"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%i%d;%dr"</literal></argument>, <argument>ESC_STR <literal type="string">"[%i%d;%dr"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[H\033[2J"</literal></argument>, <argument>ESC_STR <literal type="string">"[H"</literal> ESC_STR_nc <literal type="string">"[2J"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CD</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[J"</literal></argument>, <argument>ESC_STR <literal type="string">"[J"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_ME</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[m"</literal></argument>, <argument>ESC_STR <literal type="string">"[m"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MR</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[7m"</literal></argument>, <argument>ESC_STR <literal type="string">"[7m"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MD</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[1m"</literal></argument>, <argument>ESC_STR <literal type="string">"[1m"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[m"</literal></argument>, <argument>ESC_STR <literal type="string">"[m"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_US</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[4m"</literal></argument>, <argument>ESC_STR <literal type="string">"[4m"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_STE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[29m"</literal></argument>, <argument>ESC_STR <literal type="string">"[29m"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_STS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[9m"</literal></argument>, <argument>ESC_STR <literal type="string">"[9m"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MS</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UT</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_LE</name></expr>, <expr><literal type="string">"\b"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_VI</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[?25l"</literal></argument>, <argument>ESC_STR <literal type="string">"[?25l"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_VE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[?25h"</literal></argument>, <argument>ESC_STR <literal type="string">"[?25h"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_VS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[?12h"</literal></argument>, <argument>ESC_STR <literal type="string">"[?12h"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CVS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[?12l"</literal></argument>, <argument>ESC_STR <literal type="string">"[?12l"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSH</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%p1%d q"</literal></argument>, <argument>ESC_STR <literal type="string">"[%p1%d q"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSH</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%d q"</literal></argument>, <argument>ESC_STR <literal type="string">"[%d q"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRC</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[?12$p"</literal></argument>, <argument>ESC_STR <literal type="string">"[?12$p"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033P$q q\033\\"</literal></argument>, <argument>ESC_STR <literal type="string">"P$q q"</literal> ESC_STR <literal type="string">"\\"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%i%p1%d;%p2%dH"</literal></argument>,

<argument>ESC_STR <literal type="string">"[%i%p1%d;%p2%dH"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%i%d;%dH"</literal></argument>, <argument>ESC_STR <literal type="string">"[%i%d;%dH"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SR</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033M"</literal></argument>, <argument>ESC_STR <literal type="string">"M"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRI</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%p1%dC"</literal></argument>, <argument>ESC_STR <literal type="string">"[%p1%dC"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRI</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%dC"</literal></argument>, <argument>ESC_STR <literal type="string">"[%dC"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_KS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[?1h\033="</literal></argument>, <argument>ESC_STR <literal type="string">"[?1h"</literal> ESC_STR_nc <literal type="string">"="</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_KE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[?1l\033&gt;"</literal></argument>, <argument>ESC_STR <literal type="string">"[?1l"</literal> ESC_STR_nc <literal type="string">"&gt;"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XTERM_SAVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_TI</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\0337\033[?47h"</literal></argument>, <argument>ESC_STR <literal type="string">"7"</literal> ESC_STR_nc <literal type="string">"[?47h"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_TE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[?47l\0338"</literal></argument>,

<argument>ESC_STR_nc <literal type="string">"[?47l"</literal> ESC_STR_nc <literal type="string">"8"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CTI</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[&gt;4;2m"</literal></argument>, <argument>ESC_STR_nc <literal type="string">"[&gt;4;2m"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CTE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[&gt;4;m"</literal></argument>, <argument>ESC_STR_nc <literal type="string">"[&gt;4;m"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CIS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033]1;"</literal></argument>, <argument>ESC_STR <literal type="string">"]1;"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CIE</name></expr>, <expr><literal type="string">"\007"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_TS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033]2;"</literal></argument>, <argument>ESC_STR <literal type="string">"]2;"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_FS</name></expr>, <expr><literal type="string">"\007"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSC</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033]12;"</literal></argument>, <argument>ESC_STR <literal type="string">"]12;"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CEC</name></expr>, <expr><literal type="string">"\007"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CWS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[8;%p1%d;%p2%dt"</literal></argument>,

<argument>ESC_STR <literal type="string">"[8;%p1%d;%p2%dt"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CWP</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[3;%p1%d;%p2%dt"</literal></argument>,

<argument>ESC_STR <literal type="string">"[3;%p1%d;%p2%dt"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CGP</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[13t"</literal></argument>, <argument>ESC_STR <literal type="string">"[13t"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CWS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[8;%d;%dt"</literal></argument>, <argument>ESC_STR <literal type="string">"[8;%d;%dt"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CWP</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[3;%d;%dt"</literal></argument>, <argument>ESC_STR <literal type="string">"[3;%d;%dt"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CGP</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[13t"</literal></argument>, <argument>ESC_STR <literal type="string">"[13t"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRV</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[&gt;c"</literal></argument>, <argument>ESC_STR <literal type="string">"[&gt;c"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_RFG</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033]10;?\007"</literal></argument>, <argument>ESC_STR <literal type="string">"]10;?\007"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_RBG</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033]11;?\007"</literal></argument>, <argument>ESC_STR <literal type="string">"]11;?\007"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_U7</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[6n"</literal></argument>, <argument>ESC_STR <literal type="string">"[6n"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_8F</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[38;2;%lu;%lu;%lum"</literal></argument>, <argument>ESC_STR <literal type="string">"[38;2;%lu;%lu;%lum"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_8B</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[48;2;%lu;%lu;%lum"</literal></argument>, <argument>ESC_STR <literal type="string">"[48;2;%lu;%lu;%lum"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CBE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[?2004h"</literal></argument>, <argument>ESC_STR <literal type="string">"[?2004h"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CBD</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[?2004l"</literal></argument>, <argument>ESC_STR <literal type="string">"[?2004l"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CST</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[22;2t"</literal></argument>, <argument>ESC_STR <literal type="string">"[22;2t"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRT</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[23;2t"</literal></argument>, <argument>ESC_STR <literal type="string">"[23;2t"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SSI</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[22;1t"</literal></argument>, <argument>ESC_STR <literal type="string">"[22;1t"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SRI</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[23;1t"</literal></argument>, <argument>ESC_STR <literal type="string">"[23;1t"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_UP</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*A"</literal></argument>, <argument>ESC_STR <literal type="string">"O*A"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_DOWN</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*B"</literal></argument>, <argument>ESC_STR <literal type="string">"O*B"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_RIGHT</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*C"</literal></argument>, <argument>ESC_STR <literal type="string">"O*C"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_LEFT</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*D"</literal></argument>, <argument>ESC_STR <literal type="string">"O*D"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_XUP</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[1;*A"</literal></argument>, <argument>ESC_STR <literal type="string">"[1;*A"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_XDOWN</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[1;*B"</literal></argument>, <argument>ESC_STR <literal type="string">"[1;*B"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_XRIGHT</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[1;*C"</literal></argument>, <argument>ESC_STR <literal type="string">"[1;*C"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_XLEFT</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[1;*D"</literal></argument>, <argument>ESC_STR <literal type="string">"[1;*D"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_XF1</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*P"</literal></argument>, <argument>ESC_STR <literal type="string">"O*P"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_XF2</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*Q"</literal></argument>, <argument>ESC_STR <literal type="string">"O*Q"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_XF3</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*R"</literal></argument>, <argument>ESC_STR <literal type="string">"O*R"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_XF4</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*S"</literal></argument>, <argument>ESC_STR <literal type="string">"O*S"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F1</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[11;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[11;*~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F2</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[12;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[12;*~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F3</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[13;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[13;*~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F4</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[14;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[14;*~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F5</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[15;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[15;*~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F6</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[17;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[17;*~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F7</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[18;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[18;*~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F8</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[19;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[19;*~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F9</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[20;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[20;*~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F10</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[21;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[21;*~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F11</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[23;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[23;*~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_F12</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[24;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[24;*~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_S_TAB</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[Z"</literal></argument>, <argument>ESC_STR <literal type="string">"[Z"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_HELP</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[28;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[28;*~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_UNDO</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[26;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[26;*~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_INS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[2;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[2;*~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_HOME</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[1;*H"</literal></argument>, <argument>ESC_STR <literal type="string">"[1;*H"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_KHOME</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[1;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[1;*~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_XHOME</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*H"</literal></argument>, <argument>ESC_STR <literal type="string">"O*H"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_ZHOME</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[7;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[7;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_END</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[1;*F"</literal></argument>, <argument>ESC_STR <literal type="string">"[1;*F"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_KEND</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[4;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[4;*~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_XEND</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*F"</literal></argument>, <argument>ESC_STR <literal type="string">"O*F"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_ZEND</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[8;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[8;*~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_PAGEUP</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[5;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[5;*~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_PAGEDOWN</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[6;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[6;*~"</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><name>K_KPLUS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*k"</literal></argument>, <argument>ESC_STR <literal type="string">"O*k"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_KMINUS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*m"</literal></argument>, <argument>ESC_STR <literal type="string">"O*m"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_KDIVIDE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*o"</literal></argument>, <argument>ESC_STR <literal type="string">"O*o"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_KMULTIPLY</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*j"</literal></argument>, <argument>ESC_STR <literal type="string">"O*j"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_KENTER</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*M"</literal></argument>, <argument>ESC_STR <literal type="string">"O*M"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_KPOINT</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*n"</literal></argument>, <argument>ESC_STR <literal type="string">"O*n"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_K0</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*p"</literal></argument>, <argument>ESC_STR <literal type="string">"O*p"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_K1</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*q"</literal></argument>, <argument>ESC_STR <literal type="string">"O*q"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_K2</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*r"</literal></argument>, <argument>ESC_STR <literal type="string">"O*r"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_K3</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*s"</literal></argument>, <argument>ESC_STR <literal type="string">"O*s"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_K4</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*t"</literal></argument>, <argument>ESC_STR <literal type="string">"O*t"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_K5</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*u"</literal></argument>, <argument>ESC_STR <literal type="string">"O*u"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_K6</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*v"</literal></argument>, <argument>ESC_STR <literal type="string">"O*v"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_K7</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*w"</literal></argument>, <argument>ESC_STR <literal type="string">"O*w"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_K8</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*x"</literal></argument>, <argument>ESC_STR <literal type="string">"O*x"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_K9</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033O*y"</literal></argument>, <argument>ESC_STR <literal type="string">"O*y"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_KDEL</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[3;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[3;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_PS</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[200~"</literal></argument>, <argument>ESC_STR <literal type="string">"[200~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>K_PE</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[201~"</literal></argument>, <argument>ESC_STR <literal type="string">"[201~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><name>BT_EXTRA_KEYS</name></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'k'</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[10;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[10;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[25;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[25;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'6'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[29;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[29;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'7'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[31;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[31;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'8'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[32;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[32;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'9'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[33;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[33;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[34;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[34;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'B'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[42;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[42;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[43;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[43;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[44;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[44;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[45;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[45;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[46;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[46;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[47;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[47;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[48;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[48;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[49;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[49;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'J'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[50;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[50;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'K'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[51;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[51;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[52;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[52;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[53;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[53;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[54;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[54;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[55;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[55;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[56;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[56;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'Q'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[57;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[57;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[58;*~"</literal></argument>, <argument>ESC_STR <literal type="string">"[58;*~"</literal></argument>)</argument_list></macro>}</block></expr>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALL_BUILTIN_TCAPS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name></expr>, <expr><literal type="string">"iris-ansi"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CE</name></expr>, <expr><literal type="string">"\033[K"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CD</name></expr>, <expr><literal type="string">"\033[J"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_AL</name></expr>, <expr><literal type="string">"\033[L"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAL</name></expr>, <expr><literal type="string">"\033[%p1%dL"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAL</name></expr>, <expr><literal type="string">"\033[%dL"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_DL</name></expr>, <expr><literal type="string">"\033[M"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CDL</name></expr>, <expr><literal type="string">"\033[%p1%dM"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CDL</name></expr>, <expr><literal type="string">"\033[%dM"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
{(int)KS_CS, "\033[%i%p1%d;%p2%dr"},

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

{(int)KS_CS, "\033[%i%d;%dr"},

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CL</name></expr>, <expr><literal type="string">"\033[H\033[2J"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_VE</name></expr>, <expr><literal type="string">"\033[9/y\033[12/y"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_VS</name></expr>, <expr><literal type="string">"\033[10/y\033[=1h\033[=2l"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_TI</name></expr>, <expr><literal type="string">"\033[=6h"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_TE</name></expr>, <expr><literal type="string">"\033[=6l"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SE</name></expr>, <expr><literal type="string">"\033[21;27m"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SO</name></expr>, <expr><literal type="string">"\033[1;7m"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_ME</name></expr>, <expr><literal type="string">"\033[m"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MR</name></expr>, <expr><literal type="string">"\033[7m"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MD</name></expr>, <expr><literal type="string">"\033[1m"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CCO</name></expr>, <expr><literal type="string">"8"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CZH</name></expr>, <expr><literal type="string">"\033[3m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CZR</name></expr>, <expr><literal type="string">"\033[23m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_US</name></expr>, <expr><literal type="string">"\033[4m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UE</name></expr>, <expr><literal type="string">"\033[24m"</literal></expr>}</block></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAB</name></expr>, <expr><literal type="string">"\033[4%p1%dm"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAF</name></expr>, <expr><literal type="string">"\033[3%p1%dm"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSB</name></expr>, <expr><literal type="string">"\033[102;%p1%dm"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSF</name></expr>, <expr><literal type="string">"\033[101;%p1%dm"</literal></expr>}</block></expr>, 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAB</name></expr>, <expr><literal type="string">"\033[4%dm"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAF</name></expr>, <expr><literal type="string">"\033[3%dm"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSB</name></expr>, <expr><literal type="string">"\033[102;%dm"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSF</name></expr>, <expr><literal type="string">"\033[101;%dm"</literal></expr>}</block></expr>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MS</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UT</name></expr>, <expr><literal type="string">"y"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_LE</name></expr>, <expr><literal type="string">"\b"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <expr><literal type="string">"\033[%i%p1%d;%p2%dH"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <expr><literal type="string">"\033[%i%d;%dH"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SR</name></expr>, <expr><literal type="string">"\033M"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRI</name></expr>, <expr><literal type="string">"\033[%p1%dC"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRI</name></expr>, <expr><literal type="string">"\033[%dC"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CIS</name></expr>, <expr><literal type="string">"\033P3.y"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CIE</name></expr>, <expr><literal type="string">"\234"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_TS</name></expr>, <expr><literal type="string">"\033P1.y"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_FS</name></expr>, <expr><literal type="string">"\234"</literal></expr>}</block></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CWS</name></expr>, <expr><literal type="string">"\033[203;%p1%d;%p2%d/y"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CWP</name></expr>, <expr><literal type="string">"\033[205;%p1%d;%p2%d/y"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CWS</name></expr>, <expr><literal type="string">"\033[203;%d;%d/y"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CWP</name></expr>, <expr><literal type="string">"\033[205;%d;%d/y"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><name>K_UP</name></expr>, <expr><literal type="string">"\033[A"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_DOWN</name></expr>, <expr><literal type="string">"\033[B"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_LEFT</name></expr>, <expr><literal type="string">"\033[D"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_RIGHT</name></expr>, <expr><literal type="string">"\033[C"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_UP</name></expr>, <expr><literal type="string">"\033[161q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_DOWN</name></expr>, <expr><literal type="string">"\033[164q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_LEFT</name></expr>, <expr><literal type="string">"\033[158q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_RIGHT</name></expr>, <expr><literal type="string">"\033[167q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F1</name></expr>, <expr><literal type="string">"\033[001q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F2</name></expr>, <expr><literal type="string">"\033[002q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F3</name></expr>, <expr><literal type="string">"\033[003q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F4</name></expr>, <expr><literal type="string">"\033[004q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F5</name></expr>, <expr><literal type="string">"\033[005q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F6</name></expr>, <expr><literal type="string">"\033[006q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F7</name></expr>, <expr><literal type="string">"\033[007q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F8</name></expr>, <expr><literal type="string">"\033[008q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F9</name></expr>, <expr><literal type="string">"\033[009q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F10</name></expr>, <expr><literal type="string">"\033[010q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F11</name></expr>, <expr><literal type="string">"\033[011q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F12</name></expr>, <expr><literal type="string">"\033[012q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F1</name></expr>, <expr><literal type="string">"\033[013q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F2</name></expr>, <expr><literal type="string">"\033[014q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F3</name></expr>, <expr><literal type="string">"\033[015q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F4</name></expr>, <expr><literal type="string">"\033[016q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F5</name></expr>, <expr><literal type="string">"\033[017q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F6</name></expr>, <expr><literal type="string">"\033[018q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F7</name></expr>, <expr><literal type="string">"\033[019q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F8</name></expr>, <expr><literal type="string">"\033[020q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F9</name></expr>, <expr><literal type="string">"\033[021q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F10</name></expr>, <expr><literal type="string">"\033[022q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F11</name></expr>, <expr><literal type="string">"\033[023q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F12</name></expr>, <expr><literal type="string">"\033[024q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_INS</name></expr>, <expr><literal type="string">"\033[139q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_HOME</name></expr>, <expr><literal type="string">"\033[H"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_END</name></expr>, <expr><literal type="string">"\033[146q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_PAGEUP</name></expr>, <expr><literal type="string">"\033[150q"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_PAGEDOWN</name></expr>, <expr><literal type="string">"\033[154q"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALL_BUILTIN_TCAPS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name></expr>, <expr><literal type="string">"debug"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CE</name></expr>, <expr><literal type="string">"[CE]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CD</name></expr>, <expr><literal type="string">"[CD]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_AL</name></expr>, <expr><literal type="string">"[AL]"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAL</name></expr>, <expr><literal type="string">"[CAL%p1%d]"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAL</name></expr>, <expr><literal type="string">"[CAL%d]"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_DL</name></expr>, <expr><literal type="string">"[DL]"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CDL</name></expr>, <expr><literal type="string">"[CDL%p1%d]"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CDL</name></expr>, <expr><literal type="string">"[CDL%d]"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CS</name></expr>, <expr><literal type="string">"[%p1%dCS%p2%d]"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CS</name></expr>, <expr><literal type="string">"[%dCS%d]"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSV</name></expr>, <expr><literal type="string">"[%p1%dCSV%p2%d]"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSV</name></expr>, <expr><literal type="string">"[%dCSV%d]"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAB</name></expr>, <expr><literal type="string">"[CAB%p1%d]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAF</name></expr>, <expr><literal type="string">"[CAF%p1%d]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSB</name></expr>, <expr><literal type="string">"[CSB%p1%d]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSF</name></expr>, <expr><literal type="string">"[CSF%p1%d]"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAB</name></expr>, <expr><literal type="string">"[CAB%d]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAF</name></expr>, <expr><literal type="string">"[CAF%d]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSB</name></expr>, <expr><literal type="string">"[CSB%d]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSF</name></expr>, <expr><literal type="string">"[CSF%d]"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_OP</name></expr>, <expr><literal type="string">"[OP]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_LE</name></expr>, <expr><literal type="string">"[LE]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CL</name></expr>, <expr><literal type="string">"[CL]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_VI</name></expr>, <expr><literal type="string">"[VI]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_VE</name></expr>, <expr><literal type="string">"[VE]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_VS</name></expr>, <expr><literal type="string">"[VS]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_ME</name></expr>, <expr><literal type="string">"[ME]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MR</name></expr>, <expr><literal type="string">"[MR]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MB</name></expr>, <expr><literal type="string">"[MB]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MD</name></expr>, <expr><literal type="string">"[MD]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SE</name></expr>, <expr><literal type="string">"[SE]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SO</name></expr>, <expr><literal type="string">"[SO]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UE</name></expr>, <expr><literal type="string">"[UE]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_US</name></expr>, <expr><literal type="string">"[US]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UCE</name></expr>, <expr><literal type="string">"[UCE]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UCS</name></expr>, <expr><literal type="string">"[UCS]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_STE</name></expr>, <expr><literal type="string">"[STE]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_STS</name></expr>, <expr><literal type="string">"[STS]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MS</name></expr>, <expr><literal type="string">"[MS]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UT</name></expr>, <expr><literal type="string">"[UT]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_XN</name></expr>, <expr><literal type="string">"[XN]"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <expr><literal type="string">"[%p1%dCM%p2%d]"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <expr><literal type="string">"[%dCM%d]"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SR</name></expr>, <expr><literal type="string">"[SR]"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRI</name></expr>, <expr><literal type="string">"[CRI%p1%d]"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRI</name></expr>, <expr><literal type="string">"[CRI%d]"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_VB</name></expr>, <expr><literal type="string">"[VB]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_KS</name></expr>, <expr><literal type="string">"[KS]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_KE</name></expr>, <expr><literal type="string">"[KE]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_TI</name></expr>, <expr><literal type="string">"[TI]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_TE</name></expr>, <expr><literal type="string">"[TE]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CIS</name></expr>, <expr><literal type="string">"[CIS]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CIE</name></expr>, <expr><literal type="string">"[CIE]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSC</name></expr>, <expr><literal type="string">"[CSC]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CEC</name></expr>, <expr><literal type="string">"[CEC]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_TS</name></expr>, <expr><literal type="string">"[TS]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_FS</name></expr>, <expr><literal type="string">"[FS]"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CWS</name></expr>, <expr><literal type="string">"[%p1%dCWS%p2%d]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CWP</name></expr>, <expr><literal type="string">"[%p1%dCWP%p2%d]"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CWS</name></expr>, <expr><literal type="string">"[%dCWS%d]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CWP</name></expr>, <expr><literal type="string">"[%dCWP%d]"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CRV</name></expr>, <expr><literal type="string">"[CRV]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_U7</name></expr>, <expr><literal type="string">"[U7]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_RFG</name></expr>, <expr><literal type="string">"[RFG]"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_RBG</name></expr>, <expr><literal type="string">"[RBG]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_UP</name></expr>, <expr><literal type="string">"[KU]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_DOWN</name></expr>, <expr><literal type="string">"[KD]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_LEFT</name></expr>, <expr><literal type="string">"[KL]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_RIGHT</name></expr>, <expr><literal type="string">"[KR]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_XUP</name></expr>, <expr><literal type="string">"[xKU]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_XDOWN</name></expr>, <expr><literal type="string">"[xKD]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_XLEFT</name></expr>, <expr><literal type="string">"[xKL]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_XRIGHT</name></expr>, <expr><literal type="string">"[xKR]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_UP</name></expr>, <expr><literal type="string">"[S-KU]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_DOWN</name></expr>, <expr><literal type="string">"[S-KD]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_LEFT</name></expr>, <expr><literal type="string">"[S-KL]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_C_LEFT</name></expr>, <expr><literal type="string">"[C-KL]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_RIGHT</name></expr>, <expr><literal type="string">"[S-KR]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_C_RIGHT</name></expr>, <expr><literal type="string">"[C-KR]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F1</name></expr>, <expr><literal type="string">"[F1]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_XF1</name></expr>, <expr><literal type="string">"[xF1]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F2</name></expr>, <expr><literal type="string">"[F2]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_XF2</name></expr>, <expr><literal type="string">"[xF2]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F3</name></expr>, <expr><literal type="string">"[F3]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_XF3</name></expr>, <expr><literal type="string">"[xF3]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F4</name></expr>, <expr><literal type="string">"[F4]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_XF4</name></expr>, <expr><literal type="string">"[xF4]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F5</name></expr>, <expr><literal type="string">"[F5]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F6</name></expr>, <expr><literal type="string">"[F6]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F7</name></expr>, <expr><literal type="string">"[F7]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F8</name></expr>, <expr><literal type="string">"[F8]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F9</name></expr>, <expr><literal type="string">"[F9]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F10</name></expr>, <expr><literal type="string">"[F10]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F11</name></expr>, <expr><literal type="string">"[F11]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F12</name></expr>, <expr><literal type="string">"[F12]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F1</name></expr>, <expr><literal type="string">"[S-F1]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_XF1</name></expr>, <expr><literal type="string">"[S-xF1]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F2</name></expr>, <expr><literal type="string">"[S-F2]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_XF2</name></expr>, <expr><literal type="string">"[S-xF2]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F3</name></expr>, <expr><literal type="string">"[S-F3]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_XF3</name></expr>, <expr><literal type="string">"[S-xF3]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F4</name></expr>, <expr><literal type="string">"[S-F4]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_XF4</name></expr>, <expr><literal type="string">"[S-xF4]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F5</name></expr>, <expr><literal type="string">"[S-F5]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F6</name></expr>, <expr><literal type="string">"[S-F6]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F7</name></expr>, <expr><literal type="string">"[S-F7]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F8</name></expr>, <expr><literal type="string">"[S-F8]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F9</name></expr>, <expr><literal type="string">"[S-F9]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F10</name></expr>, <expr><literal type="string">"[S-F10]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F11</name></expr>, <expr><literal type="string">"[S-F11]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_F12</name></expr>, <expr><literal type="string">"[S-F12]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_HELP</name></expr>, <expr><literal type="string">"[HELP]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_UNDO</name></expr>, <expr><literal type="string">"[UNDO]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_BS</name></expr>, <expr><literal type="string">"[BS]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_INS</name></expr>, <expr><literal type="string">"[INS]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_KINS</name></expr>, <expr><literal type="string">"[KINS]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_DEL</name></expr>, <expr><literal type="string">"[DEL]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_KDEL</name></expr>, <expr><literal type="string">"[KDEL]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_HOME</name></expr>, <expr><literal type="string">"[HOME]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_HOME</name></expr>, <expr><literal type="string">"[C-HOME]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_C_HOME</name></expr>, <expr><literal type="string">"[C-HOME]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_KHOME</name></expr>, <expr><literal type="string">"[KHOME]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_XHOME</name></expr>, <expr><literal type="string">"[XHOME]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_ZHOME</name></expr>, <expr><literal type="string">"[ZHOME]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_END</name></expr>, <expr><literal type="string">"[END]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_END</name></expr>, <expr><literal type="string">"[C-END]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_C_END</name></expr>, <expr><literal type="string">"[C-END]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_KEND</name></expr>, <expr><literal type="string">"[KEND]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_XEND</name></expr>, <expr><literal type="string">"[XEND]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_ZEND</name></expr>, <expr><literal type="string">"[ZEND]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_PAGEUP</name></expr>, <expr><literal type="string">"[PAGEUP]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_PAGEDOWN</name></expr>, <expr><literal type="string">"[PAGEDOWN]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_KPAGEUP</name></expr>, <expr><literal type="string">"[KPAGEUP]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_KPAGEDOWN</name></expr>, <expr><literal type="string">"[KPAGEDOWN]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_MOUSE</name></expr>, <expr><literal type="string">"[MOUSE]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_KPLUS</name></expr>, <expr><literal type="string">"[KPLUS]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_KMINUS</name></expr>, <expr><literal type="string">"[KMINUS]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_KDIVIDE</name></expr>, <expr><literal type="string">"[KDIVIDE]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_KMULTIPLY</name></expr>, <expr><literal type="string">"[KMULTIPLY]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_KENTER</name></expr>, <expr><literal type="string">"[KENTER]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_KPOINT</name></expr>, <expr><literal type="string">"[KPOINT]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_PS</name></expr>, <expr><literal type="string">"[PASTE-START]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_PE</name></expr>, <expr><literal type="string">"[PASTE-END]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_K0</name></expr>, <expr><literal type="string">"[K0]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_K1</name></expr>, <expr><literal type="string">"[K1]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_K2</name></expr>, <expr><literal type="string">"[K2]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_K3</name></expr>, <expr><literal type="string">"[K3]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_K4</name></expr>, <expr><literal type="string">"[K4]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_K5</name></expr>, <expr><literal type="string">"[K5]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_K6</name></expr>, <expr><literal type="string">"[K6]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_K7</name></expr>, <expr><literal type="string">"[K7]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_K8</name></expr>, <expr><literal type="string">"[K8]"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_K9</name></expr>, <expr><literal type="string">"[K9]"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name></expr>, <expr><literal type="string">"dumb"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CL</name></expr>, <expr><literal type="string">"\014"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%i%p1%d;%p2%dH"</literal></argument>,

<argument>ESC_STR <literal type="string">"[%i%p1%d;%p2%dH"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CM</name></expr>, <macro><name>IF_EB</name><argument_list>(<argument><literal type="string">"\033[%i%d;%dH"</literal></argument>, <argument>ESC_STR <literal type="string">"[%i%d;%dH"</literal></argument>)</argument_list></macro>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>guicolor_T</name></type>

<name>termgui_mch_get_color</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>gui_get_color_cmn</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>guicolor_T</name></type>

<name>termgui_get_color</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>guicolor_T</name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INVALCOLOR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>termgui_mch_get_color</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E254: Cannot allocate color %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>guicolor_T</name></type>

<name>termgui_mch_get_rgb</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>color</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_TERM</name></cpp:macro> <cpp:value>(char_u *)"amiga"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_TERM</name></cpp:macro> <cpp:value>(char_u *)"win32"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINT__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_TERM</name></cpp:macro> <cpp:value>(char_u *)"ansi"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINT__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_TERM</name></cpp:macro> <cpp:value>(char_u *)"vt52"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_TERM</name></cpp:macro> <cpp:value>(char_u *)"vt320"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BEOS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEFAULT_TERM</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_TERM</name></cpp:macro> <cpp:value>(char_u *)"beos-ansi"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAIKU__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEFAULT_TERM</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_TERM</name></cpp:macro> <cpp:value>(char_u *)"xterm"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_TERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_TERM</name></cpp:macro> <cpp:value>(char_u *)"dumb"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>char_u</name> <argument_list>*<argument><expr><operator>(</operator><name><name>term_strings</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_LAST</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>;

<argument><expr><specifier>static</specifier> <name>int</name> <name>need_gather</name> <operator>=</operator> <name>FALSE</name></expr></argument>; 

<argument><expr><specifier>static</specifier> <name>char_u</name> <name><name>termleader</name><index>[<expr><literal type="number">256</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>; 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><specifier>static</specifier> <name>int</name> <name>check_for_codes</name> <operator>=</operator> <name>FALSE</name></expr></argument>; 

<argument><expr><specifier>static</specifier> <name>int</name> <name>is_not_xterm</name> <operator>=</operator> <name>FALSE</name></expr></argument>; 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><specifier>static</specifier> struct <name>builtin_term</name> <operator>*</operator>

<macro><name>find_builtin_term</name><argument_list>(<argument>char_u *term</argument>)</argument_list></macro>

<block>{

struct <expr><name>builtin_term</name> <operator>*</operator><name>p</name></expr>;

<expr><name>p</name> <operator>=</operator> <name>builtin_termcaps</name></expr>;

<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>bt_string</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>bt_entry</name></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bt_string</name></name></expr></argument>, <argument><expr><literal type="string">"iris-ansi"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>vim_is_iris</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bt_string</name></name></expr></argument>, <argument><expr><literal type="string">"xterm"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>vim_is_xterm</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bt_string</name></name></expr></argument>, <argument><expr><literal type="string">"vt320"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>vim_is_vt300</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bt_string</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt/>}</block_content>

++p</block><empty_stmt>;</empty_stmt></if></if_stmt>

<expr_stmt/>}</block_content>

return p</block><empty_stmt>;</empty_stmt></while>

}</block></expr></argument></argument_list></call></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>parse_builtin_tcap</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>builtin_term</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>term_8bit</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_builtin_term</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>term_8bit</name> <operator>=</operator> <call><name>term_is_8bit</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>bt_string</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><operator>++</operator><name>p</name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>bt_entry</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>bt_entry</name></name> <operator>!=</operator> <name>BT_EXTRA_KEYS</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>bt_entry</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>term_strings</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>bt_entry</name></name></expr>]</index></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>term_strings</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>bt_entry</name></name></expr>]</index></name> <operator>==</operator> <name>empty_option</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>opt_idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>term_8bit</name> <operator>&amp;&amp;</operator> <call><name>term_7to8bit</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>bt_string</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>bt_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><operator>*</operator><name>t</name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>term_7to8bit</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <call><name>term_7to8bit</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>t</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>t</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>term_strings</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>bt_entry</name></name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<call><name>set_term_option_alloced</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>term_strings</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>bt_entry</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>term_strings</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>bt_entry</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>bt_string</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>opt_idx</name> <operator>=</operator> <call><name>get_term_opt_idx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>term_strings</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>bt_entry</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_term_option_sctx_idx</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>opt_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>KEY2TERMCAP0</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>bt_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>KEY2TERMCAP1</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>bt_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_termcode</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_termcode</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>bt_string</name></name></expr></argument>, <argument><expr><name>term_8bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_color_count</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>nr_colors</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><name>t_colors</name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t_colors</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>nr_colors</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>t_colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>nr_colors</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"t_Co"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nr_colors</name></expr></argument>, <argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>may_adjust_color_count</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>t_colors</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>set_keep_msg_from_hist</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_color_count</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_highlight</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>redraw_asap</name><argument_list>(<argument><expr><name>CLEAR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>log_tr</name><argument_list>(<argument><expr><literal type="string">"Received t_Co, redraw_asap(): %d"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>redraw_asap</name><argument_list>(<argument><expr><name>CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>key_names</name><index>[]</index></name><operator>)</operator> <operator>=</operator>

<block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"Co"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="string">"ku"</literal></expr>, <expr><literal type="string">"kd"</literal></expr>, <expr><literal type="string">"kr"</literal></expr>, <expr><literal type="string">"kl"</literal></expr>,

<expr><literal type="string">"#2"</literal></expr>, <expr><literal type="string">"#4"</literal></expr>, <expr><literal type="string">"%i"</literal></expr>, <expr><literal type="string">"*7"</literal></expr>,

<expr><literal type="string">"k1"</literal></expr>, <expr><literal type="string">"k2"</literal></expr>, <expr><literal type="string">"k3"</literal></expr>, <expr><literal type="string">"k4"</literal></expr>, <expr><literal type="string">"k5"</literal></expr>, <expr><literal type="string">"k6"</literal></expr>,

<expr><literal type="string">"k7"</literal></expr>, <expr><literal type="string">"k8"</literal></expr>, <expr><literal type="string">"k9"</literal></expr>, <expr><literal type="string">"k;"</literal></expr>, <expr><literal type="string">"F1"</literal></expr>, <expr><literal type="string">"F2"</literal></expr>,

<expr><literal type="string">"%1"</literal></expr>, <expr><literal type="string">"&amp;8"</literal></expr>, <expr><literal type="string">"kb"</literal></expr>, <expr><literal type="string">"kI"</literal></expr>, <expr><literal type="string">"kD"</literal></expr>, <expr><literal type="string">"kh"</literal></expr>,

<expr><literal type="string">"@7"</literal></expr>, <expr><literal type="string">"kP"</literal></expr>, <expr><literal type="string">"kN"</literal></expr>, <expr><literal type="string">"K1"</literal></expr>, <expr><literal type="string">"K3"</literal></expr>, <expr><literal type="string">"K4"</literal></expr>, <expr><literal type="string">"K5"</literal></expr>, <expr><literal type="string">"kB"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>get_term_entries</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<struct><specifier>static</specifier> struct <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>SpecialKey</name></name></type> <name>dest</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 

}</block> <decl><name><name>string_names</name><index>[]</index></name> <init>=

<expr><block>{ <expr><block>{<expr><name>KS_CE</name></expr>, <expr><literal type="string">"ce"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_AL</name></expr>, <expr><literal type="string">"al"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_CAL</name></expr>,<expr><literal type="string">"AL"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_DL</name></expr>, <expr><literal type="string">"dl"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_CDL</name></expr>,<expr><literal type="string">"DL"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_CS</name></expr>, <expr><literal type="string">"cs"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_CL</name></expr>, <expr><literal type="string">"cl"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_CD</name></expr>, <expr><literal type="string">"cd"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_VI</name></expr>, <expr><literal type="string">"vi"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_VE</name></expr>, <expr><literal type="string">"ve"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_MB</name></expr>, <expr><literal type="string">"mb"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_ME</name></expr>, <expr><literal type="string">"me"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_MR</name></expr>, <expr><literal type="string">"mr"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_MD</name></expr>, <expr><literal type="string">"md"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_SE</name></expr>, <expr><literal type="string">"se"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_SO</name></expr>, <expr><literal type="string">"so"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_CZH</name></expr>,<expr><literal type="string">"ZH"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_CZR</name></expr>,<expr><literal type="string">"ZR"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_UE</name></expr>, <expr><literal type="string">"ue"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_US</name></expr>, <expr><literal type="string">"us"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_UCE</name></expr>, <expr><literal type="string">"Ce"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_UCS</name></expr>, <expr><literal type="string">"Cs"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_STE</name></expr>,<expr><literal type="string">"Te"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_STS</name></expr>,<expr><literal type="string">"Ts"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_CM</name></expr>, <expr><literal type="string">"cm"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_SR</name></expr>, <expr><literal type="string">"sr"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_CRI</name></expr>,<expr><literal type="string">"RI"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_VB</name></expr>, <expr><literal type="string">"vb"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_KS</name></expr>, <expr><literal type="string">"ks"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_KE</name></expr>, <expr><literal type="string">"ke"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_TI</name></expr>, <expr><literal type="string">"ti"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_TE</name></expr>, <expr><literal type="string">"te"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_CTI</name></expr>, <expr><literal type="string">"TI"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_CTE</name></expr>, <expr><literal type="string">"TE"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_BC</name></expr>, <expr><literal type="string">"bc"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_CSB</name></expr>,<expr><literal type="string">"Sb"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_CSF</name></expr>,<expr><literal type="string">"Sf"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_CAB</name></expr>,<expr><literal type="string">"AB"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_CAF</name></expr>,<expr><literal type="string">"AF"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_LE</name></expr>, <expr><literal type="string">"le"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_ND</name></expr>, <expr><literal type="string">"nd"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_OP</name></expr>, <expr><literal type="string">"op"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_CRV</name></expr>, <expr><literal type="string">"RV"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_VS</name></expr>, <expr><literal type="string">"vs"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_CVS</name></expr>, <expr><literal type="string">"VS"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_CIS</name></expr>, <expr><literal type="string">"IS"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_CIE</name></expr>, <expr><literal type="string">"IE"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_CSC</name></expr>, <expr><literal type="string">"SC"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_CEC</name></expr>, <expr><literal type="string">"EC"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_TS</name></expr>, <expr><literal type="string">"ts"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_FS</name></expr>, <expr><literal type="string">"fs"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_CWP</name></expr>, <expr><literal type="string">"WP"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_CWS</name></expr>, <expr><literal type="string">"WS"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_CSI</name></expr>, <expr><literal type="string">"SI"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_CEI</name></expr>, <expr><literal type="string">"EI"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_U7</name></expr>, <expr><literal type="string">"u7"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_RFG</name></expr>, <expr><literal type="string">"RF"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_RBG</name></expr>, <expr><literal type="string">"RB"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_8F</name></expr>, <expr><literal type="string">"8f"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_8B</name></expr>, <expr><literal type="string">"8b"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_CBE</name></expr>, <expr><literal type="string">"BE"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_CBD</name></expr>, <expr><literal type="string">"BD"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_CPS</name></expr>, <expr><literal type="string">"PS"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_CPE</name></expr>, <expr><literal type="string">"PE"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_CST</name></expr>, <expr><literal type="string">"ST"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_CRT</name></expr>, <expr><literal type="string">"RT"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>KS_SSI</name></expr>, <expr><literal type="string">"Si"</literal></expr>}</block></expr>, <expr><block>{<expr><name>KS_SRI</name></expr>, <expr><literal type="string">"Ri"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator>enum <name>SpecialKey</name><operator>)</operator><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>tstrbuf</name><index>[<expr><name>TBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name>tstrbuf</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>string_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>TERM_STR</name><argument_list>(<argument><expr><name><name>string_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dest</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <call><name>TERM_STR</name><argument_list>(<argument><expr><name><name>string_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dest</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>empty_option</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TERM_STR</name><argument_list>(<argument><expr><name><name>string_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dest</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>TGETSTR</name><argument_list>(<argument><expr><name><name>string_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_term_option_sctx_idx</name><argument_list>(<argument><expr><name><name>string_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>T_MS</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>T_MS</name> <operator>==</operator> <name>empty_option</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>tgetflag</name><argument_list>(<argument><expr><literal type="string">"ms"</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>T_MS</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"y"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>T_XS</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>T_XS</name> <operator>==</operator> <name>empty_option</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>tgetflag</name><argument_list>(<argument><expr><literal type="string">"xs"</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>T_XS</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"y"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>T_XN</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>T_XN</name> <operator>==</operator> <name>empty_option</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>tgetflag</name><argument_list>(<argument><expr><literal type="string">"xn"</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>T_XN</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"y"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>T_DB</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>T_DB</name> <operator>==</operator> <name>empty_option</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>tgetflag</name><argument_list>(<argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>T_DB</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"y"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>T_DA</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>T_DA</name> <operator>==</operator> <name>empty_option</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>tgetflag</name><argument_list>(<argument><expr><literal type="string">"da"</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>T_DA</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"y"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>T_UT</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>T_UT</name> <operator>==</operator> <name>empty_option</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>tgetflag</name><argument_list>(<argument><expr><literal type="string">"ut"</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>T_UT</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"y"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>key_names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>find_termcode</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>key_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>TGETSTR</name><argument_list>(<argument><expr><name><name>key_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <name>Ctrl_H</name>

<operator>||</operator> <name><name>key_names</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'k'</literal>

<operator>||</operator> <name><name>key_names</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'l'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_termcode</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>key_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>height</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <call><name>tgetnum</name><argument_list>(<argument><expr><literal type="string">"li"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>width</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <call><name>tgetnum</name><argument_list>(<argument><expr><literal type="string">"co"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TERM_STR</name><argument_list>(<argument><expr><name>KS_CCO</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>TERM_STR</name><argument_list>(<argument><expr><name>KS_CCO</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>empty_option</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>set_color_count</name><argument_list>(<argument><expr><call><name>tgetnum</name><argument_list>(<argument><expr><literal type="string">"Co"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_term_option_sctx_idx</name><argument_list>(<argument><expr><literal type="string">"Co"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>hpux</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>BC</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>TGETSTR</name><argument_list>(<argument><expr><literal type="string">"bc"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>UP</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>TGETSTR</name><argument_list>(<argument><expr><literal type="string">"up"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>TGETSTR</name><argument_list>(<argument><expr><literal type="string">"pc"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>PC</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>report_term_error</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>error_msg</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>builtin_term</name></name> <modifier>*</modifier></type><name>termp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error_msg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><name>error_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"' not known. Available builtin terminals are:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>termp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>builtin_termcaps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</init> <condition><expr><name><name>termp</name><operator>-&gt;</operator><name>bt_string</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>termp</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>termp</name><operator>-&gt;</operator><name>bt_entry</name></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><literal type="string">" builtin_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><name><name>termp</name><operator>-&gt;</operator><name>bt_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>report_default_term</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"defaulting to '"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><literal type="string">"'\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>emsg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_not_a_term</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ui_delay</name><argument_list>(<argument><expr><literal type="number">2007L</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>set_termname</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>builtin_term</name></name> <modifier>*</modifier></type><name>termp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>builtin_first</name> <init>= <expr><name>p_tbi</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>try</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>termcap_cleared</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>error_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>bs_p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>del_p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>silent_mode</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>detected_8bit</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>term_is_builtin</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>term</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>builtin_first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>try</name> <operator>=</operator> <ternary><condition><expr><name>builtin_first</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</init> <condition><expr><name>try</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>try</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>try</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>tbuf</name><index>[<expr><name>TBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>error_msg</name> <operator>=</operator> <call><name>tgetent_error</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>termcap_cleared</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clear_termoptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>termcap_cleared</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_term_entries</name><argument_list>(<argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>try</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>builtin_first</name> <operator>&amp;&amp;</operator> <name>termcap_cleared</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>termp</name> <operator>=</operator> <call><name>find_builtin_term</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>termp</name><operator>-&gt;</operator><name>bt_string</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>try</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>termcap_cleared</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>report_term_error</name><argument_list>(<argument><expr><name>error_msg</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>starting</name> <operator>!=</operator> <name>NO_SCREEN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>wait_return</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>term</name> <operator>=</operator> <name>DEFAULT_TERM</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>report_default_term</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"term"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>term</name></expr></argument>,

<argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>display_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>termcap_cleared</name></expr>)</condition>

<block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>clear_termoptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>termcap_cleared</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>parse_builtin_tcap</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>term_is_gui</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<break>break;</break> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"pcterm"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>T_CCS</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"yes"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>T_CCS</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>get_stty</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>bs_p</name> <operator>=</operator> <call><name>find_termcode</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"kb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>del_p</name> <operator>=</operator> <call><name>find_termcode</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"kD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bs_p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>bs_p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_termcode</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"kb"</literal></expr></argument>, <argument><expr><operator>(</operator><name>bs_p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>CTRL_H_STR</name><operator>)</operator></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>del_p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>del_p</name> <operator>==</operator> <name>NUL</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>bs_p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>bs_p</name> <operator>!=</operator> <name>DEL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_termcode</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"kD"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DEL_STR</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>term_is_xterm</name> <operator>=</operator> <call><name>vim_is_xterm</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>is_not_xterm</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_mac_terminal</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_XTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>use_xterm_like_mouse</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>use_xterm_mouse</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"xterm"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ttym"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_option_was_set</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ttym"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_mouse_termcode</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>set_mouse_termcode</name><argument_list>(<argument><expr><name>KS_MOUSE</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\233M"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TERM_CONSOLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>DEFAULT_TERM</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>term_console</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>term_console</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>win_resize_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>vim_is_fastterm</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_tf</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TERM_CONSOLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>term_console</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_tf</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ttest</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>full_screen</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>set_term_defaults</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"setting crv_status to STATUS_GET"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crv_status</name><operator>.</operator><name>tr_progress</name></name> <operator>=</operator> <name>STATUS_GET</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>starting</name> <operator>!=</operator> <name>NO_SCREEN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>starttermcap</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>maketitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>height</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>height</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>height</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_shellsize</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>starting</name> <operator>!=</operator> <name>NO_SCREEN</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>scroll_region</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>scroll_region_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>check_map_keycodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aco_save_T</name></type> <name>aco</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>aucmd_prepbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_TERMCHANGED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,

<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aucmd_restbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>may_req_termresponse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>tgetent_error</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tbuf</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>TGETENT</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TGETENT_ZERO_ERR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>TGETENT</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"dumb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TGETENT_ZERO_ERR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E557: Cannot open termcap file"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E558: Terminal entry not found in terminfo"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E559: Terminal entry not found in termcap"</literal></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>vim_tgetstr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>tgetstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<function><type><name>void</name></type>

<name>getlinecol</name><parameter_list>(

<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>, 

<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>rp</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>tbuf</name><index>[<expr><name>TBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>T_NAME</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_NAME</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <call><name>tgetent_error</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>T_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <call><name>tgetnum</name><argument_list>(<argument><expr><literal type="string">"co"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>rp</name> <operator>=</operator> <call><name>tgetnum</name><argument_list>(<argument><expr><literal type="string">"li"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>int</name></type>

<name>add_termcap_entry</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>builtin_term</name></name> <modifier>*</modifier></type><name>termp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>builtin_first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>tbuf</name><index>[<expr><name>TBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>tstrbuf</name><index>[<expr><name>TBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name>tstrbuf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>error_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>gui_mch_haskey</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name> <operator>&amp;&amp;</operator> <call><name>find_termcode</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>term</name> <operator>=</operator> <name>T_NAME</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>term</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>term_is_builtin</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>term</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>builtin_first</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>builtin_first</name> <operator>=</operator> <name>p_tbi</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>builtin_first</name><operator>)</operator> <operator>==</operator> <name>i</name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>termp</name> <operator>=</operator> <call><name>find_builtin_term</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>termp</name><operator>-&gt;</operator><name>bt_string</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>termp</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>termp</name><operator>-&gt;</operator><name>bt_entry</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>termp</name><operator>-&gt;</operator><name>bt_entry</name></name> <operator>==</operator> <name>key</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>add_termcode</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>termp</name><operator>-&gt;</operator><name>bt_string</name></name></expr></argument>,

<argument><expr><call><name>term_is_8bit</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>termp</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else

<block>{<block_content>

<expr_stmt><expr><name>error_msg</name> <operator>=</operator> <call><name>tgetent_error</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error_msg</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>TGETSTR</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>string</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>string</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>add_termcode</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>SOURCING_NAME</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>error_msg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><name>error_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E436: No \"%s\" entry in termcap"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>term_is_builtin</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"builtin_"</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>term_is_8bit</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>detected_8bit</name> <operator>||</operator> <call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"8bit"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>term_7to8bit</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>ESC</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CSI</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OSC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'O'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0x8f</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>term_is_gui</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"builtin_gui"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"gui"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>tltoa</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator> <operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block>

while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>&gt;</operator> <name>buf</name></expr>)</condition>;</do>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>tgoto</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cm</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"OOPS"</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">29</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>buf</name></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>e</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cm</name></expr>;</condition> <incr><expr><name>cm</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cm</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>cm</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>cm</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>tltoa</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>++</operator><name>cm</name> <operator>+</operator> <name>y</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'%'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>cm</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="string">"OOPS"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type>

<name>termcapinit</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>term</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BEOS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"TERM"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ansi"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>term</name> <operator>=</operator> <name>DEFAULT_TERM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>term</name> <operator>=</operator> <call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"TERM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>term</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>term</name> <operator>=</operator> <name>DEFAULT_TERM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"term"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_string_default</name><argument_list>(<argument><expr><literal type="string">"term"</literal></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_string_default</name><argument_list>(<argument><expr><literal type="string">"ttytype"</literal></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_termname</name><argument_list>(<argument><expr><ternary><condition><expr><name>T_NAME</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>T_NAME</name></expr> </then><else>: <expr><name>term</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT_SIZE</name></cpp:macro> <cpp:value>2047</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>out_buf</name><index>[<expr><name>OUT_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>out_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ESC_SEQ_LEN</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>

<function><type><name>void</name></type>

<name>out_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out_pos</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>out_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_write</name><argument_list>(<argument><expr><name>out_buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>out_flush_cursor</name><parameter_list>(

<parameter><decl><type><name>int</name> <name>force</name></type> <name>UNUSED</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <name>clear_selection</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<expr_stmt><expr><call><name>mch_disable_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_enable_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>force</name></expr></argument>, <argument><expr><name>clear_selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_may_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>out_flush_check</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>out_pos</name> <operator>&gt;=</operator> <name>OUT_SIZE</name> <operator>-</operator> <name>MB_MAXBYTES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>

<name>out_trash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>out_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>out_char</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>out_char</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>out_buf</name><index>[<expr><name>out_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out_pos</name> <operator>&gt;=</operator> <name>OUT_SIZE</name> <operator>||</operator> <name>p_wd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>out_char_nf</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>out_buf</name><index>[<expr><name>out_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out_pos</name> <operator>&gt;=</operator> <name>OUT_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>out_str_nf</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>out_pos</name> <operator>&gt;</operator> <name>OUT_SIZE</name> <operator>-</operator> <name>MAX_ESC_SEQ_LEN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_char_nf</name><argument_list>(<argument><expr><operator>*</operator><name>s</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>p_wd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>out_str_cf</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_str_nf</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>out_pos</name> <operator>&gt;</operator> <name>OUT_SIZE</name> <operator>-</operator> <name>MAX_ESC_SEQ_LEN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'$'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name>save_c</name> <init>= <expr><operator>*</operator><name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>duration</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<macro><name>tputs</name><argument_list>(<argument>(char *)p</argument>, <argument><literal type="number">1</literal></argument>, <argument>TPUTSFUNCAST out_char_nf</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>save_c</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ELAPSED_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>duration</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_sleep</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<macro><name>tputs</name><argument_list>(<argument>(char *)p</argument>, <argument><literal type="number">1</literal></argument>, <argument>TPUTSFUNCAST out_char_nf</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<while>while <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_char_nf</name><argument_list>(<argument><expr><operator>*</operator><name>s</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>p_wd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>out_str</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_str_nf</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>out_pos</name> <operator>&gt;</operator> <name>OUT_SIZE</name> <operator>-</operator> <name>MAX_ESC_SEQ_LEN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>tputs</name><argument_list>(<argument>(char *)s</argument>, <argument><literal type="number">1</literal></argument>, <argument>TPUTSFUNCAST out_char_nf</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<while>while <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_char_nf</name><argument_list>(<argument><expr><operator>*</operator><name>s</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>p_wd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>term_windgoto</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>T_CM</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>term_cursor_right</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>T_CRI</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>term_append_lines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>T_CAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>line_count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>term_delete_lines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>T_CDL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>line_count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>term_set_winpos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>T_CWP</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>can_get_termresponse</name><parameter_list>()</parameter_list>

<block>{<block_content>

<return>return <expr><name>cur_tmode</name> <operator>==</operator> <name>TMODE_RAW</name>

<operator>&amp;&amp;</operator> <name>termcap_active</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>is_not_a_term</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>isatty</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isatty</name><argument_list>(<argument><expr><name>read_cmd_fd</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>&amp;&amp;</operator> <name>p_ek</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>termrequest_sent</name><parameter_list>(<parameter><decl><type><name>termrequest_T</name> <modifier>*</modifier></type><name>status</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>status</name><operator>-&gt;</operator><name>tr_progress</name></name> <operator>=</operator> <name>STATUS_SENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>status</name><operator>-&gt;</operator><name>tr_start</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>termrequest_any_pending</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>all_termrequests</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>all_termrequests</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>tr_progress</name> <operator>==</operator> <name>STATUS_SENT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>all_termrequests</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>tr_start</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>now</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>all_termrequests</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>tr_start</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>now</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>all_termrequests</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>tr_progress</name> <operator>=</operator> <name>STATUS_FAIL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>winpos_x</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>winpos_y</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>did_request_winpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>term_get_winpos</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>varnumber_T</name></type> <name>timeout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_winpos_x</name> <init>= <expr><name>winpos_x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_winpos_y</name> <init>= <expr><name>winpos_y</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_CGP</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>!</operator><call><name>can_get_termresponse</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>winpos_x</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>winpos_y</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>did_request_winpos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>termrequest_sent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>winpos_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><name>T_CGP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>count</name><operator>++</operator> <operator>&lt;=</operator> <name>timeout</name> <operator>/</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vpeekc_nomap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>winpos_x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>winpos_y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>winpos_x</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>winpos_y</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ui_delay</name><argument_list>(<argument><expr><literal type="number">10L</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>winpos_x</name> <operator>=</operator> <name>prev_winpos_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>winpos_y</name> <operator>=</operator> <name>prev_winpos_y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&lt;</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>prev_winpos_y</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>prev_winpos_x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>winpos_x</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>winpos_y</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>term_set_winsize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>T_CWS</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>term_color</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><ternary><condition><expr><operator>*</operator><name>s</name> <operator>==</operator> <name>CSI</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>t_colors</name> <operator>&gt;=</operator> <literal type="number">16</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ESC</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ESC</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal><operator>)</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>||</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>CSI</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>=</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>STRCMP</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%p1%dm"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%dm"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'3'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'4'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><literal type="string">"%s%s%%p1%%dm"</literal></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><literal type="string">"%s%s%%dm"</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lead</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><operator>(</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>

<ternary><condition><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal></expr> ?</condition><then> <expr><call><name>IF_EB</name><argument_list>(<argument><expr><literal type="string">"\033|"</literal></expr></argument>, <argument><expr><name>ESC_STR</name> <literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><call><name>IF_EB</name><argument_list>(<argument><expr><literal type="string">"\033["</literal></expr></argument>, <argument><expr><name>ESC_STR</name> <literal type="string">"["</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="string">"\233"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><ternary><condition><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'3'</literal></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><literal type="string">"38;5;"</literal></expr> </then><else>: <expr><literal type="string">"9"</literal></expr></else></ternary><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><ternary><condition><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><literal type="string">"48;5;"</literal></expr> </then><else>: <expr><literal type="string">"10"</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>lead</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><name>n</name> <operator>-</operator> <literal type="number">8</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>term_fg_color</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_CAF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>term_color</name><argument_list>(<argument><expr><name>T_CAF</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>T_CSF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>term_color</name><argument_list>(<argument><expr><name>T_CSF</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>term_bg_color</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_CAB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>term_color</name><argument_list>(<argument><expr><name>T_CAB</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>T_CSB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>term_color</name><argument_list>(<argument><expr><name>T_CSB</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>term_bg_default</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"dark"</literal></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>T_NAME</name></expr></argument>, <argument><expr><literal type="string">"linux"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>T_NAME</name></expr></argument>, <argument><expr><literal type="string">"screen.linux"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>T_NAME</name></expr></argument>, <argument><expr><literal type="string">"cygwin"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>T_NAME</name></expr></argument>, <argument><expr><literal type="string">"putty"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"COLORFGBG"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>=</operator> <call><name>vim_strrchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'6'</literal><operator>)</operator> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'8'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"dark"</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"light"</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RED</name><parameter_list>(<parameter><type><name>rgb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((long_u)(rgb) &gt;&gt; 16) &amp; 0xFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GREEN</name><parameter_list>(<parameter><type><name>rgb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((long_u)(rgb) &gt;&gt; 8) &amp; 0xFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLUE</name><parameter_list>(<parameter><type><name>rgb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((long_u)(rgb) ) &amp; 0xFF)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>term_rgb_color</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>guicolor_T</name></type> <name>rgb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_COLOR_STR_LEN</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAX_COLOR_STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAX_COLOR_STR_LEN</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><call><name>RED</name><argument_list>(<argument><expr><name>rgb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GREEN</name><argument_list>(<argument><expr><name>rgb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BLUE</name><argument_list>(<argument><expr><name>rgb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>term_fg_rgb_color</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>rgb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>term_rgb_color</name><argument_list>(<argument><expr><name>T_8F</name></expr></argument>, <argument><expr><name>rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>term_bg_rgb_color</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>rgb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>term_rgb_color</name><argument_list>(<argument><expr><name>T_8B</name></expr></argument>, <argument><expr><name>rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>term_settitle</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>T_TS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>out_str_nf</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_FS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>term_push_title</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>which</name> <operator>&amp;</operator> <name>SAVE_RESTORE_TITLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>T_CST</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_CST</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><name>T_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>which</name> <operator>&amp;</operator> <name>SAVE_RESTORE_ICON</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>T_SSI</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_SSI</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><name>T_SSI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>term_pop_title</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>which</name> <operator>&amp;</operator> <name>SAVE_RESTORE_TITLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>T_CRT</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_CRT</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><name>T_CRT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>which</name> <operator>&amp;</operator> <name>SAVE_RESTORE_ICON</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>T_SRI</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_SRI</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><name>T_SRI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>ttest</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pairs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>env_colors</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check_options</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_CM</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E437: terminal capability \"cm\" required"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_CS</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>scroll_region</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>scroll_region</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pairs</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_ME</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>T_ME</name> <operator>=</operator> <name>T_MR</name> <operator>=</operator> <name>T_MD</name> <operator>=</operator> <name>T_MB</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_SO</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>T_SE</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>T_SO</name> <operator>=</operator> <name>T_SE</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_US</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>T_UE</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>T_US</name> <operator>=</operator> <name>T_UE</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_CZH</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>T_CZR</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>T_CZH</name> <operator>=</operator> <name>T_CZR</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_VE</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>T_VI</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_ME</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>T_ME</name> <operator>=</operator> <name>T_SE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>T_MR</name> <operator>=</operator> <name>T_SO</name></expr>;</expr_stmt>

<expr_stmt><expr><name>T_MD</name> <operator>=</operator> <name>T_SO</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_SO</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>T_SE</name> <operator>=</operator> <name>T_ME</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_MR</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>T_SO</name> <operator>=</operator> <name>T_MD</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>T_SO</name> <operator>=</operator> <name>T_MR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_CZH</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>T_CZR</name> <operator>=</operator> <name>T_ME</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_MR</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>T_CZH</name> <operator>=</operator> <name>T_MD</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>T_CZH</name> <operator>=</operator> <name>T_MR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_CSB</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>T_CSF</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>T_CSB</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name>T_CSF</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_CAB</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>T_CAF</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>T_CAB</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name>T_CAF</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_CSB</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_CAB</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_one_termoption</name><argument_list>(<argument><expr><name>T_CCO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_wiv</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>T_XS</name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>need_gather</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t_colors</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>T_CCO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>env_colors</name> <operator>=</operator> <call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"COLORS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>env_colors</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>env_colors</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>colors</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>env_colors</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>colors</name> <operator>!=</operator> <name>t_colors</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_color_count</name><argument_list>(<argument><expr><name>colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_ON_FLY_SCROLL</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>add_long_to_buf</name><parameter_list>(<parameter><decl><type><name>long_u</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>long_u</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>long_u</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_long_from_buf</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>long_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>bytes</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>long_u</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>get_bytes_from_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>long_u</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>long_u</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>long_u</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>+=</operator> <operator>(</operator><name>long_u</name><operator>)</operator><name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>get_bytes_from_buf</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_bytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>c</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_bytes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>buf</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_ZERO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_CSI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>CSI</name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <name>KS_EXTRA</name>

<operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_CSI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>check_shellsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>Rows</name> <operator>&lt;</operator> <call><name>min_rows</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>Rows</name> <operator>=</operator> <call><name>min_rows</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>limit_screen_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>limit_screen_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>Columns</name> <operator>&lt;</operator> <name>MIN_COLUMNS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Columns</name> <operator>=</operator> <name>MIN_COLUMNS</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>Columns</name> <operator>&gt;</operator> <literal type="number">10000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Columns</name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>Rows</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Rows</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>win_new_shellsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_Rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_Columns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>old_Rows</name> <operator>!=</operator> <name>Rows</name> <operator>||</operator> <name>old_Columns</name> <operator>!=</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ui_new_shellsize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_Rows</name> <operator>!=</operator> <name>Rows</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_window</name> <operator>==</operator> <name>old_Rows</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name>old_Rows</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_window</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_Rows</name> <operator>=</operator> <name>Rows</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shell_new_rows</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_Columns</name> <operator>!=</operator> <name>Columns</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>old_Columns</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shell_new_columns</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>shell_resized</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_shellsize</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>shell_resized_check</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>old_Rows</name> <init>= <expr><name>Rows</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_Columns</name> <init>= <expr><name>Columns</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exiting</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ui_get_shellsize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_shellsize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_Rows</name> <operator>!=</operator> <name>Rows</name> <operator>||</operator> <name>old_Columns</name> <operator>!=</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>shell_resized</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>set_shellsize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mustset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>busy</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>busy</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>==</operator> <name>HITRETURN</name> <operator>||</operator> <name>State</name> <operator>==</operator> <name>SETWSIZE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>SETWSIZE</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>updating_screen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>busy</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>mustset</name> <operator>||</operator> <operator>(</operator><call><name>ui_get_shellsize</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name> <operator>&amp;&amp;</operator> <name>height</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>Rows</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Columns</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_shellsize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_set_shellsize</name><argument_list>(<argument><expr><name>mustset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_shellsize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>!=</operator> <name>ASKMORE</name> <operator>&amp;&amp;</operator> <name>State</name> <operator>!=</operator> <name>EXTERNCMD</name> <operator>&amp;&amp;</operator> <name>State</name> <operator>!=</operator> <name>CONFIRM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screenclear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>starting</name> <operator>!=</operator> <name>NO_SCREEN</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>maketitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>changed_line_abv_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invalidate_botline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>==</operator> <name>ASKMORE</name> <operator>||</operator> <name>State</name> <operator>==</operator> <name>EXTERNCMD</name> <operator>||</operator> <name>State</name> <operator>==</operator> <name>CONFIRM</name>

<operator>||</operator> <name>exmode_active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>screenalloc</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>repeat_message</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scb</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_check_scrollbind</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redrawcmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pum_visible</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_compl_show_pum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>redrawing</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>cursor_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>busy</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>settmode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tmode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>full_screen</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tmode</name> <operator>!=</operator> <name>TMODE_COOK</name> <operator>||</operator> <name>cur_tmode</name> <operator>!=</operator> <name>TMODE_COOK</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tmode</name> <operator>!=</operator> <name>TMODE_RAW</name> <operator>&amp;&amp;</operator> <call><name>termrequest_any_pending</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vpeekc_nomap</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>check_for_codes_from_term</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>tmode</name> <operator>!=</operator> <name>TMODE_RAW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_setmouse</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>termcap_active</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tmode</name> <operator>!=</operator> <name>TMODE_RAW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_BD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_BE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_settmode</name><argument_list>(<argument><expr><name>tmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>cur_tmode</name> <operator>=</operator> <name>tmode</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmode</name> <operator>==</operator> <name>TMODE_RAW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>may_req_termresponse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>starttermcap</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>full_screen</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>termcap_active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_TI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_CTI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_KS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_BE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>termcap_active</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>may_req_termresponse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>crv_status</name><operator>.</operator><name>tr_progress</name></name> <operator>==</operator> <name>STATUS_SENT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_for_codes_from_term</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>stoptermcap</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>screen_stop_highlight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_cterm_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>termcap_active</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>termrequest_any_pending</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mch_delay</name><argument_list>(<argument><expr><literal type="number">100L</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCIFLUSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>exiting</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>tcflush</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCIFLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>check_for_codes_from_term</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_BD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_KE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>termcap_active</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cursor_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_CTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_TE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>may_req_termresponse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>crv_status</name><operator>.</operator><name>tr_progress</name></name> <operator>==</operator> <name>STATUS_GET</name>

<operator>&amp;&amp;</operator> <call><name>can_get_termresponse</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <name>starting</name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>*</operator><name>T_CRV</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Sending CRV request"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_CRV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>termrequest_sent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>crv_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vpeekc_nomap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>may_req_ambiguous_char_width</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>u7_status</name><operator>.</operator><name>tr_progress</name></name> <operator>==</operator> <name>STATUS_GET</name>

<operator>&amp;&amp;</operator> <call><name>can_get_termresponse</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <name>starting</name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>*</operator><name>T_U7</name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>option_was_set</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ambiwidth"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Sending U7 request"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>term_windgoto</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>mb_char2bytes</name><argument_list>(<argument><expr><literal type="number">0x25bd</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_U7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>termrequest_sent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u7_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>screen_stop_highlight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>term_windgoto</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>term_windgoto</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vpeekc_nomap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>may_req_bg_color</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>can_get_termresponse</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>starting</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>didit</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>rfg_status</name><operator>.</operator><name>tr_progress</name></name> <operator>==</operator> <name>STATUS_GET</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_RFG</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Sending FG request"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_RFG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>termrequest_sent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rfg_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>didit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>rbg_status</name><operator>.</operator><name>tr_progress</name></name> <operator>==</operator> <name>STATUS_GET</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_RBG</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Sending BG request"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_RBG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>termrequest_sent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rbg_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>didit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>didit</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vpeekc_nomap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>log_tr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>fd_tr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>proftime_T</name></type> <name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd_tr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>fd_tr</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"termresponse.log"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>now</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd_tr</name></expr></argument>, <argument><expr><literal type="string">"%s: %s "</literal></expr></argument>, <argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name>must_redraw</name> <operator>==</operator> <name>NOT_VALID</name></expr> ?</condition><then> <expr><literal type="string">"NV"</literal></expr>

</then><else>: <expr><ternary><condition><expr><name>must_redraw</name> <operator>==</operator> <name>CLEAR</name></expr> ?</condition><then> <expr><literal type="string">"CL"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>fd_tr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fd_tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>fd_tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>swapping_screen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>full_screen</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_TI</name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>scroll_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_VS</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_CVS</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_VS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_CVS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cursor_is_off</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>cursor_on_force</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_VE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor_is_off</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>cursor_on</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cursor_is_off</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cursor_on_force</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>cursor_off</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>full_screen</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>cursor_is_off</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_VI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>cursor_is_off</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURSOR_SHAPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>term_cursor_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>forced</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>showing_mode</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>full_screen</name> <operator>||</operator> <operator>*</operator><name>T_CEI</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>forced</name> <operator>&amp;&amp;</operator> <name>initial_cursor_shape</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>term_cursor_shape</name><argument_list>(<argument><expr><name>initial_cursor_shape</name></expr></argument>, <argument><expr><name>initial_cursor_blink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>REPLACE</name><operator>)</operator> <operator>==</operator> <name>REPLACE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>forced</name> <operator>||</operator> <name>showing_mode</name> <operator>!=</operator> <name>REPLACE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_CSR</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>T_CSR</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>T_CSI</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>showing_mode</name> <operator>=</operator> <name>REPLACE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>forced</name> <operator>||</operator> <name>showing_mode</name> <operator>!=</operator> <name>INSERT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_CSI</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_CSI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>showing_mode</name> <operator>=</operator> <name>INSERT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>forced</name> <operator>||</operator> <name>showing_mode</name> <operator>!=</operator> <name>NORMAL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_CEI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>showing_mode</name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>term_cursor_color</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_CSC</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_CSC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>out_str_nf</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_CEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>blink_state_is_inverted</name><parameter_list>()</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>rbm_status</name><operator>.</operator><name>tr_progress</name></name> <operator>==</operator> <name>STATUS_GOT</name>

<operator>&amp;&amp;</operator> <name><name>rcs_status</name><operator>.</operator><name>tr_progress</name></name> <operator>==</operator> <name>STATUS_GOT</name>

<operator>&amp;&amp;</operator> <name>initial_cursor_blink</name> <operator>!=</operator> <name>initial_cursor_shape_blink</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>FALSE</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>term_cursor_shape</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>shape</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blink</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_CSH</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>T_CSH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>shape</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <name>blink</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>do_blink</name> <init>= <expr><name>blink</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>blink_state_is_inverted</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>do_blink</name> <operator>=</operator> <operator>!</operator><name>blink</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_blink</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_VS</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_VS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>do_blink</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_CVS</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_CVS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>scroll_region_set</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>T_CS</name></expr></argument>, <argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_CSV</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>!=</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>T_CSV</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>scroll_region_reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>T_CS</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_CSV</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>T_CSV</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<struct><specifier>static</specifier> struct <name>termcode</name>

<block>{

<decl_stmt><decl><type><name>char_u</name></type> <name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>modlen</name></decl>;</decl_stmt> 

}</block> <decl><modifier>*</modifier><name>termcodes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tc_max_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tc_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>termcode_star</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>

<name>clear_termcodes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>tc_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>termcodes</name><index>[<expr><operator>--</operator><name>tc_len</name></expr>]</index></name><operator>.</operator><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>termcodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tc_max_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>BC</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name>UP</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name>PC</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>ospeed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>need_gather</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATC_FROM_TERM</name></cpp:macro> <cpp:value>55</cpp:value></cpp:define>

<function><type><name>void</name></type>

<name>add_termcode</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>termcode</name></name> <modifier>*</modifier></type><name>new_tc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>string</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>string</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>del_termcode</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>flags</name> <operator>!=</operator> <name>ATC_FROM_TERM</name> <operator>&amp;&amp;</operator> <call><name>term_7to8bit</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>term_7to8bit</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_gather</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>tc_len</name> <operator>==</operator> <name>tc_max_len</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tc_max_len</name> <operator>+=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_tc</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr>struct <name>termcode</name></expr></argument>, <argument><expr><name>tc_max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_tc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tc_max_len</name> <operator>-=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tc_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>new_tc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>termcodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>termcodes</name> <operator>=</operator> <name>new_tc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tc_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <name>ATC_FROM_TERM</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>=</operator> <call><name>termcode_star</name><argument_list>(

<argument><expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr></argument>, <argument><expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>-</operator> <name>j</name>

<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>

<operator>==</operator> <name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>tc_len</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>tc_len</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <name>i</name></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>termcodes</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>termcodes</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

</block_content>}</block></for>

<expr_stmt><expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>modlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>termcode_star</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>modlen</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>tc_len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>termcode_star</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>code</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name><name>code</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>find_termcode</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tc_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>get_termcode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>tc_len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>get_termcode_len</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>termcodes</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>del_termcode</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>termcodes</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>need_gather</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tc_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>del_termcode_idx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>del_termcode_idx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>termcodes</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>tc_len</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>idx</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tc_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>termcodes</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>switch_to_8bit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>term_is_8bit</name><argument_list>(<argument><expr><name>T_NAME</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tc_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>term_7to8bit</name><argument_list>(<argument><expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>need_gather</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>detected_8bit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Switching to 8 bit"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_DOUBLE_CLICK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>orig_topline</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>orig_topfill</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_DOUBLE_CLICK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>set_mouse_topline</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>orig_topline</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>orig_topfill</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>is_mouse_topline</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>orig_topline</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>orig_topfill</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>put_string_in_typebuf</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>slen</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>string</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>new_slen</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bufsize</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>buflen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>extra</name> <init>= <expr><name>new_slen</name> <operator>-</operator> <name>slen</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>new_slen</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>del_typebuf</name><argument_list>(<argument><expr><operator>-</operator><name>extra</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_typebuf</name><argument_list>(<argument><expr><name>string</name> <operator>+</operator> <name>slen</name></expr></argument>, <argument><expr><name>REMAP_YES</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>string</name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>new_slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>offset</name> <operator>-</operator> <name>extra</name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>buflen</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>extra</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buflen</name> <operator>+</operator> <name>extra</name> <operator>+</operator> <name>new_slen</name> <operator>&gt;=</operator> <name>bufsize</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>extra</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>buflen</name> <operator>-</operator> <name>offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>new_slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buflen</name> <operator>=</operator> <operator>*</operator><name>buflen</name> <operator>+</operator> <name>extra</name> <operator>+</operator> <name>new_slen</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>decode_modifiers</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_META</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>modifiers</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>modifiers2keycode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>modifiers</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>new_slen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <call><name>simplify_key</name><argument_list>(<argument><expr><operator>*</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>new_slen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>new_slen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_MODIFIER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>new_slen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>modifiers</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>new_slen</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>check_termcode</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>max_offset</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bufsize</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>buflen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>modslen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>key_name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>modifiers_start</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_slen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name><name>string</name><index>[<expr><name>MAX_KEY_CODE_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cpo_koffset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cpo_koffset</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_KOFFSET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_gather</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gather_termleader</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>offset</name> <operator>&lt;</operator> <name>max_offset</name></expr>;</condition> <incr><expr><operator>++</operator><name>offset</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <operator>*</operator><name>buflen</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>buflen</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tp</name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>tp</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>termleader</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>i</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tp</name> <operator>==</operator> <name>ESC</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_ek</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tp</name> <operator>==</operator> <name>CSI</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>slen</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>tc_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <name><name>termcodes</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>modifiers_start</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cpo_koffset</name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <name>slen</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>termcodes</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>code</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>slen</name> <operator>&gt;</operator> <name>len</name></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><name>slen</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>slen</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>termcodes</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'K'</literal>

<operator>&amp;&amp;</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><name><name>termcodes</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>tc_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>termcodes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>==</operator> <name>slen</name> <operator>&amp;&amp;</operator>

<call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>termcodes</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>code</name></expr></argument>,

<argument><expr><name><name>termcodes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>code</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>termcodes</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>termcodes</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>termcodes</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>modlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>modslen</name> <operator>=</operator> <name><name>termcodes</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>modlen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cpo_koffset</name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <name>modslen</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>termcodes</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>code</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>modslen</name> <operator>&gt;</operator> <name>len</name></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><name>modslen</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <name>modslen</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>tp</name><index>[<expr><name>modslen</name></expr>]</index></name> <operator>==</operator> <name><name>termcodes</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><name>slen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <name>modslen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name><name>tp</name><index>[<expr><name>modslen</name></expr>]</index></name> <operator>!=</operator> <literal type="char">';'</literal> <operator>&amp;&amp;</operator> <name>modslen</name> <operator>==</operator> <name>slen</name> <operator>-</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if> 

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>slen</name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>||</operator> <name><name>tp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name><name>tp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>tp</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>termcodes</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><name>slen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>modifiers_start</name> <operator>=</operator> <name>tp</name> <operator>+</operator> <name>slen</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>modifiers_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <call><name>decode_modifiers</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>termcodes</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>termcodes</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_DEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_DEC_MOUSE</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_PTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_PTERM_MOUSE</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>argp</name> <init>= <expr><ternary><condition><expr><name><name>tp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ESC</name></expr> ?</condition><then> <expr><name>tp</name> <operator>+</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name>tp</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>tp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ESC</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>tp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>CSI</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>argp</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>argp</name> <operator>==</operator> <literal type="char">'&gt;'</literal> <operator>||</operator> <operator>*</operator><name>argp</name> <operator>==</operator> <literal type="char">'?'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>trail</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>arg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ap</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>csi_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>first</name> <operator>=</operator> <operator>*</operator><name>ap</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>argc</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ap</name> <operator>&gt;=</operator> <name>tp</name> <operator>+</operator> <name>len</name></expr>)</condition>

<block>{<block_content>

<label><name>not_enough</name>:</label>

<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Not enough characters for CSI sequence"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ap</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>arg</name><index>[<expr><name>argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>arg</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ap</name> <operator>&gt;=</operator> <name>tp</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>not_enough</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>arg</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <name><name>arg</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>ap</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>ap</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>++</operator><name>argc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ap</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>ap</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name>ap</name> <operator>&lt;</operator> <name>tp</name> <operator>+</operator> <name>len</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>*</operator><name>ap</name> <operator>&gt;=</operator> <literal type="char">'{'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ap</name> <operator>&lt;=</operator> <literal type="char">'~'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><operator>*</operator><name>ap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>ap</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>ap</name> <operator>&gt;=</operator> <name>tp</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>not_enough</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>trail</name> <operator>=</operator> <operator>*</operator><name>ap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>csi_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ap</name> <operator>-</operator> <name>tp</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>trail</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aw</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Received U7 status: %s"</literal><operator>,</operator> <name>tp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u7_status</name><operator>.</operator><name>tr_progress</name></name> <operator>=</operator> <name>STATUS_GOT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_cursorhold</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>aw</name> <operator>=</operator> <literal type="string">"single"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>aw</name> <operator>=</operator> <literal type="string">"double"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>aw</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>aw</name></expr></argument>, <argument><expr><name>p_ambw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ambw"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>aw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>redraw_asap</name><argument_list>(<argument><expr><name>CLEAR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>log_tr</name><argument_list>(<argument><expr><literal type="string">"set 'ambiwidth', redraw_asap(): %d"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>redraw_asap</name><argument_list>(<argument><expr><name>CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_IGNORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <name>csi_len</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_TERMU7RESP</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>T_CRV</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>ap</name> <operator>&gt;</operator> <name>argp</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>trail</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Received CRV response: %s"</literal><operator>,</operator> <name>tp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crv_status</name><operator>.</operator><name>tr_progress</name></name> <operator>=</operator> <name>STATUS_GOT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_cursorhold</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>CSI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>switch_to_8bit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;</operator> <literal type="number">20000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <literal type="char">'&gt;'</literal> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>need_flush</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_iterm2</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_mintty</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_screen</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">77</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_mintty</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <literal type="number">141</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Enable checking for XT codes"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>check_for_codes</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>need_gather</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>req_codes_from_term</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">100</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"COLORS"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>may_adjust_color_count</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_was_set</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ttym"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ttym"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"sgr"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">95</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>is_not_xterm</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_mac_terminal</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_iterm2</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_not_xterm</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">83</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_screen</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_was_set</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ttym"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>is_screen</name> <operator>&amp;&amp;</operator> <name>version</name> <operator>&gt;=</operator> <literal type="number">277</literal><operator>)</operator>

<operator>||</operator> <name>is_iterm2</name>

<operator>||</operator> <name>is_mac_terminal</name>

<operator>||</operator> <name>is_mintty</name>

<operator>||</operator> <operator>(</operator><name>is_screen</name> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">40700</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ttym"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"sgr"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <literal type="number">95</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ttym"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"xterm2"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">2500</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_not_xterm</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">136</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_not_xterm</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">115</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_not_xterm</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&lt;</operator> <literal type="number">95</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_not_xterm</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rcs_status</name><operator>.</operator><name>tr_progress</name></name> <operator>==</operator> <name>STATUS_GET</name>

<operator>&amp;&amp;</operator> <name>version</name> <operator>&gt;=</operator> <literal type="number">279</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><name>is_not_xterm</name>

<operator>&amp;&amp;</operator> <operator>*</operator><name>T_CSH</name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>*</operator><name>T_CRS</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Sending cursor style request"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_CRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>termrequest_sent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rcs_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_flush</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rbm_status</name><operator>.</operator><name>tr_progress</name></name> <operator>==</operator> <name>STATUS_GET</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name>is_not_xterm</name>

<operator>&amp;&amp;</operator> <operator>*</operator><name>T_CRC</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Sending cursor blink mode request"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_CRC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>termrequest_sent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rbm_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_flush</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_flush</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <name>csi_len</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_TERMRESPONSE</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_TERMRESPONSE</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_IGNORE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>rbm_status</name><operator>.</operator><name>tr_progress</name></name> <operator>==</operator> <name>STATUS_SENT</name>

<operator>&amp;&amp;</operator> <name>first</name> <operator>==</operator> <literal type="char">'?'</literal>

<operator>&amp;&amp;</operator> <name>ap</name> <operator>==</operator> <name>argp</name> <operator>+</operator> <literal type="number">6</literal>

<operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">12</literal>

<operator>&amp;&amp;</operator> <name><name>ap</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal>

<operator>&amp;&amp;</operator> <name>trail</name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>initial_cursor_blink</name> <operator>=</operator> <operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rbm_status</name><operator>.</operator><name>tr_progress</name></name> <operator>=</operator> <name>STATUS_GOT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Received cursor blinking mode response: %s"</literal><operator>,</operator> <name>tp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_IGNORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <name>csi_len</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_TERMBLINKRESP</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>did_request_winpos</name> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal>

<operator>&amp;&amp;</operator> <name>trail</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>winpos_x</name> <operator>=</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>winpos_y</name> <operator>=</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_IGNORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <name>csi_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name>did_request_winpos</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>winpos_status</name><operator>.</operator><name>tr_progress</name></name> <operator>=</operator> <name>STATUS_GOT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">27</literal> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>trail</name> <operator>==</operator> <literal type="char">'~'</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>trail</name> <operator>==</operator> <literal type="char">'u'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>seenModifyOtherKeys</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>trail</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <call><name>decode_modifiers</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>==</operator> <name>MOD_MASK_SHIFT</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>key</name> <operator>&gt;=</operator> <literal type="char">'@'</literal> <operator>&amp;&amp;</operator> <name>key</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator>

<operator>||</operator> <name>key</name> <operator>==</operator> <literal type="char">'^'</literal> <operator>||</operator> <name>key</name> <operator>==</operator> <literal type="char">'_'</literal>

<operator>||</operator> <operator>(</operator><name>key</name> <operator>&gt;=</operator> <literal type="char">'{'</literal> <operator>&amp;&amp;</operator> <name>key</name> <operator>&lt;=</operator> <literal type="char">'~'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name>MOD_MASK_CTRL</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>TOUPPER_ASC</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_slen</name> <operator>=</operator> <call><name>modifiers2keycode</name><argument_list>(<argument><expr><name>modifiers</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <name>csi_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_slen</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>string</name> <operator>+</operator> <name>new_slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>new_slen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>put_string_in_typebuf</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>new_slen</name></expr></argument>,

<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>len</name> <operator>+</operator> <name>new_slen</name> <operator>-</operator> <name>slen</name> <operator>+</operator> <name>offset</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>T_RBG</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>T_RFG</name> <operator>!=</operator> <name>NUL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>tp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ESC</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal><operator>)</operator>

<operator>||</operator> <name><name>tp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>OSC</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>tp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ESC</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>j</name> <operator>+</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>argp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'1'</literal>

<operator>||</operator> <operator>(</operator><name><name>argp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'1'</literal> <operator>&amp;&amp;</operator> <name><name>argp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'0'</literal><operator>)</operator>

<operator>||</operator> <name><name>argp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">';'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\007'</literal> <operator>||</operator> <operator>(</operator><ternary><condition><expr><name><name>tp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>OSC</name></expr> ?</condition><then> <expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>STERM</name></expr>

</then><else>: <expr><operator>(</operator><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>ESC</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>is_bg</name> <init>= <expr><name><name>argp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_4digit</name> <init>= <expr><name>i</name> <operator>-</operator> <name>j</name> <operator>&gt;=</operator> <literal type="number">21</literal> <operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">11</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal>

<operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>-</operator> <name>j</name> <operator>&gt;=</operator> <literal type="number">15</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>tp</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"rgb:"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>is_4digit</name>

<operator>||</operator> <operator>(</operator><name><name>tp</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">12</literal> <operator>==</operator> <literal type="char">'/'</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tp_r</name> <init>= <expr><name>tp</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tp_g</name> <init>= <expr><name>tp</name> <operator>+</operator> <name>j</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>is_4digit</name></expr> ?</condition><then> <expr><literal type="number">12</literal></expr> </then><else>: <expr><literal type="number">10</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tp_b</name> <init>= <expr><name>tp</name> <operator>+</operator> <name>j</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>is_4digit</name></expr> ?</condition><then> <expr><literal type="number">17</literal></expr> </then><else>: <expr><literal type="number">13</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name></decl>, <decl><type ref="prev"/><name>gval</name></decl>, <decl><type ref="prev"/><name>bval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>hexhex2nr</name><argument_list>(<argument><expr><name>tp_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gval</name> <operator>=</operator> <call><name>hexhex2nr</name><argument_list>(<argument><expr><name>tp_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bval</name> <operator>=</operator> <call><name>hexhex2nr</name><argument_list>(<argument><expr><name>tp_g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>is_bg</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_bg_val</name> <init>= <expr><ternary><condition><expr><operator>(</operator><literal type="number">3</literal> <operator>*</operator> <literal type="char">'6'</literal> <operator>&lt;</operator> <operator>*</operator><name>tp_r</name> <operator>+</operator> <operator>*</operator><name>tp_g</name> <operator>+</operator>

<operator>*</operator><name>tp_b</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"light"</literal></expr> </then><else>: <expr><literal type="string">"dark"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Received RBG response: %s"</literal><operator>,</operator> <name>tp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rbg_status</name><operator>.</operator><name>tr_progress</name></name> <operator>=</operator> <name>STATUS_GOT</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>bg_r</name> <operator>=</operator> <name>rval</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bg_g</name> <operator>=</operator> <name>gval</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bg_b</name> <operator>=</operator> <name>bval</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_was_set</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"bg"</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>p_bg</name></expr></argument>, <argument><expr><name>new_bg_val</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"bg"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>new_bg_val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_option_was_set</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"bg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_asap</name><argument_list>(<argument><expr><name>CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Received RFG response: %s"</literal><operator>,</operator> <name>tp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rfg_status</name><operator>.</operator><name>tr_progress</name></name> <operator>=</operator> <name>STATUS_GOT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fg_r</name> <operator>=</operator> <name>rval</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fg_g</name> <operator>=</operator> <name>gval</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fg_b</name> <operator>=</operator> <name>bval</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_IGNORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>ESC</name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><ternary><condition><expr><name>is_bg</name></expr> ?</condition><then> <expr><name>VV_TERMRBGRESP</name></expr>

</then><else>: <expr><name>VV_TERMRFGRESP</name></expr></else></ternary></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>len</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"not enough characters for RB"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>check_for_codes</name> <operator>||</operator> <name><name>rcs_status</name><operator>.</operator><name>tr_progress</name></name> <operator>==</operator> <name>STATUS_SENT</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>tp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ESC</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal><operator>)</operator>

<operator>||</operator> <name><name>tp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>DCS</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>tp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ESC</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>j</name> <operator>+</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>argp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <name><name>argp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'$'</literal><operator>)</operator> <operator>||</operator> <name><name>argp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'r'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name><name>argp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>ESC</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator>

<operator>||</operator> <name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>STERM</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>-</operator> <name>j</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>got_code_from_term</name><argument_list>(<argument><expr><name>tp</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_IGNORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>ESC</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for></block_content></block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>-</operator> <name>j</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>-</operator> <name>j</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>-</operator> <name>j</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'q'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>-</operator> <name>j</name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>ESC</name> <operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>STERM</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>-</operator> <name>j</name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>STERM</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name>j</name> <operator>==</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>number</name> <init>= <expr><name><name>argp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>number</name> <operator>=</operator> <ternary><condition><expr><name>number</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>number</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>initial_cursor_shape</name> <operator>=</operator> <operator>(</operator><name>number</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>initial_cursor_shape_blink</name> <operator>=</operator>

<ternary><condition><expr><operator>(</operator><name>number</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>FALSE</name></expr> </then><else>: <expr><name>TRUE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcs_status</name><operator>.</operator><name>tr_progress</name></name> <operator>=</operator> <name>STATUS_GOT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Received cursor shape response: %s"</literal><operator>,</operator> <name>tp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_IGNORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_TERMSTYLERESP</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>len</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"not enough characters for XT"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name>

<operator>&amp;&amp;</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_EXTRA</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_X1MOUSE</name>

<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_X2MOUSE</name>

<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_MOUSELEFT</name>

<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_MOUSERIGHT</name>

<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_MOUSEDOWN</name>

<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_MOUSEUP</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>bytes</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_bytes</name> <init>= <expr><call><name>get_bytes_from_buf</name><argument_list>(<argument><expr><name>tp</name> <operator>+</operator> <name>slen</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num_bytes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mouse_col</name> <operator>=</operator> <literal type="number">128</literal> <operator>*</operator> <operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">' '</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">' '</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_row</name> <operator>=</operator> <literal type="number">128</literal> <operator>*</operator> <operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="char">' '</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="char">' '</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>slen</name> <operator>+=</operator> <name>num_bytes</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_MOUSE</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_GPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_GPM_MOUSE</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_JSB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_JSBTERM_MOUSE</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_NET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_NETTERM_MOUSE</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_DEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_DEC_MOUSE</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_PTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_PTERM_MOUSE</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_URXVT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_URXVT_MOUSE</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_SGR_MOUSE</name>

<operator>||</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_SGR_MOUSE_RELEASE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_termcode_mouse</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen</name></expr></argument>, <argument><expr><name>key_name</name></expr></argument>, <argument><expr><name>modifiers_start</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>modifiers</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_MENU</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>long_u</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_bytes</name> <init>= <expr><call><name>get_long_from_buf</name><argument_list>(<argument><expr><name>tp</name> <operator>+</operator> <name>slen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num_bytes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_menu</name> <operator>=</operator> <operator>(</operator><name>vimmenu_T</name> <operator>*</operator><operator>)</operator><name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>slen</name> <operator>+=</operator> <name>num_bytes</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_menu_pointer</name><argument_list>(<argument><expr><name>root_menu</name></expr></argument>, <argument><expr><name>current_menu</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_IGNORE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_TABLINE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>bytes</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_bytes</name> <init>= <expr><call><name>get_bytes_from_buf</name><argument_list>(<argument><expr><name>tp</name> <operator>+</operator> <name>slen</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num_bytes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_tab</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_tab</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>current_tab</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>slen</name> <operator>+=</operator> <name>num_bytes</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_TABMENU</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>bytes</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_bytes</name> <init>= <expr><call><name>get_bytes_from_buf</name><argument_list>(<argument><expr><name>tp</name> <operator>+</operator> <name>slen</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num_bytes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_tab</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_tabmenu</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>slen</name> <operator>+=</operator> <name>num_bytes</name></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_ON_FLY_SCROLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_VER_SCROLLBAR</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>long_u</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>bytes</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_bytes</name></decl>;</decl_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>CSI</name> <operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_VER_SCROLLBAR</name>

<operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num_bytes</name> <operator>=</operator> <call><name>get_bytes_from_buf</name><argument_list>(<argument><expr><name>tp</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_bytes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>current_scrollbar</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>current_scrollbar</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>num_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_bytes</name> <operator>=</operator> <call><name>get_long_from_buf</name><argument_list>(<argument><expr><name>tp</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_bytes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>scrollbar_value</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>num_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_HOR_SCROLLBAR</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>long_u</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_bytes</name></decl>;</decl_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>CSI</name> <operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_HOR_SCROLLBAR</name>

<operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num_bytes</name> <operator>=</operator> <call><name>get_long_from_buf</name><argument_list>(<argument><expr><name>tp</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_bytes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>scrollbar_value</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>num_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>handle_x_keys</name><argument_list>(<argument><expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_slen</name> <operator>=</operator> <call><name>modifiers2keycode</name><argument_list>(<argument><expr><name>modifiers</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>KEY2TERMCAP0</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>KEY2TERMCAP1</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_KEY</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_slen</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>string</name> <operator>+</operator> <name>new_slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>new_slen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>new_slen</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>KS_EXTRA</name>

<operator>&amp;&amp;</operator> <name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KE_IGNORE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>KEYLEN_REMOVED</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>new_slen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>new_slen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>new_slen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>put_string_in_typebuf</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>new_slen</name></expr></argument>,

<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>retval</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>len</name> <operator>+</operator> <name>new_slen</name> <operator>-</operator> <name>slen</name> <operator>+</operator> <name>offset</name><operator>)</operator></expr> </then><else>: <expr><name>retval</name></expr></else></ternary></expr>;</return>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"normal character"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>term_get_fg_color</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rfg_status</name><operator>.</operator><name>tr_progress</name></name> <operator>==</operator> <name>STATUS_GOT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>fg_r</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>g</name> <operator>=</operator> <name>fg_g</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name>fg_b</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>term_get_bg_color</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rbg_status</name><operator>.</operator><name>tr_progress</name></name> <operator>==</operator> <name>STATUS_GOT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>bg_r</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>g</name> <operator>=</operator> <name>bg_g</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name>bg_b</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>replace_termcodes</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>bufp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>did_simplify</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_backslash</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>do_special</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>do_key_code</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt> 

<expr_stmt><expr><name>do_backslash</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_BSLASH</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>do_special</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_SPECI</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REPTERM_SPECIAL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>do_key_code</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_KEYCODE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bufp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>from</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REPTERM_FROM_PART</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'k'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">';'</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>src</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>do_special</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REPTERM_DO_LT</name><operator>)</operator>

<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="string">"&lt;lt&gt;"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="string">"&lt;SID&gt;"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_usingsid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_SNR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>result</name> <operator>+</operator> <name>dlen</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dlen</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>trans_special</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><name>result</name> <operator>+</operator> <name>dlen</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,

<argument><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REPTERM_NO_SIMPLIFY</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>did_simplify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slen</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dlen</name> <operator>+=</operator> <name>slen</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_key_code</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>find_term_bykeys</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>do_special</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="string">"&lt;Leader&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_var_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"g:mapleader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="string">"&lt;LocalLeader&gt;"</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_var_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"g:maplocalleader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>key</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>Ctrl_V</name> <operator>||</operator> <operator>(</operator><name>do_backslash</name> <operator>&amp;&amp;</operator> <name>key</name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>src</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>src</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REPTERM_FROM_PART</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>src</name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>KS_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>KE_FILLER</name></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>src</name> <operator>==</operator> <name>CSI</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_CSI</name></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>src</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></while>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>dlen</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>bufp</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>from</name> <operator>=</operator> <operator>*</operator><name>bufp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>from</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>find_term_bykeys</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tc_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>==</operator> <name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name>

<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>slen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gather_termleader</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>termleader</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>check_for_codes</name> <operator>||</operator> <operator>*</operator><name>T_CRS</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>termleader</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>DCS</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>termleader</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tc_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>termleader</name></expr></argument>, <argument><expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>termleader</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>termleader</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>need_gather</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>show_termcodes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>items</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>item_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>rows</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cols</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INC3</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INC2</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<if_stmt><if>if <condition>(<expr><name>tc_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>items</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>tc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>items</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_puts_title</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n--- Terminal keys ---"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>run</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>run</name> <operator>&lt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>run</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>item_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tc_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>show_one_termcode</name><argument_list>(<argument><expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,

<argument><expr><name><name>termcodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>len</name> <operator>&lt;=</operator> <name>INC3</name> <operator>-</operator> <name>GAP</name></expr> ?</condition><then> <expr><name>run</name> <operator>==</operator> <literal type="number">1</literal></expr>

</then><else>: <expr><ternary><condition><expr><name>len</name> <operator>&lt;=</operator> <name>INC2</name> <operator>-</operator> <name>GAP</name></expr> ?</condition><then> <expr><name>run</name> <operator>==</operator> <literal type="number">2</literal></expr>

</then><else>: <expr><name>run</name> <operator>==</operator> <literal type="number">3</literal></expr></else></ternary></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>items</name><index>[<expr><name>item_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>run</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>(</operator><name>Columns</name> <operator>+</operator> <name>GAP</name><operator>)</operator> <operator>/</operator> <operator>(</operator><ternary><condition><expr><name>run</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>INC3</name></expr> </then><else>: <expr><name>INC2</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rows</name> <operator>=</operator> <operator>(</operator><name>item_count</name> <operator>+</operator> <name>cols</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>cols</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>rows</name> <operator>=</operator> <name>item_count</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>rows</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>row</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>row</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>item_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>rows</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>show_one_termcode</name><argument_list>(<argument><expr><name><name>termcodes</name><index>[<expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,

<argument><expr><name><name>termcodes</name><index>[<expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>code</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>run</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>INC2</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>INC3</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>show_one_termcode</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>printit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'~'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_special_key_name</name><argument_list>(<argument><expr><call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>IObuff</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block>

while <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">17</literal></expr>)</condition>;</do>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>printit</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xt_index_in</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xt_index_out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>req_codes_from_term</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>xt_index_out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>xt_index_in</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>req_more_codes_from_term</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>req_more_codes_from_term</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_idx</name> <init>= <expr><name>xt_index_out</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>exiting</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>xt_index_out</name> <operator>&lt;</operator> <name>xt_index_in</name> <operator>+</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name><name>key_names</name><index>[<expr><name>xt_index_out</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key_name</name> <init>= <expr><name><name>key_names</name><index>[<expr><name>xt_index_out</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Requesting XT %d: %s"</literal><operator>,</operator> <name>xt_index_out</name><operator>,</operator> <name>key_name</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\033P+q%02x%02x\033\\"</literal></expr></argument>, <argument><expr><name><name>key_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str_nf</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>xt_index_out</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>xt_index_out</name> <operator>!=</operator> <name>old_idx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>got_code_from_term</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XT_LEN</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>str</name><index>[<expr><name>XT_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal> <operator>&amp;&amp;</operator> <name><name>code</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>XT_LEN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>hexhex2nr</name><argument_list>(<argument><expr><name>code</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>hexhex2nr</name><argument_list>(<argument><expr><name>code</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>key_names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>key_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>xt_index_in</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>LOG_TR</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Received XT %d: %s"</literal><operator>,</operator> <name>xt_index_in</name><operator>,</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key_names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>hexhex2nr</name><argument_list>(<argument><expr><name>code</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'o'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>may_adjust_color_count</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>find_term_bykeys</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>del_termcode_idx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_termcode</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>ATC_FROM_TERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>xt_index_in</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>req_more_codes_from_term</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>check_for_codes_from_term</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>xt_index_out</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>xt_index_out</name> <operator>==</operator> <name>xt_index_in</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>allow_keys</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vpeekc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>K_IGNORE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>K_IGNORE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>--</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>allow_keys</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>ksme_str</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>ksmr_str</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>ksmd_str</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>update_tcap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>builtin_term</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_builtin_term</name><argument_list>(<argument><expr><name>DEFAULT_TERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ksme_str</name></expr></argument>, <argument><expr><call><name>IF_EB</name><argument_list>(<argument><expr><literal type="string">"\033|%dm"</literal></expr></argument>, <argument><expr><name>ESC_STR</name> <literal type="string">"|%dm"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ksmd_str</name></expr></argument>, <argument><expr><call><name>IF_EB</name><argument_list>(<argument><expr><literal type="string">"\033|%dm"</literal></expr></argument>, <argument><expr><name>ESC_STR</name> <literal type="string">"|%dm"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>attr</name> <operator>|</operator> <literal type="number">0x08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ksmr_str</name></expr></argument>, <argument><expr><call><name>IF_EB</name><argument_list>(<argument><expr><literal type="string">"\033|%dm"</literal></expr></argument>, <argument><expr><name>ESC_STR</name> <literal type="string">"|%dm"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>attr</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>attr</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>bt_string</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>bt_entry</name></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_ME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bt_string</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ksme_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>bt_entry</name></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_MR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bt_string</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ksmr_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>bt_entry</name></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_MD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bt_string</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ksmd_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KSSIZE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<struct>struct <name>ks_tbl_s</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vtp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vtp2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>KSSIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>vbuf</name><index>[<expr><name>KSSIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>v2buf</name><index>[<expr><name>KSSIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>arr</name><index>[<expr><name>KSSIZE</name></expr>]</index></name></decl>;</decl_stmt> 

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ks_tbl_s</name></name></type> <name><name>ks_tbl</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_ME</name></expr>, <expr><literal type="string">"\033|0m"</literal></expr>, <expr><literal type="string">"\033|0m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MR</name></expr>, <expr><literal type="string">"\033|7m"</literal></expr>, <expr><literal type="string">"\033|7m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_MD</name></expr>, <expr><literal type="string">"\033|1m"</literal></expr>, <expr><literal type="string">"\033|1m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SO</name></expr>, <expr><literal type="string">"\033|91m"</literal></expr>, <expr><literal type="string">"\033|91m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_SE</name></expr>, <expr><literal type="string">"\033|39m"</literal></expr>, <expr><literal type="string">"\033|39m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CZH</name></expr>, <expr><literal type="string">"\033|95m"</literal></expr>, <expr><literal type="string">"\033|95m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CZR</name></expr>, <expr><literal type="string">"\033|0m"</literal></expr>, <expr><literal type="string">"\033|0m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_US</name></expr>, <expr><literal type="string">"\033|4m"</literal></expr>, <expr><literal type="string">"\033|4m"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_UE</name></expr>, <expr><literal type="string">"\033|24m"</literal></expr>, <expr><literal type="string">"\033|24m"</literal></expr>}</block></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAB</name></expr>, <expr><literal type="string">"\033|%p1%db"</literal></expr>, <expr><literal type="string">"\033|%p14%dm"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAF</name></expr>, <expr><literal type="string">"\033|%p1%df"</literal></expr>, <expr><literal type="string">"\033|%p13%dm"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CS</name></expr>, <expr><literal type="string">"\033|%p1%d;%p2%dR"</literal></expr>, <expr><literal type="string">"\033|%p1%d;%p2%dR"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSV</name></expr>, <expr><literal type="string">"\033|%p1%d;%p2%dV"</literal></expr>, <expr><literal type="string">"\033|%p1%d;%p2%dV"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAB</name></expr>, <expr><literal type="string">"\033|%db"</literal></expr>, <expr><literal type="string">"\033|4%dm"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CAF</name></expr>, <expr><literal type="string">"\033|%df"</literal></expr>, <expr><literal type="string">"\033|3%dm"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CS</name></expr>, <expr><literal type="string">"\033|%d;%dR"</literal></expr>, <expr><literal type="string">"\033|%d;%dR"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CSV</name></expr>, <expr><literal type="string">"\033|%d;%dV"</literal></expr>, <expr><literal type="string">"\033|%d;%dV"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_CCO</name></expr>, <expr><literal type="string">"256"</literal></expr>, <expr><literal type="string">"256"</literal></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name></expr>}</block></expr> 

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>builtin_term</name></name> <modifier>*</modifier></type>

<name>find_first_tcap</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>builtin_term</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <call><name>find_builtin_term</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>bt_string</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>bt_entry</name></name> <operator>==</operator> <name>code</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>swap_tcap</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>init_done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curr_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ks_tbl_s</name></name> <modifier>*</modifier></type><name>ks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>builtin_term</name></name> <modifier>*</modifier></type><name>bt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<enum>enum

<block>{

<decl><name>CMODEINDEX</name></decl>,

<decl><name>CMODE24</name></decl>,

<decl><name>CMODE256</name></decl>

}</block>;</enum>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init_done</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>ks</name> <operator>=</operator> <name>ks_tbl</name></expr>;</init> <condition><expr><name><name>ks</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name></expr>;</condition> <incr><expr><name>ks</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>bt</name> <operator>=</operator> <call><name>find_first_tcap</name><argument_list>(<argument><expr><name>DEFAULT_TERM</name></expr></argument>, <argument><expr><name><name>ks</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name><name>ks</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>bt</name><operator>-&gt;</operator><name>bt_string</name></name></expr></argument>, <argument><expr><name>KSSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name><name>ks</name><operator>-&gt;</operator><name>vbuf</name></name></expr></argument>, <argument><expr><name><name>ks</name><operator>-&gt;</operator><name>vtp</name></name></expr></argument>, <argument><expr><name>KSSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name><name>ks</name><operator>-&gt;</operator><name>v2buf</name></name></expr></argument>, <argument><expr><name><name>ks</name><operator>-&gt;</operator><name>vtp2</name></name></expr></argument>, <argument><expr><name>KSSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name><name>ks</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>, <argument><expr><name><name>bt</name><operator>-&gt;</operator><name>bt_string</name></name></expr></argument>, <argument><expr><name>KSSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bt</name><operator>-&gt;</operator><name>bt_string</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ks</name><operator>-&gt;</operator><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>init_done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curr_mode</name> <operator>=</operator> <name>CMODEINDEX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_tgc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>CMODE24</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>t_colors</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>CMODE256</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>CMODEINDEX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>ks</name> <operator>=</operator> <name>ks_tbl</name></expr>;</init> <condition><expr><name><name>ks</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name></expr>;</condition> <incr><expr><name>ks</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>bt</name> <operator>=</operator> <call><name>find_first_tcap</name><argument_list>(<argument><expr><name>DEFAULT_TERM</name></expr></argument>, <argument><expr><name><name>ks</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name>curr_mode</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>CMODEINDEX</name></expr>:</case>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ks</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bt</name><operator>-&gt;</operator><name>bt_string</name></name></expr></argument>, <argument><expr><name>KSSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CMODE24</name></expr>:</case>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ks</name><operator>-&gt;</operator><name>vbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bt</name><operator>-&gt;</operator><name>bt_string</name></name></expr></argument>, <argument><expr><name>KSSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ks</name><operator>-&gt;</operator><name>v2buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bt</name><operator>-&gt;</operator><name>bt_string</name></name></expr></argument>, <argument><expr><name>KSSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>curr_mode</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>ks</name> <operator>=</operator> <name>ks_tbl</name></expr>;</init> <condition><expr><name><name>ks</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KS_NAME</name></expr>;</condition> <incr><expr><name>ks</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>bt</name> <operator>=</operator> <call><name>find_first_tcap</name><argument_list>(<argument><expr><name>DEFAULT_TERM</name></expr></argument>, <argument><expr><name><name>ks</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>CMODEINDEX</name></expr>:</case>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name><name>bt</name><operator>-&gt;</operator><name>bt_string</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ks</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>KSSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CMODE24</name></expr>:</case>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name><name>bt</name><operator>-&gt;</operator><name>bt_string</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ks</name><operator>-&gt;</operator><name>vbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>KSSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name><name>bt</name><operator>-&gt;</operator><name>bt_string</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ks</name><operator>-&gt;</operator><name>v2buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>KSSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>curr_mode</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>hex_digit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0x1ffffff</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>guicolor_T</name></type>

<name>gui_adjust_rgb</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>c</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x00ff00</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gui_adjust_rgb</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>guicolor_T</name></type>

<name>gui_get_color_cmn</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RGB</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RGB</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGB</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((r&lt;&lt;16) | (g&lt;&lt;8) | (b))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_LEN</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>LINE_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guicolor_T</name></type> <name>color</name></decl>;</decl_stmt>

<struct>struct <name>rgbcolor_table_S</name> <block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>color_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guicolor_T</name></type> <name>color</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>rgbcolor_table_S</name></name></type> <name><name>rgb_table</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"black"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"blue"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0xFF</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"brown"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0xA5</literal></argument>, <argument><literal type="number">0x2A</literal></argument>, <argument><literal type="number">0x2A</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"cyan"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0xFF</literal></argument>, <argument><literal type="number">0xFF</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"darkblue"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x8B</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"darkcyan"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x8B</literal></argument>, <argument><literal type="number">0x8B</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"darkgray"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0xA9</literal></argument>, <argument><literal type="number">0xA9</literal></argument>, <argument><literal type="number">0xA9</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"darkgreen"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x64</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"darkgrey"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0xA9</literal></argument>, <argument><literal type="number">0xA9</literal></argument>, <argument><literal type="number">0xA9</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"darkmagenta"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0x8B</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x8B</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"darkred"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0x8B</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"darkyellow"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0x8B</literal></argument>, <argument><literal type="number">0x8B</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"gray"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0xBE</literal></argument>, <argument><literal type="number">0xBE</literal></argument>, <argument><literal type="number">0xBE</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"green"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0xFF</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"grey"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0xBE</literal></argument>, <argument><literal type="number">0xBE</literal></argument>, <argument><literal type="number">0xBE</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"grey40"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0x66</literal></argument>, <argument><literal type="number">0x66</literal></argument>, <argument><literal type="number">0x66</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"grey50"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0x7F</literal></argument>, <argument><literal type="number">0x7F</literal></argument>, <argument><literal type="number">0x7F</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"grey90"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0xE5</literal></argument>, <argument><literal type="number">0xE5</literal></argument>, <argument><literal type="number">0xE5</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"lightblue"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0xAD</literal></argument>, <argument><literal type="number">0xD8</literal></argument>, <argument><literal type="number">0xE6</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"lightcyan"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0xE0</literal></argument>, <argument><literal type="number">0xFF</literal></argument>, <argument><literal type="number">0xFF</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"lightgray"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0xD3</literal></argument>, <argument><literal type="number">0xD3</literal></argument>, <argument><literal type="number">0xD3</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"lightgreen"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0x90</literal></argument>, <argument><literal type="number">0xEE</literal></argument>, <argument><literal type="number">0x90</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"lightgrey"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0xD3</literal></argument>, <argument><literal type="number">0xD3</literal></argument>, <argument><literal type="number">0xD3</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"lightmagenta"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0xFF</literal></argument>, <argument><literal type="number">0x8B</literal></argument>, <argument><literal type="number">0xFF</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"lightred"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0xFF</literal></argument>, <argument><literal type="number">0x8B</literal></argument>, <argument><literal type="number">0x8B</literal></argument>)</argument_list></macro>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"lightyellow"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0xFF</literal></argument>, <argument><literal type="number">0xFF</literal></argument>, <argument><literal type="number">0xE0</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"magenta"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0xFF</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0xFF</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"red"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0xFF</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"seagreen"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0x2E</literal></argument>, <argument><literal type="number">0x8B</literal></argument>, <argument><literal type="number">0x57</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"white"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0xFF</literal></argument>, <argument><literal type="number">0xFF</literal></argument>, <argument><literal type="number">0xFF</literal></argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"yellow"</literal></expr>, <macro><name>RGB</name><argument_list>(<argument><literal type="number">0xFF</literal></argument>, <argument><literal type="number">0xFF</literal></argument>, <argument><literal type="number">0x00</literal></argument>)</argument_list></macro>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>rgbcolor_table_S</name></name> <modifier>*</modifier></type><name>colornames_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">7</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>RGB</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>hex_digit</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>hex_digit</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><call><name>hex_digit</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>hex_digit</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><call><name>hex_digit</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>hex_digit</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&gt;</operator> <literal type="number">0xffffff</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INVALCOLOR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>gui_adjust_rgb</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>rgb_table</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>rgb_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>rgb_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>gui_adjust_rgb</name><argument_list>(<argument><expr><name><name>rgb_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>counting</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>expand_env_save</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"$VIMRUNTIME/rgb.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INVALCOLOR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><literal type="string">"rt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>verb_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot open $VIMRUNTIME/rgb.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<return>return <expr><name>INVALCOLOR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>counting</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>counting</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>counting</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>counting</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>colornames_table</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr>struct <name>rgbcolor_table_S</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>colornames_table</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>INVALCOLOR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vim_ignoredp</name> <operator>=</operator> <call><name>fgets</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>LINE_LEN</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%d %d %d %n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>counting</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>line</name> <operator>+</operator> <name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>INVALCOLOR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>colornames_table</name><index>[<expr><name>size</name></expr>]</index></name><operator>.</operator><name>color_name</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colornames_table</name><index>[<expr><name>size</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <operator>(</operator><name>guicolor_T</name><operator>)</operator><call><name>RGB</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">10000</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>colornames_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>gui_adjust_rgb</name><argument_list>(<argument><expr><name><name>colornames_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>INVALCOLOR</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>guicolor_T</name></type>

<name>gui_get_rgb_color_cmn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>guicolor_T</name></type> <name>color</name> <init>= <expr><call><name>RGB</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>&gt;</operator> <literal type="number">0xffffff</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INVALCOLOR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>gui_adjust_rgb</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>cube_value</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xFF</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>grey_ramp</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x76</literal></expr>,

<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xEE</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvterm/include/vterm.h"</cpp:file></cpp:include> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTERM_ANSI_INDEX_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>ansi_table</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">224</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">224</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">224</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">224</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>cterm_color2rgb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ansi_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name><name>ansi_table</name><index>[<expr><name>nr</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>g</name> <operator>=</operator> <name><name>ansi_table</name><index>[<expr><name>nr</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name><name>ansi_table</name><index>[<expr><name>nr</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ansi_idx</name> <operator>=</operator> <name><name>ansi_table</name><index>[<expr><name>nr</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>nr</name> <operator>&lt;</operator> <literal type="number">232</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>nr</name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name><name>cube_value</name><index>[<expr><name>idx</name> <operator>/</operator> <literal type="number">36</literal> <operator>%</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>g</name> <operator>=</operator> <name><name>cube_value</name><index>[<expr><name>idx</name> <operator>/</operator> <literal type="number">6</literal> <operator>%</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name><name>cube_value</name><index>[<expr><name>idx</name> <operator>%</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ansi_idx</name> <operator>=</operator> <name>VTERM_ANSI_INDEX_NONE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>nr</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>nr</name> <operator>-</operator> <literal type="number">232</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name><name>grey_ramp</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>g</name> <operator>=</operator> <name><name>grey_ramp</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name><name>grey_ramp</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ansi_idx</name> <operator>=</operator> <name>VTERM_ANSI_INDEX_NONE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ansi_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>term_replace_bs_del_keycode</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ta_buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ta_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ta_len</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ta_len</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ta_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>CSI</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>-</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>TERMCAP2KEY</name><argument_list>(<argument><expr><name><name>ta_buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ta_buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_DEL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_KDEL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_BS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>ta_buf</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ta_buf</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_DEL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_KDEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ta_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>DEL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ta_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>Ctrl_H</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>ta_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ta_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len_len</name>)<argument_list>(<argument><expr><name>ta_buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>ta_len</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
