<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\syntax.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYN_NAMELEN</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPO_MS_OFF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPO_ME_OFF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPO_HS_OFF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPO_HE_OFF</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPO_RS_OFF</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPO_RE_OFF</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPO_LC_OFF</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPO_COUNT</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>spo_name_tab</name><index>[<expr><name>SPO_COUNT</name></expr>]</index></name><operator>)</operator> <operator>=</operator>

<block>{<expr><literal type="string">"ms="</literal></expr>, <expr><literal type="string">"me="</literal></expr>, <expr><literal type="string">"hs="</literal></expr>, <expr><literal type="string">"he="</literal></expr>, <expr><literal type="string">"rs="</literal></expr>, <expr><literal type="string">"re="</literal></expr>, <expr><literal type="string">"lc="</literal></expr>}</block></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <name>syn_pattern</name>

<block>{

<decl_stmt><decl><type><name>char</name></type> <name>sp_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>sp_syncing</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name></type> <name>sp_syn_match_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name></type> <name>sp_off_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>sp_offsets</name><index>[<expr><name>SPO_COUNT</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sp_flags</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>sp_cchar</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>sp_ic</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sp_sync_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sp_line_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sp_startcol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>sp_cont_list</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>sp_next_list</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>sp_syn</name></name></type> <name>sp_syn</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sp_pattern</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>sp_prog</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>syn_time_T</name></type> <name>sp_time</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>synpat_T</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPTYPE_MATCH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPTYPE_START</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPTYPE_END</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPTYPE_SKIP</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYN_ITEMS</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((synpat_T *)((buf)-&gt;b_syn_patterns.ga_data))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NONE_IDX</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_CCOMMENT</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF_MATCH</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYN_STATE_P</name><parameter_list>(<parameter><type><name>ssp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bufstate_T *)((ssp)-&gt;ga_data))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXKEYWLEN</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_trans_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_seqnr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_sub_char</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>syn_cluster_S</name>

<block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>scl_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>scl_name_u</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>scl_list</name></decl>;</decl_stmt> 

}</block></struct></type> <name>syn_cluster_T</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_REPLACE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_ADD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLUSTER_SUBTRACT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYN_CLSTR</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((syn_cluster_T *)((buf)-&gt;b_syn_clusters.ga_data))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNID_ALLBUT</name></cpp:macro> <cpp:value>MAX_HL_ID</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNID_TOP</name></cpp:macro> <cpp:value>21000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNID_CONTAINED</name></cpp:macro> <cpp:value>22000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNID_CLUSTER</name></cpp:macro> <cpp:value>23000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SYN_INC_TAG</name></cpp:macro> <cpp:value>999</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CLUSTER_ID</name></cpp:macro> <cpp:value>(32767 - SYNID_CLUSTER)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>syn_cmdlinep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_syn_inc_tag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>running_syn_inc_tag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>keyentry_T</name></type> <name>dumkey</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KE2HIKEY</name><parameter_list>(<parameter><type><name>kp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((kp)-&gt;keyword)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIKEY2KE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((keyentry_T *)((p) - (dumkey.keyword - (char_u *)&amp;dumkey)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HI2KE</name><parameter_list>(<parameter><type><name>hi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>HIKEY2KE((hi)-&gt;hi_key)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>keepend_level</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>msg_no_items</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"No Syntax items defined for this buffer"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>state_item</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>si_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>si_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>si_trans_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>si_m_lnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>si_m_startcol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lpos_T</name></type> <name>si_m_endpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lpos_T</name></type> <name>si_h_startpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lpos_T</name></type> <name>si_h_endpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lpos_T</name></type> <name>si_eoe_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>si_end_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>si_ends</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>si_attr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>si_flags</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>si_seqnr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>si_cchar</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>si_cont_list</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>si_next_list</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>reg_extmatch_T</name> <modifier>*</modifier></type><name>si_extmatch</name></decl>;</decl_stmt> 

}</block></struct></type> <name>stateitem_T</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYWORD_IDX</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID_LIST_ALL</name></cpp:macro> <cpp:value>(short *)-1</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>next_seqnr</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>keyword</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>sync_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>has_cont_list</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>cont_list</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>cont_in_list</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>next_list</name></decl>;</decl_stmt> 

}</block></struct></type> <name>syn_opt_arg_T</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>next_match_col</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>lpos_T</name></type> <name>next_match_m_endpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>lpos_T</name></type> <name>next_match_h_startpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>lpos_T</name></type> <name>next_match_h_endpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>next_match_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>next_match_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>lpos_T</name></type> <name>next_match_eos_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>lpos_T</name></type> <name>next_match_eoe_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>next_match_end_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>reg_extmatch_T</name> <modifier>*</modifier></type><name>next_match_extmatch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_STATE</name><parameter_list>(<parameter><type><name>ssp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ssp)-&gt;ga_itemsize == 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_STATE</name><parameter_list>(<parameter><type><name>ssp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ssp)-&gt;ga_itemsize != 0)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type><name>syn_win</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>buf_T</name> <modifier>*</modifier></type><name>syn_buf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>synblock_T</name> <modifier>*</modifier></type><name>syn_block</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>proftime_T</name> <modifier>*</modifier></type><name>syn_tm</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>current_lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>colnr_T</name></type> <name>current_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_state_stored</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_finished</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>current_state</name> 

<init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>short</name> <modifier>*</modifier></type><name>current_next_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_next_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_line_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CUR_STATE</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((stateitem_T *)(current_state.ga_data))[idx]</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_sync</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>last_valid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>syn_match_linecont</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_start_line</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_update_ends</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>startofline</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_stack_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>syn_stack_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_stack_free_entry</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>synstate_T</name> <modifier>*</modifier></type><name>syn_stack_find_entry</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>synstate_T</name> <modifier>*</modifier></type><name>store_current_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>load_current_state</name><parameter_list>(<parameter><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>invalidate_current_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>syn_stack_equal</name><parameter_list>(<parameter><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>validate_current_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>syn_finish_line</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>syn_current_attr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>displaying</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>can_spell</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keep_state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>did_match_already</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>stateitem_T</name> <modifier>*</modifier></type><name>push_next_match</name><parameter_list>(<parameter><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>cur_si</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_state_ends</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>update_si_attr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_keepend</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>update_si_end</name><parameter_list>(<parameter><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>sip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startcol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>short</name> <modifier>*</modifier></type><name>copy_id_list</name><parameter_list>(<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>in_id_list</name><parameter_list>(<parameter><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>cont_list</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sp_syn</name></name> <modifier>*</modifier></type><name>ssp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>contained</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>push_current_state</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pop_current_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_clear_time</name><parameter_list>(<parameter><decl><type><name>syn_time_T</name> <modifier>*</modifier></type><name>tt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syntime_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syntime_report</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>syn_time_on</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IF_SYN_TIME</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IF_SYN_TIME</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<typedef>typedef <type><name>int</name></type> <name>syn_time_T</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_stack_apply_changes_block</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>find_endpos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>startpos</name></decl></parameter>, <parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>m_endpos</name></decl></parameter>, <parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>hl_endpos</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>flagsp</name></decl></parameter>, <parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>end_endpos</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>end_idx</name></decl></parameter>, <parameter><decl><type><name>reg_extmatch_T</name> <modifier>*</modifier></type><name>start_ext</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>limit_pos</name><parameter_list>(<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>limit_pos_zero</name><parameter_list>(<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_add_end_off</name><parameter_list>(<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>regmatch</name></decl></parameter>, <parameter><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>extra</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_add_start_off</name><parameter_list>(<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>regmatch</name></decl></parameter>, <parameter><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>extra</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>syn_getcurline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>syn_regexec</name><parameter_list>(<parameter><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>rmp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>syn_time_T</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>check_keyword_id</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startcol</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>endcol</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier><modifier>*</modifier></type><name>next_list</name></decl></parameter>, <parameter><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>cur_si</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ccharp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_remove_pattern</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_clear_pattern</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_clear_cluster</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_clear_one</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_cmd_onoff</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_lines_msg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_match_msg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_list_one</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>link_only</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_list_cluster</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>put_id_list</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>put_pattern</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>syn_list_keywords</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>did_header</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_clear_keyword</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>clear_keywtab</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>syn_scl_namen2id</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>linep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>syn_check_cluster</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>syn_add_cluster</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>init_syn_patterns</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>get_syn_pattern</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>get_id_list</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>skip</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_combine_list</name><parameter_list>(<parameter><decl><type><name>short</name> <modifier>*</modifier><modifier>*</modifier></type><name>clstr1</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier><modifier>*</modifier></type><name>clstr2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list_op</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>syn_set_timeout</name><parameter_list>(<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>syn_tm</name> <operator>=</operator> <name>tm</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>syntax_start</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>last_valid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>last_min_valid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>sp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>parsed_lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>first_stored</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>varnumber_T</name></type> <name>changedtick</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>current_sub_char</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>syn_block</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_s</name></name>

<operator>||</operator> <name>syn_buf</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name>

<operator>||</operator> <name>changedtick</name> <operator>!=</operator> <call><name>CHANGEDTICK</name><argument_list>(<argument><expr><name>syn_buf</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>invalidate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>syn_buf</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>syn_block</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_s</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>changedtick</name> <operator>=</operator> <call><name>CHANGEDTICK</name><argument_list>(<argument><expr><name>syn_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>syn_win</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_stack_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_lasttick</name></name> <operator>=</operator> <name>display_tick</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VALID_STATE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name>current_lnum</name> <operator>&lt;</operator> <name>lnum</name>

<operator>&amp;&amp;</operator> <name>current_lnum</name> <operator>&lt;</operator> <name><name>syn_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_finish_line</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current_state_stored</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>store_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>current_lnum</name> <operator>!=</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>invalidate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>invalidate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INVALID_STATE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>&gt;</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>&lt;=</operator> <name>lnum</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>last_valid</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>&gt;=</operator> <name>lnum</name> <operator>-</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last_min_valid</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>last_min_valid</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>load_current_state</name><argument_list>(<argument><expr><name>last_min_valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INVALID_STATE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>syn_sync</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>last_valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_lnum</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>first_stored</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>first_stored</name> <operator>=</operator> <name>current_lnum</name> <operator>+</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>first_stored</name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>&lt;=</operator> <name>Rows</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <literal type="number">999999</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <name><name>syn_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>/</operator> <operator>(</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>-</operator> <name>Rows</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>current_lnum</name> <operator>&lt;</operator> <name>lnum</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>syn_start_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_finish_line</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>current_lnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_lnum</name> <operator>&gt;=</operator> <name>first_stored</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>syn_stack_find_entry</name><argument_list>(<argument><expr><name>current_lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>&lt;</operator> <name>current_lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>==</operator> <name>current_lnum</name>

<operator>&amp;&amp;</operator> <call><name>syn_stack_equal</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>parsed_lnum</name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>&lt;=</operator> <name>parsed_lnum</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>&lt;=</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>load_current_state</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>prev</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>current_lnum</name> <operator>==</operator> <name>lnum</name>

<operator>||</operator> <name>current_lnum</name> <operator>&gt;=</operator> <name><name>prev</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>+</operator> <name>dist</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>store_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>current_lnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>syn_start_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>clear_syn_state</name><parameter_list>(<parameter><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_stacksize</name></name> <operator>&gt;</operator> <name>SST_FIX_STATES</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>gap</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_ga</name></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>unref_extmatch</name><argument_list>(<argument><expr><call><name>SYN_STATE_P</name><argument_list>(<argument><expr><name>gap</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>bs_extmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><name>gap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_stacksize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>unref_extmatch</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_stack</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_extmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>clear_current_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>sip</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sip</name> <operator>=</operator> <operator>(</operator><name>stateitem_T</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>current_state</name><operator>.</operator><name>ga_data</name></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>unref_extmatch</name><argument_list>(<argument><expr><name><name>sip</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>si_extmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_sync</name><parameter_list>(

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>start_lnum</name></decl></parameter>,

<parameter><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>last_valid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>curbuf_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>curwin_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>cursor_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>end_lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>break_lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>had_sync_point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>cur_si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found_match_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>found_current_lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found_current_col</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>found_m_endpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>prev_current_col</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>invalidate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>&gt;</operator> <name>start_lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start_lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>lnum</name> <operator>&gt;</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <name>start_lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start_lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>start_lnum</name> <operator>-=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>current_lnum</name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_flags</name></name> <operator>&amp;</operator> <name>SF_CCOMMENT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>curwin_save</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf_save</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>syn_buf</name></expr>;</expr_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>start_lnum</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>--</operator><name>start_lnum</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>start_lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>line</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>current_lnum</name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor_save</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_start_comment</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</init> <condition><expr><operator>--</operator><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name><name>sp_syn</name><operator>.</operator><name>id</name></name>

<operator>==</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_id</name></name>

<operator>&amp;&amp;</operator> <call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_type</name> <operator>==</operator> <name>SPTYPE_START</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>validate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>push_current_state</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_si_attr</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>cursor_save</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>curwin_save</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>curbuf_save</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_flags</name></name> <operator>&amp;</operator> <name>SF_MATCH</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>start_lnum</name> <operator>&gt;</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>break_lnum</name> <operator>=</operator> <name>start_lnum</name> <operator>-</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>break_lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>found_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>found_m_endpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end_lnum</name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>--</operator><name>lnum</name> <operator>&gt;</operator> <name>break_lnum</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>invalidate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_lnum</name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last_valid</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>last_valid</name><operator>-&gt;</operator><name>sst_lnum</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>load_current_state</name><argument_list>(<argument><expr><name>last_valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>syn_match_linecont</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>validate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>current_lnum</name> <operator>=</operator> <name>lnum</name></expr>;</init> <condition><expr><name>current_lnum</name> <operator>&lt;</operator> <name>end_lnum</name></expr>;</condition> <incr><expr><operator>++</operator><name>current_lnum</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>syn_start_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>had_sync_point</name> <operator>=</operator> <call><name>syn_finish_line</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>had_sync_point</name> <operator>&amp;&amp;</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name>start_lnum</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>current_lnum</name> <operator>=</operator> <name>end_lnum</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>found_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>found_match_idx</name> <operator>=</operator> <name>KEYWORD_IDX</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>found_flags</name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>found_match_idx</name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_sync_idx</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>found_current_lnum</name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>found_current_col</name> <operator>=</operator> <name>current_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>found_m_endpos</name> <operator>=</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>found_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name>current_lnum</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>current_lnum</name> <operator>=</operator> <name><name>found_m_endpos</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_col</name> <operator>=</operator> <name><name>found_m_endpos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_lnum</name> <operator>&gt;=</operator> <name>end_lnum</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>found_m_endpos</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name>current_col</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>current_col</name> <operator>=</operator> <name><name>found_m_endpos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>current_col</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>prev_current_col</name> <operator>=</operator> <name>current_col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>syn_getcurline</name><argument_list>()</argument_list></call><index>[<expr><name>current_col</name></expr>]</index> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>current_col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>check_state_ends</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_col</name> <operator>=</operator> <name>prev_current_col</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>found_flags</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clear_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>found_match_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>push_current_state</name><argument_list>(<argument><expr><name>found_match_idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_si_attr</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>found_flags</name> <operator>&amp;</operator> <name>HL_SYNC_HERE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_startpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>found_current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_startpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>found_current_col</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_si_end</name><argument_list>(<argument><expr><name>cur_si</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>current_col</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_keepend</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_col</name> <operator>=</operator> <name><name>found_m_endpos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_lnum</name> <operator>=</operator> <name><name>found_m_endpos</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_finish_line</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>current_lnum</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>current_lnum</name> <operator>=</operator> <name>start_lnum</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end_lnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invalidate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;=</operator> <name>break_lnum</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>invalidate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_lnum</name> <operator>=</operator> <name>break_lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>validate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>save_chartab</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>chartab</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_isk</name></name> <operator>!=</operator> <name>empty_option</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>chartab</name></expr></argument>, <argument><expr><name><name>syn_buf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>syn_buf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>, <argument><expr><name><name>syn_win</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_chartab</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>restore_chartab</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>chartab</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>syn_win</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_isk</name></name> <operator>!=</operator> <name>empty_option</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>syn_buf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>, <argument><expr><name>chartab</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>syn_match_linecont</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>regmmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf_chartab</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_linecont_prog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>save_chartab</name><argument_list>(<argument><expr><name>buf_chartab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rmm_ic</name></name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_linecont_ic</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_linecont_prog</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>syn_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>,

<argument><expr><call><name>IF_SYN_TIME</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_linecont_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_linecont_prog</name></name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_chartab</name><argument_list>(<argument><expr><name>buf_chartab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_start_line</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>current_finished</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>syn_update_ends</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_state_ends</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next_match_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>current_line_id</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>next_seqnr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_update_ends</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>startofline</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>cur_si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seen_keepend</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>startofline</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name></expr>]</index><operator>)</operator><operator>.</operator><name>sp_type</name>

<operator>==</operator> <name>SPTYPE_MATCH</name>

<operator>&amp;&amp;</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name>current_lnum</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>|=</operator> <name>HL_MATCHCONT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_endpos</name></name> <operator>=</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_ends</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keepend_level</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>keepend_level</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_flags</name> <operator>&amp;</operator> <name>HL_EXTEND</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name>seen_keepend</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_KEEPEND</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>seen_keepend</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>startofline</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>startofline</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_startpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_startpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_MATCHCONT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_si_end</name><argument_list>(<argument><expr><name>cur_si</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>current_col</name></expr></argument>, <argument><expr><operator>!</operator><name>startofline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>startofline</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_KEEPEND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>seen_keepend</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>check_keepend</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_stack_free_block</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>b_sst_array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>b_sst_first</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_syn_state</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>b_sst_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_sst_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>syn_stack_free_all</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>syn_stack_free_block</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name></name> <operator>==</operator> <name>block</name> <operator>&amp;&amp;</operator> <call><name>foldmethodIsSyntax</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_stack_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>to</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>from</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>sstp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>syn_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>/</operator> <name>SST_DIST</name> <operator>+</operator> <name>Rows</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>SST_MIN_ENTRIES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>SST_MIN_ENTRIES</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>SST_MAX_ENTRIES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>SST_MAX_ENTRIES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>&gt;</operator> <name>len</name> <operator>*</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>syn_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>+</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>SST_DIST</name> <operator>+</operator> <name>Rows</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>SST_MIN_ENTRIES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>SST_MIN_ENTRIES</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>SST_MAX_ENTRIES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>SST_MAX_ENTRIES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>-</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_freecount</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>len</name>

<operator>&amp;&amp;</operator> <call><name>syn_stack_cleanup</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>-</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_freecount</name></name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>-</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_freecount</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sstp</name> <operator>=</operator> <call><name>ALLOC_CLEAR_MULT</name><argument_list>(<argument><expr><name>synstate_T</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sstp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <name>sstp</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>from</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name></expr>;</init> <condition><expr><name>from</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>from</name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>sst_next</name></name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>to</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>to</name> <operator>=</operator> <operator>*</operator><name>from</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>=</operator> <name>to</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>to</name> <operator>!=</operator> <name>sstp</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name> <operator>=</operator> <name>sstp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_freecount</name></name> <operator>=</operator> <name>len</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>to</name> <operator>-</operator> <name>sstp</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_freecount</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_firstfree</name></name> <operator>=</operator> <name>to</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>++</operator><name>to</name> <operator>&lt;</operator> <name>sstp</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>=</operator> <name>to</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>(</operator><name>sstp</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>sst_next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_array</name></name> <operator>=</operator> <name>sstp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>syn_stack_apply_changes</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>syn_stack_apply_changes_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_s</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_s</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_s</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_stack_apply_changes_block</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_stack_apply_changes_block</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>b_sst_first</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>b_syn_sync_linebreaks</name></name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_top</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_xlines</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_bot</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_sst_first</name></name> <operator>=</operator> <name>np</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>=</operator> <name>np</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>syn_stack_free_entry</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>np</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_top</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_xlines</name></name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_top</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>+=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_xlines</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_top</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_bot</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_bot</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>syn_stack_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>disptick_T</name></type> <name>tick</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>above</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>&lt;=</operator> <name>Rows</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <literal type="number">999999</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <name><name>syn_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>/</operator> <operator>(</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_len</name></name> <operator>-</operator> <name>Rows</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>tick</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_lasttick</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>above</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>prev</name> <operator>=</operator> <name>p</name></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>prev</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>+</operator> <name>dist</name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_lnum</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_tick</name></name> <operator>&gt;</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_lasttick</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>above</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_tick</name></name> <operator>&lt;</operator> <name>tick</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tick</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_tick</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>above</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>above</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_tick</name></name> <operator>&lt;</operator> <name>tick</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tick</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_tick</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>prev</name> <operator>=</operator> <name>p</name></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_tick</name></name> <operator>==</operator> <name>tick</name> <operator>&amp;&amp;</operator> <name><name>prev</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>+</operator> <name>dist</name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_lnum</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_stack_free_entry</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_stack_free_entry</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>clear_syn_state</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>b_sst_firstfree</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_sst_firstfree</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>block</name><operator>-&gt;</operator><name>b_sst_freecount</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>synstate_T</name> <modifier>*</modifier></type>

<name>syn_stack_find_entry</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>prev</name> <operator>=</operator> <name>p</name></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>==</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>&gt;</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>prev</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>synstate_T</name> <modifier>*</modifier></type>

<name>store_current_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bufstate_T</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>cur_si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><call><name>syn_stack_find_entry</name><argument_list>(<argument><expr><name>current_lnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_startpos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name>current_lnum</name>

<operator>||</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name>current_lnum</name>

<operator>||</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_h_endpos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name>current_lnum</name>

<operator>||</operator> <operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_end_idx</name></name>

<operator>&amp;&amp;</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_eoe_pos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name>current_lnum</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name> <operator>==</operator> <name>sp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>==</operator> <name>sp</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>syn_stack_free_entry</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>sp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>!=</operator> <name>current_lnum</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_freecount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_stack_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>syn_stack_find_entry</name><argument_list>(<argument><expr><name>current_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_freecount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_firstfree</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_firstfree</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_freecount</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_first</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_next</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_stacksize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clear_syn_state</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_stacksize</name></name> <operator>=</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <name>SST_FIX_STATES</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sp</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_ga</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>bufstate_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sp</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_ga</name></name></expr></argument>, <argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_stacksize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_ga</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>SYN_STATE_P</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sp</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_ga</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_stack</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_stacksize</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_idx</name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_flags</name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_flags</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_seqnr</name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_seqnr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_cchar</name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_cchar</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_extmatch</name> <operator>=</operator> <call><name>ref_extmatch</name><argument_list>(<argument><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_extmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_next_flags</name></name> <operator>=</operator> <name>current_next_flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_next_list</name></name> <operator>=</operator> <name>current_next_list</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_tick</name></name> <operator>=</operator> <name>display_tick</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_state_stored</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>sp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>load_current_state</name><parameter_list>(<parameter><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bufstate_T</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clear_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>validate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keepend_level</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>sst_stacksize</name></name>

<operator>&amp;&amp;</operator> <call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>sst_stacksize</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>sst_stacksize</name></name> <operator>&gt;</operator> <name>SST_FIX_STATES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>SYN_STATE_P</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>from</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_ga</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_stack</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>from</name><operator>-&gt;</operator><name>sst_stacksize</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_idx</name> <operator>=</operator> <name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_flags</name> <operator>=</operator> <name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_flags</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_seqnr</name> <operator>=</operator> <name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_seqnr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_cchar</name> <operator>=</operator> <name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_cchar</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_extmatch</name> <operator>=</operator> <call><name>ref_extmatch</name><argument_list>(<argument><expr><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_extmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keepend_level</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_flags</name> <operator>&amp;</operator> <name>HL_KEEPEND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>keepend_level</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_ends</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_m_lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_next_list</name> <operator>=</operator>

<operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_idx</name></expr>]</index><operator>)</operator><operator>.</operator><name>sp_next_list</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_next_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>update_si_attr</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>sst_stacksize</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_next_list</name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>sst_next_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_next_flags</name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>sst_next_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_lnum</name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>sst_lnum</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>syn_stack_equal</name><parameter_list>(<parameter><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bufstate_T</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>reg_extmatch_T</name> <modifier>*</modifier></type><name>six</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bsx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>sst_stacksize</name></name> <operator>==</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name>

<operator>&amp;&amp;</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_next_list</name></name> <operator>==</operator> <name>current_next_list</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>sst_stacksize</name></name> <operator>&gt;</operator> <name>SST_FIX_STATES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>SYN_STATE_P</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sp</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_ga</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_union</name><operator>.</operator><name>sst_stack</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_idx</name> <operator>!=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_idx</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_extmatch</name> <operator>!=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_extmatch</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>bsx</name> <operator>=</operator> <name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bs_extmatch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>six</name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_extmatch</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bsx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>six</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NSUBEXP</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bsx</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>six</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bsx</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>six</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_idx</name></expr>]</index><operator>)</operator><operator>.</operator><name>sp_ic</name></expr>

?</condition><then> <expr><call><name>MB_STRICMP</name><argument_list>(<argument><expr><name><name>bsx</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>six</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>

</then><else>: <expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>bsx</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>six</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>NSUBEXP</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>syntax_end_parsing</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>syn_stack_find_entry</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>&lt;</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sst_change_lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>invalidate_current_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>clear_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current_state</name><operator>.</operator><name>ga_itemsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>current_next_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>keepend_level</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>validate_current_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>current_state</name><operator>.</operator><name>ga_itemsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>stateitem_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current_state</name><operator>.</operator><name>ga_growsize</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>syntax_check_changed</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VALID_STATE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name>current_lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>syn_stack_find_entry</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>sp</name><operator>-&gt;</operator><name>sst_lnum</name></name> <operator>==</operator> <name>lnum</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_finish_line</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>syn_stack_equal</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>store_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>syn_finish_line</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>cur_si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>prev_current_col</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><name>current_finished</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_current_attr</name><argument_list>(<argument><expr><name>syncing</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>syncing</name> <operator>&amp;&amp;</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name></expr>]</index><operator>.</operator><name>sp_flags</name>

<operator>&amp;</operator> <operator>(</operator><name>HL_SYNC_HERE</name><operator>|</operator><name>HL_SYNC_THERE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prev_current_col</name> <operator>=</operator> <name>current_col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>syn_getcurline</name><argument_list>()</argument_list></call><index>[<expr><name>current_col</name></expr>]</index> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>current_col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>check_state_ends</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_col</name> <operator>=</operator> <name>prev_current_col</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>current_col</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>get_syntax_attr</name><parameter_list>(

<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>can_spell</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>keep_state</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>can_spell</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>can_spell</name> <operator>=</operator> <ternary><condition><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>==</operator> <name>SYNSPL_DEFAULT</name></expr>

?</condition><then> <expr><operator>(</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_spell_cluster_id</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>==</operator> <name>SYNSPL_TOP</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_sst_array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_buf</name><operator>-&gt;</operator><name>b_p_smc</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>syn_buf</name><operator>-&gt;</operator><name>b_p_smc</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clear_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>current_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>current_trans_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>current_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>current_seqnr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INVALID_STATE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>validate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>current_col</name> <operator>&lt;=</operator> <name>col</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>syn_current_attr</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>can_spell</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>current_col</name> <operator>==</operator> <name>col</name></expr> ?</condition><then> <expr><name>keep_state</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>current_col</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>attr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>syn_current_attr</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>displaying</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>can_spell</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>keep_state</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>syn_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>endpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lpos_T</name></type> <name>hl_startpos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lpos_T</name></type> <name>hl_endpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>eos_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lpos_T</name></type> <name>eoe_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>end_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>cur_si</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sip</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>startcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>endcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cchar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>next_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found_match</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>try_next_column</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>do_keywords</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lc_col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>reg_extmatch_T</name> <modifier>*</modifier></type><name>cur_extmatch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf_chartab</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>keep_next_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>zero_width_next_list</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>zero_width_next_ga</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>syn_getcurline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>current_col</name></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>current_col</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>next_match_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next_match_col</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>current_col</name>

<operator>&amp;&amp;</operator> <name>next_match_col</name> <operator>!=</operator> <name>MAXCOL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>push_next_match</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_finished</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_state_stored</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>current_col</name></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>line</name><index>[<expr><name>current_col</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>current_finished</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_state_stored</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>try_next_column</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>next_match_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>try_next_column</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>do_keywords</name> <operator>=</operator> <operator>!</operator><name>syncing</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_keywtab</name><operator>.</operator><name>ht_used</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_keywtab_ic</name><operator>.</operator><name>ht_used</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero_width_next_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>save_chartab</name><argument_list>(<argument><expr><name>buf_chartab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>found_match</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>keep_next_list</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>syn_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_containedin</name></name> <operator>||</operator> <name>cur_si</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_cont_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>do_keywords</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>syn_getcurline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_iswordp_buf</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>current_col</name></expr></argument>, <argument><expr><name>syn_buf</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name>current_col</name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>!</operator><call><name>vim_iswordp_buf</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>current_col</name> <operator>-</operator> <literal type="number">1</literal>

<operator>-</operator> <operator>(</operator><ternary><condition><expr><name>has_mbyte</name></expr>

?</condition><then> <expr><call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>current_col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument> , <argument><expr><name>syn_buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>syn_id</name> <operator>=</operator> <call><name>check_keyword_id</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>current_col</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>endcol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_list</name></expr></argument>, <argument><expr><name>cur_si</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>syn_id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>push_current_state</name><argument_list>(<argument><expr><name>KEYWORD_IDX</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_startcol</name></name> <operator>=</operator> <name>current_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_startpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_startpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>endcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_endpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_endpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>endcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_ends</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_end_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_seqnr</name></name> <operator>=</operator> <name>next_seqnr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_cchar</name></name> <operator>=</operator> <name>cchar</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>|=</operator>

<call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><name>si_flags</name>

<operator>&amp;</operator> <name>HL_CONCEAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_id</name></name> <operator>=</operator> <name>syn_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_trans_id</name></name> <operator>=</operator> <name>syn_id</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>HL_TRANSP</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_attr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_trans_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_attr</name></name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(

<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><name>si_attr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_trans_id</name></name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(

<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><name>si_trans_id</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_attr</name></name> <operator>=</operator> <call><name>syn_id2attr</name><argument_list>(<argument><expr><name>syn_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_cont_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_next_list</name></name> <operator>=</operator> <name>next_list</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_keepend</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>next_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>syn_id</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>next_match_idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>next_match_col</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>current_col</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>next_match_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>next_match_col</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</init> <condition><expr><operator>--</operator><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>spp</name><operator>-&gt;</operator><name>sp_syncing</name></name> <operator>==</operator> <name>syncing</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>displaying</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>&amp;</operator> <name>HL_DISPLAY</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>==</operator> <name>SPTYPE_MATCH</name>

<operator>||</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>==</operator> <name>SPTYPE_START</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>current_next_list</name> <operator>!=</operator> <name>NULL</name></expr>

?</condition><then> <expr><call><name>in_id_list</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>current_next_list</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><operator>(</operator><ternary><condition><expr><name>cur_si</name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><operator>!</operator><operator>(</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>&amp;</operator> <name>HL_CONTAINED</name><operator>)</operator></expr>

</then><else>: <expr><call><name>in_id_list</name><argument_list>(<argument><expr><name>cur_si</name></expr></argument>,

<argument><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_cont_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name></name></expr></argument>,

<argument><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>&amp;</operator> <name>HL_CONTAINED</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_line_id</name></name> <operator>==</operator> <name>current_line_id</name>

<operator>&amp;&amp;</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_startcol</name></name> <operator>&gt;=</operator> <name>next_match_col</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_line_id</name></name> <operator>=</operator> <name>current_line_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lc_col</name> <operator>=</operator> <name>current_col</name> <operator>-</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>SPO_LC_OFF</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lc_col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lc_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rmm_ic</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_ic</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_prog</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>syn_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>,

<argument><expr><name>current_lnum</name></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>lc_col</name></expr></argument>,

<argument><expr><call><name>IF_SYN_TIME</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_prog</name></name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_startcol</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>syn_add_start_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>,

<argument><expr><name>spp</name></expr></argument>, <argument><expr><name>SPO_MS_OFF</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name>current_lnum</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_startcol</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>startcol</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_startcol</name></name> <operator>=</operator> <name>startcol</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>startcol</name> <operator>&gt;=</operator> <name>next_match_col</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>did_match_already</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero_width_next_ga</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>try_next_column</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>endpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>endpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_add_start_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hl_startpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>,

<argument><expr><name>spp</name></expr></argument>, <argument><expr><name>SPO_HS_OFF</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_add_end_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eos_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>,

<argument><expr><name>spp</name></expr></argument>, <argument><expr><name>SPO_RS_OFF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unref_extmatch</name><argument_list>(<argument><expr><name>cur_extmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_extmatch</name> <operator>=</operator> <name>re_extmatch_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name>re_extmatch_out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eoe_pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>eoe_pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hl_endpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>==</operator> <name>SPTYPE_START</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>&amp;</operator> <name>HL_ONELINE</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>startpos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>startpos</name> <operator>=</operator> <name>endpos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>find_endpos</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hl_endpos</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eoe_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_idx</name></expr></argument>, <argument><expr><name>cur_extmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>endpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>==</operator> <name>SPTYPE_MATCH</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>syn_add_end_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hl_endpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>spp</name></expr></argument>,

<argument><expr><name>SPO_HE_OFF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_add_end_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name>endpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>spp</name></expr></argument>,

<argument><expr><name>SPO_ME_OFF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>endpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name>current_lnum</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>endpos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name>syncing</name> <operator>&lt;</operator> <name>startcol</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name>

<operator>==</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>try_next_column</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hl_startpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name>current_lnum</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>hl_startpos</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name>startcol</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hl_startpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>startcol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>limit_pos_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hl_endpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_idx</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_col</name> <operator>=</operator> <name>startcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_m_endpos</name> <operator>=</operator> <name>endpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_h_endpos</name> <operator>=</operator> <name>hl_endpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_h_startpos</name> <operator>=</operator> <name>hl_startpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_flags</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_eos_pos</name> <operator>=</operator> <name>eos_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_eoe_pos</name> <operator>=</operator> <name>eoe_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_end_idx</name> <operator>=</operator> <name>end_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unref_extmatch</name><argument_list>(<argument><expr><name>next_match_extmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_extmatch</name> <operator>=</operator> <name>cur_extmatch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_extmatch</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next_match_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next_match_col</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>current_col</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>lspp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lspp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name>next_match_idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>next_match_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name>current_lnum</name>

<operator>&amp;&amp;</operator> <name><name>next_match_m_endpos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name>current_col</name>

<operator>&amp;&amp;</operator> <name><name>lspp</name><operator>-&gt;</operator><name>sp_next_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>current_next_list</name> <operator>=</operator> <name><name>lspp</name><operator>-&gt;</operator><name>sp_next_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_next_flags</name> <operator>=</operator> <name><name>lspp</name><operator>-&gt;</operator><name>sp_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>keep_next_list</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zero_width_next_list</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero_width_next_ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>zero_width_next_ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><operator>)</operator>

<index>[<expr><name><name>zero_width_next_ga</name><operator>.</operator><name>ga_len</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <name>next_match_idx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next_match_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <call><name>push_next_match</name><argument_list>(<argument><expr><name>cur_si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>found_match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>current_next_list</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>keep_next_list</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_match</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>syn_getcurline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>current_next_flags</name> <operator>&amp;</operator> <name>HL_SKIPWHITE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>current_col</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>current_next_flags</name> <operator>&amp;</operator> <name>HL_SKIPEMPTY</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>*</operator><name>line</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_next_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zero_width_next_list</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>found_match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>found_match</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>restore_chartab</name><argument_list>(<argument><expr><name>buf_chartab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>current_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>current_trans_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>current_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>current_seqnr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>cur_si</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>current_trans_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>idx</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>sip</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current_lnum</name> <operator>&gt;</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_h_startpos</name><operator>.</operator><name>lnum</name></name>

<operator>||</operator> <operator>(</operator><name>current_lnum</name> <operator>==</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_h_startpos</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name>current_col</name> <operator>&gt;=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_h_startpos</name><operator>.</operator><name>col</name></name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name>current_lnum</name> <operator>&lt;</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name><operator>.</operator><name>lnum</name></name>

<operator>||</operator> <operator>(</operator><name>current_lnum</name> <operator>==</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name>current_col</name> <operator>&lt;</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name><operator>.</operator><name>col</name></name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>current_attr</name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_attr</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>current_id</name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_id</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>current_trans_id</name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_trans_id</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>current_flags</name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_seqnr</name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_seqnr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_sub_char</name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_cchar</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>can_spell</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sp_syn</name></name></type> <name>sps</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_spell_cluster_id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_nospell_cluster_id</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name>current_trans_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>can_spell</name> <operator>=</operator> <operator>(</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>!=</operator> <name>SYNSPL_NOTOP</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>.</operator><name>inc_tag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_nospell_cluster_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>.</operator><name>cont_in_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>can_spell</name> <operator>=</operator> <operator>!</operator><call><name>in_id_list</name><argument_list>(<argument><expr><name>sip</name></expr></argument>, <argument><expr><name><name>sip</name><operator>-&gt;</operator><name>si_cont_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>current_trans_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>can_spell</name> <operator>=</operator> <operator>(</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>==</operator> <name>SYNSPL_TOP</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>.</operator><name>inc_tag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_spell_cluster_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>.</operator><name>cont_in_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>can_spell</name> <operator>=</operator> <call><name>in_id_list</name><argument_list>(<argument><expr><name>sip</name></expr></argument>, <argument><expr><name><name>sip</name><operator>-&gt;</operator><name>si_cont_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_nospell_cluster_id</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_nospell_cluster_id</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>in_id_list</name><argument_list>(<argument><expr><name>sip</name></expr></argument>, <argument><expr><name><name>sip</name><operator>-&gt;</operator><name>si_cont_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>can_spell</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>syncing</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>keep_state</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>check_state_ends</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>syn_getcurline</name><argument_list>()</argument_list></call><index>[<expr><name>current_col</name></expr>]</index> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>current_col</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_state_ends</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>current_col</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>can_spell</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>can_spell</name> <operator>=</operator> <ternary><condition><expr><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>==</operator> <name>SYNSPL_DEFAULT</name></expr>

?</condition><then> <expr><operator>(</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_spell_cluster_id</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>==</operator> <name>SYNSPL_TOP</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>current_next_list</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>line</name> <operator>=</operator> <call><name>syn_getcurline</name><argument_list>()</argument_list></call><operator>)</operator><index>[<expr><name>current_col</name></expr>]</index> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>current_col</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>current_next_flags</name> <operator>&amp;</operator> <operator>(</operator><name>HL_SKIPNL</name> <operator>|</operator> <name>HL_SKIPEMPTY</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>current_next_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zero_width_next_ga</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero_width_next_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>unref_extmatch</name><argument_list>(<argument><expr><name>re_extmatch_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>re_extmatch_out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unref_extmatch</name><argument_list>(<argument><expr><name>cur_extmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>current_attr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>did_match_already</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_m_startcol</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>current_col</name>

<operator>&amp;&amp;</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_m_lnum</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>current_lnum</name>

<operator>&amp;&amp;</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_idx</name> <operator>==</operator> <name>idx</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <name>idx</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stateitem_T</name> <modifier>*</modifier></type>

<name>push_next_match</name><parameter_list>(<parameter><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>cur_si</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>save_flags</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name>next_match_idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>push_current_state</name><argument_list>(<argument><expr><name>next_match_idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_startpos</name></name> <operator>=</operator> <name>next_match_h_startpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_startcol</name></name> <operator>=</operator> <name>current_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_lnum</name></name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_seqnr</name></name> <operator>=</operator> <name>next_seqnr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_cchar</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_cchar</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>|=</operator>

<call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><name>si_flags</name> <operator>&amp;</operator> <name>HL_CONCEAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_next_list</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_next_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_extmatch</name></name> <operator>=</operator> <call><name>ref_extmatch</name><argument_list>(<argument><expr><name>next_match_extmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>==</operator> <name>SPTYPE_START</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>&amp;</operator> <name>HL_ONELINE</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>update_si_end</name><argument_list>(<argument><expr><name>cur_si</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>next_match_m_endpos</name><operator>.</operator><name>col</name></name><operator>)</operator></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_keepend</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name></name> <operator>=</operator> <name>next_match_m_endpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_endpos</name></name> <operator>=</operator> <name>next_match_h_endpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_ends</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>|=</operator> <name>next_match_flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_eoe_pos</name></name> <operator>=</operator> <name>next_match_eoe_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_end_idx</name></name> <operator>=</operator> <name>next_match_end_idx</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keepend_level</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_KEEPEND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>keepend_level</name> <operator>=</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>check_keepend</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_si_attr</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>save_flags</name> <operator>=</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>HL_CONCEAL</name> <operator>|</operator> <name>HL_CONCEALENDS</name><operator>)</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>( <expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>==</operator> <name>SPTYPE_START</name>

<operator>&amp;&amp;</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_syn_match_id</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>push_current_state</name><argument_list>(<argument><expr><name>next_match_idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_startpos</name></name> <operator>=</operator> <name>next_match_h_startpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_startcol</name></name> <operator>=</operator> <name>current_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_lnum</name></name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name></name> <operator>=</operator> <name>next_match_eos_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_endpos</name></name> <operator>=</operator> <name>next_match_eos_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_ends</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_end_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>=</operator> <name>HL_MATCH</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_seqnr</name></name> <operator>=</operator> <name>next_seqnr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>|=</operator> <name>save_flags</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_CONCEALENDS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>|=</operator> <name>HL_CONCEAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_next_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_keepend</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_si_attr</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next_match_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<return>return <expr><name>cur_si</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>check_state_ends</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>cur_si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>had_extend</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_ends</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name>current_lnum</name>

<operator>||</operator> <operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name>current_lnum</name>

<operator>&amp;&amp;</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>col</name></name> <operator>&lt;=</operator> <name>current_col</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_end_idx</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_eoe_pos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name>current_lnum</name>

<operator>||</operator> <operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_eoe_pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name>current_lnum</name>

<operator>&amp;&amp;</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_eoe_pos</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name>current_col</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name> <operator>=</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_end_idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_end_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_m_endpos</name></name> <operator>=</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_eoe_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_h_endpos</name></name> <operator>=</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_eoe_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>|=</operator> <name>HL_MATCH</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_seqnr</name></name> <operator>=</operator> <name>next_seqnr</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_CONCEALENDS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>|=</operator> <name>HL_CONCEAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>update_si_attr</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_next_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>next_match_col</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>current_next_list</name> <operator>=</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_next_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_next_flags</name> <operator>=</operator> <name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>current_next_flags</name> <operator>&amp;</operator> <operator>(</operator><name>HL_SKIPNL</name> <operator>|</operator> <name>HL_SKIPEMPTY</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>syn_getcurline</name><argument_list>()</argument_list></call><index>[<expr><name>current_col</name></expr>]</index> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>current_next_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>had_extend</name> <operator>=</operator> <operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_EXTEND</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pop_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>had_extend</name> <operator>&amp;&amp;</operator> <name>keepend_level</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>syn_update_ends</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_si</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name></expr>]</index><operator>.</operator><name>sp_type</name>

<operator>==</operator> <name>SPTYPE_START</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>HL_MATCH</name> <operator>|</operator> <name>HL_KEEPEND</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>update_si_end</name><argument_list>(<argument><expr><name>cur_si</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>current_col</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_keepend</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current_next_flags</name> <operator>&amp;</operator> <name>HL_HAS_EOL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>keepend_level</name> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>syn_getcurline</name><argument_list>()</argument_list></call><index>[<expr><name>current_col</name></expr>]</index> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>update_si_attr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>sip</name> <init>= <expr><operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sip</name><operator>-&gt;</operator><name>si_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name><name>sip</name><operator>-&gt;</operator><name>si_idx</name></name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sip</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_MATCH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_id</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_syn_match_id</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_id</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_attr</name></name> <operator>=</operator> <call><name>syn_id2attr</name><argument_list>(<argument><expr><name><name>sip</name><operator>-&gt;</operator><name>si_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_trans_id</name></name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_id</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sip</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_MATCH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_cont_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_cont_list</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_cont_list</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>&amp;</operator> <name>HL_TRANSP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>sip</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_MATCH</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_attr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_trans_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sip</name><operator>-&gt;</operator><name>si_cont_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_cont_list</name></name> <operator>=</operator> <name>ID_LIST_ALL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_attr</name></name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>si_attr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_trans_id</name></name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>si_trans_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_h_startpos</name></name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>si_h_startpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name></name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>si_h_endpos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sip</name><operator>-&gt;</operator><name>si_cont_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>|=</operator> <name>HL_TRANS_CONT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_cont_list</name></name> <operator>=</operator> <call><name>CUR_STATE</name><argument_list>(<argument><expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>si_cont_list</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>check_keepend</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>maxpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>maxpos_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>sip</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>keepend_level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>keepend_level</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_flags</name> <operator>&amp;</operator> <name>HL_EXTEND</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>maxpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>maxpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>maxpos_h</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>maxpos_h</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>sip</name> <operator>=</operator> <operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>maxpos</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>limit_pos_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>limit_pos_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxpos_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>limit_pos_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sip</name><operator>-&gt;</operator><name>si_eoe_pos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_ends</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sip</name><operator>-&gt;</operator><name>si_ends</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sip</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_KEEPEND</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>maxpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>maxpos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name>

<operator>||</operator> <operator>(</operator><name><name>maxpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name><name>maxpos</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>col</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxpos</name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>maxpos_h</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>maxpos_h</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name><operator>.</operator><name>lnum</name></name>

<operator>||</operator> <operator>(</operator><name><name>maxpos_h</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name><name>maxpos_h</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name><operator>.</operator><name>col</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxpos_h</name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>update_si_end</name><parameter_list>(

<parameter><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>sip</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>startcol</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>startpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>endpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>hl_endpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name>end_endpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sip</name><operator>-&gt;</operator><name>si_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name> <operator>&amp;&amp;</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name>current_lnum</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>startpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>startpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>startcol</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>find_endpos</name><argument_list>(<argument><expr><name><name>sip</name><operator>-&gt;</operator><name>si_idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hl_endpos</name></expr></argument>,

<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sip</name><operator>-&gt;</operator><name>si_flags</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_endpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_idx</name></expr></argument>, <argument><expr><name><name>sip</name><operator>-&gt;</operator><name>si_extmatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>endpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name><name>sip</name><operator>-&gt;</operator><name>si_idx</name></name></expr>]</index><operator>.</operator><name>sp_flags</name> <operator>&amp;</operator> <name>HL_ONELINE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_ends</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>current_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>syn_getcurline</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_ends</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name></name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_m_endpos</name></name> <operator>=</operator> <name>endpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_h_endpos</name></name> <operator>=</operator> <name>hl_endpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_eoe_pos</name></name> <operator>=</operator> <name>end_endpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_ends</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>si_end_idx</name></name> <operator>=</operator> <name>end_idx</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>push_current_state</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stateitem_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>si_idx</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>pop_current_state</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>unref_extmatch</name><argument_list>(<argument><expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name><name>current_state</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>si_extmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next_match_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keepend_level</name> <operator>&gt;=</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>keepend_level</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>find_endpos</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, 

<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>startpos</name></decl></parameter>, 

<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>m_endpos</name></decl></parameter>, 

<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>hl_endpos</name></decl></parameter>, 

<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>flagsp</name></decl></parameter>, 

<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>end_endpos</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>end_idx</name></decl></parameter>, 

<parameter><decl><type><name>reg_extmatch_T</name> <modifier>*</modifier></type><name>start_ext</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>matchcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>spp_skip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmmatch_T</name></type> <name>best_regmatch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>lpos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>had_match</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf_chartab</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>!=</operator> <name>SPTYPE_START</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>hl_endpos</name> <operator>=</operator> <operator>*</operator><name>startpos</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>!=</operator> <name>SPTYPE_START</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>==</operator> <name>SPTYPE_SKIP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>spp_skip</name> <operator>=</operator> <name>spp</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>spp_skip</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>unref_extmatch</name><argument_list>(<argument><expr><name>re_extmatch_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>re_extmatch_in</name> <operator>=</operator> <call><name>ref_extmatch</name><argument_list>(<argument><expr><name>start_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>matchcol</name> <operator>=</operator> <name><name>startpos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>start_idx</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>best_regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>save_chartab</name><argument_list>(<argument><expr><name>buf_chartab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>best_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name>start_idx</name></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>syn_block</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lc_col</name> <init>= <expr><name>matchcol</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>!=</operator> <name>SPTYPE_END</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lc_col</name> <operator>-=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>SPO_LC_OFF</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lc_col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lc_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rmm_ic</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_ic</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_prog</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>syn_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name><name>startpos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>lc_col</name></expr></argument>,

<argument><expr><call><name>IF_SYN_TIME</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_prog</name></name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>best_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name>

<operator>&lt;</operator> <name><name>best_regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>best_idx</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>best_regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>best_regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>best_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>spp_skip</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lc_col</name> <init>= <expr><name>matchcol</name> <operator>-</operator> <name><name>spp_skip</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>SPO_LC_OFF</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lc_col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lc_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rmm_ic</name></name> <operator>=</operator> <name><name>spp_skip</name><operator>-&gt;</operator><name>sp_ic</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name><name>spp_skip</name><operator>-&gt;</operator><name>sp_prog</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>syn_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name><name>startpos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>lc_col</name></expr></argument>,

<argument><expr><call><name>IF_SYN_TIME</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spp_skip</name><operator>-&gt;</operator><name>sp_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spp_skip</name><operator>-&gt;</operator><name>sp_prog</name></name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;&amp;</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name>

<operator>&lt;=</operator> <name><name>best_regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>line_len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>syn_add_end_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>spp_skip</name></expr></argument>, <argument><expr><name>SPO_ME_OFF</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>startpos</name><operator>-&gt;</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>syn_buf</name></expr></argument>, <argument><expr><name><name>startpos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>line_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;=</operator> <name>matchcol</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>matchcol</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;=</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matchcol</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>matchcol</name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</init>

<condition><expr><name>matchcol</name> <operator>&lt;</operator> <name>line_len</name> <operator>&amp;&amp;</operator> <name>matchcol</name> <operator>&lt;</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr>;</condition>

<incr><expr><operator>++</operator><name>matchcol</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>matchcol</name> <operator>&gt;=</operator> <name>line_len</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name>best_idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_add_end_off</name><argument_list>(<argument><expr><name>m_endpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_regmatch</name></expr></argument>, <argument><expr><name>spp</name></expr></argument>, <argument><expr><name>SPO_ME_OFF</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m_endpos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <name><name>startpos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name><name>m_endpos</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <name><name>startpos</name><operator>-&gt;</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m_endpos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name><name>startpos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>syn_add_end_off</name><argument_list>(<argument><expr><name>end_endpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_regmatch</name></expr></argument>, <argument><expr><name>spp</name></expr></argument>, <argument><expr><name>SPO_HE_OFF</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>end_endpos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <name><name>startpos</name><operator>-&gt;</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name><name>end_endpos</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <name><name>startpos</name><operator>-&gt;</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>end_endpos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name><name>startpos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>limit_pos</name><argument_list>(<argument><expr><name>end_endpos</name></expr></argument>, <argument><expr><name>m_endpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_syn_match_id</name></name> <operator>!=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name><operator>.</operator><name>id</name></name> <operator>&amp;&amp;</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_syn_match_id</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>end_idx</name> <operator>=</operator> <name>best_idx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_off_flags</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>SPO_RE_OFF</name> <operator>+</operator> <name>SPO_COUNT</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>hl_endpos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>best_regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hl_endpos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name><name>best_regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>hl_endpos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>best_regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hl_endpos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name><name>best_regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>hl_endpos</name><operator>-&gt;</operator><name>col</name></name> <operator>+=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>SPO_RE_OFF</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hl_endpos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <name><name>startpos</name><operator>-&gt;</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name><name>hl_endpos</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <name><name>startpos</name><operator>-&gt;</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hl_endpos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name><name>startpos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>limit_pos</name><argument_list>(<argument><expr><name>hl_endpos</name></expr></argument>, <argument><expr><name>m_endpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>m_endpos</name> <operator>=</operator> <operator>*</operator><name>hl_endpos</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>end_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>hl_endpos</name> <operator>=</operator> <operator>*</operator><name>end_endpos</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>flagsp</name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>had_match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>had_match</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m_endpos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>restore_chartab</name><argument_list>(<argument><expr><name>buf_chartab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unref_extmatch</name><argument_list>(<argument><expr><name>re_extmatch_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>re_extmatch_in</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>limit_pos</name><parameter_list>(<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>limit</name><operator>-&gt;</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <operator>*</operator><name>limit</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <name><name>limit</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>&gt;</operator> <name><name>limit</name><operator>-&gt;</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name><name>limit</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>limit_pos_zero</name><parameter_list>(

<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,

<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <operator>*</operator><name>limit</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>limit_pos</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_add_end_off</name><parameter_list>(

<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, 

<parameter><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>regmatch</name></decl></parameter>, 

<parameter><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>extra</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_off_flags</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>idx</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>regmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>regmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <name>extra</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>regmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>regmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>syn_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>off</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>syn_buf</name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>base</name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name>off</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>off</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name>off</name><operator>++</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>base</name> <operator>&lt;</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>base</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_add_start_off</name><parameter_list>(

<parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, 

<parameter><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>regmatch</name></decl></parameter>, 

<parameter><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>extra</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_off_flags</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>idx</name> <operator>+</operator> <name>SPO_COUNT</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>regmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>regmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <name>extra</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>regmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>regmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>syn_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>syn_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>syn_buf</name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>syn_buf</name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>base</name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name>off</name><operator>--</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>off</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name>off</name><operator>++</operator> <operator>&amp;&amp;</operator> <name>base</name> <operator>&lt;</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>base</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>syn_getcurline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>syn_buf</name></expr></argument>, <argument><expr><name>current_lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>syn_regexec</name><parameter_list>(

<parameter><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>rmp</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>,

<parameter><decl><type><name>syn_time_T</name> <modifier>*</modifier><name>st</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>timed_out</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>proftime_T</name></type> <name>pt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>syn_time_on</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rmp</name><operator>-&gt;</operator><name>rmm_maxcol</name></name> <operator>=</operator> <name><name>syn_buf</name><operator>-&gt;</operator><name>b_p_smc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <macro><name>vim_regexec_multi</name><argument_list>(<argument>rmp</argument>, <argument>syn_win</argument>, <argument>syn_buf</argument>, <argument>lnum</argument>, <argument>col</argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument>syn_tm</argument>, <argument>&amp;timed_out

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

NULL</argument>, <argument>NULL</argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></macro></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>syn_time_on</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>profile_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>total</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>profile_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>slowest</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>slowest</name></name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>st</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>st</name><operator>-&gt;</operator><name>match</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>timed_out</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>syn_win</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_slow</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>syn_win</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_slow</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'redrawtime' exceeded, syntax highlighting disabled"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rmp</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>+=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rmp</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>+=</operator> <name>lnum</name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>check_keyword_id</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>startcol</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>endcolp</name></decl></parameter>, 

<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>flagsp</name></decl></parameter>, 

<parameter><decl><type><name>short</name> <modifier>*</modifier><modifier>*</modifier></type><name>next_listp</name></decl></parameter>, 

<parameter><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>cur_si</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier><name>ccharp</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>keyentry_T</name> <modifier>*</modifier></type><name>kp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>kwp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>kwlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>keyword</name><index>[<expr><name>MAXKEYWLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>kwp</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name>startcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name>kwlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>kwlen</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>kwp</name> <operator>+</operator> <name>kwlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>kwlen</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block>

while <condition>(<expr><call><name>vim_iswordp_buf</name><argument_list>(<argument><expr><name>kwp</name> <operator>+</operator> <name>kwlen</name></expr></argument>, <argument><expr><name>syn_buf</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>kwlen</name> <operator>&gt;</operator> <name>MAXKEYWLEN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><name>kwp</name></expr></argument>, <argument><expr><name>kwlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>round</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>round</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>ht</name> <operator>=</operator> <ternary><condition><expr><name>round</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_keywtab</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>syn_block</name><operator>-&gt;</operator><name>b_keywtab_ic</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>str_foldcase</name><argument_list>(<argument><expr><name>kwp</name></expr></argument>, <argument><expr><name>kwlen</name></expr></argument>, <argument><expr><name>keyword</name></expr></argument>, <argument><expr><name>MAXKEYWLEN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>hash_find</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>keyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>kp</name> <operator>=</operator> <call><name>HI2KE</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>kp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>kp</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>ke_next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>current_next_list</name> <operator>!=</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><call><name>in_id_list</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>current_next_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><operator>(</operator><ternary><condition><expr><name>cur_si</name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><operator>!</operator><operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_CONTAINED</name><operator>)</operator></expr>

</then><else>: <expr><call><name>in_id_list</name><argument_list>(<argument><expr><name>cur_si</name></expr></argument>, <argument><expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_cont_list</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name></name></expr></argument>, <argument><expr><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_CONTAINED</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>endcolp</name> <operator>=</operator> <name>startcol</name> <operator>+</operator> <name>kwlen</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>flagsp</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>next_listp</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>next_list</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>ccharp</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>k_char</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>id</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_conceal</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier><name>eap</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>syncing</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>find_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_conceal</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax conceal on"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax conceal off"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next</name> <operator>-</operator> <name>arg</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_conceal</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next</name> <operator>-</operator> <name>arg</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_conceal</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E390: Illegal argument: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_case</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>syncing</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>find_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_ic</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax case ignore"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax case match"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"match"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next</name> <operator>-</operator> <name>arg</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_ic</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"ignore"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next</name> <operator>-</operator> <name>arg</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_ic</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E390: Illegal argument: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_spell</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>syncing</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>find_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>==</operator> <name>SYNSPL_TOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax spell toplevel"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>==</operator> <name>SYNSPL_NOTOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax spell notoplevel"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax spell default"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"toplevel"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next</name> <operator>-</operator> <name>arg</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>=</operator> <name>SYNSPL_TOP</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"notoplevel"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next</name> <operator>-</operator> <name>arg</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>=</operator> <name>SYNSPL_NOTOP</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next</name> <operator>-</operator> <name>arg</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>=</operator> <name>SYNSPL_DEFAULT</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E390: Illegal argument: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_iskeyword</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>syncing</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>save_chartab</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_isk</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_isk</name></name> <operator>!=</operator> <name>empty_option</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax iskeyword "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_isk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax iskeyword not set"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"clear"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_chartab</name></name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_isk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>save_chartab</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>save_isk</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_isk</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_isk</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_init_chartab</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_chartab</name></name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>, <argument><expr><name>save_chartab</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_isk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_isk</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_isk</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_isk</name></name> <operator>=</operator> <name>save_isk</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>syntax_clear</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_error</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_slow</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_ic</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_spell</name></name> <operator>=</operator> <name>SYNSPL_DEFAULT</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_containedin</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_conceal</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>clear_keywtab</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>b_keywtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_keywtab</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>b_keywtab_ic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_clear_pattern</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>b_syn_patterns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>b_syn_clusters</name><operator>.</operator><name>ga_len</name></name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_clear_cluster</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>b_syn_clusters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_spell_cluster_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_nospell_cluster_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_sync_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_sync_linebreaks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_linecont_prog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_linecont_prog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_linecont_pat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>b_syn_folditems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>b_syn_isk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_stack_free_all</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invalidate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>running_syn_inc_tag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>reset_synblock</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_s</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>syntax_clear</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_s</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syntax_sync_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sp_syncing</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_remove_pattern</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_linebreaks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_prog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_prog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_pat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_isk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_stack_free_all</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_remove_pattern</name><parameter_list>(

<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>&amp;</operator> <name>HL_FOLD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>block</name><operator>-&gt;</operator><name>b_syn_folditems</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>syn_clear_pattern</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>spp</name></expr></argument>, <argument><expr><name>spp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>synpat_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <name>idx</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>block</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_clear_pattern</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sp_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sp_prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>sp_type</name> <operator>!=</operator> <name>SPTYPE_START</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sp_cont_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sp_next_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name><name>sp_syn</name><operator>.</operator><name>cont_in_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_clear_cluster</name><parameter_list>(<parameter><decl><type><name>synblock_T</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>scl_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>scl_name_u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>scl_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_clear</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>find_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_topgrp</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>syncing</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syntax_sync_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>syntax_clear</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_s</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_unlet</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"b:current_syntax"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>do_unlet</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"w:current_syntax"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_scl_namen2id</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg_end</name> <operator>-</operator> <name>arg</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E391: No such syntax cluster: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>scl_id</name> <init>= <expr><name>id</name> <operator>-</operator> <name>SYNID_CLUSTER</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>scl_id</name></expr>]</index><operator>.</operator><name>scl_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_namen2id</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg_end</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nogroup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_clear_one</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>syncing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_stack_free_all</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_clear_one</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>syncing</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_clear_keyword</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_keywtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_clear_keyword</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_keywtab_ic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</init> <condition><expr><operator>--</operator><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name><operator>.</operator><name>id</name></name> <operator>!=</operator> <name>id</name> <operator>||</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_syncing</name></name> <operator>!=</operator> <name>syncing</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>syn_remove_pattern</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_on</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>syncing</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>syn_cmd_onoff</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><literal type="string">"syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_enable</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>syncing</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_internal_string_var</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"syntax_cmd"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"enable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_cmd_onoff</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><literal type="string">"syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_unlet</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"g:syntax_cmd"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_reset</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>syncing</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>set_internal_string_var</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"syntax_cmd"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"runtime! syntax/syncolor.vim"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_unlet</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"g:syntax_cmd"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_manual</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>syncing</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>syn_cmd_onoff</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><literal type="string">"manual"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_off</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>syncing</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>syn_cmd_onoff</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><literal type="string">"nosyntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_onoff</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"so "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>SYNTAX_FNAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_list</name><parameter_list>(

<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_end</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>find_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syntax_present</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>msg_no_items</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>syncing</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_flags</name></name> <operator>&amp;</operator> <name>SF_CCOMMENT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syncing on C-style comments"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_lines_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_match_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_flags</name></name> <operator>&amp;</operator> <name>SF_MATCH</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no syncing"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syncing starts "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" lines before top line"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_match_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_puts_title</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n--- Syntax sync items ---"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_linebreaks</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nsyncing on items"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_lines_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_match_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts_title</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n--- Syntax items ---"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>id</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>id</name> <operator>&lt;=</operator> <call><name>highlight_num_groups</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>id</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_list_one</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>syncing</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>id</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_clusters</name><operator>.</operator><name>ga_len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>id</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_list_cluster</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_scl_namen2id</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg_end</name> <operator>-</operator> <name>arg</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E392: No such syntax cluster: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_list_cluster</name><argument_list>(<argument><expr><name>id</name> <operator>-</operator> <name>SYNID_CLUSTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_namen2id</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg_end</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nogroup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_list_one</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>syncing</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_lines_msg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"minimal "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"maximal "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" lines before top line"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_match_msg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_linebreaks</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"; match "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_linebreaks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" line breaks"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_matchgroup</name></decl>;</decl_stmt>

<struct>struct <name>name_list</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syn_list_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>name_list</name></name> <modifier>*</modifier></type><name>nl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_list_one</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>link_only</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_header</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>name_list</name></name></type> <name><name>namelist1</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><name>HL_DISPLAY</name></expr>, <expr><literal type="string">"display"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_CONTAINED</name></expr>, <expr><literal type="string">"contained"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_ONELINE</name></expr>, <expr><literal type="string">"oneline"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_KEEPEND</name></expr>, <expr><literal type="string">"keepend"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_EXTEND</name></expr>, <expr><literal type="string">"extend"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_EXCLUDENL</name></expr>, <expr><literal type="string">"excludenl"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_TRANSP</name></expr>, <expr><literal type="string">"transparent"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_FOLD</name></expr>, <expr><literal type="string">"fold"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>HL_CONCEAL</name></expr>, <expr><literal type="string">"conceal"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_CONCEALENDS</name></expr>, <expr><literal type="string">"concealends"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>name_list</name></name></type> <name><name>namelist2</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><name>HL_SKIPWHITE</name></expr>, <expr><literal type="string">"skipwhite"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_SKIPNL</name></expr>, <expr><literal type="string">"skipnl"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>HL_SKIPEMPTY</name></expr>, <expr><literal type="string">"skipempty"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>syncing</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>did_header</name> <operator>=</operator> <call><name>syn_list_keywords</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_keywtab</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_header</name> <operator>=</operator> <call><name>syn_list_keywords</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_keywtab_ic</name></name></expr></argument>,

<argument><expr><name>did_header</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name><operator>.</operator><name>id</name></name> <operator>!=</operator> <name>id</name> <operator>||</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_syncing</name></name> <operator>!=</operator> <name>syncing</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_list_header</name><argument_list>(<argument><expr><name>did_header</name></expr></argument>, <argument><expr><literal type="number">999</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_header</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_matchgroup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>==</operator> <name>SPTYPE_MATCH</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>put_pattern</name><argument_list>(<argument><expr><literal type="string">"match"</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>spp</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_type</name></name> <operator>==</operator> <name>SPTYPE_START</name></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_type</name> <operator>==</operator> <name>SPTYPE_START</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_pattern</name><argument_list>(<argument><expr><literal type="string">"start"</literal></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_type</name> <operator>==</operator> <name>SPTYPE_SKIP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_pattern</name><argument_list>(<argument><expr><literal type="string">"skip"</literal></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name>

<operator>&amp;&amp;</operator> <call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_type</name> <operator>==</operator> <name>SPTYPE_END</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_pattern</name><argument_list>(<argument><expr><literal type="string">"end"</literal></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>--</operator><name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>syn_list_flags</name><argument_list>(<argument><expr><name>namelist1</name></expr></argument>, <argument><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_cont_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_id_list</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"contains"</literal></expr></argument>, <argument><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_cont_list</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name><operator>.</operator><name>cont_in_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_id_list</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"containedin"</literal></expr></argument>,

<argument><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name><operator>.</operator><name>cont_in_list</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_next_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>put_id_list</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"nextgroup"</literal></expr></argument>, <argument><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_next_list</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_list_flags</name><argument_list>(<argument><expr><name>namelist2</name></expr></argument>, <argument><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>HL_SYNC_HERE</name><operator>|</operator><name>HL_SYNC_THERE</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>&amp;</operator> <name>HL_SYNC_HERE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"grouphere"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"groupthere"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_sync_idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><call><name>highlight_group_name</name><argument_list>(<argument><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call>

<index>[<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_sync_idx</name></name></expr>]</index><operator>.</operator><name><name>sp_syn</name><operator>.</operator><name>id</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>highlight_link_id</name><argument_list>(<argument><expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>did_header</name> <operator>||</operator> <name>link_only</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_list_header</name><argument_list>(<argument><expr><name>did_header</name></expr></argument>, <argument><expr><literal type="number">999</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"links to"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><call><name>highlight_group_name</name><argument_list>(<argument><expr><call><name>highlight_link_id</name><argument_list>(<argument><expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_list_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>name_list</name></name> <modifier>*</modifier></type><name>nlist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>nlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name><name>nlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><name><name>nlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_list_cluster</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>endcol</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>id</name></expr>]</index><operator>.</operator><name>scl_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>&gt;=</operator> <name>endcol</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>endcol</name> <operator>=</operator> <name>msg_col</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>Columns</name> <operator>&lt;=</operator> <name>endcol</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>endcol</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><name>endcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>id</name></expr>]</index><operator>.</operator><name>scl_list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>put_id_list</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"cluster"</literal></expr></argument>, <argument><expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>id</name></expr>]</index><operator>.</operator><name>scl_list</name></expr></argument>,

<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"cluster"</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"=NONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>put_id_list</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <name>SYNID_ALLBUT</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;</operator> <name>SYNID_TOP</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"ALLBUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <name>SYNID_TOP</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;</operator> <name>SYNID_CONTAINED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"TOP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <name>SYNID_CONTAINED</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;</operator> <name>SYNID_CLUSTER</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"CONTAINED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <name>SYNID_CLUSTER</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>scl_id</name> <init>= <expr><operator>*</operator><name>p</name> <operator>-</operator> <name>SYNID_CLUSTER</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>scl_id</name></expr>]</index><operator>.</operator><name>scl_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><call><name>highlight_group_name</name><argument_list>(<argument><expr><operator>*</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>put_pattern</name><parameter_list>(

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>,

<parameter><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>sepchars</name> <init>= <expr><literal type="string">"/+=-#@\"|'^&amp;"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>last_matchgroup</name> <operator>!=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_syn_match_id</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>last_matchgroup</name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_syn_match_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"matchgroup"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last_matchgroup</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><call><name>highlight_group_name</name><argument_list>(<argument><expr><name>last_matchgroup</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_pattern</name></name></expr></argument>, <argument><expr><name><name>sepchars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>sepchars</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><name><name>sepchars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><name><name>sepchars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SPO_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_off_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>mask</name> <operator>+</operator> <operator>(</operator><name>mask</name> <operator>&lt;&lt;</operator> <name>SPO_COUNT</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><name><name>spo_name_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>SPO_LC_OFF</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_off_flags</name></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>||</operator> <name>i</name> <operator>==</operator> <name>SPO_LC_OFF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>syn_list_keywords</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,

<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>did_header</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>outlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>keyentry_T</name> <modifier>*</modifier></type><name>kp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_contained</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>prev_next_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>prev_cont_in_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_skipnl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_skipwhite</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_skipempty</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>kp</name> <operator>=</operator> <call><name>HI2KE</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>kp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>kp</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>ke_next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prev_contained</name> <operator>!=</operator> <operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_CONTAINED</name><operator>)</operator>

<operator>||</operator> <name>prev_skipnl</name> <operator>!=</operator> <operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_SKIPNL</name><operator>)</operator>

<operator>||</operator> <name>prev_skipwhite</name> <operator>!=</operator> <operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_SKIPWHITE</name><operator>)</operator>

<operator>||</operator> <name>prev_skipempty</name> <operator>!=</operator> <operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_SKIPEMPTY</name><operator>)</operator>

<operator>||</operator> <name>prev_cont_in_list</name> <operator>!=</operator> <name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>cont_in_list</name></name>

<operator>||</operator> <name>prev_next_list</name> <operator>!=</operator> <name><name>kp</name><operator>-&gt;</operator><name>next_list</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>outlen</name> <operator>=</operator> <literal type="number">9999</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>outlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>syn_list_header</name><argument_list>(<argument><expr><name>did_header</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>prev_contained</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_next_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_cont_in_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_skipnl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_skipwhite</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_skipempty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>did_header</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_contained</name> <operator>!=</operator> <operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_CONTAINED</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"contained"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_contained</name> <operator>=</operator> <operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_CONTAINED</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>cont_in_list</name></name> <operator>!=</operator> <name>prev_cont_in_list</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>put_id_list</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"containedin"</literal></expr></argument>,

<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>cont_in_list</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_cont_in_list</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>cont_in_list</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>next_list</name></name> <operator>!=</operator> <name>prev_next_list</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>put_id_list</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"nextgroup"</literal></expr></argument>, <argument><expr><name><name>kp</name><operator>-&gt;</operator><name>next_list</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_next_list</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>next_list</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_SKIPNL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"skipnl"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_skipnl</name> <operator>=</operator> <operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_SKIPNL</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_SKIPWHITE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"skipwhite"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_skipwhite</name> <operator>=</operator> <operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_SKIPWHITE</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_SKIPEMPTY</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"skipempty"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_skipempty</name> <operator>=</operator> <operator>(</operator><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_SKIPEMPTY</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>did_header</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_clear_keyword</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>keyentry_T</name> <modifier>*</modifier></type><name>kp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>keyentry_T</name> <modifier>*</modifier></type><name>kp_prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>keyentry_T</name> <modifier>*</modifier></type><name>kp_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hash_lock</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>kp_prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>kp</name> <operator>=</operator> <call><name>HI2KE</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>kp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>kp_next</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>ke_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kp_prev</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>kp_next</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hash_remove</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name> <operator>=</operator> <call><name>KE2HIKEY</name><argument_list>(<argument><expr><name>kp_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>kp_prev</name><operator>-&gt;</operator><name>ke_next</name></name> <operator>=</operator> <name>kp_next</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>next_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>cont_in_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>kp</name> <operator>=</operator> <name>kp_next</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>kp_prev</name> <operator>=</operator> <name>kp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>kp</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>ke_next</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>hash_unlock</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>clear_keywtab</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>keyentry_T</name> <modifier>*</modifier></type><name>kp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>keyentry_T</name> <modifier>*</modifier></type><name>kp_next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>kp</name> <operator>=</operator> <call><name>HI2KE</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>kp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>kp</name> <operator>=</operator> <name>kp_next</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>kp_next</name> <operator>=</operator> <name><name>kp</name><operator>-&gt;</operator><name>ke_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>next_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>cont_in_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>hash_clear</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_init</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>add_keyword</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 

<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>cont_in_list</name></decl></parameter>, 

<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>next_list</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>conceal_char</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>keyentry_T</name> <modifier>*</modifier></type><name>kp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name_ic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>name_folded</name><index>[<expr><name>MAXKEYWLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_ic</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>name_ic</name> <operator>=</operator> <call><name>str_foldcase</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name_folded</name></expr></argument>, <argument><expr><name>MAXKEYWLEN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>name_ic</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>kp</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>keyentry_T</name></expr></argument>, <argument><expr><name>keyword</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>name_ic</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><name>name_ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>inc_tag</name></name> <operator>=</operator> <name>current_syn_inc_tag</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>k_char</name></name> <operator>=</operator> <name>conceal_char</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>k_syn</name><operator>.</operator><name>cont_in_list</name></name> <operator>=</operator> <call><name>copy_id_list</name><argument_list>(<argument><expr><name>cont_in_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cont_in_list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_containedin</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>next_list</name></name> <operator>=</operator> <call><name>copy_id_list</name><argument_list>(<argument><expr><name>next_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_ic</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_keywtab_ic</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_keywtab</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>hash_hash</name><argument_list>(<argument><expr><name><name>kp</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>hash_lookup</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name><name>kp</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>ke_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_add_item</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name><name>kp</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>kp</name><operator>-&gt;</operator><name>ke_next</name></name> <operator>=</operator> <call><name>HI2KE</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name> <operator>=</operator> <call><name>KE2HIKEY</name><argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>get_group_name</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>name_end</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>name_end</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>rest</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>rest</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>get_syn_options</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, 

<parameter><decl><type><name>syn_opt_arg_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier><name>conceal_char</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>skip</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>gname_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>syn_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fidx</name></decl>;</decl_stmt>

<struct><specifier>static</specifier> struct <name>flag</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>argtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

}</block> <decl><name><name>flagtab</name><index>[]</index></name> <init>= <expr><block>{ <expr><block>{<expr><literal type="string">"cCoOnNtTaAiInNeEdD"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_CONTAINED</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"oOnNeElLiInNeE"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_ONELINE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"kKeEeEpPeEnNdD"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_KEEPEND</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"eExXtTeEnNdD"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_EXTEND</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"eExXcClLuUdDeEnNlL"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_EXCLUDENL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tTrRaAnNsSpPaArReEnNtT"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_TRANSP</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sSkKiIpPnNlL"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_SKIPNL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sSkKiIpPwWhHiItTeE"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_SKIPWHITE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sSkKiIpPeEmMpPtTyY"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_SKIPEMPTY</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"gGrRoOuUpPhHeErReE"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_SYNC_HERE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"gGrRoOuUpPtThHeErReE"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_SYNC_THERE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dDiIsSpPlLaAyY"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_DISPLAY</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fFoOlLdD"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_FOLD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cCoOnNcCeEaAlL"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_CONCEAL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cCoOnNcCeEaAlLeEnNdDsS"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HL_CONCEALENDS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cCcChHaArR"</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cCoOnNtTaAiInNsS"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cCoOnNtTaAiInNeEdDiInN"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"nNeExXtTgGrRoOuUpP"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>first_letters</name> <init>= <expr><literal type="string">"cCoOkKeEtTsSgGdDfFnN"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_conceal</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HL_CONCEAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>first_letters</name></expr></argument>, <argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>fidx</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>flagtab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>flag</name></expr></argument>)</argument_list></sizeof></expr>;</init> <condition><expr><operator>--</operator><name>fidx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><operator>++</operator><name>len</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>p</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><ternary><condition><expr><name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>argtype</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>

</then><else>: <expr><call><name>ends_excmd</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>keyword</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>==</operator> <name>HL_DISPLAY</name>

<operator>||</operator> <name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>==</operator> <name>HL_FOLD</name>

<operator>||</operator> <name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>==</operator> <name>HL_EXTEND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fidx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>fidx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>argtype</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>has_cont_list</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E395: contains argument not accepted here"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_id_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>cont_list</name></name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>argtype</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_id_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>cont_in_list</name></name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>argtype</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_id_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>next_list</name></name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>argtype</name> <operator>==</operator> <literal type="number">11</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>conceal_char</name> <operator>=</operator> <call><name>mb_ptr2char</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>arg</name> <operator>+=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>conceal_char</name> <operator>=</operator> <name><name>arg</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_isprintc_strict</name><argument_list>(<argument><expr><operator>*</operator><name>conceal_char</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E844: invalid cchar value"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>==</operator> <name>HL_SYNC_HERE</name>

<operator>||</operator> <name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>==</operator> <name>HL_SYNC_THERE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>sync_idx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E393: group[t]here not accepted here"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>gname_start</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gname_start</name> <operator>==</operator> <name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gname</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>gname_start</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg</name> <operator>-</operator> <name>gname_start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>gname</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name><name>opt</name><operator>-&gt;</operator><name>sync_idx</name></name> <operator>=</operator> <name>NONE_IDX</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>syn_id</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><name>gname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name><name>sp_syn</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>syn_id</name>

<operator>&amp;&amp;</operator> <call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>sp_type</name> <operator>==</operator> <name>SPTYPE_START</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>opt</name><operator>-&gt;</operator><name>sync_idx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E394: Didn't find region item for %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>gname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>gname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>flagtab</name><index>[<expr><name>fidx</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>==</operator> <name>HL_FOLD</name>

<operator>&amp;&amp;</operator> <call><name>foldmethodIsSyntax</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>arg</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_incl_toplevel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flagsp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>flagsp</name> <operator>&amp;</operator> <name>HL_CONTAINED</name><operator>)</operator> <operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_topgrp</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>flagsp</name> <operator>|=</operator> <name>HL_CONTAINED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_topgrp</name></name> <operator>&gt;=</operator> <name>SYNID_CLUSTER</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>grp_list</name> <init>= <expr><call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>short</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tlg_id</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_topgrp</name></name> <operator>-</operator> <name>SYNID_CLUSTER</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>grp_list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>grp_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grp_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_combine_list</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>tlg_id</name></expr>]</index><operator>.</operator><name>scl_list</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>grp_list</name></expr></argument>, <argument><expr><name>CLUSTER_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_include</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>syncing</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sgl_id</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>group_name_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errormsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_toplvl_grp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_syn_inc_tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>source</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>find_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_group_name</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>group_name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E397: Filename required"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sgl_id</name> <operator>=</operator> <call><name>syn_check_cluster</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>group_name_end</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sgl_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>rest</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>argt</name></name> <operator>|=</operator> <operator>(</operator><name>EX_XFILE</name> <operator>|</operator> <name>EX_NOSPC</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>separate_nextcmd</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>||</operator> <operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <literal type="char">'$'</literal> <operator>||</operator> <call><name>mch_isFullName</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>source</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>expand_filename</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>syn_cmdlinep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errormsg</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errormsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><name>errormsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>running_syn_inc_tag</name> <operator>&gt;=</operator> <name>MAX_SYN_INC_TAG</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E847: Too many syntax includes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_syn_inc_tag</name> <operator>=</operator> <name>current_syn_inc_tag</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_syn_inc_tag</name> <operator>=</operator> <operator>++</operator><name>running_syn_inc_tag</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_toplvl_grp</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_topgrp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_topgrp</name></name> <operator>=</operator> <name>sgl_id</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>source</name></expr> ?</condition><then> <expr><call><name>do_source</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>DOSO_NONE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>

</then><else>: <expr><call><name>source_runtime</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>DIP_ALL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notopen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_topgrp</name></name> <operator>=</operator> <name>prev_toplvl_grp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_syn_inc_tag</name> <operator>=</operator> <name>prev_syn_inc_tag</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_keyword</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>syncing</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>group_name_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>syn_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>keyword_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>kw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>syn_opt_arg_T</name></type> <name>syn_opt_arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>conceal_char</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_group_name</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>group_name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>syn_id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>syn_id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>group_name_end</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>syn_id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>keyword_copy</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keyword_copy</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>keyword</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>sync_idx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>has_cont_list</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>next_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>keyword_copy</name></expr>;</expr_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>rest</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>rest</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>rest</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_syn_options</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>syn_opt_arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conceal_char</name></expr></argument>,

<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>rest</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>rest</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>rest</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rest</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>rest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>rest</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>rest</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>syn_incl_toplevel</name><argument_list>(<argument><expr><name>syn_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>kw</name> <operator>=</operator> <name>keyword_copy</name></expr>;</init> <condition><expr><operator>--</operator><name>cnt</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>kw</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>kw</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>kw</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</init> <condition>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_keyword</name><argument_list>(<argument><expr><name>kw</name></expr></argument>, <argument><expr><name>syn_id</name></expr></argument>, <argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name></expr></argument>,

<argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name></expr></argument>,

<argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>next_list</name></name></expr></argument>, <argument><expr><name>conceal_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E789: Missing ']': %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>kw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E890: trailing char after ']': %s]%s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>kw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>kw</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>keyword_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>next_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_stack_free_all</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_match</name><parameter_list>(

<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>group_name_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synpat_T</name></type> <name>item</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>syn_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>syn_opt_arg_T</name></type> <name>syn_opt_arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sync_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>conceal_char</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_group_name</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>group_name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>keyword</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>sync_idx</name></name> <operator>=</operator> <ternary><condition><expr><name>syncing</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>sync_idx</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>has_cont_list</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>next_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_syn_options</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>syn_opt_arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conceal_char</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_syn_patterns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_syn_pattern</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_regcomp_had_eol</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_EXCLUDENL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>HL_HAS_EOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_syn_options</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>syn_opt_arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conceal_char</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>rest</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>syn_id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><name>arg</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>group_name_end</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>syn_incl_toplevel</name><argument_list>(<argument><expr><name>syn_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_syncing</name> <operator>=</operator> <name>syncing</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_type</name> <operator>=</operator> <name>SPTYPE_MATCH</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name><name>sp_syn</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>syn_id</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name><name>sp_syn</name><operator>.</operator><name>inc_tag</name></name> <operator>=</operator> <name>current_syn_inc_tag</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_flags</name> <operator>=</operator> <name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_sync_idx</name> <operator>=</operator> <name>sync_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_cont_list</name> <operator>=</operator> <name><name>syn_opt_arg</name><operator>.</operator><name>cont_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name><name>sp_syn</name><operator>.</operator><name>cont_in_list</name></name> <operator>=</operator>

<name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_cchar</name> <operator>=</operator> <name>conceal_char</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_containedin</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_next_list</name> <operator>=</operator> <name><name>syn_opt_arg</name><operator>.</operator><name>next_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>HL_SYNC_HERE</name><operator>|</operator><name>HL_SYNC_THERE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_flags</name></name> <operator>|=</operator> <name>SF_MATCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_FOLD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_folditems</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_stack_free_all</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return;</return> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>sp_prog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>sp_pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>next_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_region</name><parameter_list>(

<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>syncing</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>group_name_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>item</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_START</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_SKIP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_END</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_MATCHGROUP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<struct>struct <name>pat_ptr</name>

<block>{

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>pp_synp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pp_matchgroup_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>pat_ptr</name></name> <modifier>*</modifier></type><name>pp_next</name></decl>;</decl_stmt> 

}</block> <decl><modifier>*</modifier>(<name><name>pat_ptrs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>);</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>pat_ptr</name></name> <modifier>*</modifier></type><name>ppp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pat_ptr</name></name> <modifier>*</modifier></type><name>ppp_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pat_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>syn_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>matchgroup_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>not_enough</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>illegal</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>success</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>syn_opt_arg_T</name></type> <name>syn_opt_arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>conceal_char</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_group_name</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>group_name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat_ptrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat_ptrs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat_ptrs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_syn_patterns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>keyword</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>sync_idx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>has_cont_list</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>syn_opt_arg</name><operator>.</operator><name>next_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>rest</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>rest</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_syn_options</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>syn_opt_arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conceal_char</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>rest</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>key_end</name> <operator>=</operator> <name>rest</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>key_end</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>key_end</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>key_end</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>key_end</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>vim_strnsave_up</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>key_end</name> <operator>-</operator> <name>rest</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"MATCHGROUP"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name>ITEM_MATCHGROUP</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"START"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name>ITEM_START</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"END"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name>ITEM_END</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"SKIP"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pat_ptrs</name><index>[<expr><name>ITEM_SKIP</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>illegal</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name>ITEM_SKIP</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>key_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rest</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E398: Missing '=': %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>rest</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rest</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>not_enough</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>ITEM_MATCHGROUP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>-</operator> <name>rest</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matchgroup_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>matchgroup_id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>rest</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>matchgroup_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>illegal</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>ppp</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr>struct <name>pat_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ppp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ppp</name><operator>-&gt;</operator><name>pp_next</name></name> <operator>=</operator> <name><name>pat_ptrs</name><index>[<expr><name>item</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat_ptrs</name><index>[<expr><name>item</name></expr>]</index></name> <operator>=</operator> <name>ppp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppp</name><operator>-&gt;</operator><name>pp_synp</name></name> <operator>=</operator> <call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>synpat_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ppp</name><operator>-&gt;</operator><name>pp_synp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>ITEM_START</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>reg_do_extmatch</name> <operator>=</operator> <name>REX_SET</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>item</name> <operator>==</operator> <name>ITEM_SKIP</name> <operator>||</operator> <name>item</name> <operator>==</operator> <name>ITEM_END</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>reg_do_extmatch</name> <operator>=</operator> <name>REX_USE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_syn_pattern</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><name><name>ppp</name><operator>-&gt;</operator><name>pp_synp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reg_do_extmatch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>ITEM_END</name> <operator>&amp;&amp;</operator> <call><name>vim_regcomp_had_eol</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_EXCLUDENL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ppp</name><operator>-&gt;</operator><name>pp_synp</name><operator>-&gt;</operator><name>sp_flags</name></name> <operator>|=</operator> <name>HL_HAS_EOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ppp</name><operator>-&gt;</operator><name>pp_matchgroup_id</name></name> <operator>=</operator> <name>matchgroup_id</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>pat_count</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>illegal</name> <operator>||</operator> <name>not_enough</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pat_ptrs</name><index>[<expr><name>ITEM_START</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<name><name>pat_ptrs</name><index>[<expr><name>ITEM_END</name></expr>]</index></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>not_enough</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>rest</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pat_count</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>syn_id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><name>arg</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>group_name_end</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>syn_incl_toplevel</name><argument_list>(<argument><expr><name>syn_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>item</name> <operator>=</operator> <name>ITEM_START</name></expr>;</init> <condition><expr><name>item</name> <operator>&lt;=</operator> <name>ITEM_END</name></expr>;</condition> <incr><expr><operator>++</operator><name>item</name></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><expr><name>ppp</name> <operator>=</operator> <name><name>pat_ptrs</name><index>[<expr><name>item</name></expr>]</index></name></expr>;</init> <condition><expr><name>ppp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ppp</name> <operator>=</operator> <name><name>ppp</name><operator>-&gt;</operator><name>pp_next</name></name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>ppp</name><operator>-&gt;</operator><name>pp_synp</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_syncing</name> <operator>=</operator> <name>syncing</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_type</name> <operator>=</operator>

<ternary><condition><expr><operator>(</operator><name>item</name> <operator>==</operator> <name>ITEM_START</name><operator>)</operator></expr> ?</condition><then> <expr><name>SPTYPE_START</name></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>item</name> <operator>==</operator> <name>ITEM_SKIP</name><operator>)</operator></expr> ?</condition><then> <expr><name>SPTYPE_SKIP</name></expr> </then><else>: <expr><name>SPTYPE_END</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_flags</name> <operator>|=</operator> <name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name><name>sp_syn</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>syn_id</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name><name>sp_syn</name><operator>.</operator><name>inc_tag</name></name> <operator>=</operator>

<name>current_syn_inc_tag</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_syn_match_id</name> <operator>=</operator>

<name><name>ppp</name><operator>-&gt;</operator><name>pp_matchgroup_id</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_cchar</name> <operator>=</operator> <name>conceal_char</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>ITEM_START</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_cont_list</name> <operator>=</operator>

<name><name>syn_opt_arg</name><operator>.</operator><name>cont_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name><name>sp_syn</name><operator>.</operator><name>cont_in_list</name></name> <operator>=</operator>

<name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_containedin</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>sp_next_list</name> <operator>=</operator>

<name><name>syn_opt_arg</name><operator>.</operator><name>next_list</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>syn_opt_arg</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>HL_FOLD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_folditems</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_stack_free_all</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>item</name> <operator>=</operator> <name>ITEM_START</name></expr>;</init> <condition><expr><name>item</name> <operator>&lt;=</operator> <name>ITEM_END</name></expr>;</condition> <incr><expr><operator>++</operator><name>item</name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ppp</name> <operator>=</operator> <name><name>pat_ptrs</name><index>[<expr><name>item</name></expr>]</index></name></expr>;</init> <condition><expr><name>ppp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ppp</name> <operator>=</operator> <name>ppp_next</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name> <operator>&amp;&amp;</operator> <name><name>ppp</name><operator>-&gt;</operator><name>pp_synp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>ppp</name><operator>-&gt;</operator><name>pp_synp</name><operator>-&gt;</operator><name>sp_prog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>ppp</name><operator>-&gt;</operator><name>pp_synp</name><operator>-&gt;</operator><name>sp_pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>ppp</name><operator>-&gt;</operator><name>pp_synp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ppp_next</name> <operator>=</operator> <name><name>ppp</name><operator>-&gt;</operator><name>pp_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ppp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>cont_in_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>syn_opt_arg</name><operator>.</operator><name>next_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>not_enough</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E399: Not enough arguments: syntax region %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>illegal</name> <operator>||</operator> <name>rest</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>syn_compare_stub</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>short</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><name>v1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>short</name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><name>v2</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><operator>*</operator><name>s1</name> <operator>&gt;</operator> <operator>*</operator><name>s2</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><operator>*</operator><name>s1</name> <operator>&lt;</operator> <operator>*</operator><name>s2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_combine_list</name><parameter_list>(<parameter><decl><type><name>short</name> <modifier>*</modifier><modifier>*</modifier></type><name>clstr1</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier><modifier>*</modifier></type><name>clstr2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list_op</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>g1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>g2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>clstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>clstr2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>clstr1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>list_op</name> <operator>==</operator> <name>CLUSTER_REPLACE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>list_op</name> <operator>==</operator> <name>CLUSTER_REPLACE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>*</operator><name>clstr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>list_op</name> <operator>==</operator> <name>CLUSTER_REPLACE</name> <operator>||</operator> <name>list_op</name> <operator>==</operator> <name>CLUSTER_ADD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>clstr1</name> <operator>=</operator> <operator>*</operator><name>clstr2</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>*</operator><name>clstr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>g1</name> <operator>=</operator> <operator>*</operator><name>clstr1</name></expr>;</init> <condition><expr><operator>*</operator><name>g1</name></expr>;</condition> <incr><expr><name>g1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>count1</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>g2</name> <operator>=</operator> <operator>*</operator><name>clstr2</name></expr>;</init> <condition><expr><operator>*</operator><name>g2</name></expr>;</condition> <incr><expr><name>g2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>count2</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>*</operator><name>clstr1</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>count1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>syn_compare_stub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>*</operator><name>clstr2</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>count2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>syn_compare_stub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>round</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>round</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>g1</name> <operator>=</operator> <operator>*</operator><name>clstr1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g2</name> <operator>=</operator> <operator>*</operator><name>clstr2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>g1</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>g2</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>g1</name> <operator>&lt;</operator> <operator>*</operator><name>g2</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>clstr</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>g1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>g1</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>list_op</name> <operator>==</operator> <name>CLUSTER_ADD</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>clstr</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>g2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>g1</name> <operator>==</operator> <operator>*</operator><name>g2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>g1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>g2</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>g1</name></expr>;</condition> <incr><expr><name>g1</name><operator>++</operator></expr><operator>,</operator> <expr><name>count</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>clstr</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>g1</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>list_op</name> <operator>==</operator> <name>CLUSTER_ADD</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>g2</name></expr>;</condition> <incr><expr><name>g2</name><operator>++</operator></expr><operator>,</operator> <expr><name>count</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>clstr</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>g2</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>clstr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>clstr</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>short</name></expr></argument>, <argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>clstr</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>*</operator><name>clstr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>*</operator><name>clstr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>clstr1</name> <operator>=</operator> <name>clstr</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>syn_scl_name2id</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name_u</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name_u</name> <operator>=</operator> <call><name>vim_strsave_up</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name_u</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_clusters</name><operator>.</operator><name>ga_len</name></name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>scl_name_u</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>name_u</name></expr></argument>, <argument><expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>scl_name_u</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name_u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>i</name> <operator>+</operator> <name>SYNID_CLUSTER</name></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>syn_scl_namen2id</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>linep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_scl_name2id</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>id</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>syn_check_cluster</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_scl_name2id</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_add_cluster</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>id</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>syn_add_cluster</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_clusters</name><operator>.</operator><name>ga_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_clusters</name><operator>.</operator><name>ga_itemsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>syn_cluster_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_clusters</name><operator>.</operator><name>ga_growsize</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_clusters</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>MAX_CLUSTER_ID</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E848: Too many syntax clusters"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_clusters</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>len</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>syn_cluster_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>len</name></expr>]</index><operator>.</operator><name>scl_name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>len</name></expr>]</index><operator>.</operator><name>scl_name_u</name> <operator>=</operator> <call><name>vim_strsave_up</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>len</name></expr>]</index><operator>.</operator><name>scl_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_clusters</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Spell"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_spell_cluster_id</name></name> <operator>=</operator> <name>len</name> <operator>+</operator> <name>SYNID_CLUSTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"NoSpell"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_nospell_cluster_id</name></name> <operator>=</operator> <name>len</name> <operator>+</operator> <name>SYNID_CLUSTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>len</name> <operator>+</operator> <name>SYNID_CLUSTER</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_cluster</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>syncing</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>group_name_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scl_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>clstr_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_clstr</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opt_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>list_op</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>find_nextcmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>get_group_name</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>group_name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>scl_id</name> <operator>=</operator> <call><name>syn_check_cluster</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>group_name_end</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>scl_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>scl_id</name> <operator>-=</operator> <name>SYNID_CLUSTER</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><literal type="string">"add"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>rest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>rest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>opt_len</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>list_op</name> <operator>=</operator> <name>CLUSTER_ADD</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><literal type="string">"remove"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>rest</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>rest</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>opt_len</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>list_op</name> <operator>=</operator> <name>CLUSTER_SUBTRACT</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><literal type="string">"contains"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>rest</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>rest</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>opt_len</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>list_op</name> <operator>=</operator> <name>CLUSTER_REPLACE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

<expr_stmt><expr><name>clstr_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_id_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rest</name></expr></argument>, <argument><expr><name>opt_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clstr_list</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scl_id</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_combine_list</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>scl_id</name></expr>]</index><operator>.</operator><name>scl_list</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>clstr_list</name></expr></argument>, <argument><expr><name>list_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>clstr_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>got_clstr</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>got_clstr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_stack_free_all</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_clstr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E400: No cluster specified"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>rest</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_syn_patterns</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_itemsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>synpat_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_growsize</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>get_syn_pattern</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cpo_save</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>skip_regexp</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>arg</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <operator>*</operator><name>arg</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E401: Pattern delimiter not found: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>sp_pattern</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>arg</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cpo_save</name> <operator>=</operator> <name>p_cpo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>sp_prog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>sp_pattern</name></name></expr></argument>, <argument><expr><name>RE_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <name>cpo_save</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ci</name><operator>-&gt;</operator><name>sp_prog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>sp_ic</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_ic</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>syn_clear_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ci</name><operator>-&gt;</operator><name>sp_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>++</operator><name>end</name></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name>SPO_COUNT</name></expr>;</init> <condition><expr><operator>--</operator><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>spo_name_tab</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>SPO_LC_OFF</name></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><name><name>end</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> <break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> <expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>SPO_COUNT</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>sp_off_flags</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>idx</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>SPO_LC_OFF</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>end</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>sp_off_flags</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SPO_MS_OFF</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>sp_off_flags</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SPO_MS_OFF</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>sp_offsets</name><index>[<expr><name>SPO_MS_OFF</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>end</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>end</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>end</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>-</operator><call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>end</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E402: Garbage after pattern: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>skipwhite</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_cmd_sync</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>syncing</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_start</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>next_arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>illegal</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>finished</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cpo_save</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg_start</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>syn_cmd_list</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg_start</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>vim_strnsave_up</name><argument_list>(<argument><expr><name>arg_start</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg_end</name> <operator>-</operator> <name>arg_start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"CCOMMENT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_flags</name></name> <operator>|=</operator> <name>SF_CCOMMENT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>next_arg</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>next_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_id</name></name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><name>next_arg</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg_end</name> <operator>-</operator> <name>next_arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next_arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_id</name></name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Comment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"LINES"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"MINLINES"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"MAXLINES"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"LINEBREAKS"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <name>key</name> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <name>key</name> <operator>+</operator> <literal type="number">11</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <name>key</name> <operator>+</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg_end</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'='</literal> <operator>||</operator> <operator>!</operator><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>arg_end</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>illegal</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_linebreaks</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'A'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"FROMSTART"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_minlines</name></name> <operator>=</operator> <name>MAXLNUM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_sync_maxlines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"LINECONT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next_arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>illegal</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_pat</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E403: syntax sync: line continuations pattern specified twice"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>finished</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg_end</name> <operator>=</operator> <call><name>skip_regexp</name><argument_list>(<argument><expr><name>next_arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>next_arg</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg_end</name> <operator>!=</operator> <operator>*</operator><name>next_arg</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>illegal</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_pat</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>next_arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg_end</name> <operator>-</operator> <name>next_arg</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>finished</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_ic</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_ic</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cpo_save</name> <operator>=</operator> <name>p_cpo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_prog</name></name> <operator>=</operator>

<call><name>vim_regcomp</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_pat</name></name></expr></argument>, <argument><expr><name>RE_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <name>cpo_save</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>syn_clear_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_prog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_linecont_pat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>finished</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next_arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg_end</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>next_arg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"MATCH"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_cmd_match</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"REGION"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_cmd_region</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"CLEAR"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syn_cmd_clear</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>illegal</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>finished</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>arg_start</name> <operator>=</operator> <name>next_arg</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>illegal</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E404: Illegal arguments: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>finished</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>arg_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_stack_free_all</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_id_list</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, 

<parameter><decl><type><name>short</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>skip</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>failed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>round</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>round</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name> <operator>+</operator> <name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E405: Missing equal sign: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E406: Empty argument: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>end</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><operator>*</operator><name>end</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">','</literal></expr>;</condition> <incr><expr><operator>++</operator><name>end</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>end</name> <operator>-</operator> <name>p</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ALLBUT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"TOP"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"CONTAINED"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>TOUPPER_ASC</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'C'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E407: %s not allowed here"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E408: %s must be first in contains list"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'A'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name>SYNID_ALLBUT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'T'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name>SYNID_TOP</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name>SYNID_CONTAINED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>id</name> <operator>+=</operator> <name>current_syn_inc_tag</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>skip</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_check_cluster</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strpbrk</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\.*^$~["</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_check_group</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <literal type="char">'^'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>RE_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>highlight_num_groups</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><call><name>highlight_group_name</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>total_count</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>retval</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E409: Unknown group name: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>total_count</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>retval</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>failed</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>short</name></expr></argument>, <argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>retval</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>total_count</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>failed</name> <operator>||</operator> <name>retval</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name>retval</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>short</name> <modifier>*</modifier></type>

<name>copy_id_list</name><parameter_list>(<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>retval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>list</name><index>[<expr><name>count</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>count</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>in_id_list</name><parameter_list>(

<parameter><decl><type><name>stateitem_T</name> <modifier>*</modifier></type><name>cur_si</name></decl></parameter>, 

<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, 

<parameter><decl><type><name><name>struct</name> <name>sp_syn</name></name> <modifier>*</modifier></type><name>ssp</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>contained</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>scl_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>id</name> <init>= <expr><name><name>ssp</name><operator>-&gt;</operator><name>id</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_si</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ssp</name><operator>-&gt;</operator><name>cont_in_list</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_MATCH</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><name><name>cur_si</name><operator>-&gt;</operator><name>si_flags</name></name> <operator>&amp;</operator> <name>HL_TRANS_CONT</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>cur_si</name> <operator>&gt;</operator> <operator>(</operator><name>stateitem_T</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>current_state</name><operator>.</operator><name>ga_data</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>cur_si</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>in_id_list</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ssp</name><operator>-&gt;</operator><name>cont_in_list</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name></expr>]</index><operator>.</operator><name>sp_syn</name><operator>)</operator></expr></argument>,

<argument><expr><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name><name>cur_si</name><operator>-&gt;</operator><name>si_idx</name></name></expr>]</index><operator>.</operator><name>sp_flags</name> <operator>&amp;</operator> <name>HL_CONTAINED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>ID_LIST_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>!</operator><name>contained</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>*</operator><name>list</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&gt;=</operator> <name>SYNID_ALLBUT</name> <operator>&amp;&amp;</operator> <name>item</name> <operator>&lt;</operator> <name>SYNID_CLUSTER</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&lt;</operator> <name>SYNID_TOP</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>-</operator> <name>SYNID_ALLBUT</name> <operator>!=</operator> <name><name>ssp</name><operator>-&gt;</operator><name>inc_tag</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>item</name> <operator>&lt;</operator> <name>SYNID_CONTAINED</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>-</operator> <name>SYNID_TOP</name> <operator>!=</operator> <name><name>ssp</name><operator>-&gt;</operator><name>inc_tag</name></name> <operator>||</operator> <name>contained</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>-</operator> <name>SYNID_CONTAINED</name> <operator>!=</operator> <name><name>ssp</name><operator>-&gt;</operator><name>inc_tag</name></name> <operator>||</operator> <operator>!</operator><name>contained</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>list</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>item</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&gt;=</operator> <name>SYNID_CLUSTER</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>scl_list</name> <operator>=</operator> <call><name>SYN_CLSTR</name><argument_list>(<argument><expr><name>syn_block</name></expr></argument>)</argument_list></call><index>[<expr><name>item</name> <operator>-</operator> <name>SYNID_CLUSTER</name></expr>]</index><operator>.</operator><name>scl_list</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>scl_list</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>in_id_list</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>scl_list</name></expr></argument>, <argument><expr><name>ssp</name></expr></argument>, <argument><expr><name>contained</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>depth</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>list</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>!</operator><name>retval</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>subcommand</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl> 

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>subcommand</name></name></type> <name><name>subcommands</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"case"</literal></expr>, <expr><name>syn_cmd_case</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"clear"</literal></expr>, <expr><name>syn_cmd_clear</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cluster"</literal></expr>, <expr><name>syn_cmd_cluster</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"conceal"</literal></expr>, <expr><name>syn_cmd_conceal</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"enable"</literal></expr>, <expr><name>syn_cmd_enable</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"include"</literal></expr>, <expr><name>syn_cmd_include</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"iskeyword"</literal></expr>, <expr><name>syn_cmd_iskeyword</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"keyword"</literal></expr>, <expr><name>syn_cmd_keyword</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"list"</literal></expr>, <expr><name>syn_cmd_list</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"manual"</literal></expr>, <expr><name>syn_cmd_manual</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"match"</literal></expr>, <expr><name>syn_cmd_match</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"on"</literal></expr>, <expr><name>syn_cmd_on</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"off"</literal></expr>, <expr><name>syn_cmd_off</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"region"</literal></expr>, <expr><name>syn_cmd_region</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"reset"</literal></expr>, <expr><name>syn_cmd_reset</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"spell"</literal></expr>, <expr><name>syn_cmd_spell</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sync"</literal></expr>, <expr><name>syn_cmd_sync</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>syn_cmd_list</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>ex_syntax</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>subcmd_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>subcmd_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>syn_cmdlinep</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>cmdlinep</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>subcmd_end</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><operator>*</operator><name>subcmd_end</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>subcmd_end</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>subcmd_name</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>subcmd_end</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>subcmd_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>++</operator><name>emsg_skip</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>subcommands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E410: Invalid :syntax subcommand: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>subcmd_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>subcmd_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>subcommands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>subcmd_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name><name>subcommands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>func</name><operator>)</operator><operator>(</operator><name>eap</name><operator>,</operator> <name>FALSE</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>subcmd_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>emsg_skip</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_ownsyntax</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>old_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_s</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>synblock_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>synblock_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_keywtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_keywtab_ic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_spell</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>clear_string_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_isk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old_value</name> <operator>=</operator> <call><name>get_var_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"b:current_syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>old_value</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>old_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_SYNTAX</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_value</name> <operator>=</operator> <call><name>get_var_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"b:current_syntax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_internal_string_var</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"w:current_syntax"</literal></expr></argument>, <argument><expr><name>new_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_unlet</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"b:current_syntax"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>set_internal_string_var</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"b:current_syntax"</literal></expr></argument>, <argument><expr><name>old_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>old_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>syntax_present</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>win</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>win</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_clusters</name><operator>.</operator><name>ga_len</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>win</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_keywtab</name><operator>.</operator><name>ht_used</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>win</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_keywtab_ic</name><operator>.</operator><name>ht_used</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<enum><specifier>static</specifier> enum

<block>{

<decl><name>EXP_SUBCMD</name></decl>, 

<decl><name>EXP_CASE</name></decl>, 

<decl><name>EXP_SPELL</name></decl>, 

<decl><name>EXP_SYNC</name></decl> 

}</block> <decl><name>expand_what</name></decl>;</enum>

<function><type><name>void</name></type>

<name>reset_expand_highlight</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>include_link</name> <operator>=</operator> <name>include_default</name> <operator>=</operator> <name>include_none</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>set_context_in_echohl_cmd</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_HIGHLIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>include_none</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>set_context_in_syntax_cmd</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_SYNTAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name>expand_what</name> <operator>=</operator> <name>EXP_SUBCMD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>include_link</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>include_default</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>skiptowhite</name><argument_list>(<argument><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"case"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>expand_what</name> <operator>=</operator> <name>EXP_CASE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"spell"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>expand_what</name> <operator>=</operator> <name>EXP_SPELL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"sync"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>expand_what</name> <operator>=</operator> <name>EXP_SYNC</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"keyword"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"region"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"match"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_HIGHLIGHT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>get_syntax_name</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier><name>xp</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>expand_what</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>EXP_SUBCMD</name></expr>:</case>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>subcommands</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return>

<case>case <expr><name>EXP_CASE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>case_args</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"match"</literal></expr>, <expr><literal type="string">"ignore"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>case_args</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>EXP_SPELL</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>spell_args</name><index>[]</index></name> <init>=

<expr><block>{<expr><literal type="string">"toplevel"</literal></expr>, <expr><literal type="string">"notoplevel"</literal></expr>, <expr><literal type="string">"default"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>spell_args</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>EXP_SYNC</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>sync_args</name><index>[]</index></name> <init>=

<expr><block>{<expr><literal type="string">"ccomment"</literal></expr>, <expr><literal type="string">"clear"</literal></expr>, <expr><literal type="string">"fromstart"</literal></expr>,

<expr><literal type="string">"linebreaks="</literal></expr>, <expr><literal type="string">"linecont"</literal></expr>, <expr><literal type="string">"lines="</literal></expr>, <expr><literal type="string">"match"</literal></expr>,

<expr><literal type="string">"maxlines="</literal></expr>, <expr><literal type="string">"minlines="</literal></expr>, <expr><literal type="string">"region"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>sync_args</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>

</block_content>}</block>

</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>syn_get_id</name><parameter_list>(

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>trans</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>spellp</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>keep_state</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>!=</operator> <name>syn_buf</name>

<operator>||</operator> <name>lnum</name> <operator>!=</operator> <name>current_lnum</name>

<operator>||</operator> <name>col</name> <operator>&lt;</operator> <name>current_col</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syntax_start</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>syn_buf</name>

<operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name>current_lnum</name>

<operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;</operator> <name>current_col</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next_match_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>get_syntax_attr</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name>spellp</name></expr></argument>, <argument><expr><name>keep_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>trans</name></expr> ?</condition><then> <expr><name>current_trans_id</name></expr> </then><else>: <expr><name>current_id</name></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>get_syntax_info</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>seqnrp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>seqnrp</name> <operator>=</operator> <name>current_seqnr</name></expr>;</expr_stmt>

<return>return <expr><name>current_flags</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>syn_get_sub_char</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>current_sub_char</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>syn_get_stack_item</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>invalidate_current_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_col</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_id</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>syn_get_foldlevel</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_folditems</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_error</name></name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYN_TIME_LIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_slow</name></name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>syntax_start</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current_state</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>CUR_STATE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>si_flags</name> <operator>&amp;</operator> <name>HL_FOLD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>level</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fdn</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fdn</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>level</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>ex_syntime</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>syn_time_on</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>syn_time_on</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"clear"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syntime_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"report"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syntime_report</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syn_clear_time</name><parameter_list>(<parameter><decl><type><name>syn_time_T</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>profile_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>slowest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>match</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syntime_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syntax_present</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>msg_no_items</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>syn_clear_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>get_syntime_arg</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier><name>xp</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>idx</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"on"</literal></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"off"</literal></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"clear"</literal></expr>;</return>

<case>case <expr><literal type="number">3</literal></expr>:</case> <return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"report"</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>proftime_T</name></type> <name>total</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>slowest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>average</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>

}</block></struct></type> <name>time_entry_T</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>syn_compare_syntime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>time_entry_T</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><name>v1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>time_entry_T</name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><name>v2</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>profile_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>total</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s2</name><operator>-&gt;</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>syntime_report</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>synpat_T</name> <modifier>*</modifier></type><name>spp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>proftime_T</name></type> <name>tm</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>total_total</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_entry_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syntax_present</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>msg_no_items</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>time_entry_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>total_total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_patterns</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>spp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>SYN_ITEMS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spp</name><operator>-&gt;</operator><name>sp_time</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>time_entry_T</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_time</name><operator>.</operator><name>total</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>total_total</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_time</name><operator>.</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_time</name><operator>.</operator><name>count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>match</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_time</name><operator>.</operator><name>match</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>total_count</name> <operator>+=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_time</name><operator>.</operator><name>count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>slowest</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_time</name><operator>.</operator><name>slowest</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>profile_divide</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spp</name><operator>-&gt;</operator><name>sp_time</name><operator>.</operator><name>total</name></name></expr></argument>, <argument><expr><name><name>spp</name><operator>-&gt;</operator><name>sp_time</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>average</name></name> <operator>=</operator> <name>tm</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_syn</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pattern</name></name> <operator>=</operator> <name><name>spp</name><operator>-&gt;</operator><name>sp_pattern</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>time_entry_T</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>syn_compare_syntime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_puts_title</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" TOTAL COUNT MATCH SLOWEST AVERAGE NAME PATTERN"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>time_entry_T</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>total</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>match</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>slowest</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>average</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><call><name>highlight_group_name</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>id</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><literal type="number">69</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Columns</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">70</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_outtrans_len</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>total_total</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_advance</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><name>total_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
