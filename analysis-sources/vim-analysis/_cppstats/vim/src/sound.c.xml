<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\sound.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SOUND</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>sound_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name><name>struct</name> <name>soundcb_S</name></name></type> <name>soundcb_T</name>;</typedef>

<struct>struct <name>soundcb_S</name> <block>{

<decl_stmt><decl><type><name>callback_T</name></type> <name>snd_callback</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>MCIDEVICEID</name></type> <name>snd_device_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>snd_id</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>soundcb_T</name> <modifier>*</modifier></type><name>snd_next</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>soundcb_T</name> <modifier>*</modifier></type><name>first_callback</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>

<name>has_any_sound_callback</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>first_callback</name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>soundcb_T</name> <modifier>*</modifier></type>

<name>get_sound_callback</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>callback_T</name></type> <name>callback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>soundcb_T</name> <modifier>*</modifier></type><name>soundcb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>callback</name> <operator>=</operator> <call><name>get_callback</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>callback</name><operator>.</operator><name>cb_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>soundcb</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>soundcb_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>soundcb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>soundcb</name><operator>-&gt;</operator><name>snd_next</name></name> <operator>=</operator> <name>first_callback</name></expr>;</expr_stmt>

<expr_stmt><expr><name>first_callback</name> <operator>=</operator> <name>soundcb</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>soundcb</name><operator>-&gt;</operator><name>snd_callback</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>soundcb</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>delete_sound_callback</name><parameter_list>(<parameter><decl><type><name>soundcb_T</name> <modifier>*</modifier></type><name>soundcb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>soundcb_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>soundcb_T</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>first_callback</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>prev</name> <operator>=</operator> <name>p</name></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>snd_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>soundcb</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>first_callback</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>snd_next</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>snd_next</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>snd_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>snd_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CANBERRA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;canberra.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>ca_context</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name><name>struct</name> <name>soundcb_queue_S</name></name></type> <name>soundcb_queue_T</name>;</typedef>

<struct>struct <name>soundcb_queue_S</name> <block>{

<decl_stmt><decl><type><name>soundcb_queue_T</name> <modifier>*</modifier></type><name>scb_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>scb_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>scb_result</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>soundcb_T</name> <modifier>*</modifier></type><name>scb_callback</name></decl>;</decl_stmt> 

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>soundcb_queue_T</name> <modifier>*</modifier></type><name>callback_queue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>sound_callback</name><parameter_list>(

<parameter><decl><type><name>ca_context</name> <modifier>*</modifier><name>c</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>id</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>error_code</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>soundcb_T</name> <modifier>*</modifier></type><name>soundcb</name> <init>= <expr><operator>(</operator><name>soundcb_T</name> <operator>*</operator><operator>)</operator><name>userdata</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>soundcb_queue_T</name> <modifier>*</modifier></type><name>scb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>scb</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>soundcb_queue_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>scb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>scb</name><operator>-&gt;</operator><name>scb_next</name></name> <operator>=</operator> <name>callback_queue</name></expr>;</expr_stmt>

<expr_stmt><expr><name>callback_queue</name> <operator>=</operator> <name>scb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scb</name><operator>-&gt;</operator><name>scb_id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scb</name><operator>-&gt;</operator><name>scb_result</name></name> <operator>=</operator> <ternary><condition><expr><name>error_code</name> <operator>==</operator> <name>CA_SUCCESS</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr>

</then><else>: <expr><ternary><condition><expr><name>error_code</name> <operator>==</operator> <name>CA_ERROR_CANCELED</name>

<operator>||</operator> <name>error_code</name> <operator>==</operator> <name>CA_ERROR_DESTROYED</name></expr>

?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scb</name><operator>-&gt;</operator><name>scb_callback</name></name> <operator>=</operator> <name>soundcb</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>has_sound_callback_in_queue</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>callback_queue</name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>invoke_sound_callback</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>soundcb_queue_T</name> <modifier>*</modifier></type><name>scb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>callback_queue</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>scb</name> <operator>=</operator> <name>callback_queue</name></expr>;</expr_stmt>

<expr_stmt><expr><name>callback_queue</name> <operator>=</operator> <name><name>scb</name><operator>-&gt;</operator><name>scb_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>scb</name><operator>-&gt;</operator><name>scb_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>scb</name><operator>-&gt;</operator><name>scb_result</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scb</name><operator>-&gt;</operator><name>scb_callback</name><operator>-&gt;</operator><name>snd_callback</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delete_sound_callback</name><argument_list>(<argument><expr><name><name>scb</name><operator>-&gt;</operator><name>scb_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>scb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>redraw_after_callback</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>sound_play_common</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>playfile</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>context</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ca_context_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>context</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>soundcb_T</name> <modifier>*</modifier></type><name>soundcb</name> <init>= <expr><call><name>get_sound_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>CA_ERROR_INVALID</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>sound_id</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>soundcb</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ca_context_play</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>sound_id</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>playfile</name></expr> ?</condition><then> <expr><name>CA_PROP_MEDIA_FILENAME</name></expr> </then><else>: <expr><name>CA_PROP_EVENT_ID</name></expr></else></ternary></expr></argument>,

<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>CA_PROP_CANBERRA_CACHE_CONTROL</name></expr></argument>, <argument><expr><literal type="string">"volatile"</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>ca_proplist</name> <modifier>*</modifier></type><name>proplist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ca_proplist_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>proplist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>playfile</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ca_proplist_sets</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>, <argument><expr><name>CA_PROP_MEDIA_FILENAME</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ca_proplist_sets</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>, <argument><expr><name>CA_PROP_EVENT_ID</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ca_proplist_sets</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>, <argument><expr><name>CA_PROP_CANBERRA_CACHE_CONTROL</name></expr></argument>,

<argument><expr><literal type="string">"volatile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ca_context_play_full</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>sound_id</name></expr></argument>, <argument><expr><name>proplist</name></expr></argument>,

<argument><expr><name>sound_callback</name></expr></argument>, <argument><expr><name>soundcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>CA_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>delete_sound_callback</name><argument_list>(<argument><expr><name>soundcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ca_proplist_destroy</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <ternary><condition><expr><name>res</name> <operator>==</operator> <name>CA_SUCCESS</name></expr> ?</condition><then> <expr><name>sound_id</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_sound_playevent</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sound_play_common</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_sound_playfile</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sound_play_common</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_sound_stop</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>context</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ca_context_cancel</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_sound_clear</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>context</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ca_context_destroy</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>context</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>sound_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>soundcb_queue_T</name> <modifier>*</modifier></type><name>scb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>context</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ca_context_destroy</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>first_callback</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>delete_sound_callback</name><argument_list>(<argument><expr><name>first_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name>callback_queue</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>scb</name> <operator>=</operator> <name>callback_queue</name></expr>;</expr_stmt>

<expr_stmt><expr><name>callback_queue</name> <operator>=</operator> <name><name>scb</name><operator>-&gt;</operator><name>scb_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delete_sound_callback</name><argument_list>(<argument><expr><name><name>scb</name><operator>-&gt;</operator><name>scb_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>scb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><specifier>static</specifier> <name>HWND</name></type> <name>g_hWndSound</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type>

<name>sound_wndproc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>soundcb_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>message</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>MM_MCINOTIFY</name></expr>:</case>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>first_callback</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>snd_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>snd_device_id</name></name> <operator>==</operator> <operator>(</operator><name>MCIDEVICEID</name><operator>)</operator> <name>lParam</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"close sound%06ld"</literal></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>snd_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mciSendString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>snd_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator>

<ternary><condition><expr><name>wParam</name> <operator>==</operator> <name>MCI_NOTIFY_SUCCESSFUL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr>

</then><else>: <expr><ternary><condition><expr><name>wParam</name> <operator>==</operator> <name>MCI_NOTIFY_ABORTED</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>snd_callback</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delete_sound_callback</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_after_callback</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HWND</name></type>

<name>sound_window</name><parameter_list>()</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>g_hWndSound</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>LPCSTR</name></type> <name>clazz</name> <init>= <expr><literal type="string">"VimSound"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WNDCLASS</name></type> <name>wndclass</name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><name>sound_wndproc</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>g_hinst</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>clazz</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RegisterClass</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wndclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g_hWndSound</name> <operator>=</operator> <call><name>CreateWindow</name><argument_list>(<argument><expr><name>clazz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>HWND_MESSAGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>g_hinst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>g_hWndSound</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_sound_playevent</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PlaySoundW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SND_ASYNC</name> <operator>|</operator> <name>SND_ALIAS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>++</operator><name>sound_id</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_sound_playfile</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>newid</name> <init>= <expr><name>sound_id</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>esc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>soundcb_T</name> <modifier>*</modifier></type><name>soundcb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MCIERROR</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>esc</name> <operator>=</operator> <call><name>vim_strsave_shellescape</name><argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>esc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">18</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"open %s alias sound%06ld"</literal></expr></argument>, <argument><expr><name>esc</name></expr></argument>, <argument><expr><name>newid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>enc_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mciSendStringW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>sound_window</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"play sound%06ld notify"</literal></expr></argument>, <argument><expr><name>newid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mciSendString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>sound_window</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failure</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sound_id</name> <operator>=</operator> <name>newid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>sound_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name>soundcb</name> <operator>=</operator> <call><name>get_sound_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>soundcb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"sound%06ld"</literal></expr></argument>, <argument><expr><name>newid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>soundcb</name><operator>-&gt;</operator><name>snd_id</name></name> <operator>=</operator> <name>newid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>soundcb</name><operator>-&gt;</operator><name>snd_device_id</name></name> <operator>=</operator> <call><name>mciGetDeviceID</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

<label><name>failure</name>:</label>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"close sound%06ld"</literal></expr></argument>, <argument><expr><name>newid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mciSendString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_sound_stop</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>id</name> <init>= <expr><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"stop sound%06ld"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mciSendString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_sound_clear</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>PlaySoundW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mciSendString</name><argument_list>(<argument><expr><literal type="string">"close all"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>sound_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>(<argument><expr><name>g_hWndSound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>first_callback</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>delete_sound_callback</name><argument_list>(<argument><expr><name>first_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
