<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\crypt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>magic</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>salt_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>seed_len</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPT_NOT_INPLACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>works_inplace</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>whole_undofile</name></decl>;</decl_stmt> 

<function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>self_test_fn</name>)<parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>init_fn</name>)<parameter_list>(<parameter><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>salt_len</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seed_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>encode_fn</name>)<parameter_list>(<parameter><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>decode_fn</name>)<parameter_list>(<parameter><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name></type> (<modifier>*</modifier><name>encode_buffer_fn</name>)<parameter_list>(<parameter><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>newptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name></type> (<modifier>*</modifier><name>decode_buffer_fn</name>)<parameter_list>(<parameter><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>newptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>encode_inplace_fn</name>)<parameter_list>(<parameter><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>decode_inplace_fn</name>)<parameter_list>(<parameter><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>cryptmethod_T</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>cryptmethod_T</name></type> <name><name>cryptmethods</name><index>[<expr><name>CRYPT_M_COUNT</name></expr>]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><literal type="string">"zip"</literal></expr>,

<expr><literal type="string">"VimCrypt~01!"</literal></expr>,

<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPT_NOT_INPLACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>TRUE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>FALSE</name></expr>,

<expr><name>NULL</name></expr>,

<expr><name>crypt_zip_init</name></expr>,

<expr><name>crypt_zip_encode</name></expr>, <expr><name>crypt_zip_decode</name></expr>,

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,

<expr><name>crypt_zip_encode</name></expr>, <expr><name>crypt_zip_decode</name></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="string">"blowfish"</literal></expr>,

<expr><literal type="string">"VimCrypt~02!"</literal></expr>,

<expr><literal type="number">8</literal></expr>,

<expr><literal type="number">8</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPT_NOT_INPLACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>TRUE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>FALSE</name></expr>,

<expr><name>blowfish_self_test</name></expr>,

<expr><name>crypt_blowfish_init</name></expr>,

<expr><name>crypt_blowfish_encode</name></expr>, <expr><name>crypt_blowfish_decode</name></expr>,

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,

<expr><name>crypt_blowfish_encode</name></expr>, <expr><name>crypt_blowfish_decode</name></expr>,

}</block></expr>,

<expr><block>{

<expr><literal type="string">"blowfish2"</literal></expr>,

<expr><literal type="string">"VimCrypt~03!"</literal></expr>,

<expr><literal type="number">8</literal></expr>,

<expr><literal type="number">8</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPT_NOT_INPLACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>TRUE</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>TRUE</name></expr>,

<expr><name>blowfish_self_test</name></expr>,

<expr><name>crypt_blowfish_init</name></expr>,

<expr><name>crypt_blowfish_encode</name></expr>, <expr><name>crypt_blowfish_decode</name></expr>,

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,

<expr><name>crypt_blowfish_encode</name></expr>, <expr><name>crypt_blowfish_decode</name></expr>,

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYPT_MAGIC_LEN</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>crypt_magic_head</name><index>[]</index></name> <init>= <expr><literal type="string">"VimCrypt~"</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>

<name>crypt_method_nr_from_name</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CRYPT_M_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>cryptmethods</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>crypt_method_nr_from_magic</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>CRYPT_MAGIC_LEN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CRYPT_M_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>cryptmethods</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>magic</name></expr></argument>, <argument><expr><name>CRYPT_MAGIC_LEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>crypt_magic_head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>i</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>crypt_magic_head</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E821: File is encrypted with unknown method"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPT_NOT_INPLACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>

<name>crypt_works_inplace</name><parameter_list>(<parameter><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>cryptmethods</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>method_nr</name></name></expr>]</index></name><operator>.</operator><name>works_inplace</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>crypt_get_method_nr</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>crypt_method_nr_from_name</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_cm</name></name> <operator>==</operator> <name>NUL</name></expr> ?</condition><then> <expr><name>p_cm</name></expr> </then><else>: <expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cm</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>crypt_whole_undofile</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>method_nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>cryptmethods</name><index>[<expr><name>method_nr</name></expr>]</index></name><operator>.</operator><name>whole_undofile</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>crypt_get_header_len</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>method_nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>CRYPT_MAGIC_LEN</name>

<operator>+</operator> <name><name>cryptmethods</name><index>[<expr><name>method_nr</name></expr>]</index></name><operator>.</operator><name>salt_len</name>

<operator>+</operator> <name><name>cryptmethods</name><index>[<expr><name>method_nr</name></expr>]</index></name><operator>.</operator><name>seed_len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>crypt_set_cm_option</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>method_nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cm</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>cryptmethods</name><index>[<expr><name>method_nr</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>crypt_self_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>method_nr</name> <init>= <expr><call><name>crypt_get_method_nr</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cryptmethods</name><index>[<expr><name>method_nr</name></expr>]</index></name><operator>.</operator><name>self_test_fn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>cryptmethods</name><index>[<expr><name>method_nr</name></expr>]</index></name><operator>.</operator><call><name>self_test_fn</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>cryptstate_T</name> <modifier>*</modifier></type>

<name>crypt_create</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>method_nr</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>salt_len</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>seed_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>cryptstate_T</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>state</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>method_nr</name></name> <operator>=</operator> <name>method_nr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cryptmethods</name><index>[<expr><name>method_nr</name></expr>]</index></name><operator>.</operator><call><name>init_fn</name><argument_list>(

<argument><expr><name>state</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>seed_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>state</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>cryptstate_T</name> <modifier>*</modifier></type>

<name>crypt_create_from_header</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>method_nr</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>salt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>seed</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>salt_len</name> <init>= <expr><name><name>cryptmethods</name><index>[<expr><name>method_nr</name></expr>]</index></name><operator>.</operator><name>salt_len</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seed_len</name> <init>= <expr><name><name>cryptmethods</name><index>[<expr><name>method_nr</name></expr>]</index></name><operator>.</operator><name>seed_len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>salt_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>salt</name> <operator>=</operator> <name>header</name> <operator>+</operator> <name>CRYPT_MAGIC_LEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>seed_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>seed</name> <operator>=</operator> <name>header</name> <operator>+</operator> <name>CRYPT_MAGIC_LEN</name> <operator>+</operator> <name>salt_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>crypt_create</name><argument_list>(<argument><expr><name>method_nr</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>seed_len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>cryptstate_T</name> <modifier>*</modifier></type>

<name>crypt_create_from_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>method_nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>header_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>magic_buffer</name><index>[<expr><name>CRYPT_MAGIC_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>magic_buffer</name></expr></argument>, <argument><expr><name>CRYPT_MAGIC_LEN</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>method_nr</name> <operator>=</operator> <call><name>crypt_method_nr_from_magic</name><argument_list>(<argument><expr><name>magic_buffer</name></expr></argument>, <argument><expr><name>CRYPT_MAGIC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>method_nr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>header_len</name> <operator>=</operator> <call><name>crypt_get_header_len</name><argument_list>(<argument><expr><name>method_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buffer</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>header_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>magic_buffer</name></expr></argument>, <argument><expr><name>CRYPT_MAGIC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>header_len</name> <operator>&gt;</operator> <name>CRYPT_MAGIC_LEN</name>

<operator>&amp;&amp;</operator> <call><name>fread</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>CRYPT_MAGIC_LEN</name></expr></argument>,

<argument><expr><name>header_len</name> <operator>-</operator> <name>CRYPT_MAGIC_LEN</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>crypt_create_from_header</name><argument_list>(<argument><expr><name>method_nr</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>state</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>cryptstate_T</name> <modifier>*</modifier></type>

<name>crypt_create_for_writing</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>method_nr</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>header</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>header_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>crypt_get_header_len</name><argument_list>(<argument><expr><name>method_nr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>salt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>seed</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>salt_len</name> <init>= <expr><name><name>cryptmethods</name><index>[<expr><name>method_nr</name></expr>]</index></name><operator>.</operator><name>salt_len</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seed_len</name> <init>= <expr><name><name>cryptmethods</name><index>[<expr><name>method_nr</name></expr>]</index></name><operator>.</operator><name>seed_len</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>header_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>header</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>header</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>*</operator><name>header</name></expr></argument>, <argument><expr><name><name>cryptmethods</name><index>[<expr><name>method_nr</name></expr>]</index></name><operator>.</operator><name>magic</name></expr></argument>, <argument><expr><name>CRYPT_MAGIC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>salt_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>seed_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>salt_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>salt</name> <operator>=</operator> <operator>*</operator><name>header</name> <operator>+</operator> <name>CRYPT_MAGIC_LEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>seed_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>seed</name> <operator>=</operator> <operator>*</operator><name>header</name> <operator>+</operator> <name>CRYPT_MAGIC_LEN</name> <operator>+</operator> <name>salt_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sha2_seed</name><argument_list>(<argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>seed_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>crypt_create</name><argument_list>(<argument><expr><name>method_nr</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>seed_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><operator>*</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>state</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>crypt_free_state</name><parameter_list>(<parameter><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>method_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRYPT_NOT_INPLACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>long</name></type>

<name>crypt_encode_alloc</name><parameter_list>(

<parameter><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>newptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cryptmethod_T</name> <modifier>*</modifier></type><name>method</name> <init>= <expr><operator>&amp;</operator><name><name>cryptmethods</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>method_nr</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>method</name><operator>-&gt;</operator><name>encode_buffer_fn</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>method</name><operator>-&gt;</operator><name>encode_buffer_fn</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>newptr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>long</name><operator>)</operator><name>len</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>newptr</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>newptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>method</name><operator>-&gt;</operator><name>encode_fn</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>*</operator><name>newptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>long</name><operator>)</operator><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name></type>

<name>crypt_decode_alloc</name><parameter_list>(

<parameter><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>newptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cryptmethod_T</name> <modifier>*</modifier></type><name>method</name> <init>= <expr><operator>&amp;</operator><name><name>cryptmethods</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>method_nr</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>method</name><operator>-&gt;</operator><name>decode_buffer_fn</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>method</name><operator>-&gt;</operator><name>decode_buffer_fn</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>newptr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>newptr</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>newptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>method</name><operator>-&gt;</operator><name>decode_fn</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>*</operator><name>newptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>crypt_encode</name><parameter_list>(

<parameter><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cryptmethods</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>method_nr</name></name></expr>]</index></name><operator>.</operator><call><name>encode_fn</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

void

crypt_decode(

cryptstate_T *state,

char_u *from,

size_t len,

char_u *to)

{

cryptmethods[state-&gt;method_nr].decode_fn(state, from, len, to);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>crypt_encode_inplace</name><parameter_list>(

<parameter><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cryptmethods</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>method_nr</name></name></expr>]</index></name><operator>.</operator><call><name>encode_inplace_fn</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>crypt_decode_inplace</name><parameter_list>(

<parameter><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cryptmethods</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>method_nr</name></name></expr>]</index></name><operator>.</operator><call><name>decode_inplace_fn</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>crypt_free_key</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>key</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>crypt_check_method</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>method</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>method</name> <operator>&lt;</operator> <name>CRYPT_M_BF2</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Warning: Using a weak encryption method; see :help 'cm'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>crypt_check_current_method</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>crypt_check_method</name><argument_list>(<argument><expr><call><name>crypt_get_method_nr</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>crypt_get_key</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>store</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>twice</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><operator>++</operator><name>round</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>cmdline_star</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>getcmdline_prompt</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>, <argument><expr><ternary><condition><expr><name>round</name> <operator>==</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Enter encryption key: "</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Enter same key again: "</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EXPAND_NOTHING</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmdline_star</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <name>twice</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p2</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Keys don't match!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>crypt_free_key</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>crypt_free_key</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>round</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>store</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"key"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>crypt_free_key</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_key</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>msg_didout</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>crypt_free_key</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p1</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>crypt_append_msg</name><parameter_list>(

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>crypt_get_method_nr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"[crypted]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_cm</name></name> <operator>==</operator> <name>NUL</name></expr> ?</condition><then> <expr><name>p_cm</name></expr> </then><else>: <expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cm</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
