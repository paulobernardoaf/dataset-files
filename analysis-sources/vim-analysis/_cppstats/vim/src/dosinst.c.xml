<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\dosinst.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOSINST</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dosinst.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GVIMEXT64_PATH</name></cpp:macro> <cpp:value>"GvimExt64\\gvimext.dll"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GVIMEXT32_PATH</name></cpp:macro> <cpp:value>"GvimExt32\\gvimext.dll"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_REG_ERROR</name><parameter_list>(<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (code != ERROR_SUCCESS) { printf("%ld error number: %ld\n", (long)__LINE__, (long)code); return 1; } } while (0)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>has_vim</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>has_gvim</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>oldvimrc</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>vimrc</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>default_bat_dir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>default_vim_dir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<struct>struct <name>choice</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>active</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt> 

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>changefunc</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl> 

<decl_stmt><decl><type><name>int</name></type> <name>arg</name></decl>;</decl_stmt> 

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>installfunc</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl> 

}</block>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>choice</name></name></type> <name><name>choices</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>choice_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TABLE_SIZE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(sizeof(s) / sizeof(*s))</cpp:value></cpp:define>

<enum>enum

<block>{

<decl><name>compat_vi</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>compat_vim</name></decl>,

<decl><name>compat_some_enhancements</name></decl>,

<decl><name>compat_all_enhancements</name></decl>

}</block>;</enum>

<expr_stmt><expr><call><name>char</name> <argument_list>*<argument><expr><operator>(</operator><name><name>compat_choices</name><index>[]</index></name><operator>)</operator> <operator>=</operator>

<block>{

<expr><literal type="string">"\nChoose the default way to run Vim:"</literal></expr>,

<expr><literal type="string">"Vi compatible"</literal></expr>,

<expr><literal type="string">"Vim default"</literal></expr>,

<expr><literal type="string">"with some Vim enhancements"</literal></expr>,

<expr><literal type="string">"with syntax highlighting and other features switched on"</literal></expr>,

}</block></expr></argument>;

<argument><expr><name>int</name> <name>compat_choice</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>compat_all_enhancements</name></expr></argument>;

<argument><expr><name>char</name> <operator>*</operator><name>compat_text</name> <operator>=</operator> <literal type="string">"- run Vim %s"</literal></expr></argument>;

<argument><expr>enum

<block>{

<expr><name>remap_no</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><name>remap_win</name></expr>

}</block></expr></argument>;

<argument><expr><name>char</name> <operator>*</operator><operator>(</operator><name><name>remap_choices</name><index>[]</index></name><operator>)</operator> <operator>=</operator>

<block>{

<expr><literal type="string">"\nChoose:"</literal></expr>,

<expr><literal type="string">"Do not remap keys for Windows behavior"</literal></expr>,

<expr><literal type="string">"Remap a few keys for Windows behavior (CTRL-V, CTRL-C, CTRL-F, etc)"</literal></expr>,

}</block></expr></argument>;

<argument><expr><name>int</name> <name>remap_choice</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>remap_no</name></expr></argument>;

<argument><expr><name>char</name> <operator>*</operator><name>remap_text</name> <operator>=</operator> <literal type="string">"- %s"</literal></expr></argument>;

<argument><expr>enum

<block>{

<expr><name>mouse_xterm</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><name>mouse_mswin</name></expr>,

<expr><name>mouse_default</name></expr>

}</block></expr></argument>;

<argument><expr><name>char</name> <operator>*</operator><operator>(</operator><name><name>mouse_choices</name><index>[]</index></name><operator>)</operator> <operator>=</operator>

<block>{

<expr><literal type="string">"\nChoose the way how Vim uses the mouse:"</literal></expr>,

<expr><literal type="string">"right button extends selection (the Unix way)"</literal></expr>,

<expr><literal type="string">"right button has a popup menu, left button starts select mode (the Windows way)"</literal></expr>,

<expr><literal type="string">"right button has a popup menu, left button starts visual mode"</literal></expr>,

}</block></expr></argument>;

<argument><expr><name>int</name> <name>mouse_choice</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>mouse_default</name></expr></argument>;

<argument><expr><name>char</name> <operator>*</operator><name>mouse_text</name> <operator>=</operator> <literal type="string">"- The mouse %s"</literal></expr></argument>;

<argument><expr>enum

<block>{

<expr><name>vimfiles_dir_none</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><name>vimfiles_dir_vim</name></expr>,

<expr><name>vimfiles_dir_home</name></expr>

}</block></expr></argument>;

<argument><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>vimfiles_dir_choices</name><index>[]</index></name><operator>)</operator> <operator>=</operator>

<block>{

<expr><literal type="string">"\nCreate plugin directories:"</literal></expr>,

<expr><literal type="string">"No"</literal></expr>,

<expr><literal type="string">"In the VIM directory"</literal></expr>,

<expr><literal type="string">"In your HOME directory"</literal></expr>,

}</block></expr></argument>;

<argument><expr><specifier>static</specifier> <name>int</name> <name>install_popup</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>;

<argument><expr><specifier>static</specifier> <name>int</name> <name>install_openwith</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>;

<argument><expr><specifier>static</specifier> <name>int</name> <name>need_uninstall_entry</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>;

<argument><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>vimfiles_subdirs</name><index>[]</index></name><operator>)</operator> <operator>=</operator>

<block>{

<expr><literal type="string">"colors"</literal></expr>,

<expr><literal type="string">"compiler"</literal></expr>,

<expr><literal type="string">"doc"</literal></expr>,

<expr><literal type="string">"ftdetect"</literal></expr>,

<expr><literal type="string">"ftplugin"</literal></expr>,

<expr><literal type="string">"indent"</literal></expr>,

<expr><literal type="string">"keymap"</literal></expr>,

<expr><literal type="string">"plugin"</literal></expr>,

<expr><literal type="string">"syntax"</literal></expr>,

}</block></expr></argument>;

<argument><expr><specifier>static</specifier> <name>int</name>

<macro><name>get_choice</name><argument_list>(<argument>char **table</argument>, <argument>int entries</argument>)</argument_list></macro>

<block>{

<expr><name>int</name> <name>answer</name></expr>;

<expr><name>int</name> <name>idx</name></expr>;

<expr><name>char</name> <name><name>dummy</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></expr>;

<do>do

<block>{<block_content>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>entries</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%2d "</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name><name>table</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt/>}</block_content>

printf("Choice: "</block></for>)</block_content></block><empty_stmt>;</empty_stmt>

if (scanf("%d"<operator>,</operator> &amp;answer</do>) <operator>!=</operator> <literal type="number">1</literal></block></expr></argument>)</argument_list></call>

<block>{

<expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%99s"</literal></expr></argument>, <argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;

<expr><name>answer</name> <operator>=</operator> <literal type="number">0</literal></expr>;

}</block></expr></expr_stmt>

}

while <expr_stmt><expr><operator>(</operator><name>answer</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>answer</name> <operator>&gt;=</operator> <name>entries</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>answer</name></expr>;</return>

}

static <function><type><name>void</name></type>

<name>check_unpack</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><name>runtimeidx</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>installdir</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>VIM_VERSION_NODOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>runtimeidx</name> <operator>&lt;=</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>stricmp</name><argument_list>(<argument><expr><name>installdir</name> <operator>+</operator> <name>runtimeidx</name></expr></argument>, <argument><expr><name>VIM_VERSION_NODOT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><name><name>installdir</name><index>[<expr><name>runtimeidx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal>

<operator>&amp;&amp;</operator> <name><name>installdir</name><index>[<expr><name>runtimeidx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: Install program not in directory \"%s\"\n"</literal></expr></argument>,

<argument><expr><name>VIM_VERSION_NODOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"This program can only work when it is located in its original directory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>myexit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s\\filetype.vim"</literal></expr></argument>, <argument><expr><name>installdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: Cannot find filetype.vim in \"%s\"\n"</literal></expr></argument>, <argument><expr><name>installdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"It looks like you did not unpack the runtime archive.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"You must unpack the runtime archive \"vim%srt.zip\" before installing.\n"</literal></expr></argument>,

<argument><expr><name>VIM_VERSION_NODOT</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>myexit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"gvim.exe"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>has_gvim</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"vim.exe"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>has_vim</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_gvim</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>has_vim</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: Cannot find any Vim executables in \"%s\"\n\n"</literal></expr></argument>,

<argument><expr><name>installdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>myexit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>pathcmp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>plen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>qlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>qlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>plen</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>qlen</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>qlen</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <name><name>q</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>qlen</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>plen</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>plen</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>mytoupper</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>mytoupper</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>q</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>findoldfile</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>destination</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><operator>*</operator><name>destination</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>indir_l</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>installdir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>farname</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strnicmp</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>installdir</name></expr></argument>, <argument><expr><name>indir_l</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>bp</name> <operator>+</operator> <name>indir_l</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"/\\"</literal></expr></argument>, <argument><expr><operator>*</operator><name>cp</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmpname</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmpname</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpname</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>tmpname</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name>tmpname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nERROR: %s and %s clash. Remove or rename %s.\n"</literal></expr></argument>,

<argument><expr><name>tmpname</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>tmpname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>myexit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>tmpname</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nERROR: failed to rename %s to %s: %s\n"</literal></expr></argument>,

<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>tmpname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>myexit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>farname</name> <operator>=</operator> <call><name>searchpath_save</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name>tmpname</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nERROR: failed to rename %s back to %s: %s\n"</literal></expr></argument>,

<argument><expr><name>tmpname</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>myexit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmpname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>destination</name> <operator>=</operator> <name>farname</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>find_bat_exe</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>check_bat_only</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mch_chdir</name><argument_list>(<argument><expr><name>sysdrive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_chdir</name><argument_list>(<argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TARGET_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oldbat</name> <operator>=</operator> <call><name>searchpath_save</name><argument_list>(<argument><expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>batname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>check_bat_only</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oldexe</name> <operator>=</operator> <call><name>searchpath_save</name><argument_list>(<argument><expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>default_bat_dir</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oldbat</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>default_bat_dir</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oldbat</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>default_bat_dir</name></expr></argument>, <argument><expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oldbat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_tail</name><argument_list>(<argument><expr><name>default_bat_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>check_bat_only</name> <operator>&amp;&amp;</operator> <name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oldbat</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oldbat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oldbat</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>mch_chdir</name><argument_list>(<argument><expr><name>installdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>get_vim_env</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vim</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>fname</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>vim</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"VIMRUNTIME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vim</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>vim</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>vim</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>vim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_tail</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vim</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>vim</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"VIM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vim</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>vim</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>default_vim_dir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vim</name> <operator>=</operator> <name>default_vim_dir</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>vim</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>GetTempPath</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"vimini.ini"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"[vimini]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"dir=\"%s\"\n"</literal></expr></argument>, <argument><expr><name>vim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Failed to open %s\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>num_windows</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>CALLBACK</name></type>

<name>window_cb</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lparam</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>title</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>title</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetWindowText</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="string">"Vim "</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><literal type="string">" Uninstall"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>num_windows</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>run_silent_uninstall</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>uninst_exe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>vimrt_dir</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>temp_uninst</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>temp_dir</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUFSIZE</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>tick</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>vimrt_dir</name></expr></argument>, <argument><expr><name>uninst_exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_tail</name><argument_list>(<argument><expr><name>vimrt_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetTempPath</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp_dir</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>temp_dir</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tick</name> <operator>=</operator> <call><name>GetTickCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp_uninst</name></expr></argument>, <argument><expr><literal type="string">"%s\\vimun%04X.exe"</literal></expr></argument>, <argument><expr><name>temp_dir</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>i</name> <operator>+</operator> <name>tick</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CopyFile</name><argument_list>(<argument><expr><name>uninst_exe</name></expr></argument>, <argument><expr><name>temp_uninst</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ERROR_FILE_EXISTS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>temp_uninst</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"%s\" /S _?=%s"</literal></expr></argument>, <argument><expr><name>temp_uninst</name></expr></argument>, <argument><expr><name>vimrt_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s /S _?=%s"</literal></expr></argument>, <argument><expr><name>temp_uninst</name></expr></argument>, <argument><expr><name>vimrt_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>run_command</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteFile</name><argument_list>(<argument><expr><name>temp_uninst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>uninstall_check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>skip_question</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HKEY</name></type> <name>key_handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HKEY</name></type> <name>uninstall_key_handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uninstall_key</name> <init>= <expr><literal type="string">"software\\Microsoft\\Windows\\CurrentVersion\\Uninstall"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>subkey_name_buff</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>temp_string_buffer</name><index>[<expr><name>BUFSIZE</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>local_bufsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILETIME</name></type> <name>temp_pfiletime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>key_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>value_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>orig_num_keys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>new_num_keys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>allow_silent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>foundone</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>uninstall_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>KEY_WOW64_64KEY</name> <operator>|</operator> <name>KEY_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_REG_ERROR</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>TRUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>local_bufsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>subkey_name_buff</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RegEnumKeyEx</name><argument_list>(<argument><expr><name>key_handle</name></expr></argument>, <argument><expr><name>key_index</name></expr></argument>, <argument><expr><name>subkey_name_buff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local_bufsize</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp_pfiletime</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ERROR_NO_MORE_ITEMS</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"Vim"</literal></expr></argument>, <argument><expr><name>subkey_name_buff</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>key_handle</name></expr></argument>, <argument><expr><name>subkey_name_buff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>KEY_WOW64_64KEY</name> <operator>|</operator> <name>KEY_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uninstall_key_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_REG_ERROR</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>local_bufsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>temp_string_buffer</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name>uninstall_key_handle</name></expr></argument>, <argument><expr><literal type="string">"displayname"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>value_type</name></expr></argument>, <argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator><name>temp_string_buffer</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>local_bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_REG_ERROR</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>allow_silent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>skip_question</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>varsize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>DWORD</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name>uninstall_key_handle</name></expr></argument>, <argument><expr><literal type="string">"AllowSilent"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>value_type</name></expr></argument>, <argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator><operator>&amp;</operator><name>allow_silent</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>varsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>foundone</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n*********************************************************\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Vim Install found what looks like an existing Vim version.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"The name of the entry is:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n \"%s\"\n\n"</literal></expr></argument>, <argument><expr><name>temp_string_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Installing the new version will disable part of the existing version.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(The batch files used in a console and the \"Edit with Vim\" entry in\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"the popup menu will use the new version)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>skip_question</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nRunning uninstall program for \"%s\"\n"</literal></expr></argument>, <argument><expr><name>temp_string_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nDo you want to uninstall \"%s\" now?\n(y)es/(n)o) "</literal></expr></argument>, <argument><expr><name>temp_string_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>local_bufsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>temp_string_buffer</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name>uninstall_key_handle</name></expr></argument>, <argument><expr><literal type="string">"uninstallstring"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>value_type</name></expr></argument>, <argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator><name>temp_string_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local_bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_REG_ERROR</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>default_vim_dir</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>temp_string_buffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>default_vim_dir</name></expr></argument>, <argument><expr><name>temp_string_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_tail</name><argument_list>(<argument><expr><name>default_vim_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_tail</name><argument_list>(<argument><expr><name>default_vim_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>input</name> <operator>!=</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c is an invalid reply. Please enter either 'y' or 'n'\n"</literal></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>skip_question</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>input</name> <operator>=</operator> <literal type="char">'y'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name>input</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'y'</literal></expr>:</case>

<case>case <expr><literal type="char">'Y'</literal></expr>:</case>

<expr_stmt><expr><call><name>RegQueryInfoKey</name><argument_list>(<argument><expr><name>key_handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>orig_num_keys</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>find_bat_exe</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>allow_silent</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>run_silent_uninstall</name><argument_list>(<argument><expr><name>temp_string_buffer</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>allow_silent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allow_silent</name></expr>)</condition>

<block>{<block_content>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>temp_string_buffer</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name>temp_string_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>temp_string_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>run_command</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>num_windows</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnumWindows</name><argument_list>(<argument><expr><name>window_cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_windows</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Press Enter when the uninstaller is finished\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Waiting for the uninstaller to finish (press CTRL-C to abort)."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>num_windows</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnumWindows</name><argument_list>(<argument><expr><name>window_cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>num_windows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nDone!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RegQueryInfoKey</name><argument_list>(<argument><expr><name>key_handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>new_num_keys</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_num_keys</name> <operator>&lt;</operator> <name>orig_num_keys</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>key_index</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>input</name> <operator>=</operator> <literal type="char">'y'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<case>case <expr><literal type="char">'N'</literal></expr>:</case>

<expr_stmt><expr><name>input</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block> while <condition>(<expr><name>input</name> <operator>!=</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <name>input</name> <operator>!=</operator> <literal type="char">'y'</literal></expr>)</condition>;</do>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>uninstall_key_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>key_index</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>key_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>foundone</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>inspect_system</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>foundone</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Inspecting system...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"VIM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>pathcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>installdir</name></expr></argument>, <argument><expr><name>runtimeidx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"------------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"$VIM is set to \"%s\".\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"This is different from where this version of Vim is:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>installdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>runtimeidx</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\"%s\"\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"You must adjust or remove the setting of $VIM,\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"to be able to use this install program.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>myexit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"otherwise Vim WILL NOT WORK properly!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"------------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"VIMRUNTIME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>pathcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>installdir</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"------------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"$VIMRUNTIME is set to \"%s\".\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"This is different from where this version of Vim is:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\"%s\"\n"</literal></expr></argument>, <argument><expr><name>installdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"You must adjust or remove the setting of $VIMRUNTIME,\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"to be able to use this install program.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>myexit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"otherwise Vim WILL NOT WORK properly!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"------------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>find_bat_exe</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>foundone</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TARGET_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>findoldfile</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oldexe</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oldexe</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>foundone</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>foundone</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Warning: Found Vim executable(s) in your $PATH:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TARGET_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oldexe</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oldexe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"It will be used instead of the version you are installing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Please delete or rename it, or adjust your $PATH setting.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>oldvimrc</name></expr></argument>, <argument><expr><name>installdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>oldvimrc</name> <operator>+</operator> <name>runtimeidx</name></expr></argument>, <argument><expr><literal type="string">"_vimrc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>oldvimrc</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>oldvimrc</name> <operator>+</operator> <name>runtimeidx</name></expr></argument>, <argument><expr><literal type="string">"vimrc~1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>oldvimrc</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>oldvimrc</name> <operator>+</operator> <name>runtimeidx</name></expr></argument>, <argument><expr><literal type="string">".vimrc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>oldvimrc</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>oldvimrc</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>add_dummy_choice</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>changefunc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>arg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>choice_count</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>install_bat_choice</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>batpath</name> <init>= <expr><name><name>targets</name><index>[<expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name></expr>]</index></name><operator>.</operator><name>batpath</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oldname</name> <init>= <expr><name><name>targets</name><index>[<expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name></expr>]</index></name><operator>.</operator><name>oldbat</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>exename</name> <init>= <expr><name><name>targets</name><index>[<expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name></expr>]</index></name><operator>.</operator><name>exenamearg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vimarg</name> <init>= <expr><name><name>targets</name><index>[<expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name></expr>]</index></name><operator>.</operator><name>exearg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>batpath</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>batpath</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nERROR: Cannot open \"%s\" for writing.\n"</literal></expr></argument>, <argument><expr><name>batpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>need_uninstall_entry</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"@echo off\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"rem -- Run Vim --\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>VIMBAT_UNINSTKEY</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"setlocal\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"set VIM_EXE_DIR=%s\n"</literal></expr></argument>, <argument><expr><name>installdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"if exist \"%%VIM%%\\%s\\%s\" set VIM_EXE_DIR=%%VIM%%\\%s\n"</literal></expr></argument>,

<argument><expr><name>VIM_VERSION_NODOT</name></expr></argument>, <argument><expr><name>exename</name></expr></argument>, <argument><expr><name>VIM_VERSION_NODOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"if exist \"%%VIMRUNTIME%%\\%s\" set VIM_EXE_DIR=%%VIMRUNTIME%%\n"</literal></expr></argument>, <argument><expr><name>exename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"if not exist \"%%VIM_EXE_DIR%%\\%s\" (\n"</literal></expr></argument>, <argument><expr><name>exename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" echo \"%%VIM_EXE_DIR%%\\%s\" not found\n"</literal></expr></argument>, <argument><expr><name>exename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" goto :eof\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>exename</name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"rem check --nofork argument\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"set VIMNOFORK=\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">":loopstart\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"if .%%1==. goto loopend\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"if .%%1==.--nofork (\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" set VIMNOFORK=1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">") else if .%%1==.-f (\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" set VIMNOFORK=1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"shift\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"goto loopstart\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">":loopend\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>exename</name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"if .%%VIMNOFORK%%==.1 (\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" start \"dummy\" /b /wait "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\"%%VIM_EXE_DIR%%\\%s\" %s %%*\n"</literal></expr></argument>,

<argument><expr><name>exename</name></expr></argument>, <argument><expr><name>vimarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">") else (\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" start \"dummy\" /b "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\"%%VIM_EXE_DIR%%\\%s\" %s %%*\n"</literal></expr></argument>,

<argument><expr><name>exename</name></expr></argument>, <argument><expr><name>vimarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\"%%VIM_EXE_DIR%%\\%s\" %s %%*\n"</literal></expr></argument>,

<argument><expr><name>exename</name></expr></argument>, <argument><expr><name>vimarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s has been %s\n"</literal></expr></argument>, <argument><expr><name>batpath</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>oldname</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"created"</literal></expr> </then><else>: <expr><literal type="string">"overwritten"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>alloc_text</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>text</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>toggle_bat_choice</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>batname</name> <init>= <expr><name><name>targets</name><index>[<expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name></expr>]</index></name><operator>.</operator><name>batpath</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oldname</name> <init>= <expr><name><name>targets</name><index>[<expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name></expr>]</index></name><operator>.</operator><name>oldbat</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>batname</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>alloc_text</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">" Overwrite %s"</literal></expr></argument>, <argument><expr><name>oldname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>batname</name></expr></argument>, <argument><expr><name>oldname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>alloc_text</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">" Do NOT overwrite %s"</literal></expr></argument>, <argument><expr><name>oldname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>batname</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_bat_text</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>batpath</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>batpath</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>alloc_text</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">" Create %s"</literal></expr></argument>, <argument><expr><name>batpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>change_bat_choice</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>batpath</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>names</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>target</name> <init>= <expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>targets</name><index>[<expr><name>target</name></expr>]</index></name><operator>.</operator><name>batname</name></expr>;</expr_stmt>

<expr_stmt><expr><name>batpath</name> <operator>=</operator> <name><name>targets</name><index>[<expr><name>target</name></expr>]</index></name><operator>.</operator><name>batpath</name></expr>;</expr_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nERROR: The variable $PATH is not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>path</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>names</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>names</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>s</name> <operator>-</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>count</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>names</name><index>[<expr><name>count</name></expr>]</index><index>[<expr><name>s</name> <operator>-</operator> <name>p</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>names</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>names</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Select directory to create %s in:"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>names</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>count</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Do not create any .bat file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>count</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Do not create a %s file."</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>get_choice</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>count</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>batpath</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>alloc_text</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">" Do NOT create %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>batpath</name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>batpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_bat_text</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>batpath</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bat_text_yes</name> <init>= <expr><literal type="string">"Install .bat files to use Vim at the command line:"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bat_text_no</name> <init>= <expr><literal type="string">"do NOT install .bat files to use Vim at the command line"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>change_main_bat_choice</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>change_bat_choice</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>targets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>batpath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <name>bat_text_yes</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <name>bat_text_no</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TARGET_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>targets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>batpath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <name><name>choices</name><index>[<expr><name>idx</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>changefunc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>choices</name><index>[<expr><name>idx</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>changefunc</name> <operator>==</operator> <name>change_bat_choice</name>

<operator>&amp;&amp;</operator> <name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>batpath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>batpath</name></expr></argument>, <argument><expr><name><name>targets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>batpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_bat_text</name><argument_list>(<argument><expr><name>idx</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>batpath</name></expr></argument>, <argument><expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>batname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_bat_choice</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>batpath</name> <init>= <expr><name><name>targets</name><index>[<expr><name>target</name></expr>]</index></name><operator>.</operator><name>batpath</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oldbat</name> <init>= <expr><name><name>targets</name><index>[<expr><name>target</name></expr>]</index></name><operator>.</operator><name>oldbat</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>arg</name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>=</operator> <name>install_bat_choice</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>oldbat</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>changefunc</name> <operator>=</operator> <name>toggle_bat_choice</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>batpath</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>toggle_bat_choice</name><argument_list>(<argument><expr><name>choice_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>default_bat_dir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>batpath</name></expr></argument>, <argument><expr><name>default_bat_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"WINDIR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>batpath</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>batpath</name></expr></argument>, <argument><expr><literal type="string">"C:/Windows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>batpath</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>batpath</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>batpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_bat_text</name><argument_list>(<argument><expr><name>choice_count</name></expr></argument>, <argument><expr><name>batpath</name></expr></argument>, <argument><expr><name><name>targets</name><index>[<expr><name>target</name></expr>]</index></name><operator>.</operator><name>batname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>changefunc</name> <operator>=</operator> <name>change_bat_choice</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>choice_count</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_bat_choices</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <name>bat_text_yes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>changefunc</name> <operator>=</operator> <name>change_main_bat_choice</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>arg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>choice_count</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TARGET_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oldexe</name> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name><name>targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>exenamearg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'g'</literal></expr> ?</condition><then> <expr><name>has_gvim</name></expr> </then><else>: <expr><name>has_vim</name></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>init_bat_choice</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_dummy_choice</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>install_vimrc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tfd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>oldvimrc</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <name>oldvimrc</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <name>vimrc</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nERROR: Cannot open \"%s\" for writing.\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>compat_choice</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>compat_vi</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\" Vi compatible\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"set compatible\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>compat_vim</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\" Vim's default behavior\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"if &amp;compatible\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" set nocompatible\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>compat_some_enhancements</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\" Vim with some enhancements\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"source $VIMRUNTIME/defaults.vim\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>compat_all_enhancements</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\" Vim with all enhancements\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"source $VIMRUNTIME/vimrc_example.vim\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>remap_choice</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>remap_no</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>remap_win</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\" Remap a few keys for Windows behavior\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"source $VIMRUNTIME/mswin.vim\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>mouse_choice</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>mouse_xterm</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\" Mouse behavior (the Unix way)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"behave xterm\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>mouse_mswin</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\" Mouse behavior (the Windows way)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"behave mswin\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>mouse_default</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tfd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"diff.exe"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>tfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\" Use the internal diff if available.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\" Otherwise use the special 'diffexpr' for Windows.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"if &amp;diffopt !~#'internal'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" set diffexpr=MyDiff()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"function MyDiff()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" let opt = '-a --binary '\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" if &amp;diffopt =~ 'icase' | let opt = opt . '-i ' | endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" if &amp;diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" let arg1 = v:fname_in\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" if arg1 =~ ' ' | let arg1 = '\"' . arg1 . '\"' | endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" let arg1 = substitute(arg1, '!', '\\!', 'g')\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" let arg2 = v:fname_new\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" if arg2 =~ ' ' | let arg2 = '\"' . arg2 . '\"' | endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" let arg2 = substitute(arg2, '!', '\\!', 'g')\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" let arg3 = v:fname_out\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" if arg3 =~ ' ' | let arg3 = '\"' . arg3 . '\"' | endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" let arg3 = substitute(arg3, '!', '\\!', 'g')\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" if $VIMRUNTIME =~ ' '\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" if &amp;sh =~ '\\&lt;cmd'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" if empty(&amp;shellxquote)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" let l:shxq_sav = ''\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" set shellxquote&amp;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" let cmd = '\"' . $VIMRUNTIME . '\\diff\"'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" else\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" let cmd = substitute($VIMRUNTIME, ' ', '\" ', '') . '\\diff\"'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" else\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" let cmd = $VIMRUNTIME . '\\diff'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" let cmd = substitute(cmd, '!', '\\!', 'g')\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' &gt; ' . arg3\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" if exists('l:shxq_sav')\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" let &amp;shellxquote=l:shxq_sav\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"endfunction\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s has been written\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>change_vimrc_choice</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>oldvimrc</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>alloc_text</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"Do NOT change startup file %s"</literal></expr></argument>, <argument><expr><name>oldvimrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>alloc_text</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"Do NOT create startup file %s"</literal></expr></argument>, <argument><expr><name>vimrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>oldvimrc</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>alloc_text</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"Overwrite startup file %s with:"</literal></expr></argument>, <argument><expr><name>oldvimrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>alloc_text</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"Create startup file %s with:"</literal></expr></argument>, <argument><expr><name>vimrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>=</operator> <name>install_vimrc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>change_run_choice</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>compat_choice</name> <operator>=</operator> <call><name>get_choice</name><argument_list>(<argument><expr><name>compat_choices</name></expr></argument>, <argument><expr><call><name>TABLE_SIZE</name><argument_list>(<argument><expr><name>compat_choices</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>alloc_text</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>compat_text</name></expr></argument>, <argument><expr><name><name>compat_choices</name><index>[<expr><name>compat_choice</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>change_remap_choice</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>remap_choice</name> <operator>=</operator> <call><name>get_choice</name><argument_list>(<argument><expr><name>remap_choices</name></expr></argument>, <argument><expr><call><name>TABLE_SIZE</name><argument_list>(<argument><expr><name>remap_choices</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>alloc_text</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>remap_text</name></expr></argument>, <argument><expr><name><name>remap_choices</name><index>[<expr><name>remap_choice</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>change_mouse_choice</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>mouse_choice</name> <operator>=</operator> <call><name>get_choice</name><argument_list>(<argument><expr><name>mouse_choices</name></expr></argument>, <argument><expr><call><name>TABLE_SIZE</name><argument_list>(<argument><expr><name>mouse_choices</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>alloc_text</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>mouse_text</name></expr></argument>, <argument><expr><name><name>mouse_choices</name><index>[<expr><name>mouse_choice</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_vimrc_choices</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>vimrc</name></expr></argument>, <argument><expr><name>installdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>vimrc</name> <operator>+</operator> <name>runtimeidx</name></expr></argument>, <argument><expr><literal type="string">"_vimrc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>oldvimrc</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>=</operator> <name>install_vimrc</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>change_vimrc_choice</name><argument_list>(<argument><expr><name>choice_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>changefunc</name> <operator>=</operator> <name>change_vimrc_choice</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>choice_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>alloc_text</name><argument_list>(<argument><expr><name>choice_count</name></expr></argument>, <argument><expr><name>compat_text</name></expr></argument>, <argument><expr><name><name>compat_choices</name><index>[<expr><name>compat_choice</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>changefunc</name> <operator>=</operator> <name>change_run_choice</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>oldvimrc</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>choice_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>alloc_text</name><argument_list>(<argument><expr><name>choice_count</name></expr></argument>, <argument><expr><name>remap_text</name></expr></argument> , <argument><expr><name><name>remap_choices</name><index>[<expr><name>remap_choice</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>changefunc</name> <operator>=</operator> <name>change_remap_choice</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>oldvimrc</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>choice_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>alloc_text</name><argument_list>(<argument><expr><name>choice_count</name></expr></argument>, <argument><expr><name>mouse_text</name></expr></argument>, <argument><expr><name><name>mouse_choices</name><index>[<expr><name>mouse_choice</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>changefunc</name> <operator>=</operator> <name>change_mouse_choice</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>oldvimrc</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>choice_count</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LONG</name></type>

<name>reg_create_key</name><parameter_list>(

<parameter><decl><type><name>HKEY</name></type> <name>root</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subkey</name></decl></parameter>,

<parameter><decl><type><name>PHKEY</name></type> <name>phKey</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>disp</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>phKey</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><call><name>RegCreateKeyEx</name><argument_list>(

<argument><expr><name>root</name></expr></argument>, <argument><expr><name>subkey</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>REG_OPTION_NON_VOLATILE</name></expr></argument>,

<argument><expr><name>flag</name> <operator>|</operator> <name>KEY_WRITE</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>phKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LONG</name></type>

<name>reg_set_string_value</name><parameter_list>(

<parameter><decl><type><name>HKEY</name></type> <name>hKey</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value_name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>RegSetValueEx</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>value_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>REG_SZ</name></expr></argument>,

<argument><expr><operator>(</operator><name>LPBYTE</name><operator>)</operator><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LONG</name></type>

<name>reg_create_key_and_value</name><parameter_list>(

<parameter><decl><type><name>HKEY</name></type> <name>hRootKey</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subkey</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value_name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lRet</name> <init>= <expr><call><name>reg_create_key</name><argument_list>(<argument><expr><name>hRootKey</name></expr></argument>, <argument><expr><name>subkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hKey</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ERROR_SUCCESS</name> <operator>==</operator> <name>lRet</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lRet</name> <operator>=</operator> <call><name>reg_set_string_value</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>value_name</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>lRet</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LONG</name></type>

<name>register_inproc_server</name><parameter_list>(

<parameter><decl><type><name>HKEY</name></type> <name>hRootKey</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clsid</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>threading_model</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CHAR</name></type> <name><name>subkey</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lRet</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>subkey</name></expr></argument>, <argument><expr><literal type="string">"CLSID\\%s"</literal></expr></argument>, <argument><expr><name>clsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lRet</name> <operator>=</operator> <call><name>reg_create_key_and_value</name><argument_list>(<argument><expr><name>hRootKey</name></expr></argument>, <argument><expr><name>subkey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>extname</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ERROR_SUCCESS</name> <operator>==</operator> <name>lRet</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>subkey</name></expr></argument>, <argument><expr><literal type="string">"CLSID\\%s\\InProcServer32"</literal></expr></argument>, <argument><expr><name>clsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lRet</name> <operator>=</operator> <call><name>reg_create_key_and_value</name><argument_list>(<argument><expr><name>hRootKey</name></expr></argument>, <argument><expr><name>subkey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>module</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ERROR_SUCCESS</name> <operator>==</operator> <name>lRet</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lRet</name> <operator>=</operator> <call><name>reg_create_key_and_value</name><argument_list>(<argument><expr><name>hRootKey</name></expr></argument>, <argument><expr><name>subkey</name></expr></argument>,

<argument><expr><literal type="string">"ThreadingModel"</literal></expr></argument>, <argument><expr><name>threading_model</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>lRet</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LONG</name></type>

<name>register_shellex</name><parameter_list>(

<parameter><decl><type><name>HKEY</name></type> <name>hRootKey</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clsid</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exe_path</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LONG</name></type> <name>lRet</name> <init>= <expr><call><name>reg_create_key_and_value</name><argument_list>(

<argument><expr><name>hRootKey</name></expr></argument>,

<argument><expr><literal type="string">"*\\shellex\\ContextMenuHandlers\\gvim"</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>clsid</name></expr></argument>,

<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ERROR_SUCCESS</name> <operator>==</operator> <name>lRet</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lRet</name> <operator>=</operator> <call><name>reg_create_key_and_value</name><argument_list>(

<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>,

<argument><expr><literal type="string">"Software\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Approved"</literal></expr></argument>,

<argument><expr><name>clsid</name></expr></argument>,

<argument><expr><name>name</name></expr></argument>,

<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ERROR_SUCCESS</name> <operator>==</operator> <name>lRet</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lRet</name> <operator>=</operator> <call><name>reg_create_key_and_value</name><argument_list>(

<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>,

<argument><expr><literal type="string">"Software\\Vim\\Gvim"</literal></expr></argument>,

<argument><expr><literal type="string">"path"</literal></expr></argument>,

<argument><expr><name>exe_path</name></expr></argument>,

<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>lRet</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LONG</name></type>

<name>register_openwith</name><parameter_list>(

<parameter><decl><type><name>HKEY</name></type> <name>hRootKey</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exe_path</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>exe_cmd</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name></type> <name>lRet</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>exe_cmd</name></expr></argument>, <argument><expr><literal type="string">"\"%s\" \"%%1\""</literal></expr></argument>, <argument><expr><name>exe_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lRet</name> <operator>=</operator> <call><name>reg_create_key_and_value</name><argument_list>(

<argument><expr><name>hRootKey</name></expr></argument>,

<argument><expr><literal type="string">"Applications\\gvim.exe\\shell\\edit\\command"</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>exe_cmd</name></expr></argument>,

<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ERROR_SUCCESS</name> <operator>==</operator> <name>lRet</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>openwith</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">".htm\\OpenWithList\\gvim.exe"</literal></expr>,

<expr><literal type="string">".vim\\OpenWithList\\gvim.exe"</literal></expr>,

<expr><literal type="string">"*\\OpenWithList\\gvim.exe"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ERROR_SUCCESS</name> <operator>==</operator> <name>lRet</name>

<operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>openwith</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>openwith</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>lRet</name> <operator>=</operator> <call><name>reg_create_key_and_value</name><argument_list>(<argument><expr><name>hRootKey</name></expr></argument>, <argument><expr><name><name>openwith</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>lRet</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LONG</name></type>

<name>register_uninstall</name><parameter_list>(

<parameter><decl><type><name>HKEY</name></type> <name>hRootKey</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>appname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>display_name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uninstall_string</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>display_icon</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>display_version</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>publisher</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LONG</name></type> <name>lRet</name> <init>= <expr><call><name>reg_create_key_and_value</name><argument_list>(<argument><expr><name>hRootKey</name></expr></argument>, <argument><expr><name>appname</name></expr></argument>,

<argument><expr><literal type="string">"DisplayName"</literal></expr></argument>, <argument><expr><name>display_name</name></expr></argument>, <argument><expr><name>KEY_WOW64_64KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ERROR_SUCCESS</name> <operator>==</operator> <name>lRet</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lRet</name> <operator>=</operator> <call><name>reg_create_key_and_value</name><argument_list>(<argument><expr><name>hRootKey</name></expr></argument>, <argument><expr><name>appname</name></expr></argument>,

<argument><expr><literal type="string">"UninstallString"</literal></expr></argument>, <argument><expr><name>uninstall_string</name></expr></argument>, <argument><expr><name>KEY_WOW64_64KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ERROR_SUCCESS</name> <operator>==</operator> <name>lRet</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lRet</name> <operator>=</operator> <call><name>reg_create_key_and_value</name><argument_list>(<argument><expr><name>hRootKey</name></expr></argument>, <argument><expr><name>appname</name></expr></argument>,

<argument><expr><literal type="string">"DisplayIcon"</literal></expr></argument>, <argument><expr><name>display_icon</name></expr></argument>, <argument><expr><name>KEY_WOW64_64KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ERROR_SUCCESS</name> <operator>==</operator> <name>lRet</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lRet</name> <operator>=</operator> <call><name>reg_create_key_and_value</name><argument_list>(<argument><expr><name>hRootKey</name></expr></argument>, <argument><expr><name>appname</name></expr></argument>,

<argument><expr><literal type="string">"DisplayVersion"</literal></expr></argument>, <argument><expr><name>display_version</name></expr></argument>, <argument><expr><name>KEY_WOW64_64KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ERROR_SUCCESS</name> <operator>==</operator> <name>lRet</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lRet</name> <operator>=</operator> <call><name>reg_create_key_and_value</name><argument_list>(<argument><expr><name>hRootKey</name></expr></argument>, <argument><expr><name>appname</name></expr></argument>,

<argument><expr><literal type="string">"Publisher"</literal></expr></argument>, <argument><expr><name>publisher</name></expr></argument>, <argument><expr><name>KEY_WOW64_64KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>lRet</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>install_registry</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LONG</name></type> <name>lRet</name> <init>= <expr><name>ERROR_SUCCESS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vim_ext_ThreadingModel</name> <init>= <expr><literal type="string">"Apartment"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vim_ext_name</name> <init>= <expr><literal type="string">"Vim Shell Extension"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vim_ext_clsid</name> <init>= <expr><literal type="string">"{51EEE242-AD87-11d3-9C1E-0090278BBD99}"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>vim_exe_path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>display_name</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>uninstall_string</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>icon_string</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>loop_count</name> <init>= <expr><ternary><condition><expr><call><name>is_64bit_os</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>flag</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>vim_exe_path</name></expr></argument>, <argument><expr><literal type="string">"%s\\gvim.exe"</literal></expr></argument>, <argument><expr><name>installdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>install_popup</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>bufg</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Creating \"Edit with Vim\" popup menu entry\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>loop_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>bufg</name></expr></argument>, <argument><expr><literal type="string">"%s\\"</literal> <name>GVIMEXT32_PATH</name></expr></argument>, <argument><expr><name>installdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>KEY_WOW64_32KEY</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>bufg</name></expr></argument>, <argument><expr><literal type="string">"%s\\"</literal> <name>GVIMEXT64_PATH</name></expr></argument>, <argument><expr><name>installdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>KEY_WOW64_64KEY</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>lRet</name> <operator>=</operator> <call><name>register_inproc_server</name><argument_list>(

<argument><expr><name>HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name>vim_ext_clsid</name></expr></argument>, <argument><expr><name>vim_ext_name</name></expr></argument>,

<argument><expr><name>bufg</name></expr></argument>, <argument><expr><name>vim_ext_ThreadingModel</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ERROR_SUCCESS</name> <operator>!=</operator> <name>lRet</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lRet</name> <operator>=</operator> <call><name>register_shellex</name><argument_list>(

<argument><expr><name>HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name>vim_ext_clsid</name></expr></argument>, <argument><expr><name>vim_ext_name</name></expr></argument>,

<argument><expr><name>vim_exe_path</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ERROR_SUCCESS</name> <operator>!=</operator> <name>lRet</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>install_openwith</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Creating \"Open with ...\" list entry\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>loop_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>KEY_WOW64_32KEY</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>KEY_WOW64_64KEY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>lRet</name> <operator>=</operator> <call><name>register_openwith</name><argument_list>(<argument><expr><name>HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name>vim_exe_path</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ERROR_SUCCESS</name> <operator>!=</operator> <name>lRet</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Creating an uninstall entry\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>display_name</name></expr></argument>, <argument><expr><literal type="string">"Vim "</literal> <name>VIM_VERSION_SHORT</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_ARM64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" (arm64)"</literal>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>_M_X64</name></expr></cpp:elif>

<literal type="string">" (x64)"</literal></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>uninstall_string</name></expr></argument>, <argument><expr><literal type="string">"%s\\uninstall.exe"</literal></expr></argument>, <argument><expr><name>installdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>uninstall_string</name></expr></argument>, <argument><expr><literal type="string">"%s\\uninstall-gui.exe"</literal></expr></argument>, <argument><expr><name>installdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>icon_string</name></expr></argument>, <argument><expr><literal type="string">"%s\\gvim.exe,0"</literal></expr></argument>, <argument><expr><name>installdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lRet</name> <operator>=</operator> <call><name>register_uninstall</name><argument_list>(

<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>,

<argument><expr><literal type="string">"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Vim "</literal> <name>VIM_VERSION_SHORT</name></expr></argument>,

<argument><expr><name>display_name</name></expr></argument>,

<argument><expr><name>uninstall_string</name></expr></argument>,

<argument><expr><name>icon_string</name></expr></argument>,

<argument><expr><name>VIM_VERSION_SHORT</name></expr></argument>,

<argument><expr><literal type="string">"Bram Moolenaar et al."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ERROR_SUCCESS</name> <operator>!=</operator> <name>lRet</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>change_popup_choice</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>install_popup</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <literal type="string">"Install an entry for Vim in the popup menu for the right\n mouse button so that you can edit any file with Vim"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>install_popup</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <literal type="string">"Do NOT install an entry for Vim in the popup menu for the\n right mouse button to edit any file with Vim"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>install_popup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_popup_choice</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>has_gvim</name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>stat</name><argument_list>(<argument><expr><name>GVIMEXT32_PATH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>stat</name><argument_list>(<argument><expr><name>GVIMEXT64_PATH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>changefunc</name> <operator>=</operator> <name>change_popup_choice</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>change_popup_choice</name><argument_list>(<argument><expr><name>choice_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>++</operator><name>choice_count</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_dummy_choice</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>change_openwith_choice</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>install_openwith</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <literal type="string">"Add Vim to the \"Open With...\" list in the popup menu for the right\n mouse button so that you can edit any file with Vim"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>install_openwith</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <literal type="string">"Do NOT add Vim to the \"Open With...\" list in the popup menu for the\n right mouse button to edit any file with Vim"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>install_openwith</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_openwith_choice</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_gvim</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>changefunc</name> <operator>=</operator> <name>change_openwith_choice</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>change_openwith_choice</name><argument_list>(<argument><expr><name>choice_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>++</operator><name>choice_count</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_dummy_choice</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>create_shortcut</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shortcut_name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iconfile_path</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>iconindex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shortcut_target</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shortcut_args</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>workingdir</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IShellLink</name> <modifier>*</modifier></type><name>shelllink_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hres</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IPersistFile</name> <modifier>*</modifier></type><name>persistfile_ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hres</name> <operator>=</operator> <call><name>CoInitialize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hres</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: Could not open the COM library. Not creating shortcut.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hres</name> <operator>=</operator> <call><name>CoCreateInstance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CLSID_ShellLink</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>CLSCTX_INPROC_SERVER</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_IShellLink</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>shelllink_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hres</name></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>hres</name> <operator>=</operator> <call><name><name>shelllink_ptr</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>QueryInterface</name></name><argument_list>(<argument><expr><name>shelllink_ptr</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>IID_IPersistFile</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>persistfile_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hres</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wsz</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>shortcut_name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>wsz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wsz</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>wsz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>shelllink_ptr</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>SetPath</name></name><argument_list>(<argument><expr><name>shelllink_ptr</name></expr></argument>, <argument><expr><name>shortcut_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>shelllink_ptr</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>SetWorkingDirectory</name></name><argument_list>(<argument><expr><name>shelllink_ptr</name></expr></argument>,

<argument><expr><name>workingdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>shelllink_ptr</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>SetIconLocation</name></name><argument_list>(<argument><expr><name>shelllink_ptr</name></expr></argument>,

<argument><expr><name>iconfile_path</name></expr></argument>, <argument><expr><name>iconindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>shelllink_ptr</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>SetArguments</name></name><argument_list>(<argument><expr><name>shelllink_ptr</name></expr></argument>, <argument><expr><name>shortcut_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>persistfile_ptr</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Save</name></name><argument_list>(<argument><expr><name>persistfile_ptr</name></expr></argument>, <argument><expr><name>wsz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>persistfile_ptr</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>persistfile_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"QueryInterface Error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>shelllink_ptr</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>shelllink_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CoCreateInstance Error - hres = %08x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>build_link_name</name><parameter_list>(

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>link_path</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>link_name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shell_folder_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>shell_folder_path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_shell_folder_path</name><argument_list>(<argument><expr><name>shell_folder_path</name></expr></argument>, <argument><expr><name>shell_folder_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"An error occurred while attempting to find the path to %s.\n"</literal></expr></argument>,

<argument><expr><name>shell_folder_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_mkdir</name><argument_list>(<argument><expr><name>shell_folder_path</name></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>link_path</name></expr></argument>, <argument><expr><literal type="string">"%s\\%s.lnk"</literal></expr></argument>, <argument><expr><name>shell_folder_path</name></expr></argument>, <argument><expr><name>link_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>build_shortcut</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, 

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exename</name></decl></parameter>, 

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shell_folder</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>workingdir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>executable_path</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>link_name</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>executable_path</name></expr></argument>, <argument><expr><literal type="string">"%s\\%s"</literal></expr></argument>, <argument><expr><name>installdir</name></expr></argument>, <argument><expr><name>exename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>build_link_name</name><argument_list>(<argument><expr><name>link_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>shell_folder</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"An error has occurred. A shortcut to %s will not be created %s.\n"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>*</operator><name>shell_folder</name> <operator>==</operator> <literal type="char">'d'</literal></expr> ?</condition><then> <expr><literal type="string">"on the desktop"</literal></expr> </then><else>: <expr><literal type="string">"in the Start menu"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>create_shortcut</name><argument_list>(<argument><expr><name>link_name</name></expr></argument>, <argument><expr><name>executable_path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>executable_path</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>workingdir</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORKDIR</name></cpp:macro> <cpp:value>"%HOMEDRIVE%%HOMEPATH%"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>install_start_menu</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>need_uninstall_entry</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Creating start menu\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_vim</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>build_shortcut</name><argument_list>(<argument><expr><literal type="string">"Vim"</literal></expr></argument>, <argument><expr><literal type="string">"vim.exe"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,

<argument><expr><name>VIM_STARTMENU</name></expr></argument>, <argument><expr><name>WORKDIR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>build_shortcut</name><argument_list>(<argument><expr><literal type="string">"Vim Read-only"</literal></expr></argument>, <argument><expr><literal type="string">"vim.exe"</literal></expr></argument>, <argument><expr><literal type="string">"-R"</literal></expr></argument>,

<argument><expr><name>VIM_STARTMENU</name></expr></argument>, <argument><expr><name>WORKDIR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>build_shortcut</name><argument_list>(<argument><expr><literal type="string">"Vim Diff"</literal></expr></argument>, <argument><expr><literal type="string">"vim.exe"</literal></expr></argument>, <argument><expr><literal type="string">"-d"</literal></expr></argument>,

<argument><expr><name>VIM_STARTMENU</name></expr></argument>, <argument><expr><name>WORKDIR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_gvim</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>build_shortcut</name><argument_list>(<argument><expr><literal type="string">"gVim"</literal></expr></argument>, <argument><expr><literal type="string">"gvim.exe"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,

<argument><expr><name>VIM_STARTMENU</name></expr></argument>, <argument><expr><name>WORKDIR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>build_shortcut</name><argument_list>(<argument><expr><literal type="string">"gVim Easy"</literal></expr></argument>, <argument><expr><literal type="string">"gvim.exe"</literal></expr></argument>, <argument><expr><literal type="string">"-y"</literal></expr></argument>,

<argument><expr><name>VIM_STARTMENU</name></expr></argument>, <argument><expr><name>WORKDIR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>build_shortcut</name><argument_list>(<argument><expr><literal type="string">"gVim Read-only"</literal></expr></argument>, <argument><expr><literal type="string">"gvim.exe"</literal></expr></argument>, <argument><expr><literal type="string">"-R"</literal></expr></argument>,

<argument><expr><name>VIM_STARTMENU</name></expr></argument>, <argument><expr><name>WORKDIR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>build_shortcut</name><argument_list>(<argument><expr><literal type="string">"gVim Diff"</literal></expr></argument>, <argument><expr><literal type="string">"gvim.exe"</literal></expr></argument>, <argument><expr><literal type="string">"-d"</literal></expr></argument>,

<argument><expr><name>VIM_STARTMENU</name></expr></argument>, <argument><expr><name>WORKDIR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>build_shortcut</name><argument_list>(<argument><expr><literal type="string">"Uninstall"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>interactive</name></expr> ?</condition><then> <expr><literal type="string">"uninstall.exe"</literal></expr> </then><else>: <expr><literal type="string">"uninstall-gui.exe"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,

<argument><expr><name>VIM_STARTMENU</name></expr></argument>, <argument><expr><name>installdir</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>build_shortcut</name><argument_list>(<argument><expr><literal type="string">"Vim tutor"</literal></expr></argument>, <argument><expr><literal type="string">"vimtutor.bat"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,

<argument><expr><name>VIM_STARTMENU</name></expr></argument>, <argument><expr><name>installdir</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>build_shortcut</name><argument_list>(<argument><expr><literal type="string">"Help"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>has_gvim</name></expr> ?</condition><then> <expr><literal type="string">"gvim.exe"</literal></expr> </then><else>: <expr><literal type="string">"vim.exe"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"-c h"</literal></expr></argument>,

<argument><expr><name>VIM_STARTMENU</name></expr></argument>, <argument><expr><name>WORKDIR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>shell_folder_path</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_shell_folder_path</name><argument_list>(<argument><expr><name>shell_folder_path</name></expr></argument>, <argument><expr><name>VIM_STARTMENU</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Finding the path of the Start menu failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return ;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>shell_folder_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>shell_folder_path</name></expr></argument>, <argument><expr><literal type="string">"Vim Online.url"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WritePrivateProfileString</name><argument_list>(<argument><expr><literal type="string">"InternetShortcut"</literal></expr></argument>, <argument><expr><literal type="string">"URL"</literal></expr></argument>,

<argument><expr><literal type="string">"https://www.vim.org/"</literal></expr></argument>, <argument><expr><name>shell_folder_path</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Creating the Vim online URL failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>toggle_startmenu_choice</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>=</operator> <name>install_start_menu</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <literal type="string">"Add Vim to the Start menu"</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <literal type="string">"Do NOT add Vim to the Start menu"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>install_shortcut_gvim</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>build_shortcut</name><argument_list>(<argument><expr><name><name>icon_names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"gvim.exe"</literal></expr></argument>,

<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"desktop"</literal></expr></argument>, <argument><expr><name>WORKDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_uninstall_entry</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>install_shortcut_evim</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>build_shortcut</name><argument_list>(<argument><expr><name><name>icon_names</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"gvim.exe"</literal></expr></argument>,

<argument><expr><literal type="string">"-y"</literal></expr></argument>, <argument><expr><literal type="string">"desktop"</literal></expr></argument>, <argument><expr><name>WORKDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_uninstall_entry</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>install_shortcut_gview</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>build_shortcut</name><argument_list>(<argument><expr><name><name>icon_names</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"gvim.exe"</literal></expr></argument>,

<argument><expr><literal type="string">"-R"</literal></expr></argument>, <argument><expr><literal type="string">"desktop"</literal></expr></argument>, <argument><expr><name>WORKDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_uninstall_entry</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>toggle_shortcut_choice</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>==</operator> <name>install_shortcut_gvim</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="string">"gVim"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>==</operator> <name>install_shortcut_evim</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="string">"gVim Easy"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="string">"gVim Read-only"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>alloc_text</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"Do NOT create a desktop icon for %s"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>alloc_text</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"Create a desktop icon for %s"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_startmenu_choice</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>changefunc</name> <operator>=</operator> <name>toggle_startmenu_choice</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>toggle_startmenu_choice</name><argument_list>(<argument><expr><name>choice_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>++</operator><name>choice_count</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_shortcut_choices</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>arg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>has_gvim</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>changefunc</name> <operator>=</operator> <name>toggle_shortcut_choice</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>=</operator> <name>install_shortcut_gvim</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>toggle_shortcut_choice</name><argument_list>(<argument><expr><name>choice_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>choice_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>arg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>has_gvim</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>changefunc</name> <operator>=</operator> <name>toggle_shortcut_choice</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>=</operator> <name>install_shortcut_evim</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>toggle_shortcut_choice</name><argument_list>(<argument><expr><name>choice_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>choice_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>arg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>has_gvim</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>changefunc</name> <operator>=</operator> <name>toggle_shortcut_choice</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>=</operator> <name>install_shortcut_gview</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>toggle_shortcut_choice</name><argument_list>(<argument><expr><name>choice_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>choice_count</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>install_OLE_register</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>register_command_string</name><index>[<expr><name>BUFSIZE</name> <operator>+</operator> <literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n--- Attempting to register Vim with OLE ---\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(There is no message whether this works or not.)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>register_command_string</name></expr></argument>, <argument><expr><literal type="string">"\"%s\\gvim.exe\" -silent -register"</literal></expr></argument>, <argument><expr><name>installdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>system</name><argument_list>(<argument><expr><name>register_command_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>dir_remove_last</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>to</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>last_char_to_copy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>path_length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>last_char_to_copy</name> <operator>=</operator> <name>path_length</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>last_char_to_copy</name></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>last_char_to_copy</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>last_char_to_copy</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>last_char_to_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><index>[<expr><name>last_char_to_copy</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_directories_text</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>vimfiles_dir_choice</name> <init>= <expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vimfiles_dir_choice</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>vimfiles_dir_none</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>alloc_text</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"Do NOT create plugin directories%s"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>alloc_text</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"Create plugin directories: %s"</literal></expr></argument>,

<argument><expr><name><name>vimfiles_dir_choices</name><index>[<expr><name>vimfiles_dir_choice</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>homedir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>init_homedir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>homedir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>homedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>homedir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>var</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>homedrive</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>homepath</name></decl>;</decl_stmt>

<expr_stmt><expr><name>homedrive</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOMEDRIVE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>homepath</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOMEPATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>homepath</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>homepath</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>homepath</name> <operator>=</operator> <literal type="string">"\\"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>homedrive</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>homedrive</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>homepath</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>homedrive</name></expr></argument>, <argument><expr><name>homepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>var</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"USERPROFILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>var</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>exp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>var</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>var</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <operator>(</operator><name>var</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>p</name> <operator>-</operator> <operator>(</operator><name>var</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>exp</name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>exp</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>var</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>var</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>homedir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>homedir</name> <operator>=</operator> <call><name>_strdup</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>change_directories_choice</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>choice_count</name> <init>= <expr><call><name>TABLE_SIZE</name><argument_list>(<argument><expr><name>vimfiles_dir_choices</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>homedir</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>choice_count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name> <operator>=</operator> <call><name>get_choice</name><argument_list>(<argument><expr><name>vimfiles_dir_choices</name></expr></argument>, <argument><expr><name>choice_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_directories_text</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>install_vimfilesdir</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vimfiles_dir_choice</name> <init>= <expr><name><name>choices</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>vimdir_path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>vimfiles_path</name><index>[<expr><name>MAX_PATH</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp_dirname</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>vimfiles_dir_choice</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>vimfiles_dir_vim</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"VIM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>dir_remove_last</name><argument_list>(<argument><expr><name>installdir</name></expr></argument>, <argument><expr><name>vimdir_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>vimdir_path</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>vimfiles_dir_home</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>homedir</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Internal error: $HOME is NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"c:\\"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>vimdir_path</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>vimfiles_dir_none</name></expr>:</case>

<block>{<block_content>

<return>return;</return>

</block_content>}</block>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>vimfiles_path</name></expr></argument>, <argument><expr><literal type="string">"%s\\vimfiles"</literal></expr></argument>, <argument><expr><name>vimdir_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_mkdir</name><argument_list>(<argument><expr><name>vimfiles_path</name></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Creating the following directories in \"%s\":\n"</literal></expr></argument>, <argument><expr><name>vimfiles_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>TABLE_SIZE</name><argument_list>(<argument><expr><name>vimfiles_subdirs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp_dirname</name></expr></argument>, <argument><expr><literal type="string">"%s\\%s"</literal></expr></argument>, <argument><expr><name>vimfiles_path</name></expr></argument>, <argument><expr><name><name>vimfiles_subdirs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>vimfiles_subdirs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_mkdir</name><argument_list>(<argument><expr><name>tmp_dirname</name></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_directories_choice</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp_dirname</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vimfiles_dir_choice</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><literal type="number">150</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>changefunc</name> <operator>=</operator> <name>change_directories_choice</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>=</operator> <name>install_vimfilesdir</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>vimfiles_dir_choice</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>vimfiles_dir_home</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp_dirname</name></expr></argument>, <argument><expr><literal type="string">"%s\\vimfiles\\compiler"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>tmp_dirname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vimfiles_dir_choice</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>vimfiles_dir_none</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>vimfiles_dir_choice</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>vimfiles_dir_vim</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"VIM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>dir_remove_last</name><argument_list>(<argument><expr><name>installdir</name></expr></argument>, <argument><expr><name>tmp_dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp_dirname</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>tmp_dirname</name></expr></argument>, <argument><expr><literal type="string">"\\vimfiles\\compiler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>tmp_dirname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vimfiles_dir_choice</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>vimfiles_dir_none</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name></expr>]</index></name><operator>.</operator><name>arg</name> <operator>=</operator> <name>vimfiles_dir_choice</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_directories_text</name><argument_list>(<argument><expr><name>choice_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>choice_count</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>setup_choices</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>init_bat_choices</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_vimrc_choices</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_popup_choice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_openwith_choice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_startmenu_choice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_shortcut_choices</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_directories_choice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>print_cmd_line_help</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Vim installer non-interactive command line arguments:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-create-batfiles [vim gvim evim view gview vimdiff gvimdiff]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Create .bat files for Vim variants in the Windows directory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-create-vimrc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Create a default _vimrc file if one does not already exist.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-vimrc-remap [no|win]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Remap keys when creating a default _vimrc file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-vimrc-behave [unix|mswin|default]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Set mouse behavior when creating a default _vimrc file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-vimrc-compat [vi|vim|defaults|all]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Set Vi compatibility when creating a default _vimrc file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-install-popup\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Install the Edit-with-Vim context menu entry\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-install-openwith\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Add Vim to the \"Open With...\" context menu list\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-add-start-menu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Add Vim to the start menu\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-install-icons"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Create icons for gVim executables on the desktop\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-create-directories [vim|home]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Create runtime directories to drop plugins into; in the $VIM\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" or $HOME directory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-register-OLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Ignored\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>command_line_setup_choices</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-create-batfiles"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>argc</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>TARGET_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><name><name>targets</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>exenamearg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'g'</literal></expr> ?</condition><then> <expr><name>has_gvim</name></expr> </then><else>: <expr><name>has_vim</name></expr></else></ternary><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>targets</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>init_bat_choice</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>TARGET_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s is not a valid choice for -create-batfiles\n"</literal></expr></argument>,

<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>argc</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-create-vimrc"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>init_vimrc_choices</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-vimrc-remap"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>argc</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>remap_choice</name> <operator>=</operator> <name>remap_no</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"win"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>remap_choice</name> <operator>=</operator> <name>remap_win</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-vimrc-behave"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>argc</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mouse_choice</name> <operator>=</operator> <name>mouse_xterm</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"mswin"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mouse_choice</name> <operator>=</operator> <name>mouse_mswin</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mouse_choice</name> <operator>=</operator> <name>mouse_default</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-vimrc-compat"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>argc</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"vi"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compat_choice</name> <operator>=</operator> <name>compat_vi</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"vim"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compat_choice</name> <operator>=</operator> <name>compat_vim</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"defaults"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compat_choice</name> <operator>=</operator> <name>compat_some_enhancements</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compat_choice</name> <operator>=</operator> <name>compat_all_enhancements</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-install-popup"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>init_popup_choice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-install-openwith"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>init_openwith_choice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-add-start-menu"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>init_startmenu_choice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-install-icons"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>init_shortcut_choices</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-create-directories"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>vimfiles_dir_choice</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>vimfiles_dir_none</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_directories_choice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"vim"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vimfiles_dir_choice</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>vimfiles_dir_vim</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"home"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>homedir</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>vimfiles_dir_choice</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>vimfiles_dir_none</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>vimfiles_dir_choice</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>vimfiles_dir_home</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Unknown argument for -create-directories: %s\n"</literal></expr></argument>,

<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_cmd_line_help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>vimfiles_dir_choice</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>vimfiles_dir_vim</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>choices</name><index>[<expr><name>choice_count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>arg</name> <operator>=</operator> <name>vimfiles_dir_choice</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-register-OLE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Got unknown argument argv[%d] = %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_cmd_line_help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>show_help</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>items</name><index>[]</index></name><operator>)</operator> <operator>=</operator>

<block>{

<expr><literal type="string">"Installing .bat files\n"</literal>

<literal type="string">"---------------------\n"</literal>

<literal type="string">"The vim.bat file is written in one of the directories in $PATH.\n"</literal>

<literal type="string">"This makes it possible to start Vim from the command line.\n"</literal>

<literal type="string">"If vim.exe can be found in $PATH, the choice for vim.bat will not be\n"</literal>

<literal type="string">"present. It is assumed you will use the existing vim.exe.\n"</literal>

<literal type="string">"If vim.bat can already be found in $PATH this is probably for an old\n"</literal>

<literal type="string">"version of Vim (but this is not checked!). You can overwrite it.\n"</literal>

<literal type="string">"If no vim.bat already exists, you can select one of the directories in\n"</literal>

<literal type="string">"$PATH for creating the batch file, or disable creating a vim.bat file.\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"If you choose not to create the vim.bat file, Vim can still be executed\n"</literal>

<literal type="string">"in other ways, but not from the command line.\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"The same applies to choices for gvim, evim, (g)view, and (g)vimdiff.\n"</literal>

<literal type="string">"The first item can be used to change the path for all of them.\n"</literal></expr>

,

<expr><literal type="string">"Creating a _vimrc file\n"</literal>

<literal type="string">"----------------------\n"</literal>

<literal type="string">"The _vimrc file is used to set options for how Vim behaves.\n"</literal>

<literal type="string">"The install program can create a _vimrc file with a few basic choices.\n"</literal>

<literal type="string">"You can edit this file later to tune your preferences.\n"</literal>

<literal type="string">"If you already have a _vimrc or .vimrc file it can be overwritten.\n"</literal>

<literal type="string">"Don't do that if you have made changes to it.\n"</literal></expr>

,

<expr><literal type="string">"Vim features\n"</literal>

<literal type="string">"------------\n"</literal>

<literal type="string">"(this choice is only available when creating a _vimrc file)\n"</literal>

<literal type="string">"1. Vim can run in Vi-compatible mode. Many nice Vim features are then\n"</literal>

<literal type="string">" disabled. Only choose Vi-compatible if you really need full Vi\n"</literal>

<literal type="string">" compatibility.\n"</literal>

<literal type="string">"2. Vim runs in not-Vi-compatible mode. Vim is still mostly Vi compatible,\n"</literal>

<literal type="string">" but adds nice features like multi-level undo.\n"</literal>

<literal type="string">"3. Running Vim with some enhancements is useful when you want some of\n"</literal>

<literal type="string">" the nice Vim features, but have a slow computer and want to keep it\n"</literal>

<literal type="string">" really fast.\n"</literal>

<literal type="string">"4. Syntax highlighting shows many files in color. Not only does this look\n"</literal>

<literal type="string">" nice, it also makes it easier to spot errors and you can work faster.\n"</literal>

<literal type="string">" The other features include editing compressed files.\n"</literal></expr>

,

<expr><literal type="string">"Windows key mapping\n"</literal>

<literal type="string">"-------------------\n"</literal>

<literal type="string">"(this choice is only available when creating a _vimrc file)\n"</literal>

<literal type="string">"Under MS-Windows the CTRL-C key copies text to the clipboard and CTRL-V\n"</literal>

<literal type="string">"pastes text from the clipboard. There are a few more keys like these.\n"</literal>

<literal type="string">"Unfortunately, in Vim these keys normally have another meaning.\n"</literal>

<literal type="string">"1. Choose to have the keys like they normally are in Vim (useful if you\n"</literal>

<literal type="string">" also use Vim on other systems).\n"</literal>

<literal type="string">"2. Choose to have the keys work like they are used on MS-Windows (useful\n"</literal>

<literal type="string">" if you mostly work on MS-Windows).\n"</literal></expr>

,

<expr><literal type="string">"Mouse use\n"</literal>

<literal type="string">"---------\n"</literal>

<literal type="string">"(this choice is only available when creating a _vimrc file)\n"</literal>

<literal type="string">"The right mouse button can be used in two ways:\n"</literal>

<literal type="string">"1. The Unix way is to extend an existing selection. The popup menu is\n"</literal>

<literal type="string">" not available.\n"</literal>

<literal type="string">"2. The MS-Windows way is to show a popup menu, which allows you to\n"</literal>

<literal type="string">" copy/paste text, undo/redo, etc. Extending the selection can still be\n"</literal>

<literal type="string">" done by keeping SHIFT pressed while using the left mouse button\n"</literal></expr>

,

<expr><literal type="string">"Edit-with-Vim context menu entry\n"</literal>

<literal type="string">"--------------------------------\n"</literal>

<literal type="string">"(this choice is only available when gvim.exe and gvimext.dll are present)\n"</literal>

<literal type="string">"You can associate different file types with Vim, so that you can (double)\n"</literal>

<literal type="string">"click on a file to edit it with Vim. This means you have to individually\n"</literal>

<literal type="string">"select each file type.\n"</literal>

<literal type="string">"An alternative is the option offered here: Install an \"Edit with Vim\"\n"</literal>

<literal type="string">"entry in the popup menu for the right mouse button. This means you can\n"</literal>

<literal type="string">"edit any file with Vim.\n"</literal></expr>

,

<expr><literal type="string">"\"Open With...\" context menu entry\n"</literal>

<literal type="string">"--------------------------------\n"</literal>

<literal type="string">"(this choice is only available when gvim.exe is present)\n"</literal>

<literal type="string">"This option adds Vim to the \"Open With...\" entry in the popup menu for\n"</literal>

<literal type="string">"the right mouse button. This also makes it possible to edit HTML files\n"</literal>

<literal type="string">"directly from Internet Explorer.\n"</literal></expr>

,

<expr><literal type="string">"Add Vim to the Start menu\n"</literal>

<literal type="string">"-------------------------\n"</literal>

<literal type="string">"In Windows 95 and later, Vim can be added to the Start menu. This will\n"</literal>

<literal type="string">"create a submenu with an entry for vim, gvim, evim, vimdiff, etc..\n"</literal></expr>

,

<expr><literal type="string">"Icons on the desktop\n"</literal>

<literal type="string">"--------------------\n"</literal>

<literal type="string">"(these choices are only available when installing gvim)\n"</literal>

<literal type="string">"In Windows 95 and later, shortcuts (icons) can be created on the Desktop.\n"</literal></expr>

,

<expr><literal type="string">"Create plugin directories\n"</literal>

<literal type="string">"-------------------------\n"</literal>

<literal type="string">"Plugin directories allow extending Vim by dropping a file into a directory.\n"</literal>

<literal type="string">"This choice allows creating them in $HOME (if you have a home directory) or\n"</literal>

<literal type="string">"$VIM (used for everybody on the system).\n"</literal></expr>

,

<expr><name>NULL</name></expr>

}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Hit Enter to continue, b (back) or q (quit help): "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'q'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'Q'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>install</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>choice_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>choices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>installfunc</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>choices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name><name>choices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>installfunc</name><operator>)</operator><operator>(</operator><name>i</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>install_popup</name>

<operator>||</operator> <name>install_openwith</name>

<operator>||</operator> <operator>(</operator><name>need_uninstall_entry</name> <operator>&amp;&amp;</operator> <name>interactive</name><operator>)</operator>

<operator>||</operator> <operator>!</operator><name>interactive</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>install_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_gvim</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>install_OLE_register</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>request_choice</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n\nInstall will do for you:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>choice_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>choices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%2d %s\n"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>choices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"To change an item, enter its number\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Enter item number, h (help), d (do it) or q (quit): "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>interactive</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>interactive</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>do_inits</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_homedir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-uninstall-check"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>uninstall_check</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_vim_env</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <call><name>_isatty</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"This program sets up the installation of Vim "</literal>

<name>VIM_VERSION_MEDIUM</name> <literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_unpack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>uninstall_check</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>inspect_system</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setup_choices</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>request_choice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%99s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>choice_count</name> <operator>&amp;&amp;</operator> <name><name>choices</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name><name>choices</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>changefunc</name><operator>)</operator><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nIllegal choice\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'h'</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'H'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>show_help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'D'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>install</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nThat finishes the installation. Happy Vimming!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'q'</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'Q'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nExiting without anything done\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nIllegal choice\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>myexit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>command_line_setup_choices</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>install</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
