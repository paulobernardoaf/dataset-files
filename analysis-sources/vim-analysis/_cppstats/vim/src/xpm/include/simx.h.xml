<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\xpm\include\simx.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FOR_MSW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"windows.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC__</name> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern t f p</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LFUNC</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static t f p</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern t f()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LFUNC</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static t f()</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>boundCheckingMalloc</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>boundCheckingCalloc</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>num</name><operator>,</operator> <name>long</name> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>boundCheckingRealloc</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><name>p</name><operator>,</operator> <name>long</name> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><name>HDC</name></type> <name>Display</name>;</typedef> 

<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>Screen</name>;</typedef> 

<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>Visual</name>;</typedef> 

<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>Colormap</name>;</typedef> 

<typedef>typedef <type><name>COLORREF</name></type> <name>Pixel</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXEL_ALREADY_TYPEDEFED</name></cpp:macro></cpp:define> 

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>Pixel</name></type> <name>pixel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name>red</name></decl>, <name>green</name>, <name>blue</name>;</decl_stmt>

}</block></struct></type> <name>XColor</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>HBITMAP</name></type> <name>bitmap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>depth</name></decl>;</decl_stmt>

}</block></struct></type> <name>XImage</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XDefaultVisual</name></expr></argument>, <argument><expr><name>Visual</name> <operator>*</operator></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>display</name><operator>,</operator> <name>Screen</name> <operator>*</operator><name>screen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XDefaultScreen</name></expr></argument>, <argument><expr><name>Screen</name> <operator>*</operator></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XDefaultColormap</name></expr></argument>, <argument><expr><name>Colormap</name> <operator>*</operator></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>display</name><operator>,</operator> <name>Screen</name> <operator>*</operator><name>screen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XDefaultDepth</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>d</name><operator>,</operator> <name>Screen</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XParseColor</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><operator>,</operator> <name>Colormap</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>,</operator> <name>XColor</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XAllocColor</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><operator>,</operator> <name>Colormap</name> <operator>*</operator><operator>,</operator> <name>XColor</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XQueryColors</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>display</name><operator>,</operator> <name>Colormap</name> <operator>*</operator><name>colormap</name><operator>,</operator>

<name>XColor</name> <operator>*</operator><name>xcolors</name><operator>,</operator> <name>int</name> <name>ncolors</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XFreeColors</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><name>d</name><operator>,</operator> <name>Colormap</name> <name>cmap</name><operator>,</operator>

<name>unsigned</name> <name>long</name> <name><name>pixels</name><index>[]</index></name><operator>,</operator>

<name>int</name> <name>npixels</name><operator>,</operator> <name>unsigned</name> <name>long</name> <name>planes</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XCreateImage</name></expr></argument>, <argument><expr><name>XImage</name> <operator>*</operator></expr></argument>, <argument><expr><operator>(</operator><name>Display</name> <operator>*</operator><operator>,</operator> <name>Visual</name> <operator>*</operator><operator>,</operator> <name>int</name> <name>depth</name><operator>,</operator> <name>int</name> <name>format</name><operator>,</operator>

<name>int</name> <name>x</name><operator>,</operator> <name>int</name> <name>y</name><operator>,</operator> <name>int</name> <name>width</name><operator>,</operator> <name>int</name> <name>height</name><operator>,</operator>

<name>int</name> <name>pad</name><operator>,</operator> <name>int</name> <name>foo</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XDestroyImage</name></expr></argument>, <argument><expr><name>void</name></expr></argument> , <argument><expr><operator>(</operator><name>XImage</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FUNC</name><argument_list>(<argument><expr><name>XImageFree</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><operator>(</operator><name>XImage</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>c_plusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

</block_content>}</block></extern> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZPixmap</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XYBitmap</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>True</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>True</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>False</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Bool</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>BOOL</name></type> <name>Bool</name>;</typedef> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LFUNC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FUNC</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
