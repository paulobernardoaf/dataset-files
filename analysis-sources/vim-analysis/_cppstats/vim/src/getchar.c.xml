<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\getchar.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIMAL_SIZE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>buffheader_T</name></type> <name>redobuff</name> <init>= <expr><block>{<expr><block>{<expr><name>NULL</name></expr>, <expr><block>{<expr><name>NUL</name></expr>}</block></expr>}</block></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>buffheader_T</name></type> <name>old_redobuff</name> <init>= <expr><block>{<expr><block>{<expr><name>NULL</name></expr>, <expr><block>{<expr><name>NUL</name></expr>}</block></expr>}</block></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>buffheader_T</name></type> <name>recordbuff</name> <init>= <expr><block>{<expr><block>{<expr><name>NULL</name></expr>, <expr><block>{<expr><name>NUL</name></expr>}</block></expr>}</block></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>typeahead_char</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>block_redo</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>KeyNoremap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RM_YES</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RM_NONE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RM_SCRIPT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RM_ABBR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPELEN_INIT</name></cpp:macro> <cpp:value>(5 * (MAXMAPLEN + 3))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>typebuf_init</name><index>[<expr><name>TYPELEN_INIT</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>noremapbuf_init</name><index>[<expr><name>TYPELEN_INIT</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_recorded_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_readbuf</name><parameter_list>(<parameter><decl><type><name>buffheader_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>advance</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>init_typebuf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>may_sync_undo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_typebuf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>closescript</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>updatescript</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vgetorpeek</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>inchar</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>wait_time</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>

<name>free_buff</name><parameter_list>(<parameter><decl><type><name>buffheader_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buffblock_T</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name>np</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>b_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>get_buffcont</name><parameter_list>(

<parameter><decl><type><name>buffheader_T</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dozero</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>long_u</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buffblock_T</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>bp</name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name></expr>;</init> <condition><expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>bp</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>b_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <operator>(</operator><name>long_u</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>b_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>count</name> <operator>||</operator> <name>dozero</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bp</name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name></expr>;</init> <condition><expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>bp</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>b_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>str</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>b_str</name></name></expr>;</init> <condition><expr><operator>*</operator><name>str</name></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p2</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>str</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>get_recorded</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_buffcont</name><argument_list>(<argument><expr><operator>&amp;</operator><name>recordbuff</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>recordbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name> <operator>&gt;=</operator> <name>last_recorded_len</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>last_recorded_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>restart_edit</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>Ctrl_O</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>get_inserted</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>get_buffcont</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>add_buff</name><parameter_list>(

<parameter><decl><type><name>buffheader_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>slen</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>buffblock_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_space</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_curr</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>bh_first</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>bh_curr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>iemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E222: Add to read buffer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>bh_index</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name><operator>-&gt;</operator><name>b_str</name></name></expr></argument>,

<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name><operator>-&gt;</operator><name>b_str</name></name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>bh_index</name></name></expr></argument>,

<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name><operator>-&gt;</operator><name>b_str</name></name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>bh_index</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>bh_space</name></name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>slen</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>long_u</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_curr</name><operator>-&gt;</operator><name>b_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_curr</name><operator>-&gt;</operator><name>b_str</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_space</name></name> <operator>-=</operator> <name>slen</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>&lt;</operator> <name>MINIMAL_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>MINIMAL_SIZE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>slen</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>buffblock_T</name></expr></argument>, <argument><expr><name>b_str</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_space</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <name>slen</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>b_str</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>b_next</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>bh_curr</name><operator>-&gt;</operator><name>b_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_curr</name><operator>-&gt;</operator><name>b_next</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_curr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>add_num_buff</name><parameter_list>(<parameter><decl><type><name>buffheader_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>number</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>number</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>add_char_buff</name><parameter_list>(<parameter><decl><type><name>buffheader_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>bytes</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>temp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_SPECIAL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>K_SECOND</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>K_THIRD</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>CSI</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>buffheader_T</name></type> <name>readbuf1</name> <init>= <expr><block>{<expr><block>{<expr><name>NULL</name></expr>, <expr><block>{<expr><name>NUL</name></expr>}</block></expr>}</block></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>buffheader_T</name></type> <name>readbuf2</name> <init>= <expr><block>{<expr><block>{<expr><name>NULL</name></expr>, <expr><block>{<expr><name>NUL</name></expr>}</block></expr>}</block></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>read_readbuffers</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>advance</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>read_readbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf1</name></expr></argument>, <argument><expr><name>advance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>read_readbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf2</name></expr></argument>, <argument><expr><name>advance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>read_readbuf</name><parameter_list>(<parameter><decl><type><name>buffheader_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>advance</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buffblock_T</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>NUL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>b_str</name><index>[<expr><name><name>buf</name><operator>-&gt;</operator><name>bh_index</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>advance</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>b_str</name><index>[<expr><operator>++</operator><name><name>buf</name><operator>-&gt;</operator><name>bh_index</name></name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>b_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>start_stuff</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>readbuf1</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>readbuf1</name><operator>.</operator><name>bh_curr</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>readbuf1</name><operator>.</operator><name>bh_first</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>readbuf1</name><operator>.</operator><name>bh_space</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>readbuf2</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>readbuf2</name><operator>.</operator><name>bh_curr</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>readbuf2</name><operator>.</operator><name>bh_first</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>readbuf2</name><operator>.</operator><name>bh_space</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>stuff_empty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>readbuf1</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>readbuf2</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>readbuf1_empty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>readbuf1</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>typeahead_noflush</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>typeahead_char</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>flush_buffers</name><parameter_list>(<parameter><decl><type><name>flush_buffers_T</name></type> <name>flush_typeahead</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>init_typebuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>start_stuff</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>read_readbuffers</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>flush_typeahead</name> <operator>==</operator> <name>FLUSH_MINIMAL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>typebuf_was_filled</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flush_typeahead</name> <operator>==</operator> <name>FLUSH_INPUT</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><call><name>inchar</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name></expr></argument>, <argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buflen</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10L</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>=</operator> <name>MAXMAPLEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>typebuf_was_filled</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_silent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd_silent</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ResetRedobuff</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block_redo</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_redobuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_redobuff</name> <operator>=</operator> <name>redobuff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>redobuff</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>CancelRedo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block_redo</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>redobuff</name> <operator>=</operator> <name>old_redobuff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>old_redobuff</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>start_stuff</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>read_readbuffers</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>saveRedobuff</name><parameter_list>(<parameter><decl><type><name>save_redo_T</name> <modifier>*</modifier></type><name>save_redo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>save_redo</name><operator>-&gt;</operator><name>sr_redobuff</name></name> <operator>=</operator> <name>redobuff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>redobuff</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>save_redo</name><operator>-&gt;</operator><name>sr_old_redobuff</name></name> <operator>=</operator> <name>old_redobuff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>old_redobuff</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>get_buffcont</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>save_redo</name><operator>-&gt;</operator><name>sr_redobuff</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>restoreRedobuff</name><parameter_list>(<parameter><decl><type><name>save_redo_T</name> <modifier>*</modifier></type><name>save_redo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>redobuff</name> <operator>=</operator> <name><name>save_redo</name><operator>-&gt;</operator><name>sr_redobuff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_redobuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_redobuff</name> <operator>=</operator> <name><name>save_redo</name><operator>-&gt;</operator><name>sr_old_redobuff</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>AppendToRedobuff</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block_redo</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>AppendToRedobuffLit</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block_redo</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><ternary><condition><expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr> </then><else>: <expr><name>s</name> <operator>-</operator> <name>str</name> <operator>&lt;</operator> <name>len</name></expr></else></ternary></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">' '</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&lt;</operator> <name>DEL</name> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>s</name> <operator>-</operator> <name>str</name> <operator>&lt;</operator> <name>len</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>(</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>s</name> <operator>-</operator> <name>str</name> <operator>&gt;=</operator> <name>len</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>mb_cptr2char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>DEL</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_char_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>, <argument><expr><name>Ctrl_V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"xf0"</literal></expr></argument>, <argument><expr><literal type="number">3L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"048"</literal></expr></argument>, <argument><expr><literal type="number">3L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_char_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>AppendCharToRedobuff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block_redo</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_char_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>AppendNumberToRedobuff</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block_redo</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_num_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>stuffReadbuff</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf1</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>stuffRedoReadbuff</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf2</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>stuffReadbuffLen</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf1</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>stuffReadbuffSpec</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>stuffReadbuffLen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>CAR</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>NL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>ESC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>stuffcharReadbuff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>add_char_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>stuffnumReadbuff</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>add_num_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf1</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>read_redo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>init</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>old_redo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>buffblock_T</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>init</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>old_redo</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name><name>old_redobuff</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name><name>redobuff</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>b_str</name></name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>)</operator> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <name>K_SPECIAL</name> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_SPECIAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>MB_BYTE2LEN_CHECK</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>TO_SPECIAL</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>CSI</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>p</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>bp</name><operator>-&gt;</operator><name>b_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>b_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>b_str</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2char</name>)<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>copy_redo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>old_redo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>read_redo</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>old_redo</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_char_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>start_redo</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>old_redo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_redo</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>old_redo</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>read_redo</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>old_redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf2</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>read_redo</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>old_redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'1'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_char_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>add_char_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf2</name></expr></argument>, <argument><expr><name>CAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd_silent</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>read_redo</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>old_redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_select</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>redo_VIsual_busy</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>read_redo</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>old_redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>read_redo</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>old_redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>add_num_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf2</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_char_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_redo</name><argument_list>(<argument><expr><name>old_redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>start_redo_ins</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_redo</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>start_stuff</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>read_redo</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"AaIiRrOo"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'O'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'o'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf2</name></expr></argument>, <argument><expr><name>NL_STR</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>copy_redo</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_redo</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>stop_redo_ins</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>block_redo</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_typebuf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>=</operator> <name>typebuf_init</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>=</operator> <name>noremapbuf_init</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_buflen</name></name> <operator>=</operator> <name>TYPELEN_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>=</operator> <name>MAXMAPLEN</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>noremap_keys</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>KeyNoremap</name> <operator>&amp;</operator> <operator>(</operator><name>RM_NONE</name><operator>|</operator><name>RM_SCRIPT</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ins_typebuf</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>noremap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nottyped</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>silent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>newlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>addlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>newoff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nrm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_typebuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>state_no_longer_safe</name><argument_list>(<argument><expr><literal type="string">"ins_typebuf()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>addlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>addlen</name> <operator>&lt;=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>-=</operator> <name>addlen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>addlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_buflen</name></name>

<operator>&gt;=</operator> <name>addlen</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>MAXMAPLEN</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>=</operator> <operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_buflen</name></name> <operator>-</operator> <name>addlen</name> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>MAXMAPLEN</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>addlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>newoff</name> <operator>=</operator> <name>MAXMAPLEN</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>newlen</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>+</operator> <name>addlen</name> <operator>+</operator> <name>newoff</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>MAXMAPLEN</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_toocompl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_buflen</name></name> <operator>=</operator> <name>newlen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>s1</name> <operator>+</operator> <name>newoff</name></expr></argument>, <argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>s1</name> <operator>+</operator> <name>newoff</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>addlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>s1</name> <operator>+</operator> <name>newoff</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>addlen</name></expr></argument>,

<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>offset</name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-</operator> <name>offset</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>!=</operator> <name>typebuf_init</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>s2</name> <operator>+</operator> <name>newoff</name></expr></argument>, <argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>s2</name> <operator>+</operator> <name>newoff</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>addlen</name></expr></argument>,

<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>offset</name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-</operator> <name>offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>!=</operator> <name>noremapbuf_init</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>=</operator> <name>newoff</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>+=</operator> <name>addlen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>noremap</name> <operator>==</operator> <name>REMAP_SCRIPT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>RM_SCRIPT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>noremap</name> <operator>==</operator> <name>REMAP_SKIP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>RM_ABBR</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>RM_NONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>noremap</name> <operator>==</operator> <name>REMAP_SKIP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nrm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>noremap</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nrm</name> <operator>=</operator> <name>addlen</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>nrm</name> <operator>=</operator> <name>noremap</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>addlen</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>offset</name></expr>]</index></name> <operator>=</operator>

<ternary><condition><expr><operator>(</operator><operator>--</operator><name>nrm</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>val</name></expr> </then><else>: <expr><name>RM_YES</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>nottyped</name> <operator>||</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>&gt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>+=</operator> <name>addlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>silent</name> <operator>||</operator> <name><name>typebuf</name><operator>.</operator><name>tb_silent</name></name> <operator>&gt;</operator> <name>offset</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_silent</name></name> <operator>+=</operator> <name>addlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd_silent</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>+=</operator> <name>addlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ins_char_typebuf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>K_SECOND</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>K_THIRD</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ins_typebuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>KeyNoremap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>!</operator><name>KeyTyped</name></expr></argument>, <argument><expr><name>cmd_silent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>typebuf_changed</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>tb_change_cnt</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<return>return <expr><operator>(</operator><name>tb_change_cnt</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>!=</operator> <name>tb_change_cnt</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator> <name>typebuf_was_filled</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>typebuf_typed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>typebuf_maplen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>del_typebuf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_buflen</name></name> <operator>-</operator> <operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>len</name><operator>)</operator>

<operator>&gt;=</operator> <literal type="number">3</literal> <operator>*</operator> <name>MAXMAPLEN</name> <operator>+</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>&gt;</operator> <name>MAXMAPLEN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name>MAXMAPLEN</name></expr></argument>,

<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>+</operator> <name>MAXMAPLEN</name></expr></argument>,

<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>=</operator> <name>MAXMAPLEN</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>offset</name></expr></argument>,

<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>len</name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-</operator> <name>offset</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>offset</name></expr></argument>,

<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>len</name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-</operator> <name>offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>&gt;</operator> <name>offset</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_silent</name></name> <operator>&gt;</operator> <name>offset</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_silent</name></name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_silent</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_silent</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>&gt;</operator> <name>offset</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>typebuf_was_filled</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gotchars</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>chars</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>chars</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>buflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>todo</name><operator>--</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buflen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_EXTRA</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>KE_FOCUSGAINED</name> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>KE_FOCUSLOST</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buflen</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>updatescript</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>reg_recording</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buflen</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>recordbuff</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_recorded_len</name> <operator>+=</operator> <name>buflen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>may_sync_undo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>debug_did_msg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>++</operator><name>maptick</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>may_sync_undo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <operator>(</operator><name>INSERT</name> <operator>+</operator> <name>CMDLINE</name><operator>)</operator><operator>)</operator> <operator>||</operator> <name>arrow_used</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>scriptin</name><index>[<expr><name>curscript</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>u_sync</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>alloc_typebuf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>TYPELEN_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>TYPELEN_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_typebuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_buflen</name></name> <operator>=</operator> <name>TYPELEN_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>=</operator> <name>MAXMAPLEN</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_silent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>typebuf_was_filled</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>free_typebuf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>==</operator> <name>typebuf_init</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"Free typebuf 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>==</operator> <name>noremapbuf_init</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"Free typebuf 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>typebuf_T</name></type> <name><name>saved_typebuf</name><index>[<expr><name>NSCRIPT</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type>

<name>save_typebuf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>init_typebuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>saved_typebuf</name><index>[<expr><name>curscript</name></expr>]</index></name> <operator>=</operator> <name>typebuf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>alloc_typebuf</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>closescript</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_char</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_mod_mask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_mouse_row</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_mouse_col</name></decl>;</decl_stmt> 

<function><type><name>void</name></type>

<name>save_typeahead</name><parameter_list>(<parameter><decl><type><name>tasave_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>save_typebuf</name></name> <operator>=</operator> <name>typebuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>typebuf_valid</name></name> <operator>=</operator> <operator>(</operator><call><name>alloc_typebuf</name><argument_list>()</argument_list></call> <operator>==</operator> <name>OK</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tp</name><operator>-&gt;</operator><name>typebuf_valid</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>typebuf</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>save_typebuf</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>old_char</name></name> <operator>=</operator> <name>old_char</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>old_mod_mask</name></name> <operator>=</operator> <name>old_mod_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_char</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>save_readbuf1</name></name> <operator>=</operator> <name>readbuf1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>readbuf1</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>save_readbuf2</name></name> <operator>=</operator> <name>readbuf2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>readbuf2</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_INPUT_BUF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>save_inputbuf</name></name> <operator>=</operator> <call><name>get_input_buf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>restore_typeahead</name><parameter_list>(<parameter><decl><type><name>tasave_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>typebuf_valid</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_typebuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>typebuf</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>save_typebuf</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old_char</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>old_char</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_mod_mask</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>old_mod_mask</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>readbuf1</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>save_readbuf1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>readbuf2</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>save_readbuf2</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_INPUT_BUF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_input_buf</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>save_inputbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>openscript</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>directly</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>curscript</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>NSCRIPT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nesting</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ignore_script</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>scriptin</name><index>[<expr><name>curscript</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>++</operator><name>curscript</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>expand_env</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>scriptin</name><index>[<expr><name>curscript</name></expr>]</index></name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NameBuff</name></expr></argument>, <argument><expr><name>READBIN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notopen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curscript</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>curscript</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>save_typebuf</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>directly</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>oparg_T</name></type> <name>oa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>oldcurscript</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_State</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_restart_edit</name> <init>= <expr><name>restart_edit</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_insertmode</name> <init>= <expr><name>p_im</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_finish_op</name> <init>= <expr><name>finish_op</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_msg_scroll</name> <init>= <expr><name>msg_scroll</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_im</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>clear_oparg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>finish_op</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>oldcurscript</name> <operator>=</operator> <name>curscript</name></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><call><name>update_topline_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>normal_cmd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oa</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vpeekc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block>

while <condition>(<expr><name><name>scriptin</name><index>[<expr><name>oldcurscript</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>save_State</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>save_msg_scroll</name></expr>;</expr_stmt>

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <name>save_restart_edit</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_im</name> <operator>=</operator> <name>save_insertmode</name></expr>;</expr_stmt>

<expr_stmt><expr><name>finish_op</name> <operator>=</operator> <name>save_finish_op</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>closescript</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free_typebuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>typebuf</name> <operator>=</operator> <name><name>saved_typebuf</name><index>[<expr><name>curscript</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>scriptin</name><index>[<expr><name>curscript</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scriptin</name><index>[<expr><name>curscript</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curscript</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>curscript</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>close_all_scripts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name><name>scriptin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>closescript</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>using_script</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>scriptin</name><index>[<expr><name>curscript</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>before_blocking</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>updatescript</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>may_garbage_collect</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>garbage_collect</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>updatescript</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <name>scriptout</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>scriptout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>p_uc</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>++</operator><name>count</name> <operator>&gt;=</operator> <name>p_uc</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ml_sync_all</name><argument_list>(<argument><expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>merge_modifyOtherKeys</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c_arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>c_arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_CTRL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'`'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'@'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'_'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>&amp;=</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mod_mask</name> <operator>&amp;=</operator> <operator>~</operator><name>MOD_MASK_CTRL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'6'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x1e</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mod_mask</name> <operator>&amp;=</operator> <operator>~</operator><name>MOD_MASK_CTRL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <operator>(</operator><name>MOD_MASK_META</name> <operator>|</operator> <name>MOD_MASK_ALT</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">127</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mod_mask</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>MOD_MASK_META</name><operator>|</operator><name>MOD_MASK_ALT</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vgetc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>may_garbage_collect</name> <operator>&amp;&amp;</operator> <name>want_garbage_collect</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>garbage_collect</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>old_char</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>old_char</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_char</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mod_mask</name> <operator>=</operator> <name>old_mod_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_row</name> <operator>=</operator> <name>old_mouse_row</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_col</name> <operator>=</operator> <name>old_mouse_col</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>mod_mask</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_recorded_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>did_inc</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_mask</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator> <call><name>im_is_preediting</name><argument_list>()</argument_list></call>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator> <call><name>popup_no_mapping</name><argument_list>()</argument_list></call></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>allow_keys</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_inc</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vgetorpeek</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>did_inc</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>allow_keys</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SPECIAL</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <name>CSI</name><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_allow_keys</name> <init>= <expr><name>allow_keys</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><name>allow_keys</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>vgetorpeek</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vgetorpeek</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><name>allow_keys</name> <operator>=</operator> <name>save_allow_keys</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>KS_MODIFIER</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>mod_mask</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>TO_SPECIAL</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>c</name> <operator>==</operator> <name>K_TEAROFF</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>name</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>vgetorpeek</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="char">'\r'</literal></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">199</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_make_tearoff</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_F10</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>menubar</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gtk_menu_shell_select_first</name><argument_list>(

<argument><expr><call><name>GTK_MENU_SHELL</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>menubar</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_FOCUSGAINED</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_FOCUSLOST</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ui_focus_change</name><argument_list>(<argument><expr><name>c</name> <operator>==</operator> <name>K_FOCUSGAINED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_IGNORE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_CSI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>K_KPLUS</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_KMINUS</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_KDIVIDE</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_KMULTIPLY</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_KENTER</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_KPOINT</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>MapVirtualKey</name><argument_list>(<argument><expr><name>VK_DECIMAL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt> <break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>K_K0</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_K1</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_K2</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'2'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_K3</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'3'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_K4</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'4'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_K5</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'5'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_K6</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'6'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_K7</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'7'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_K8</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'8'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_K9</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'9'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_XHOME</name></expr>:</case>

<case>case <expr><name>K_ZHOME</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>==</operator> <name>MOD_MASK_SHIFT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_S_HOME</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mod_mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>mod_mask</name> <operator>==</operator> <name>MOD_MASK_CTRL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_C_HOME</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mod_mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_HOME</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>K_XEND</name></expr>:</case>

<case>case <expr><name>K_ZEND</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>==</operator> <name>MOD_MASK_SHIFT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_S_END</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mod_mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>mod_mask</name> <operator>==</operator> <name>MOD_MASK_CTRL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_C_END</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mod_mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_END</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>K_XUP</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_UP</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_XDOWN</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_DOWN</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_XLEFT</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_LEFT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_XRIGHT</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_RIGHT</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>n</name> <operator>=</operator> <call><name>MB_BYTE2LEN_CHECK</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vgetorpeek</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>CSI</name><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vgetorpeek</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vgetorpeek</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_CSI</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <name>KS_EXTRA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>--</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2char</name>)<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_reduce_keys</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>merge_modifyOtherKeys</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>may_garbage_collect</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>K_MOUSEMOVE</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>K_IGNORE</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>K_CURSORHOLD</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>bevalexpr_due_set</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_remove_balloon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>popup_do_filter</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_C</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_IGNORE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>K_IGNORE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state_no_longer_safe</name><argument_list>(<argument><expr><literal type="string">"key typed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>safe_vgetc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_keystroke</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>plain_vgetc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<do>do<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>safe_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block>

while <condition>(<expr><name>c</name> <operator>==</operator> <name>K_IGNORE</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_VER_SCROLLBAR</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_HOR_SCROLLBAR</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_PS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>bracketed_paste</name><argument_list>(<argument><expr><name>PASTE_ONE_CHAR</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vpeekc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>old_char</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>old_char</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vgetorpeek</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>vpeekc_nomap</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>allow_keys</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vpeekc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>allow_keys</name></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>vpeekc_any</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vpeekc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>ESC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>char_avail</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>disable_char_avail_for_testing</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>++</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>vpeekc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>no_mapping</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>retval</name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>f_getchar</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MESSAGE_QUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>parse_queued_messages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>msg_row</name></expr></argument>, <argument><expr><name>msg_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>allow_keys</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>plain_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>vpeekc_any</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>error</name> <operator>||</operator> <call><name>vpeekc_any</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>plain_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>K_IGNORE</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></for>

<expr_stmt><expr><operator>--</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>allow_keys</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_MOUSE_WIN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_MOUSE_WINID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_MOUSE_LNUM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_MOUSE_COL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>mod_mask</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>temp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>KS_MODIFIER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>mod_mask</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>K_SECOND</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>K_THIRD</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>temp</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_mouse_key</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>mouse_row</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name>mouse_col</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>winnr</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>win</name> <operator>=</operator> <call><name>mouse_find_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>FIND_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>win</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mouse_comp_pos</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>winnr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <name>firstwin</name></expr>;</init> <condition><expr><name>wp</name> <operator>!=</operator> <name>win</name> <operator>&amp;&amp;</operator> <name>wp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>winnr</name></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_MOUSE_WIN</name></expr></argument>, <argument><expr><name>winnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_MOUSE_WINID</name></expr></argument>, <argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_MOUSE_LNUM</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_MOUSE_COL</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_getcharmod</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>mod_mask</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MESSAGE_QUEUE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_REPEAT_PARSE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<function><type><name>void</name></type>

<name>parse_queued_messages</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>old_curwin_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_curbuf_fnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_may_garbage_collect</name> <init>= <expr><name>may_garbage_collect</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>entered</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>was_safe</name> <init>= <expr><call><name>get_was_safe_state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>updating_screen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curbuf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>curwin</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_curbuf_fnum</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_curwin_id</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>entered</name></expr>;</expr_stmt>

<expr_stmt><expr><name>may_garbage_collect</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_REPEAT_PARSE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>channel_handle_events</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>netbeans_parse_messages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>channel_write_any_lines</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_parse_messages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>server_parse_messages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>job_check_ended</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free_unused_terminals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SOUND_CANBERRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>has_sound_callback_in_queue</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>invoke_sound_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>entered</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>was_safe</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>may_trigger_safestateagain</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>may_garbage_collect</name> <operator>=</operator> <name>save_may_garbage_collect</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_id</name></name> <operator>!=</operator> <name>old_curwin_id</name> <operator>||</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name> <operator>!=</operator> <name>old_curbuf_fnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_char_typebuf</name><argument_list>(<argument><expr><name>K_IGNORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>entered</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <block>{

<decl><name>map_result_fail</name></decl>, 

<decl><name>map_result_get</name></decl>, 

<decl><name>map_result_retry</name></decl>, 

<decl><name>map_result_nomatch</name></decl> 

}</block></enum></type> <name>map_result_T</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>at_ctrl_x_key</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&gt;</operator> <literal type="number">3</literal>

<operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <name>K_SPECIAL</name>

<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_MODIFIER</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>MOD_MASK_CTRL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>vim_is_ctrl_x_key</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>handle_mapping</name><parameter_list>(

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keylenp</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>timedout</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mapdepth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp_match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mp_match_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_mlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tb_c1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mlen</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LANGMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>nolmaplen</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>keylen</name> <init>= <expr><operator>*</operator><name>keylenp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>local_State</name> <init>= <expr><call><name>get_real_state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tb_c1</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>no_mapping</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>is_maphash_valid</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name>no_zero_mapping</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>tb_c1</name> <operator>!=</operator> <literal type="char">'0'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><name>p_remap</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr>]</index></name>

<operator>&amp;</operator> <operator>(</operator><name>RM_NONE</name><operator>|</operator><name>RM_ABBR</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>p_paste</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <operator>(</operator><name>INSERT</name> <operator>+</operator> <name>CMDLINE</name><operator>)</operator><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>State</name> <operator>==</operator> <name>HITRETURN</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>tb_c1</name> <operator>==</operator> <name>CAR</name> <operator>||</operator> <name>tb_c1</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <name>State</name> <operator>!=</operator> <name>ASKMORE</name>

<operator>&amp;&amp;</operator> <name>State</name> <operator>!=</operator> <name>CONFIRM</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><call><name>ctrl_x_mode_not_default</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>at_ctrl_x_key</name><argument_list>()</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_LOCAL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>tb_c1</name> <operator>==</operator> <name>Ctrl_N</name> <operator>||</operator> <name>tb_c1</name> <operator>==</operator> <name>Ctrl_P</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LANGMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>tb_c1</name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nolmaplen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>LANGMAP_ADJUST</name><argument_list>(<argument><expr><name>tb_c1</name></expr></argument>, <argument><expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <operator>(</operator><name>CMDLINE</name> <operator>|</operator> <name>INSERT</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>get_real_state</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>SELECTMODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nolmaplen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>mp</name> <operator>=</operator> <call><name>get_buf_maphash_list</name><argument_list>(<argument><expr><name>local_State</name></expr></argument>, <argument><expr><name>tb_c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mp2</name> <operator>=</operator> <call><name>get_maphash_list</name><argument_list>(<argument><expr><name>local_State</name></expr></argument>, <argument><expr><name>tb_c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>mp2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mp2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mp_match</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mp_match_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>mp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><ternary><condition><expr><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>mp</name> <operator>=</operator> <name>mp2</name><operator>,</operator> <name>mp2</name> <operator>=</operator> <name>NULL</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name><operator>)</operator></expr></else></ternary></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>tb_c1</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>local_State</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_simplified</name></name> <operator>&amp;&amp;</operator> <name>seenModifyOtherKeys</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>LANGMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LANGMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>nomap</name> <init>= <expr><name>nolmaplen</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c2</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>mlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>mlen</name> <operator>&lt;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>mlen</name></expr></incr>)</control>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LANGMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>mlen</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nomap</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>nomap</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nomap</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>LANGMAP_ADJUST</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name><index>[<expr><name>mlen</name></expr>]</index></name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name><index>[<expr><name>mlen</name></expr>]</index></name> <operator>!=</operator>

<name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>mlen</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><call><name>mb_unescape</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <name>p2</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name>tb_c1</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name>keylen</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keylen</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mlen</name> <operator>==</operator> <name>keylen</name> <operator>||</operator> <operator>(</operator><name>mlen</name> <operator>==</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name>

<operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&lt;</operator> <name>keylen</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>RM_SCRIPT</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>K_SPECIAL</name>

<operator>||</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>KS_EXTRA</name>

<operator>||</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_SNR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>mlen</name></expr>;</init> <condition><expr><operator>--</operator><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name><operator>++</operator> <operator>&amp;</operator> <operator>(</operator><name>RM_NONE</name><operator>|</operator><name>RM_ABBR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>&gt;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>timedout</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>mp_match</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>mp_match</name><operator>-&gt;</operator><name>m_nowait</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>keylen</name> <operator>=</operator> <name>KEYLEN_PART_MAP</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>keylen</name> <operator>&gt;</operator> <name>mp_match_len</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>mp_match</name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mp_match_len</name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else

if <condition>(<expr><name>max_mlen</name> <operator>&lt;</operator> <name>mlen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_mlen</name> <operator>=</operator> <name>mlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>!=</operator> <name>KEYLEN_PART_MAP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>mp_match</name></expr>;</expr_stmt>

<expr_stmt><expr><name>keylen</name> <operator>=</operator> <name>mp_match_len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_pt</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>mp</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <operator>(</operator><name>INSERT</name><operator>|</operator><name>NORMAL</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>mlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mlen</name> <operator>&lt;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&amp;&amp;</operator> <name><name>p_pt</name><index>[<expr><name>mlen</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>mlen</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_pt</name><index>[<expr><name>mlen</name></expr>]</index></name> <operator>!=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>mlen</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>p_pt</name><index>[<expr><name>mlen</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mlen</name> <operator>&gt;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gotchars</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name></expr></argument>,

<argument><expr><name>mlen</name> <operator>-</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>del_typebuf</name><argument_list>(<argument><expr><name>mlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"paste"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>!</operator><name>p_paste</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>status_redraw_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_statuslines</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>keylenp</name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>

<return>return <expr><name>map_result_retry</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mlen</name> <operator>==</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>keylen</name> <operator>=</operator> <name>KEYLEN_PART_KEY</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>max_mlen</name> <operator>&lt;</operator> <name>mlen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_mlen</name> <operator>=</operator> <name>mlen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>max_mlen</name> <operator>&gt;=</operator> <name>mp_match_len</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>keylen</name> <operator>!=</operator> <name>KEYLEN_PART_MAP</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_keylen</name> <init>= <expr><name>keylen</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>no_mapping</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>allow_keys</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><name>p_remap</name> <operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_noremap</name><index>[

<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr>]</index></name> <operator>==</operator> <name>RM_YES</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>timedout</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>keylen</name> <operator>=</operator> <call><name>check_termcode</name><argument_list>(<argument><expr><name>max_mlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>save_keylen</name> <operator>==</operator> <name>KEYLEN_PART_KEY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>keylen</name> <operator>=</operator> <name>KEYLEN_PART_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>==</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>keylen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>keylen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[

<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <name>CSI</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init>

<condition><expr><name>s</name> <operator>&lt;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">';'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>;</condition>

<incr><expr><operator>++</operator><name>s</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'r'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>del_typebuf</name><argument_list>(

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shell_resized</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>keylenp</name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>

<return>return <expr><name>map_result_retry</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>keylen</name> <operator>=</operator> <name>KEYLEN_PART_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>mp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>keylenp</name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>

<return>return <expr><name>map_result_get</name></expr>;</return> 

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&gt;=</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name>

<operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_MENU</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>may_sync_undo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>del_typebuf</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>get_menu_index</name><argument_list>(<argument><expr><name>current_menu</name></expr></argument>, <argument><expr><name>local_State</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>MENU_INDEX_INVALID</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>VIsual_select</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>current_menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>VISUAL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>VIsual_select</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ins_typebuf</name><argument_list>(<argument><expr><name>K_SELECT_STRING</name></expr></argument>,

<argument><expr><name>REMAP_NONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ins_typebuf</name><argument_list>(<argument><expr><name><name>current_menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>current_menu</name><operator>-&gt;</operator><name>noremap</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>current_menu</name><operator>-&gt;</operator><name>silent</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><operator>*</operator><name>keylenp</name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>

<return>return <expr><name>map_result_retry</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>keylen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>keylen</name> <operator>=</operator> <name>KEYLEN_PART_KEY</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>keylen</name> <operator>=</operator> <name>mp_match_len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>keylen</name> <operator>&lt;=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>map_str</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>save_m_expr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_m_noremap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_m_silent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_m_keys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_m_str</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>save_m_noremap</name></cpp:macro> <cpp:value>mp-&gt;m_noremap</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>save_m_silent</name></cpp:macro> <cpp:value>mp-&gt;m_silent</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>&gt;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gotchars</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name></expr></argument>,

<argument><expr><name>keylen</name> <operator>-</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cmd_silent</name> <operator>=</operator> <operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_silent</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>del_typebuf</name><argument_list>(<argument><expr><name>keylen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>++</operator><operator>*</operator><name>mapdepth</name> <operator>&gt;=</operator> <name>p_mmd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E223: recursive mapping"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redrawcmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>flush_buffers</name><argument_list>(<argument><expr><name>FLUSH_MINIMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>mapdepth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>keylenp</name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>

<return>return <expr><name>map_result_fail</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>VIsual_select</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>VISUAL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>VIsual_select</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ins_typebuf</name><argument_list>(<argument><expr><name>K_SELECT_STRING</name></expr></argument>, <argument><expr><name>REMAP_NONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>save_m_expr</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_expr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_m_noremap</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_m_silent</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_silent</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_m_keys</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>save_m_str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_expr</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_vgetc_busy</name> <init>= <expr><name>vgetc_busy</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_may_garbage_collect</name> <init>= <expr><name>may_garbage_collect</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>was_screen_col</name> <init>= <expr><name>screen_cur_col</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>was_screen_row</name> <init>= <expr><name>screen_cur_row</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vgetc_busy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>may_garbage_collect</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_m_keys</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>save_m_str</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>map_str</name> <operator>=</operator> <call><name>eval_map_expr</name><argument_list>(<argument><expr><name>save_m_str</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>was_screen_row</name></expr></argument>, <argument><expr><name>was_screen_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vgetc_busy</name> <operator>=</operator> <name>save_vgetc_busy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>may_garbage_collect</name> <operator>=</operator> <name>save_may_garbage_collect</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>map_str</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>map_str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>noremap</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>save_m_noremap</name> <operator>!=</operator> <name>REMAP_YES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>noremap</name> <operator>=</operator> <name>save_m_noremap</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><macro><name>STRNCMP</name><argument_list>(<argument>map_str</argument>, <argument>save_m_keys != NULL ? save_m_keys : mp-&gt;m_keys</argument>,

<argument>(size_t)keylen</argument>)</argument_list></macro>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<call><name>STRNCMP</name><argument_list>(<argument><expr><name>map_str</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>keylen</name></expr></argument>)</argument_list></call>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>noremap</name> <operator>=</operator> <name>REMAP_YES</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>noremap</name> <operator>=</operator> <name>REMAP_SKIP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>ins_typebuf</name><argument_list>(<argument><expr><name>map_str</name></expr></argument>, <argument><expr><name>noremap</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>cmd_silent</name> <operator>||</operator> <name>save_m_silent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>save_m_expr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>map_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>save_m_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>save_m_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>keylenp</name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>map_result_fail</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>map_result_retry</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>keylenp</name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>

<return>return <expr><name>map_result_nomatch</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vungetc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>old_char</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_mod_mask</name> <operator>=</operator> <name>mod_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_mouse_row</name> <operator>=</operator> <name>mouse_row</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_mouse_col</name> <operator>=</operator> <name>mouse_col</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>vgetorpeek</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>advance</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>timedout</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mapdepth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mode_deleted</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>new_wcol</name></decl>, <decl><type ref="prev"/><name>new_wrow</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>shape_changed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_wcol</name></decl>, <decl><type ref="prev"/><name>old_wrow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wait_tb_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vgetc_busy</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ex_normal_busy</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NUL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>vgetc_busy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>advance</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>KeyStuffed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_typebuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>start_stuff</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>advance</name> <operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>reg_executing</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<do>do

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>typeahead_char</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>typeahead_char</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>advance</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>typeahead_char</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>read_readbuffers</name><argument_list>(<argument><expr><name>advance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>advance</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>KeyStuffed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>wait_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keylen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>showcmd_idx</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ui_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>inchar</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name></expr></argument>, <argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buflen</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>||</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <operator>(</operator><name>INSERT</name> <operator>+</operator> <name>CMDLINE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>ESC</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>Ctrl_C</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>flush_buffers</name><argument_list>(<argument><expr><name>FLUSH_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>advance</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gotchars</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmd_silent</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>map_result_T</name></type> <name>result</name> <init>= <expr><call><name>handle_mapping</name><argument_list>(

<argument><expr><operator>&amp;</operator><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timedout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mapdepth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>map_result_retry</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>map_result_fail</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>map_result_get</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>advance</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>cmd_silent</name> <operator>=</operator> <operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_silent</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>KeyTyped</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>KeyTyped</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gotchars</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name>

<operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>KeyNoremap</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_noremap</name><index>[

<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>del_typebuf</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>new_wcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_wrow</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>( <expr><name>advance</name>

<operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr>]</index></name> <operator>==</operator> <name>ESC</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name>no_mapping</name>

<operator>&amp;&amp;</operator> <name>ex_normal_busy</name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>p_timeout</name>

<operator>||</operator> <operator>(</operator><name>keylen</name> <operator>==</operator> <name>KEYLEN_PART_KEY</name> <operator>&amp;&amp;</operator> <name>p_ttimeout</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>=</operator> <call><name>inchar</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name>

<operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">25L</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>vcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode_displayed</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>unshowmode</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mode_deleted</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <name>State</name> <operator>!=</operator> <name>NORMAL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>cmd_silent</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_State</name></decl>;</decl_stmt>

<expr_stmt><expr><name>save_State</name> <operator>=</operator> <name>State</name></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>save_State</name></expr>;</expr_stmt>

<expr_stmt><expr><name>shape_changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_wcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_wrow</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>did_ai</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>vcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>col</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <name>vcol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <call><name>lbr_chartabsize</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>vcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cline_row</name></name>

<operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>/</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>%=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>+=</operator> <call><name>curwin_col_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>mb_ptr2cells</name>)<argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>new_wcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_wrow</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <name>old_wcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>=</operator> <name>old_wrow</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <name>c</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <name>RM_YES</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&gt;=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>+</operator> <name>MAXMAPLEN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>timedout</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ex_normal_busy</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>timedout</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_im</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>Ctrl_L</name></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>terminal_is_active</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_CANCEL</name></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><name>cmdwin_type</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tc</name> <operator>==</operator> <name>ESC</name><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>Ctrl_C</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>ESC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>pending_exmode_active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>exmode_active</name> <operator>=</operator> <name>EXMODE_NORMAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>p_lz</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>advance</name> <operator>&amp;&amp;</operator> <name>must_redraw</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>need_wait_return</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>showcmd_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>advance</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>exmode_active</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <operator>(</operator><name>NORMAL</name> <operator>|</operator> <name>INSERT</name><operator>)</operator><operator>)</operator> <operator>||</operator> <name>State</name> <operator>==</operator> <name>LANGMAP</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>State</name> <operator>!=</operator> <name>HITRETURN</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name>

<operator>&amp;&amp;</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name>

<operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>edit_putchar</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name>

<operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>old_wcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_wrow</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <name>new_wcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>=</operator> <name>new_wrow</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_showcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&gt;</operator> <name>SHOWCMD_COLS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>showcmd_idx</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-</operator> <name>SHOWCMD_COLS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>showcmd_idx</name> <operator>&lt;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>add_to_showcmd</name><argument_list>(

<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>showcmd_idx</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <name>old_wcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>=</operator> <name>old_wrow</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>&amp;&amp;</operator> <name>cmdline_star</name> <operator>==</operator> <literal type="number">0</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>&amp;&amp;</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name>

<operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>putcmdline</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name>

<operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timedout</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>advance</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>!</operator><operator>(</operator><name>p_timeout</name>

<operator>||</operator> <operator>(</operator><name>p_ttimeout</name> <operator>&amp;&amp;</operator> <name>keylen</name> <operator>==</operator> <name>KEYLEN_PART_KEY</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wait_time</name> <operator>=</operator> <operator>-</operator><literal type="number">1L</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>keylen</name> <operator>==</operator> <name>KEYLEN_PART_KEY</name> <operator>&amp;&amp;</operator> <name>p_ttm</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wait_time</name> <operator>=</operator> <name>p_ttm</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>wait_time</name> <operator>=</operator> <name>p_tm</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>wait_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>wait_tb_len</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>inchar</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr></argument>,

<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buflen</name></name> <operator>-</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>-</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>wait_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>showcmd_idx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pop_showcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>edit_unputchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>unputcmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>advance</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wait_tb_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>timedout</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content> 

<while>while <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name>

<operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name>

<operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>RM_YES</name></expr>;</expr_stmt></block_content></block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INPUT_METHOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>vgetc_im_active</name> <operator>=</operator> <call><name>im_get_status</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for> 

</block_content>}</block></else></if_stmt> 

</block_content>}</block> while <condition>(<expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>K_CANCEL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>advance</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>advance</name> <operator>&amp;&amp;</operator> <name>p_smd</name> <operator>&amp;&amp;</operator> <name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>ESC</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>mode_deleted</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>no_mapping</name> <operator>&amp;&amp;</operator> <name>mode_displayed</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>KeyTyped</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>unshowmode</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>!=</operator> <name>ESC</name> <operator>&amp;&amp;</operator> <name>mode_deleted</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>KeyTyped</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <name>shape_changed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>timedout</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <name>ESC</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>nop_buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>nop_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nop_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nop_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>KE_NOP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gotchars</name><argument_list>(<argument><expr><name>nop_buf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>vgetc_busy</name></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>inchar</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>wait_time</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>retesc</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>script_char</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tb_change_cnt</name> <init>= <expr><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wait_time</name> <operator>==</operator> <operator>-</operator><literal type="number">1L</literal> <operator>||</operator> <name>wait_time</name> <operator>&gt;</operator> <literal type="number">100L</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>cursor_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush_cursor</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <name>postponed_mouseshape</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_mouseshape</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>!=</operator> <name>HITRETURN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>did_outofmem_msg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>did_swapwrite_msg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>undo_off</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>script_char</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>scriptin</name><index>[<expr><name>curscript</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>script_char</name> <operator>&lt;</operator> <literal type="number">0</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name>ignore_script</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MESSAGE_QUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>parse_queued_messages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>got_int</name> <operator>||</operator> <operator>(</operator><name>script_char</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name><name>scriptin</name><index>[<expr><name>curscript</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>closescript</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retesc</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>script_char</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>script_char</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUM_LEN</name></cpp:macro> <cpp:value>MAXMAPLEN * 3 + 3</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>dum</name><index>[<expr><name>DUM_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ui_inchar</name><argument_list>(<argument><expr><name>dum</name></expr></argument>, <argument><expr><name>DUM_LEN</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>dum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>retesc</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wait_time</name> <operator>==</operator> <operator>-</operator><literal type="number">1L</literal> <operator>||</operator> <name>wait_time</name> <operator>&gt;</operator> <literal type="number">10L</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ui_inchar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>maxlen</name> <operator>/</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>wait_time</name></expr></argument>, <argument><expr><name>tb_change_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>typebuf_changed</name><argument_list>(<argument><expr><name>tb_change_cnt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>++</operator><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>fix_input_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>fix_input_buffer</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>len</name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>CSI</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>CSI</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>KS_EXTRA</name> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_CURSORHOLD</name><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<operator>&amp;&amp;</operator> <operator>(</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>KS_MODIFIER</name><operator>)</operator><operator>)</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>K_THIRD</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>K_SECOND</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_INPUT_BUF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>input_available</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>!</operator><call><name>vim_is_input_buf_empty</name><argument_list>()</argument_list></call>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator> <name>typebuf_was_filled</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
