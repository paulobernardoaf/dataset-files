<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\autocmd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>AutoCmd</name>

<block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>once</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>nested</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>last</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>sctx_T</name></type> <name>script_ctx</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>AutoCmd</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> 

}</block></struct></type> <name>AutoCmd</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AutoPat</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>AutoPat</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>reg_prog</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AutoCmd</name> <modifier>*</modifier></type><name>cmds</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>group</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>patlen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>buflocal_nr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>allow_dirs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>last</name></decl>;</decl_stmt> 

}</block></struct></type> <name>AutoPat</name>;</typedef>

<struct><specifier>static</specifier> struct <name>event_name</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>event_T</name></type> <name>event</name></decl>;</decl_stmt> 

}</block> <decl><name><name>event_names</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"BufAdd"</literal></expr>, <expr><name>EVENT_BUFADD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufCreate"</literal></expr>, <expr><name>EVENT_BUFADD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufDelete"</literal></expr>, <expr><name>EVENT_BUFDELETE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufEnter"</literal></expr>, <expr><name>EVENT_BUFENTER</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufFilePost"</literal></expr>, <expr><name>EVENT_BUFFILEPOST</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufFilePre"</literal></expr>, <expr><name>EVENT_BUFFILEPRE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufHidden"</literal></expr>, <expr><name>EVENT_BUFHIDDEN</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufLeave"</literal></expr>, <expr><name>EVENT_BUFLEAVE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufNew"</literal></expr>, <expr><name>EVENT_BUFNEW</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufNewFile"</literal></expr>, <expr><name>EVENT_BUFNEWFILE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufRead"</literal></expr>, <expr><name>EVENT_BUFREADPOST</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufReadCmd"</literal></expr>, <expr><name>EVENT_BUFREADCMD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufReadPost"</literal></expr>, <expr><name>EVENT_BUFREADPOST</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufReadPre"</literal></expr>, <expr><name>EVENT_BUFREADPRE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufUnload"</literal></expr>, <expr><name>EVENT_BUFUNLOAD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufWinEnter"</literal></expr>, <expr><name>EVENT_BUFWINENTER</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufWinLeave"</literal></expr>, <expr><name>EVENT_BUFWINLEAVE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufWipeout"</literal></expr>, <expr><name>EVENT_BUFWIPEOUT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufWrite"</literal></expr>, <expr><name>EVENT_BUFWRITEPRE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufWritePost"</literal></expr>, <expr><name>EVENT_BUFWRITEPOST</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufWritePre"</literal></expr>, <expr><name>EVENT_BUFWRITEPRE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BufWriteCmd"</literal></expr>, <expr><name>EVENT_BUFWRITECMD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CmdlineChanged"</literal></expr>, <expr><name>EVENT_CMDLINECHANGED</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CmdlineEnter"</literal></expr>, <expr><name>EVENT_CMDLINEENTER</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CmdlineLeave"</literal></expr>, <expr><name>EVENT_CMDLINELEAVE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CmdwinEnter"</literal></expr>, <expr><name>EVENT_CMDWINENTER</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CmdwinLeave"</literal></expr>, <expr><name>EVENT_CMDWINLEAVE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CmdUndefined"</literal></expr>, <expr><name>EVENT_CMDUNDEFINED</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ColorScheme"</literal></expr>, <expr><name>EVENT_COLORSCHEME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ColorSchemePre"</literal></expr>, <expr><name>EVENT_COLORSCHEMEPRE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CompleteChanged"</literal></expr>, <expr><name>EVENT_COMPLETECHANGED</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CompleteDone"</literal></expr>, <expr><name>EVENT_COMPLETEDONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CompleteDonePre"</literal></expr>, <expr><name>EVENT_COMPLETEDONEPRE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CursorHold"</literal></expr>, <expr><name>EVENT_CURSORHOLD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CursorHoldI"</literal></expr>, <expr><name>EVENT_CURSORHOLDI</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CursorMoved"</literal></expr>, <expr><name>EVENT_CURSORMOVED</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CursorMovedI"</literal></expr>, <expr><name>EVENT_CURSORMOVEDI</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"DiffUpdated"</literal></expr>, <expr><name>EVENT_DIFFUPDATED</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"DirChanged"</literal></expr>, <expr><name>EVENT_DIRCHANGED</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"EncodingChanged"</literal></expr>, <expr><name>EVENT_ENCODINGCHANGED</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ExitPre"</literal></expr>, <expr><name>EVENT_EXITPRE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FileEncoding"</literal></expr>, <expr><name>EVENT_ENCODINGCHANGED</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FileAppendPost"</literal></expr>, <expr><name>EVENT_FILEAPPENDPOST</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FileAppendPre"</literal></expr>, <expr><name>EVENT_FILEAPPENDPRE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FileAppendCmd"</literal></expr>, <expr><name>EVENT_FILEAPPENDCMD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FileChangedShell"</literal></expr>,<expr><name>EVENT_FILECHANGEDSHELL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FileChangedShellPost"</literal></expr>,<expr><name>EVENT_FILECHANGEDSHELLPOST</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FileChangedRO"</literal></expr>, <expr><name>EVENT_FILECHANGEDRO</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FileReadPost"</literal></expr>, <expr><name>EVENT_FILEREADPOST</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FileReadPre"</literal></expr>, <expr><name>EVENT_FILEREADPRE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FileReadCmd"</literal></expr>, <expr><name>EVENT_FILEREADCMD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FileType"</literal></expr>, <expr><name>EVENT_FILETYPE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FileWritePost"</literal></expr>, <expr><name>EVENT_FILEWRITEPOST</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FileWritePre"</literal></expr>, <expr><name>EVENT_FILEWRITEPRE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FileWriteCmd"</literal></expr>, <expr><name>EVENT_FILEWRITECMD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FilterReadPost"</literal></expr>, <expr><name>EVENT_FILTERREADPOST</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FilterReadPre"</literal></expr>, <expr><name>EVENT_FILTERREADPRE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FilterWritePost"</literal></expr>, <expr><name>EVENT_FILTERWRITEPOST</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FilterWritePre"</literal></expr>, <expr><name>EVENT_FILTERWRITEPRE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FocusGained"</literal></expr>, <expr><name>EVENT_FOCUSGAINED</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FocusLost"</literal></expr>, <expr><name>EVENT_FOCUSLOST</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"FuncUndefined"</literal></expr>, <expr><name>EVENT_FUNCUNDEFINED</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"GUIEnter"</literal></expr>, <expr><name>EVENT_GUIENTER</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"GUIFailed"</literal></expr>, <expr><name>EVENT_GUIFAILED</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"InsertChange"</literal></expr>, <expr><name>EVENT_INSERTCHANGE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"InsertEnter"</literal></expr>, <expr><name>EVENT_INSERTENTER</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"InsertLeave"</literal></expr>, <expr><name>EVENT_INSERTLEAVE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"InsertCharPre"</literal></expr>, <expr><name>EVENT_INSERTCHARPRE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"MenuPopup"</literal></expr>, <expr><name>EVENT_MENUPOPUP</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"OptionSet"</literal></expr>, <expr><name>EVENT_OPTIONSET</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"QuickFixCmdPost"</literal></expr>, <expr><name>EVENT_QUICKFIXCMDPOST</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"QuickFixCmdPre"</literal></expr>, <expr><name>EVENT_QUICKFIXCMDPRE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"QuitPre"</literal></expr>, <expr><name>EVENT_QUITPRE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"RemoteReply"</literal></expr>, <expr><name>EVENT_REMOTEREPLY</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SafeState"</literal></expr>, <expr><name>EVENT_SAFESTATE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SafeStateAgain"</literal></expr>, <expr><name>EVENT_SAFESTATEAGAIN</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SessionLoadPost"</literal></expr>, <expr><name>EVENT_SESSIONLOADPOST</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ShellCmdPost"</literal></expr>, <expr><name>EVENT_SHELLCMDPOST</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ShellFilterPost"</literal></expr>, <expr><name>EVENT_SHELLFILTERPOST</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SourceCmd"</literal></expr>, <expr><name>EVENT_SOURCECMD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SourcePre"</literal></expr>, <expr><name>EVENT_SOURCEPRE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SourcePost"</literal></expr>, <expr><name>EVENT_SOURCEPOST</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SpellFileMissing"</literal></expr>,<expr><name>EVENT_SPELLFILEMISSING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"StdinReadPost"</literal></expr>, <expr><name>EVENT_STDINREADPOST</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"StdinReadPre"</literal></expr>, <expr><name>EVENT_STDINREADPRE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SwapExists"</literal></expr>, <expr><name>EVENT_SWAPEXISTS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Syntax"</literal></expr>, <expr><name>EVENT_SYNTAX</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"TabNew"</literal></expr>, <expr><name>EVENT_TABNEW</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"TabClosed"</literal></expr>, <expr><name>EVENT_TABCLOSED</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"TabEnter"</literal></expr>, <expr><name>EVENT_TABENTER</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"TabLeave"</literal></expr>, <expr><name>EVENT_TABLEAVE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"TermChanged"</literal></expr>, <expr><name>EVENT_TERMCHANGED</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"TerminalOpen"</literal></expr>, <expr><name>EVENT_TERMINALOPEN</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"TerminalWinOpen"</literal></expr>, <expr><name>EVENT_TERMINALWINOPEN</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"TermResponse"</literal></expr>, <expr><name>EVENT_TERMRESPONSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"TextChanged"</literal></expr>, <expr><name>EVENT_TEXTCHANGED</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"TextChangedI"</literal></expr>, <expr><name>EVENT_TEXTCHANGEDI</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"TextChangedP"</literal></expr>, <expr><name>EVENT_TEXTCHANGEDP</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"User"</literal></expr>, <expr><name>EVENT_USER</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"VimEnter"</literal></expr>, <expr><name>EVENT_VIMENTER</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"VimLeave"</literal></expr>, <expr><name>EVENT_VIMLEAVE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"VimLeavePre"</literal></expr>, <expr><name>EVENT_VIMLEAVEPRE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"WinNew"</literal></expr>, <expr><name>EVENT_WINNEW</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"WinEnter"</literal></expr>, <expr><name>EVENT_WINENTER</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"WinLeave"</literal></expr>, <expr><name>EVENT_WINLEAVE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"VimResized"</literal></expr>, <expr><name>EVENT_VIMRESIZED</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"TextYankPost"</literal></expr>, <expr><name>EVENT_TEXTYANKPOST</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><operator>(</operator><name>event_T</name><operator>)</operator><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>AutoPat</name> <modifier>*</modifier></type><name><name>first_autopat</name><index>[<expr><name>NUM_EVENTS</name></expr>]</index></name> <init>=

<expr><block>{

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>AutoPat</name> <modifier>*</modifier></type><name><name>last_autopat</name><index>[<expr><name>NUM_EVENTS</name></expr>]</index></name> <init>=

<expr><block>{

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUGROUP_DEFAULT</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUGROUP_ERROR</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUGROUP_ALL</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define> 

<struct>struct <name>AutoPatCmd_S</name>

<block>{

<decl_stmt><decl><type><name>AutoPat</name> <modifier>*</modifier></type><name>curpat</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AutoCmd</name> <modifier>*</modifier></type><name>nextcmd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>group</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sfname</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>event_T</name></type> <name>event</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>arg_bufnr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AutoPatCmd</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> 

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>AutoPatCmd</name> <modifier>*</modifier></type><name>active_apc_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_AUTOCMD_PATTERNS</name><parameter_list>(<parameter><type><name>event</name></type></parameter>, <parameter><type><name>ap</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((ap) = first_autopat[(int)(event)]; (ap) != NULL; (ap) = (ap)-&gt;next)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>augroups</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUGROUP_NAME</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((char_u **)augroups.ga_data)[i])</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>deleted_augroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current_augroup</name> <init>= <expr><name>AUGROUP_DEFAULT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>au_need_clean</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>event_nr2name</name><parameter_list>(<parameter><decl><type><name>event_T</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>au_get_grouparg</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>do_autocmd_event</name><parameter_list>(<parameter><decl><type><name>event_T</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>once</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nested</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apply_autocmds_group</name><parameter_list>(<parameter><decl><type><name>event_T</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname_io</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>auto_next_pat</name><parameter_list>(<parameter><decl><type><name>AutoPatCmd</name> <modifier>*</modifier></type><name>apc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stop_at_last</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>au_find_group</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>event_T</name></type> <name>last_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_group</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>autocmd_blocked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>get_deleted_augroup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>deleted_augroup</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>deleted_augroup</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--Deleted--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>deleted_augroup</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>show_autocmd</name><parameter_list>(<parameter><decl><type><name>AutoPat</name> <modifier>*</modifier></type><name>ap</name></decl></parameter>, <parameter><decl><type><name>event_T</name></type> <name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AutoCmd</name> <modifier>*</modifier></type><name>ac</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>pat</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>event</name> <operator>!=</operator> <name>last_event</name> <operator>||</operator> <name><name>ap</name><operator>-&gt;</operator><name>group</name></name> <operator>!=</operator> <name>last_group</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>group</name></name> <operator>!=</operator> <name>AUGROUP_DEFAULT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>AUGROUP_NAME</name><argument_list>(<argument><expr><name><name>ap</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>get_deleted_augroup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>AUGROUP_NAME</name><argument_list>(<argument><expr><name><name>ap</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>event_nr2name</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_event</name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_group</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>group</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name><name>ap</name><operator>-&gt;</operator><name>pat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ac</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>cmds</name></name></expr>;</init> <condition><expr><name>ac</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ac</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>cmd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>&gt;=</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>last_set_msg</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>script_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>au_remove_pat</name><parameter_list>(<parameter><decl><type><name>AutoPat</name> <modifier>*</modifier></type><name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>ap</name><operator>-&gt;</operator><name>pat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>buflocal_nr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>au_need_clean</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>au_remove_cmds</name><parameter_list>(<parameter><decl><type><name>AutoPat</name> <modifier>*</modifier></type><name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AutoCmd</name> <modifier>*</modifier></type><name>ac</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ac</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>cmds</name></name></expr>;</init> <condition><expr><name>ac</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ac</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>au_need_clean</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>au_del_cmd</name><parameter_list>(<parameter><decl><type><name>AutoCmd</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>au_need_clean</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>au_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AutoPat</name> <modifier>*</modifier></type><name>ap</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>prev_ap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AutoCmd</name> <modifier>*</modifier></type><name>ac</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>prev_ac</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>event_T</name></type> <name>event</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>autocmd_busy</name> <operator>||</operator> <operator>!</operator><name>au_need_clean</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>event</name> <operator>=</operator> <operator>(</operator><name>event_T</name><operator>)</operator><literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>int</name><operator>)</operator><name>event</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>NUM_EVENTS</name></expr>;</condition>

<incr><expr><name>event</name> <operator>=</operator> <operator>(</operator><name>event_T</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>event</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>prev_ap</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>first_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>event</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ap</name> <operator>=</operator> <operator>*</operator><name>prev_ap</name></expr>;</init> <condition><expr><name>ap</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ap</name> <operator>=</operator> <operator>*</operator><name>prev_ap</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>has_cmd</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>prev_ac</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>ap</name><operator>-&gt;</operator><name>cmds</name></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ac</name> <operator>=</operator> <operator>*</operator><name>prev_ac</name></expr>;</init> <condition><expr><name>ac</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ac</name> <operator>=</operator> <operator>*</operator><name>prev_ac</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>pat</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ac</name><operator>-&gt;</operator><name>cmd</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>prev_ac</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>has_cmd</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_ac</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>pat</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>has_cmd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>au_remove_pat</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>pat</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prev_ap</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>first_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>event</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>last_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>event</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>last_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>event</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>AutoPat</name> <operator>*</operator><operator>)</operator><name>prev_ap</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>prev_ap</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>ap</name><operator>-&gt;</operator><name>reg_prog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_ap</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>ap</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>au_need_clean</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>aubuflocal_remove</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AutoPat</name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>event_T</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AutoPatCmd</name> <modifier>*</modifier></type><name>apc</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>apc</name> <operator>=</operator> <name>active_apc_list</name></expr>;</init> <condition><expr><name>apc</name></expr>;</condition> <incr><expr><name>apc</name> <operator>=</operator> <name><name>apc</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name> <operator>==</operator> <name><name>apc</name><operator>-&gt;</operator><name>arg_bufnr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>apc</name><operator>-&gt;</operator><name>arg_bufnr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>event</name> <operator>=</operator> <operator>(</operator><name>event_T</name><operator>)</operator><literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>int</name><operator>)</operator><name>event</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>NUM_EVENTS</name></expr>;</condition>

<incr><expr><name>event</name> <operator>=</operator> <operator>(</operator><name>event_T</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>event</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></incr>)</control><block type="pseudo"><block_content>

<macro><name>FOR_ALL_AUTOCMD_PATTERNS</name><argument_list>(<argument>event</argument>, <argument>ap</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>buflocal_nr</name></name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>au_remove_pat</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"auto-removing autocommand: %s &lt;buffer=%d&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>event_nr2name</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>au_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>au_new_group</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>au_find_group</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>AUGROUP_ERROR</name></expr>)</condition> 

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>augroups</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>AUGROUP_NAME</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>augroups</name><operator>.</operator><name>ga_len</name></name> <operator>&amp;&amp;</operator> <call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>augroups</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AUGROUP_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AUGROUP_NAME</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AUGROUP_NAME</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AUGROUP_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>augroups</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>augroups</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>au_del_group</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>au_find_group</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>AUGROUP_ERROR</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E367: No such group: \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>current_augroup</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E936: Cannot delete the current group"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>event_T</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AutoPat</name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_use</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>event</name> <operator>=</operator> <operator>(</operator><name>event_T</name><operator>)</operator><literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>int</name><operator>)</operator><name>event</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>NUM_EVENTS</name></expr>;</condition>

<incr><expr><name>event</name> <operator>=</operator> <operator>(</operator><name>event_T</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>event</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></incr>)</control>

<block>{<block_content>

<macro><name>FOR_ALL_AUTOCMD_PATTERNS</name><argument_list>(<argument>event</argument>, <argument>ap</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>group</name></name> <operator>==</operator> <name>i</name> <operator>&amp;&amp;</operator> <name><name>ap</name><operator>-&gt;</operator><name>pat</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>give_warning</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"W19: Deleting augroup that is still in use"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in_use</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>event</name> <operator>=</operator> <name>NUM_EVENTS</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>AUGROUP_NAME</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>in_use</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AUGROUP_NAME</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>get_deleted_augroup</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AUGROUP_NAME</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>au_find_group</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>augroups</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>AUGROUP_NAME</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>AUGROUP_NAME</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>get_deleted_augroup</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><call><name>AUGROUP_NAME</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>AUGROUP_ERROR</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>au_has_group</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>au_find_group</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AUGROUP_ERROR</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>do_augroup</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>del_group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>del_group</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_argreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>au_del_group</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"end"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>current_augroup</name> <operator>=</operator> <name>AUGROUP_DEFAULT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>arg</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>au_new_group</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>AUGROUP_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>current_augroup</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>augroups</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>AUGROUP_NAME</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>AUGROUP_NAME</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>free_all_autocmds</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>current_augroup</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>current_augroup</name> <operator>&lt;</operator> <name><name>augroups</name><operator>.</operator><name>ga_len</name></name></expr>;</condition>

<incr><expr><operator>++</operator><name>current_augroup</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_autocmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>augroups</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>augroups</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <call><name>get_deleted_augroup</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>augroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>event_T</name></type>

<name>event_name2nr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'|'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>event_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>event_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>p</name> <operator>-</operator> <name>start</name> <operator>&amp;&amp;</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name><name>event_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NUM_EVENTS</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>event_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>event</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>event_nr2name</name><parameter_list>(<parameter><decl><type><name>event_T</name></type> <name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>event_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>event_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>event</name> <operator>==</operator> <name>event</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>event_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Unknown"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>find_end_event</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>have_group</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E215: Illegal character after *: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>pat</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><operator>*</operator><name>pat</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pat</name> <operator>!=</operator> <literal type="char">'|'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>pat</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>pat</name> <operator>=</operator> <name>p</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><call><name>event_name2nr</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>NUM_EVENTS</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>have_group</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E216: No such event: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E216: No such group or event: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>pat</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>event_ignored</name><parameter_list>(<parameter><decl><type><name>event_T</name></type> <name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>p_ei</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>event_name2nr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>event</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>check_ei</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>p_ei</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>event_name2nr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUM_EVENTS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>au_event_disable</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_ei</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_ei</name></decl>;</decl_stmt>

<expr_stmt><expr><name>save_ei</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p_ei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>save_ei</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>new_ei</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>p_ei</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p_ei</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_ei</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>what</name> <operator>==</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_ei</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>new_ei</name></expr></argument>, <argument><expr><name>what</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>new_ei</name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ei"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>new_ei</name></expr></argument>,

<argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><name>SID_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>new_ei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>save_ei</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>au_event_restore</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>old_ei</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>old_ei</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ei"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>old_ei</name></expr></argument>,

<argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><name>SID_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>old_ei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type>

<name>do_autocmd</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>arg_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>envpat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>event_T</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_free</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nested</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>once</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>group</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>group</name> <operator>=</operator> <name>AUGROUP_ALL</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>au_get_grouparg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <call><name>find_end_event</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>group</name> <operator>!=</operator> <name>AUGROUP_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pat</name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>pat</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>cmd</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>cmd</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>cmd</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cmd</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>cmd</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><literal type="char">'~'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>p_ssl_save</name> <init>= <expr><name>p_ssl</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_ssl</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>envpat</name> <operator>=</operator> <call><name>expand_env_save</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p_ssl</name> <operator>=</operator> <name>p_ssl_save</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>envpat</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <name>envpat</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"++once"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>cmd</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>once</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_duparg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"++once"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>once</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"++nested"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>cmd</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nested</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_duparg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"++nested"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nested</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"nested"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>cmd</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nested</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_duparg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"nested"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nested</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>expand_sfile</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>need_free</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>forceit</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts_title</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n--- Autocommands ---"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_event</name> <operator>=</operator> <operator>(</operator><name>event_T</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>last_group</name> <operator>=</operator> <name>AUGROUP_ERROR</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>event</name> <operator>=</operator> <operator>(</operator><name>event_T</name><operator>)</operator><literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>int</name><operator>)</operator><name>event</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>NUM_EVENTS</name></expr>;</condition>

<incr><expr><name>event</name> <operator>=</operator> <operator>(</operator><name>event_T</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>event</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>do_autocmd_event</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>,

<argument><expr><name>once</name></expr></argument>, <argument><expr><name>nested</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>forceit</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'|'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>do_autocmd_event</name><argument_list>(<argument><expr><call><name>event_name2nr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pat</name></expr></argument>,

<argument><expr><name>once</name></expr></argument>, <argument><expr><name>nested</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>forceit</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></while>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_free</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>envpat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>au_get_grouparg</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>group_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>*</operator><name>argp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>group</name> <init>= <expr><name>AUGROUP_ALL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'|'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>arg</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>group_name</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>arg</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>group_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>AUGROUP_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>au_find_group</name><argument_list>(<argument><expr><name>group_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <name>AUGROUP_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>group</name> <operator>=</operator> <name>AUGROUP_ALL</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>argp</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>group_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>group</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>do_autocmd_event</name><parameter_list>(

<parameter><decl><type><name>event_T</name></type> <name>event</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>once</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nested</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AutoPat</name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AutoPat</name> <modifier>*</modifier><modifier>*</modifier></type><name>prev_ap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AutoCmd</name> <modifier>*</modifier></type><name>ac</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AutoCmd</name> <modifier>*</modifier><modifier>*</modifier></type><name>prev_ac</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>brace_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>endpat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>findgroup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>allgroups</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>patlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_buflocal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buflocal_nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buflocal_pat</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <name>AUGROUP_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>findgroup</name> <operator>=</operator> <name>current_augroup</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>findgroup</name> <operator>=</operator> <name>group</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>allgroups</name> <operator>=</operator> <operator>(</operator><name>group</name> <operator>==</operator> <name>AUGROUP_ALL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>forceit</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pat</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<macro><name>FOR_ALL_AUTOCMD_PATTERNS</name><argument_list>(<argument>event</argument>, <argument>ap</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>forceit</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>group</name></name> <operator>==</operator> <name>findgroup</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>au_remove_pat</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>group</name> <operator>==</operator> <name>AUGROUP_ALL</name> <operator>||</operator> <name><name>ap</name><operator>-&gt;</operator><name>group</name></name> <operator>==</operator> <name>group</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_autocmd</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>pat</name></expr>;</condition> <incr><expr><name>pat</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>*</operator><name>endpat</name> <operator>==</operator> <literal type="char">','</literal></expr> ?</condition><then> <expr><name>endpat</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>endpat</name></expr></else></ternary><operator>)</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>brace_level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>endpat</name> <operator>=</operator> <name>pat</name></expr>;</init> <condition><expr><operator>*</operator><name>endpat</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>endpat</name> <operator>!=</operator> <literal type="char">','</literal> <operator>||</operator> <name>brace_level</name>

<operator>||</operator> <operator>(</operator><name>endpat</name> <operator>&gt;</operator> <name>pat</name> <operator>&amp;&amp;</operator> <name><name>endpat</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>endpat</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>endpat</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>brace_level</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>endpat</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>brace_level</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>==</operator> <name>endpat</name></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>patlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>endpat</name> <operator>-</operator> <name>pat</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_buflocal</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buflocal_nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>patlen</name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><literal type="string">"&lt;buffer"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>pat</name><index>[<expr><name>patlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>is_buflocal</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>patlen</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buflocal_nr</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>patlen</name> <operator>&gt;</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <name><name>pat</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>patlen</name> <operator>==</operator> <literal type="number">13</literal> <operator>&amp;&amp;</operator> <call><name>STRNICMP</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><literal type="string">"&lt;buffer=abuf&gt;"</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buflocal_nr</name> <operator>=</operator> <name>autocmd_bufnr</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>skipdigits</name><argument_list>(<argument><expr><name>pat</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>pat</name> <operator>+</operator> <name>patlen</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buflocal_nr</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pat</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_buflocal</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buflocal_pat</name></expr></argument>, <argument><expr><literal type="string">"&lt;buffer=%d&gt;"</literal></expr></argument>, <argument><expr><name>buflocal_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <name>buflocal_pat</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>patlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buflocal_pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>forceit</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>last_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>event</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_ap</name> <operator>=</operator> <operator>&amp;</operator><name><name>last_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>event</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_ap</name> <operator>=</operator> <operator>&amp;</operator><name><name>first_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>event</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ap</name> <operator>=</operator> <operator>*</operator><name>prev_ap</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>pat</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>allgroups</name> <operator>||</operator> <name><name>ap</name><operator>-&gt;</operator><name>group</name></name> <operator>==</operator> <name>findgroup</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>ap</name><operator>-&gt;</operator><name>patlen</name></name> <operator>==</operator> <name>patlen</name>

<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name><name>ap</name><operator>-&gt;</operator><name>pat</name></name></expr></argument>, <argument><expr><name>patlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>forceit</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>ap</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>au_remove_cmds</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>au_remove_pat</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_autocmd</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_ap</name> <operator>=</operator> <operator>&amp;</operator><name><name>ap</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ap</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_buflocal</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>buflocal_nr</name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>buflist_findnr</name><argument_list>(<argument><expr><name>buflocal_nr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E680: &lt;buffer=%d&gt;: invalid buffer number "</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>buflocal_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ap</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>AutoPat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ap</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>pat</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>patlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>patlen</name></name> <operator>=</operator> <name>patlen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>pat</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_buflocal</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>buflocal_nr</name></name> <operator>=</operator> <name>buflocal_nr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>reg_prog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>reg_pat</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>buflocal_nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reg_pat</name> <operator>=</operator> <call><name>file_pat_to_reg_pat</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>endpat</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ap</name><operator>-&gt;</operator><name>allow_dirs</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg_pat</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>reg_prog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>reg_pat</name></expr></argument>, <argument><expr><name>RE_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>reg_pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg_pat</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ap</name><operator>-&gt;</operator><name>reg_prog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>ap</name><operator>-&gt;</operator><name>pat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>cmds</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>prev_ap</name> <operator>=</operator> <name>ap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>event</name></expr>]</index></name> <operator>=</operator> <name>ap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <name>AUGROUP_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <name>current_augroup</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <name>group</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_ac</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>ap</name><operator>-&gt;</operator><name>cmds</name></name><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ac</name> <operator>=</operator> <operator>*</operator><name>prev_ac</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_ac</name> <operator>=</operator> <operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>ac</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>AutoCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ac</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>script_ctx</name></name> <operator>=</operator> <name>current_sctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>script_ctx</name><operator>.</operator><name>sc_lnum</name></name> <operator>+=</operator> <name>SOURCING_LNUM</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>cmd</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>prev_ac</name> <operator>=</operator> <name>ac</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>once</name></name> <operator>=</operator> <name>once</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>nested</name></name> <operator>=</operator> <name>nested</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>au_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>do_doautocmd</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>do_msg</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>did_something</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nothing_done</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>group</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>did_something</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>did_something</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>au_get_grouparg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E217: Can't execute autocommands for ALL events"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>find_end_event</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>group</name> <operator>!=</operator> <name>AUGROUP_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>apply_autocmds_group</name><argument_list>(<argument><expr><call><name>event_name2nr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nothing_done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>nothing_done</name> <operator>&amp;&amp;</operator> <name>do_msg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"No matching autocommands"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>did_something</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>did_something</name> <operator>=</operator> <operator>!</operator><name>nothing_done</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><ternary><condition><expr><call><name>aborting</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>FAIL</name></expr> </then><else>: <expr><name>OK</name></expr></else></ternary></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>OK</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_doautoall</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aco_save_T</name></type> <name>aco</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bufref_T</name></type> <name>bufref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>call_do_modelines</name> <init>= <expr><call><name>check_nomodeline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_aucmd</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>aucmd_prepbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>do_doautocmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>did_aucmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>call_do_modelines</name> <operator>&amp;&amp;</operator> <name>did_aucmd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>do_modelines</name><argument_list>(<argument><expr><ternary><condition><expr><name>curwin</name> <operator>==</operator> <name>aucmd_win</name></expr> ?</condition><then> <expr><name>OPT_NOWIN</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>aucmd_restbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>FAIL</name> <operator>||</operator> <operator>!</operator><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>check_nomodeline</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><operator>*</operator><name>argp</name></expr></argument>, <argument><expr><literal type="string">"&lt;nomodeline&gt;"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>argp</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><operator>*</operator><name>argp</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>aucmd_prepbuf</name><parameter_list>(

<parameter><decl><type><name>aco_save_T</name> <modifier>*</modifier></type><name>aco</name></decl></parameter>, 

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_ea</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_AUTOCHDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>save_acd</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>win</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>win</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>win</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>aucmd_win</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>aucmd_win</name> <operator>=</operator> <call><name>win_alloc_popup_win</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>aucmd_win</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>win</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>win</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>aucmd_win_used</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>win</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>aco</name><operator>-&gt;</operator><name>save_curwin</name></name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aco</name><operator>-&gt;</operator><name>save_curbuf</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aco</name><operator>-&gt;</operator><name>save_prevwin</name></name> <operator>=</operator> <name>prevwin</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>win</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>aco</name><operator>-&gt;</operator><name>use_aucmd_win</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>win</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>aco</name><operator>-&gt;</operator><name>use_aucmd_win</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aucmd_win_used</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_init_popup_win</name><argument_list>(<argument><expr><name>aucmd_win</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aco</name><operator>-&gt;</operator><name>globaldir</name></name> <operator>=</operator> <name>globaldir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>globaldir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>make_snapshot</name><argument_list>(<argument><expr><name>SNAP_AUCMD_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>save_ea</name> <operator>=</operator> <name>p_ea</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ea</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_AUTOCHDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>save_acd</name> <operator>=</operator> <name>p_acd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_acd</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_split_ins</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WSP_TOP</name></expr></argument>, <argument><expr><name>aucmd_win</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_comp_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_ea</name> <operator>=</operator> <name>save_ea</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_AUTOCHDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p_acd</name> <operator>=</operator> <name>save_acd</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>unblock_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>aucmd_win</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aco</name><operator>-&gt;</operator><name>new_curwin</name></name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aco</name><operator>-&gt;</operator><name>new_curbuf</name></name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>aucmd_restbuf</name><parameter_list>(

<parameter><decl><type><name>aco_save_T</name> <modifier>*</modifier></type><name>aco</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>aco</name><operator>-&gt;</operator><name>use_aucmd_win</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_nwindows</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>!=</operator> <name>aucmd_win</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>aucmd_win</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>!=</operator> <name>curtab</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>goto_tabpage_tp</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>win_goto</name><argument_list>(<argument><expr><name>aucmd_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>win_found</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<label><name>win_found</name>:</label>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>winframe_remove</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_remove</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>aucmd_win_used</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>last_status</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_tabpage_win</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>close_tabpage</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>restore_snapshot</name><argument_list>(<argument><expr><name>SNAP_AUCMD_IDX</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_comp_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>unblock_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>win_valid</name><argument_list>(<argument><expr><name><name>aco</name><operator>-&gt;</operator><name>save_curwin</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name><name>aco</name><operator>-&gt;</operator><name>save_curwin</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>win_valid</name><argument_list>(<argument><expr><name><name>aco</name><operator>-&gt;</operator><name>save_prevwin</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prevwin</name> <operator>=</operator> <name><name>aco</name><operator>-&gt;</operator><name>save_prevwin</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vars_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aucmd_win</name><operator>-&gt;</operator><name>w_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aucmd_win</name><operator>-&gt;</operator><name>w_vars</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>globaldir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>globaldir</name> <operator>=</operator> <name><name>aco</name><operator>-&gt;</operator><name>globaldir</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gui_mch_enable_scrollbar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aucmd_win</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_enable_scrollbar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aucmd_win</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_may_update_scrollbars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>win_valid</name><argument_list>(<argument><expr><name><name>aco</name><operator>-&gt;</operator><name>save_curwin</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>==</operator> <name><name>aco</name><operator>-&gt;</operator><name>new_curwin</name></name>

<operator>&amp;&amp;</operator> <name>curbuf</name> <operator>!=</operator> <name><name>aco</name><operator>-&gt;</operator><name>new_curbuf</name><operator>.</operator><name>br_buf</name></name>

<operator>&amp;&amp;</operator> <call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aco</name><operator>-&gt;</operator><name>new_curbuf</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>aco</name><operator>-&gt;</operator><name>new_curbuf</name><operator>.</operator><name>br_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_s</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>aco</name><operator>-&gt;</operator><name>new_curbuf</name><operator>.</operator><name>br_buf</name><operator>-&gt;</operator><name>b_s</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>--</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_nwindows</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>aco</name><operator>-&gt;</operator><name>new_curbuf</name><operator>.</operator><name>br_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_nwindows</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name><name>aco</name><operator>-&gt;</operator><name>save_curwin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>win_valid</name><argument_list>(<argument><expr><name><name>aco</name><operator>-&gt;</operator><name>save_prevwin</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prevwin</name> <operator>=</operator> <name><name>aco</name><operator>-&gt;</operator><name>save_prevwin</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>autocmd_nested</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>

<name>apply_autocmds</name><parameter_list>(

<parameter><decl><type><name>event_T</name></type> <name>event</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname_io</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>, 

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<return>return <expr><call><name>apply_autocmds_group</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>fname_io</name></expr></argument>, <argument><expr><name>force</name></expr></argument>,

<argument><expr><name>AUGROUP_ALL</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>apply_autocmds_exarg</name><parameter_list>(

<parameter><decl><type><name>event_T</name></type> <name>event</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname_io</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>,

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>apply_autocmds_group</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>fname_io</name></expr></argument>, <argument><expr><name>force</name></expr></argument>,

<argument><expr><name>AUGROUP_ALL</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>apply_autocmds_retval</name><parameter_list>(

<parameter><decl><type><name>event_T</name></type> <name>event</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname_io</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>, 

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>retval</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>did_cmd</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>should_abort</name><argument_list>(<argument><expr><operator>*</operator><name>retval</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>did_cmd</name> <operator>=</operator> <call><name>apply_autocmds_group</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>fname_io</name></expr></argument>, <argument><expr><name>force</name></expr></argument>,

<argument><expr><name>AUGROUP_ALL</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>did_cmd</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <call><name>aborting</name><argument_list>()</argument_list></call></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>retval</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>did_cmd</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>has_cursorhold</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>first_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><ternary><condition><expr><call><name>get_real_state</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NORMAL_BUSY</name></expr>

?</condition><then> <expr><name>EVENT_CURSORHOLD</name></expr> </then><else>: <expr><name>EVENT_CURSORHOLDI</name></expr></else></ternary><operator>)</operator></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>trigger_cursorhold</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_cursorhold</name>

<operator>&amp;&amp;</operator> <call><name>has_cursorhold</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <name>reg_recording</name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ins_compl_active</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>get_real_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NORMAL_BUSY</name> <operator>||</operator> <operator>(</operator><name>state</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>has_cursormoved</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>first_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>EVENT_CURSORMOVED</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>has_cursormovedI</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>first_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>EVENT_CURSORMOVEDI</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>has_textchanged</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>first_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>EVENT_TEXTCHANGED</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>has_textchangedI</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>first_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>EVENT_TEXTCHANGEDI</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>has_textchangedP</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>first_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>EVENT_TEXTCHANGEDP</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>has_insertcharpre</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>first_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>EVENT_INSERTCHARPRE</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>has_cmdundefined</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>first_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>EVENT_CMDUNDEFINED</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>has_funcundefined</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>first_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>EVENT_FUNCUNDEFINED</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>has_textyankpost</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>first_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>EVENT_TEXTYANKPOST</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>has_completechanged</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>first_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>EVENT_COMPLETECHANGED</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>apply_autocmds_group</name><parameter_list>(

<parameter><decl><type><name>event_T</name></type> <name>event</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname_io</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>group</name></decl></parameter>, 

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, 

<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier><name>eap</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sfname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_changed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>old_curbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_autocmd_fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_autocmd_fname_full</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_autocmd_bufnr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_autocmd_match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_autocmd_busy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_autocmd_nested</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nesting</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AutoPatCmd</name></type> <name>patcmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AutoPat</name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>sctx_T</name></type> <name>save_current_sctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>funccal_entry_T</name></type> <name>funccal_entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_cmdarg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>save_cmdbang</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>filechangeshell_busy</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>proftime_T</name></type> <name>wait_time</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>did_save_redobuff</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>save_redo_T</name></type> <name>save_redo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_KeyTyped</name> <init>= <expr><name>KeyTyped</name></expr></init></decl>;</decl_stmt>

<macro><name>ESTACK_CHECK_DECLARATION</name></macro>

<if_stmt><if>if <condition>(<expr><name>event</name> <operator>==</operator> <name>NUM_EVENTS</name> <operator>||</operator> <name><name>first_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>event</name></expr>]</index></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>autocmd_blocked</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>BYPASS_AU</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>autocmd_busy</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>force</name> <operator>||</operator> <name>autocmd_nested</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>BYPASS_AU</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>BYPASS_AU</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>filechangeshell_busy</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>event</name> <operator>==</operator> <name>EVENT_FILECHANGEDSHELL</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_FILECHANGEDSHELLPOST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>BYPASS_AU</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>event_ignored</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>BYPASS_AU</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nesting</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E218: autocommand nesting too deep"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>BYPASS_AU</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>autocmd_no_enter</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>event</name> <operator>==</operator> <name>EVENT_WINENTER</name> <operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_BUFENTER</name><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>autocmd_no_leave</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>event</name> <operator>==</operator> <name>EVENT_WINLEAVE</name> <operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_BUFLEAVE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>BYPASS_AU</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>save_autocmd_fname</name> <operator>=</operator> <name>autocmd_fname</name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_autocmd_fname_full</name> <operator>=</operator> <name>autocmd_fname_full</name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_autocmd_bufnr</name> <operator>=</operator> <name>autocmd_bufnr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_autocmd_match</name> <operator>=</operator> <name>autocmd_match</name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_autocmd_busy</name> <operator>=</operator> <name>autocmd_busy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_autocmd_nested</name> <operator>=</operator> <name>autocmd_nested</name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_changed</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_changed</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_curbuf</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fname_io</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>event</name> <operator>==</operator> <name>EVENT_COLORSCHEME</name> <operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_COLORSCHEMEPRE</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_OPTIONSET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>autocmd_fname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>fname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name>fname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>autocmd_fname</name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>autocmd_fname</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>autocmd_fname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>autocmd_fname</name> <operator>=</operator> <name>fname_io</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>autocmd_fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>autocmd_fname</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>autocmd_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>autocmd_fname_full</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>autocmd_bufnr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>autocmd_bufnr</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>fname</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>event</name> <operator>==</operator> <name>EVENT_SYNTAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_syn</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><name>event</name> <operator>==</operator> <name>EVENT_FILETYPE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_ft</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_sfname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sfname</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_sfname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>sfname</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>event</name> <operator>==</operator> <name>EVENT_FILETYPE</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_SYNTAX</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_CMDLINECHANGED</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_CMDLINEENTER</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_CMDLINELEAVE</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_CMDWINENTER</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_CMDWINLEAVE</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_CMDUNDEFINED</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_FUNCUNDEFINED</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_REMOTEREPLY</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_SPELLFILEMISSING</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_QUICKFIXCMDPRE</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_COLORSCHEME</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_COLORSCHEMEPRE</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_OPTIONSET</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_QUICKFIXCMDPOST</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_DIRCHANGED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>autocmd_fname_full</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>FullName_save</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>sfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<goto>goto <name>BYPASS_AU</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>sfname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>forward_slash</name><argument_list>(<argument><expr><name>sfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>forward_slash</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>sfname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vms_remove_version</name><argument_list>(<argument><expr><name>sfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vms_remove_version</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>autocmd_match</name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>RedrawingDisabled</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>estack_push</name><argument_list>(<argument><expr><name>ETYPE_AUCMD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ESTACK_CHECK_SETUP</name></type>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>save_current_sctx</name> <init>= <expr><name>current_sctx</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>do_profiling</name> <operator>==</operator> <name>PROF_YES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prof_child_enter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wait_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>save_funccal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>funccal_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>autocmd_busy</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>save_search_patterns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ins_compl_active</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>saveRedobuff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_save_redobuff</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>did_filetype</name> <operator>=</operator> <name>keep_filetype</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>autocmd_busy</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>filechangeshell_busy</name> <operator>=</operator> <operator>(</operator><name>event</name> <operator>==</operator> <name>EVENT_FILECHANGEDSHELL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>nesting</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>event</name> <operator>==</operator> <name>EVENT_FILETYPE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>did_filetype</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>gettail</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patcmd</name><operator>.</operator><name>curpat</name></name> <operator>=</operator> <name><name>first_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>event</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patcmd</name><operator>.</operator><name>nextcmd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patcmd</name><operator>.</operator><name>group</name></name> <operator>=</operator> <name>group</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patcmd</name><operator>.</operator><name>fname</name></name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patcmd</name><operator>.</operator><name>sfname</name></name> <operator>=</operator> <name>sfname</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patcmd</name><operator>.</operator><name>tail</name></name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patcmd</name><operator>.</operator><name>event</name></name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patcmd</name><operator>.</operator><name>arg_bufnr</name></name> <operator>=</operator> <name>autocmd_bufnr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patcmd</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>auto_next_pat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>patcmd</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patcmd</name><operator>.</operator><name>curpat</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>patcmd</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>active_apc_list</name></expr>;</expr_stmt>

<expr_stmt><expr><name>active_apc_list</name> <operator>=</operator> <operator>&amp;</operator><name>patcmd</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>save_cmdbang</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>get_vim_var_nr</name><argument_list>(<argument><expr><name>VV_CMDBANG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eap</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>save_cmdarg</name> <operator>=</operator> <call><name>set_cmdarg</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_CMDBANG</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>save_cmdarg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ap</name> <operator>=</operator> <name><name>patcmd</name><operator>.</operator><name>curpat</name></name></expr>;</init> <condition><expr><name><name>ap</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ap</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ap</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_lnums</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>getnextac</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>patcmd</name></expr></argument>,

<argument><expr><name>DOCMD_NOWAIT</name><operator>|</operator><name>DOCMD_VERBOSE</name><operator>|</operator><name>DOCMD_REPEAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_lnums</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>eap</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>set_cmdarg</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>save_cmdarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_CMDBANG</name></expr></argument>, <argument><expr><name>save_cmdbang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>active_apc_list</name> <operator>==</operator> <operator>&amp;</operator><name>patcmd</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>active_apc_list</name> <operator>=</operator> <name><name>patcmd</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>RedrawingDisabled</name></expr>;</expr_stmt>

<expr_stmt><expr><name>autocmd_busy</name> <operator>=</operator> <name>save_autocmd_busy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>filechangeshell_busy</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>autocmd_nested</name> <operator>=</operator> <name>save_autocmd_nested</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>SOURCING_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>ESTACK_CHECK_NOW</name></type>

<name>estack_pop</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>autocmd_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>autocmd_fname</name> <operator>=</operator> <name>save_autocmd_fname</name></expr>;</expr_stmt>

<expr_stmt><expr><name>autocmd_fname_full</name> <operator>=</operator> <name>save_autocmd_fname_full</name></expr>;</expr_stmt>

<expr_stmt><expr><name>autocmd_bufnr</name> <operator>=</operator> <name>save_autocmd_bufnr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>autocmd_match</name> <operator>=</operator> <name>save_autocmd_match</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>current_sctx</name> <operator>=</operator> <name>save_current_sctx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_funccal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>do_profiling</name> <operator>==</operator> <name>PROF_YES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prof_child_exit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wait_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>KeyTyped</name> <operator>=</operator> <name>save_KeyTyped</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>sfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>nesting</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>autocmd_busy</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>restore_search_patterns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>did_save_redobuff</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>restoreRedobuff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>did_filetype</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>au_pending_free_buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>au_pending_free_buf</name><operator>-&gt;</operator><name>b_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>au_pending_free_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>au_pending_free_buf</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>au_pending_free_win</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><name><name>au_pending_free_win</name><operator>-&gt;</operator><name>w_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>au_pending_free_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>au_pending_free_win</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curbuf</name> <operator>==</operator> <name>old_curbuf</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>event</name> <operator>==</operator> <name>EVENT_BUFREADPOST</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_BUFWRITEPOST</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_FILEAPPENDPOST</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_VIMLEAVE</name>

<operator>||</operator> <name>event</name> <operator>==</operator> <name>EVENT_VIMLEAVEPRE</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_changed</name></name> <operator>!=</operator> <name>save_changed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>need_maketitle</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_changed</name></name> <operator>=</operator> <name>save_changed</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>au_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<label><name>BYPASS_AU</name>:</label>

<if_stmt><if>if <condition>(<expr><name>event</name> <operator>==</operator> <name>EVENT_BUFWIPEOUT</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aubuflocal_remove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <name>event</name> <operator>==</operator> <name>EVENT_FILETYPE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>au_did_filetype</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>old_termresponse</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>block_autocmds</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>autocmd_blocked</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>old_termresponse</name> <operator>=</operator> <call><name>get_vim_var_str</name><argument_list>(<argument><expr><name>VV_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>++</operator><name>autocmd_blocked</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>unblock_autocmds</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>autocmd_blocked</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>autocmd_blocked</name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>get_vim_var_str</name><argument_list>(<argument><expr><name>VV_TERMRESPONSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>old_termresponse</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_TERMRESPONSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>is_autocmd_blocked</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>autocmd_blocked</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>auto_next_pat</name><parameter_list>(

<parameter><decl><type><name>AutoPatCmd</name> <modifier>*</modifier></type><name>apc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stop_at_last</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>AutoPat</name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AutoCmd</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>sourcing_namep</name> <init>= <expr><operator>&amp;</operator><name>SOURCING_NAME</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><operator>*</operator><name>sourcing_namep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ap</name> <operator>=</operator> <name><name>apc</name><operator>-&gt;</operator><name>curpat</name></name></expr>;</init> <condition><expr><name>ap</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>ap</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>apc</name><operator>-&gt;</operator><name>curpat</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>pat</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ap</name><operator>-&gt;</operator><name>cmds</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>apc</name><operator>-&gt;</operator><name>group</name></name> <operator>==</operator> <name>AUGROUP_ALL</name> <operator>||</operator> <name><name>apc</name><operator>-&gt;</operator><name>group</name></name> <operator>==</operator> <name><name>ap</name><operator>-&gt;</operator><name>group</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name><name>ap</name><operator>-&gt;</operator><name>buflocal_nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><operator>(</operator><call><name>match_file_pat</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ap</name><operator>-&gt;</operator><name>reg_prog</name></name></expr></argument>, <argument><expr><name><name>apc</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>,

<argument><expr><name><name>apc</name><operator>-&gt;</operator><name>sfname</name></name></expr></argument>, <argument><expr><name><name>apc</name><operator>-&gt;</operator><name>tail</name></name></expr></argument>, <argument><expr><name><name>ap</name><operator>-&gt;</operator><name>allow_dirs</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>

</then><else>: <expr><name><name>ap</name><operator>-&gt;</operator><name>buflocal_nr</name></name> <operator>==</operator> <name><name>apc</name><operator>-&gt;</operator><name>arg_bufnr</name></name></expr></else></ternary></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>event_nr2name</name><argument_list>(<argument><expr><name><name>apc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s Autocommands for \"%s\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>sourcing_namep</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>ap</name><operator>-&gt;</operator><name>patlen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sourcing_namep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>sourcing_namep</name></expr></argument>, <argument><expr><name>s</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ap</name><operator>-&gt;</operator><name>pat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Executing %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>sourcing_namep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>apc</name><operator>-&gt;</operator><name>curpat</name></name> <operator>=</operator> <name>ap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>apc</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>cmds</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>cmds</name></name></expr>;</init> <condition><expr><name><name>cp</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cp</name> <operator>=</operator> <name><name>cp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>apc</name><operator>-&gt;</operator><name>curpat</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stop_at_last</name> <operator>&amp;&amp;</operator> <name><name>ap</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>getnextac</name><parameter_list>(<parameter><decl><type><name>int</name> <name>c</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>indent</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>do_concat</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AutoPatCmd</name> <modifier>*</modifier></type><name>acp</name> <init>= <expr><operator>(</operator><name>AutoPatCmd</name> <operator>*</operator><operator>)</operator><name>cookie</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>retval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AutoCmd</name> <modifier>*</modifier></type><name>ac</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>acp</name><operator>-&gt;</operator><name>curpat</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<while>while <condition>(<expr><name><name>acp</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>acp</name><operator>-&gt;</operator><name>nextcmd</name><operator>-&gt;</operator><name>cmd</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>acp</name><operator>-&gt;</operator><name>nextcmd</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>acp</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>acp</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <name><name>acp</name><operator>-&gt;</operator><name>nextcmd</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>acp</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>acp</name><operator>-&gt;</operator><name>curpat</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>acp</name><operator>-&gt;</operator><name>curpat</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>acp</name><operator>-&gt;</operator><name>curpat</name></name> <operator>=</operator> <name><name>acp</name><operator>-&gt;</operator><name>curpat</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>acp</name><operator>-&gt;</operator><name>curpat</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>auto_next_pat</name><argument_list>(<argument><expr><name>acp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>acp</name><operator>-&gt;</operator><name>curpat</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ac</name> <operator>=</operator> <name><name>acp</name><operator>-&gt;</operator><name>nextcmd</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;=</operator> <literal type="number">9</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>verbose_enter_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"autocommand %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>verbose_leave_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>once</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>au_del_cmd</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>autocmd_nested</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>nested</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>current_sctx</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>script_ctx</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>acp</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>acp</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>has_autocmd</name><parameter_list>(<parameter><decl><type><name>event_T</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sfname</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AutoPat</name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><call><name>gettail</name><argument_list>(<argument><expr><name>sfname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>FullName_save</name><argument_list>(<argument><expr><name>sfname</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>sfname</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>sfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sfname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>forward_slash</name><argument_list>(<argument><expr><name>sfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>forward_slash</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>FOR_ALL_AUTOCMD_PATTERNS</name><argument_list>(<argument>event</argument>, <argument>ap</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>pat</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ap</name><operator>-&gt;</operator><name>cmds</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name><name>ap</name><operator>-&gt;</operator><name>buflocal_nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><call><name>match_file_pat</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ap</name><operator>-&gt;</operator><name>reg_prog</name></name></expr></argument>,

<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>sfname</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>, <argument><expr><name><name>ap</name><operator>-&gt;</operator><name>allow_dirs</name></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>buf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ap</name><operator>-&gt;</operator><name>buflocal_nr</name></name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></else></ternary>

<operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>sfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>get_augroup_name</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier><name>xp</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name><name>augroups</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"END"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>augroups</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AUGROUP_NAME</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>AUGROUP_NAME</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>get_deleted_augroup</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>AUGROUP_NAME</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return> 

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>include_groups</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>set_context_in_autocmd</name><parameter_list>(

<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>doautocmd</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>group</name></decl>;</decl_stmt>

<expr_stmt><expr><name>include_groups</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>au_get_grouparg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <name>AUGROUP_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>group</name> <operator>!=</operator> <name>AUGROUP_ALL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>group</name> <operator>=</operator> <name>AUGROUP_ALL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <name>AUGROUP_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>include_groups</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_EVENTS</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>arg</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>arg</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>doautocmd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_FILES</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>get_event_name</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier><name>xp</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>augroups</name><operator>.</operator><name>ga_len</name></name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>include_groups</name> <operator>||</operator> <call><name>AUGROUP_NAME</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <call><name>AUGROUP_NAME</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>get_deleted_augroup</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><call><name>AUGROUP_NAME</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return> 

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>event_names</name><index>[<expr><name>idx</name> <operator>-</operator> <name><name>augroups</name><operator>.</operator><name>ga_len</name></name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>autocmd_supported</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>event_name2nr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUM_EVENTS</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>au_exists</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>event_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>event_T</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AutoPat</name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buflocal_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>group</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>arg_save</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg_save</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>arg_save</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>au_find_group</name><argument_list>(<argument><expr><name>arg_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <name>AUGROUP_ERROR</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>group</name> <operator>=</operator> <name>AUGROUP_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>event_name</name> <operator>=</operator> <name>arg_save</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>event_name</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>event_name</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pattern</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>event</name> <operator>=</operator> <call><name>event_name2nr</name><argument_list>(<argument><expr><name>event_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>event</name> <operator>==</operator> <name>NUM_EVENTS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ap</name> <operator>=</operator> <name><name>first_autopat</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>event</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ap</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pattern</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>STRICMP</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="string">"&lt;buffer&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buflocal_buf</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>ap</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ap</name> <operator>=</operator> <name><name>ap</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ap</name><operator>-&gt;</operator><name>pat</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ap</name><operator>-&gt;</operator><name>cmds</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>group</name> <operator>==</operator> <name>AUGROUP_ALL</name> <operator>||</operator> <name><name>ap</name><operator>-&gt;</operator><name>group</name></name> <operator>==</operator> <name>group</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>pattern</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>(</operator><ternary><condition><expr><name>buflocal_buf</name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><call><name>fnamecmp</name><argument_list>(<argument><expr><name><name>ap</name><operator>-&gt;</operator><name>pat</name></name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>

</then><else>: <expr><name><name>ap</name><operator>-&gt;</operator><name>buflocal_nr</name></name> <operator>==</operator> <name><name>buflocal_buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></else></ternary><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<label><name>theend</name>:</label>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>arg_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
