<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\menu.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENUDEPTH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>add_menu_path</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>add_menu_path</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>menu_nable_recurse</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>remove_menu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>silent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_menu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>menup</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_menu_string</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>show_menus</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>show_menus_recursive</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>menu_name_skip</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>menu_name_equal</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>menu_namecmp</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mname</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>get_menu_cmd_modes</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>popup_mode_name</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>menu_text</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mnemonic</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>actext</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_create_tearoffs_recurse</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>pname</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pri_tab</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pri_idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_add_tearoff</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tearpath</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pri_tab</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pri_idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_destroy_tearoffs_recurse</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s_tearoffs</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>menu_is_hidden</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>menu_is_tearoff</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>menu_skip_part</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>menutrans_lookup</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>menu_unescape_name</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>menu_translate_tab_and_shift</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_start</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>menu_mode_chars</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"v"</literal></expr>, <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"tl"</literal></expr>, <expr><literal type="string">"t"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_notsubmenu</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E327: Part of menu-item path is not sub-menu"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_nomenu</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E329: No menu \"%s\""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>toolbar_names</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"New"</literal></expr>, <expr><literal type="string">"Open"</literal></expr>, <expr><literal type="string">"Save"</literal></expr>, <expr><literal type="string">"Undo"</literal></expr>, <expr><literal type="string">"Redo"</literal></expr>,

<expr><literal type="string">"Cut"</literal></expr>, <expr><literal type="string">"Copy"</literal></expr>, <expr><literal type="string">"Paste"</literal></expr>, <expr><literal type="string">"Print"</literal></expr>, <expr><literal type="string">"Help"</literal></expr>,

<expr><literal type="string">"Find"</literal></expr>, <expr><literal type="string">"SaveAll"</literal></expr>, <expr><literal type="string">"SaveSesn"</literal></expr>, <expr><literal type="string">"NewSesn"</literal></expr>, <expr><literal type="string">"LoadSesn"</literal></expr>,

<expr><literal type="string">"RunScript"</literal></expr>, <expr><literal type="string">"Replace"</literal></expr>, <expr><literal type="string">"WinClose"</literal></expr>, <expr><literal type="string">"WinMax"</literal></expr>, <expr><literal type="string">"WinMin"</literal></expr>,

<expr><literal type="string">"WinSplit"</literal></expr>, <expr><literal type="string">"Shell"</literal></expr>, <expr><literal type="string">"FindPrev"</literal></expr>, <expr><literal type="string">"FindNext"</literal></expr>, <expr><literal type="string">"FindHelp"</literal></expr>,

<expr><literal type="string">"Make"</literal></expr>, <expr><literal type="string">"TagJump"</literal></expr>, <expr><literal type="string">"RunCtags"</literal></expr>, <expr><literal type="string">"WinVSplit"</literal></expr>, <expr><literal type="string">"WinMaxWidth"</literal></expr>,

<expr><literal type="string">"WinMinWidth"</literal></expr>, <expr><literal type="string">"Exit"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOOLBAR_NAME_COUNT</name></cpp:macro> <cpp:value>(sizeof(toolbar_names) / sizeof(char *))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>menu_is_winbar</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"WinBar"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>winbar_height</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_winbar</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winbar</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vimmenu_T</name> <modifier>*</modifier><modifier>*</modifier></type>

<name>get_root_menu</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_winbar</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_winbar</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name>root_menu</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_menu</name><parameter_list>(

<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>menu_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>map_to</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>noremap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>silent</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>special</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>unmenu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>map_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>old_menu_height</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>old_toolbar_height</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name><name>pri_tab</name><index>[<expr><name>MENUDEPTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enable</name> <init>= <expr><name>MAYBE</name></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>icon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>vimmenu_T</name></type> <name>menuarg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>root_menu_ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>modes</name> <operator>=</operator> <call><name>get_menu_cmd_modes</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>noremap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unmenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;script&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>noremap</name> <operator>=</operator> <name>REMAP_SCRIPT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;silent&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>silent</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;special&gt;"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>special</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"icon="</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>icon</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>arg</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MENUDEPTH</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>pri_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pri_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pri_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>arg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name> <operator>&amp;&amp;</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pri_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>MENUDEPTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pri_tab</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>pri_tab</name><index>[<expr><name>MENUDEPTH</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"enable"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>enable</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"disable"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>enable</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>show_menus</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>iconidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>icon_builtin</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_toolbar</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>menu_path</name> <operator>=</operator> <call><name>menu_skip_part</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>menu_path</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>menu_skip_part</name><argument_list>(<argument><expr><operator>++</operator><name>menu_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>, <argument><expr><literal type="string">"BuiltIn"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>skipdigits</name><argument_list>(<argument><expr><name>menu_path</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>p</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>iconidx</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>menu_path</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menuarg</name><operator>.</operator><name>iconidx</name></name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>TOOLBAR_NAME_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>iconidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>icon_builtin</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>TOOLBAR_NAME_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>toolbar_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>menu_path</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>menu_path</name></expr></argument>)</argument_list></call>

<operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>iconidx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>menu_path</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>menu_path</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>menu_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>map_to</name> <operator>=</operator> <call><name>menu_translate_tab_and_shift</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>map_to</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>unmenu</name> <operator>&amp;&amp;</operator> <name>enable</name> <operator>==</operator> <name>MAYBE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>show_menus</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>map_to</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>unmenu</name> <operator>||</operator> <name>enable</name> <operator>!=</operator> <name>MAYBE</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_PHOTON</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><name>old_menu_height</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>menu_height</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>old_toolbar_height</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>toolbar_height</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>root_menu_ptr</name> <operator>=</operator> <call><name>get_root_menu</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>root_menu_ptr</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_winbar</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enable</name> <operator>!=</operator> <name>MAYBE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>menu_path</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_popup</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MENU_INDEX_TIP</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>popup_mode_name</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>menu_nable_recurse</name><argument_list>(<argument><expr><operator>*</operator><name>root_menu_ptr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>MENU_ALL_MODES</name></expr></argument>,

<argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>menu_nable_recurse</name><argument_list>(<argument><expr><operator>*</operator><name>root_menu_ptr</name></expr></argument>, <argument><expr><name>menu_path</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>unmenu</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>menu_path</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_popup</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MENU_INDEX_TIP</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>popup_mode_name</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>remove_menu</name><argument_list>(<argument><expr><name>root_menu_ptr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>MENU_ALL_MODES</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>remove_menu</name><argument_list>(<argument><expr><name>root_menu_ptr</name></expr></argument>, <argument><expr><name>menu_path</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>map_to</name></expr></argument>, <argument><expr><literal type="string">"&lt;nop&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>map_to</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>map_buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <name>MENU_TIP_MODE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>map_buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>map_to</name> <operator>=</operator> <call><name>replace_termcodes</name><argument_list>(<argument><expr><name>map_to</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>map_buf</name></expr></argument>,

<argument><expr><name>REPTERM_DO_LT</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>special</name></expr> ?</condition><then> <expr><name>REPTERM_SPECIAL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>modes</name></name> <operator>=</operator> <name>modes</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>iconfile</name></name> <operator>=</operator> <name>icon</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>noremap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>noremap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>silent</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>silent</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_menu_path</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>menuarg</name></expr></argument>, <argument><expr><name>pri_tab</name></expr></argument>, <argument><expr><name>map_to</name></expr></argument>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <argument><expr><name>TRUE</name></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_popup</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MENU_INDEX_TIP</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>popup_mode_name</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>modes</name></name> <operator>=</operator> <name>modes</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>iconfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>iconidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>icon_builtin</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>add_menu_path</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>menuarg</name></expr></argument>, <argument><expr><name>pri_tab</name></expr></argument>, <argument><expr><name>map_to</name></expr></argument>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <argument><expr><name>TRUE</name></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>map_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>menu_height</name></name> <operator>!=</operator> <name>old_menu_height</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator> <name><name>gui</name><operator>.</operator><name>toolbar_height</name></name> <operator>!=</operator> <name>old_toolbar_height</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>RESIZE_VERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>root_menu_ptr</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_winbar</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>winbar_height</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_winbar_height</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_winbar_height</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>theend</name>:</label>

<empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>add_menu_path</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>menu_path</name></decl></parameter>,

<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menuarg</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pri_tab</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>call_data</name></decl></parameter>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <parameter><decl><type><name>int</name></type> <name>addtearoff</name></decl></parameter> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modes</name> <init>= <expr><name><name>menuarg</name><operator>-&gt;</operator><name>modes</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>menup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>lower_pri</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>next_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_idx</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>pri_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_modes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>amenu</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>en_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>map_to</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>root_menu_ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>path_name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>root_menu_ptr</name> <operator>=</operator> <call><name>get_root_menu</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>menup</name> <operator>=</operator> <name>root_menu_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>path_name</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>name</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>next_name</name> <operator>=</operator> <call><name>menu_name_skip</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>map_to</name> <operator>=</operator> <call><name>menutrans_lookup</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>map_to</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>en_name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>map_to</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>en_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>dname</name> <operator>=</operator> <call><name>menu_text</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>erret</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dname</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E792: Empty menu name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lower_pri</name> <operator>=</operator> <name>menup</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <operator>*</operator><name>menup</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>menu_name_equal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>menu_name_equal</name><argument_list>(<argument><expr><name>dname</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next_name</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys_menu</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E330: Menu path must not lead to a sub-menu"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next_name</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>addtearoff</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys_menu</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notsubmenu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menup</name> <operator>=</operator> <operator>&amp;</operator><name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <call><name>menu_is_menubar</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>priority</name></name> <operator>&lt;=</operator> <name><name>pri_tab</name><index>[<expr><name>pri_idx</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lower_pri</name> <operator>=</operator> <name>menup</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>new_idx</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next_name</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>parent</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E331: Must not add menu items directly to menu bar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_separator</name><argument_list>(<argument><expr><name>dname</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>next_name</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E332: Separator cannot be part of a menu path"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>vimmenu_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>erret</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>=</operator> <name>modes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>enabled</name></name> <operator>=</operator> <name>MENU_ALL_MODES</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name> <operator>=</operator> <call><name>menu_text</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>menu</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>menu</name><operator>-&gt;</operator><name>actext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>en_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>en_name</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>en_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name> <operator>=</operator> <call><name>menu_text</name><argument_list>(<argument><expr><name>en_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>en_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>priority</name></name> <operator>=</operator> <name><name>pri_tab</name><index>[<expr><name>pri_idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>sensitive</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>tip</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>image</name></name> <operator>=</operator> <name>None</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>lower_pri</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lower_pri</name> <operator>=</operator> <name>menu</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_modes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name> <operator>=</operator> <name><name>menuarg</name><operator>-&gt;</operator><name>iconidx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>icon_builtin</name></name> <operator>=</operator> <name><name>menuarg</name><operator>-&gt;</operator><name>icon_builtin</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next_name</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>menuarg</name><operator>-&gt;</operator><name>iconfile</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>iconfile</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>menuarg</name><operator>-&gt;</operator><name>iconfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>menu_is_tearoff</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>children</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>children</name><operator>-&gt;</operator><name>modes</name></name> <operator>|=</operator> <name>modes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>old_modes</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>modes</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>addtearoff</name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>|=</operator> <name>modes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>enabled</name></name> <operator>|=</operator> <name>modes</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>old_modes</name> <operator>&amp;</operator> <name>MENU_ALL_MODES</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>MENU_ALL_MODES</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next_name</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_add_menu_item</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>new_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>force_menu_update</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_add_menu</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>new_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>( <expr><name>addtearoff</name>

<operator>&amp;&amp;</operator> <operator>*</operator><name>next_name</name>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_TEAROFF</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>menu_is_menubar</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>starting</name></name><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tearpath</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tearpath</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>menu_path</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>TEAR_LEN</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tearpath</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>tearpath</name></expr></argument>, <argument><expr><name>menu_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>next_name</name> <operator>-</operator> <name>path_name</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>tearpath</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>&lt;</operator> <name>tearpath</name> <operator>+</operator> <name>idx</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>Ctrl_V</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>tearpath</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_add_tearoff</name><argument_list>(<argument><expr><name>tearpath</name></expr></argument>, <argument><expr><name>pri_tab</name></expr></argument>, <argument><expr><name>pri_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tearpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>menup</name> <operator>=</operator> <operator>&amp;</operator><name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <name>menu</name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>next_name</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pri_tab</name><index>[<expr><name>pri_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>pri_idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>amenu</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>modes</name> <operator>&amp;</operator> <operator>(</operator><name>MENU_NORMAL_MODE</name> <operator>|</operator> <name>MENU_INSERT_MODE</name><operator>)</operator><operator>)</operator> <operator>==</operator>

<operator>(</operator><name>MENU_NORMAL_MODE</name> <operator>|</operator> <name>MENU_INSERT_MODE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sys_menu</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modes</name> <operator>&amp;=</operator> <operator>~</operator><name>old_modes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>modes</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>gui_menu_cb</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>call_data</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>call_data</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MENU_MODES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_menu_string</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>amenu</name> <operator>&amp;&amp;</operator> <name>call_data</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>call_data</name> <operator>!=</operator> <name>NUL</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>addtearoff</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>MENU_VISUAL_MODE</name></expr>:</case>

<case>case <expr><name>MENU_SELECT_MODE</name></expr>:</case>

<case>case <expr><name>MENU_OP_PENDING_MODE</name></expr>:</case>

<case>case <expr><name>MENU_CMDLINE_MODE</name></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>Ctrl_C</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MENU_INSERT_MODE</name></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>Ctrl_BSL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>Ctrl_O</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>call_data</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>call_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>call_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_C</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>Ctrl_BSL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>Ctrl_G</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>noremap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>menuarg</name><operator>-&gt;</operator><name>noremap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>silent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>menuarg</name><operator>-&gt;</operator><name>silent</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <name>MENU_TIP_MODE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_menu_set_tip</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

<label><name>erret</name>:</label>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>parent</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>menup</name> <operator>=</operator> <name>root_menu_ptr</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>menup</name> <operator>=</operator> <operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>menup</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>menup</name> <operator>!=</operator> <name>parent</name></expr>;</condition> <incr><expr><name>menup</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>menup</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>menup</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_menu</name><argument_list>(<argument><expr><name>menup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>menu_nable_recurse</name><parameter_list>(

<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>modes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>menu_name_skip</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <call><name>menu_name_equal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notsubmenu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_nable_recurse</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else

if <condition>(<expr><name>enable</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>enabled</name></name> <operator>|=</operator> <name>modes</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;=</operator> <operator>~</operator><name>modes</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>!=</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>!=</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nomenu</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>force_menu_update</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>remove_menu</name><parameter_list>(

<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>menup</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>modes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>silent</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>menup</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>menu_name_skip</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>menu</name> <operator>=</operator> <operator>*</operator><name>menup</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>menu_name_equal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notsubmenu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>modes</name><operator>)</operator> <operator>!=</operator> <literal type="number">0x0</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>modes</name> <operator>==</operator> <name>MENU_ALL_MODES</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsWindow</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>tearoff_handle</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>tearoff_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>remove_menu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>, <argument><expr><name>silent</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>name</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_menuothermode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;=</operator> <operator>~</operator><name>modes</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <name>MENU_TIP_MODE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_menu_string</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>MENU_INDEX_TIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>MENU_ALL_MODES</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_menu</name><argument_list>(<argument><expr><name>menup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>menup</name> <operator>=</operator> <operator>&amp;</operator><name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>menup</name> <operator>=</operator> <operator>&amp;</operator><name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nomenu</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;=</operator> <operator>~</operator><name>modes</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s_tearoffs</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>child</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>child</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>|=</operator> <name><name>child</name><operator>-&gt;</operator><name>modes</name></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <name>MENU_TIP_MODE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_menu_string</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>MENU_INDEX_TIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_menu_set_tip</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>MENU_ALL_MODES</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>s_tearoffs</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>free_menu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>menup</name> <operator>=</operator> <name>menu</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_menu</name><argument_list>(<argument><expr><name>menup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>remove_winbar</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>remove_menu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_winbar</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><name>MENU_ALL_MODES</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winbar_items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>free_menu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>menup</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <operator>*</operator><name>menup</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_destroy_menu</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>menup</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>en_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>actext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>iconfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>xpm_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MENU_MODES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_menu_string</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>force_menu_update</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>free_menu_string</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MENU_MODES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>show_menus</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>path_name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <operator>*</operator><call><name>get_root_menu</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>name</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>menu_name_skip</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>menu_name_equal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notsubmenu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>modes</name><operator>)</operator> <operator>==</operator> <literal type="number">0x0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_menuothermode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nomenu</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <name>menu</name></expr>;</expr_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts_title</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n--- Menus ---"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_menus_recursive</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>show_menus_recursive</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>modes</name><operator>)</operator> <operator>==</operator> <literal type="number">0x0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>depth</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>priority</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_outtrans_attr</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>bit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bit</name> <operator>&lt;</operator> <name>MENU_MODES</name></expr>;</condition> <incr><expr><name>bit</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>modes</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>depth</name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><name><name>menu_mode_chars</name><index>[<expr><name>bit</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>noremap</name><index>[<expr><name>bit</name></expr>]</index></name> <operator>==</operator> <name>REMAP_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>noremap</name><index>[<expr><name>bit</name></expr>]</index></name> <operator>==</operator> <name>REMAP_SCRIPT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>silent</name><index>[<expr><name>bit</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>bit</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"&lt;Nop&gt;"</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_outtrans_special</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>bit</name></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name>root_menu</name></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>menu</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>menu_is_hidden</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_menus_recursive</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>vimmenu_T</name> <modifier>*</modifier></type><name>expand_menu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>vimmenu_T</name> <modifier>*</modifier></type><name>expand_menu_alt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>expand_modes</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>expand_emenu</name></decl>;</decl_stmt> 

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>set_context_in_menu_cmd</name><parameter_list>(

<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>after_dot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>unmenu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>expand_menus</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_UNSUCCESSFUL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"enable"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"disable"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>after_dot</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>Ctrl_V</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>after_dot</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>expand_menus</name> <operator>=</operator> <operator>!</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name><name>cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal><operator>)</operator> <operator>||</operator> <operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'p'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>expand_emenu</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'e'</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>expand_menus</name> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>try_alt_menu</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>expand_modes</name> <operator>=</operator> <call><name>get_menu_cmd_modes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>forceit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unmenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>unmenu</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>expand_modes</name> <operator>=</operator> <name>MENU_ALL_MODES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name>root_menu</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>after_dot</name> <operator>!=</operator> <name>arg</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>path_name</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>after_dot</name> <operator>-</operator> <name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>after_dot</name> <operator>-</operator> <name>arg</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>path_name</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>menu_name_skip</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>menu_name_equal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>expand_modes</name><operator>)</operator> <operator>==</operator> <literal type="number">0x0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>try_alt_menu</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_winbar</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>try_alt_menu</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>try_alt_menu</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <ternary><condition><expr><name>expand_menus</name></expr> ?</condition><then> <expr><name>EXPAND_MENUNAMES</name></expr> </then><else>: <expr><name>EXPAND_MENUS</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>after_dot</name></expr>;</expr_stmt>

<expr_stmt><expr><name>expand_menu</name> <operator>=</operator> <name>menu</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>expand_menu</name> <operator>==</operator> <name>root_menu</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>expand_menu_alt</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_winbar</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>expand_menu_alt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>get_menu_name</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier><name>xp</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>did_alt_menu</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>should_advance</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name>expand_menu</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_alt_menu</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>should_advance</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>menu_is_hidden</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>menu_is_tearoff</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call>

<operator>||</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>did_alt_menu</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name>expand_menu_alt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_alt_menu</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>expand_modes</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>should_advance</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>should_advance</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>should_advance</name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>did_alt_menu</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name>expand_menu_alt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_alt_menu</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>should_advance</name> <operator>=</operator> <operator>!</operator><name>should_advance</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>get_menu_names</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier><name>xp</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>did_alt_menu</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TBUFFER_LEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>tbuffer</name><index>[<expr><name>TBUFFER_LEN</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>should_advance</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name>expand_menu</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_alt_menu</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>should_advance</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator> <call><name>menu_is_hidden</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><name>expand_emenu</name> <operator>&amp;&amp;</operator> <call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <call><name>menu_is_tearoff</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>menu</name><operator>-&gt;</operator><name>dname</name><index>[<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>did_alt_menu</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name>expand_menu_alt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_alt_menu</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>expand_modes</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>should_advance</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>tbuffer</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name></expr></argument>, <argument><expr><name>TBUFFER_LEN</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>tbuffer</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>, <argument><expr><name>TBUFFER_LEN</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>should_advance</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>tbuffer</name></expr></argument>, <argument><expr><literal type="string">"\001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>tbuffer</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>should_advance</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>should_advance</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>should_advance</name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>did_alt_menu</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name>expand_menu_alt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_alt_menu</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>should_advance</name> <operator>=</operator> <operator>!</operator><name>should_advance</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>menu_name_skip</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>menu_name_equal</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>en_name</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>menu_namecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>en_name</name></name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>menu_namecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>en_dname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>menu_namecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>menu_namecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>menu_namecmp</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>TAB</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>mname</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><operator>(</operator><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>TAB</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>mname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>mname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>TAB</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_menu_cmd_modes</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>noremap</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>unmenu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>modes</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>cmd</name><operator>++</operator></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'v'</literal></expr>:</case> 

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_VISUAL_MODE</name> <operator>|</operator> <name>MENU_SELECT_MODE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case> 

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_VISUAL_MODE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> 

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_SELECT_MODE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'o'</literal></expr>:</case> 

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_OP_PENDING_MODE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> 

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_INSERT_MODE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_TERMINAL_MODE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>cmd</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_TIP_MODE</name></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> 

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_CMDLINE_MODE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> 

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_INSERT_MODE</name> <operator>|</operator> <name>MENU_CMDLINE_MODE</name> <operator>|</operator> <name>MENU_NORMAL_MODE</name>

<operator>|</operator> <name>MENU_VISUAL_MODE</name> <operator>|</operator> <name>MENU_SELECT_MODE</name>

<operator>|</operator> <name>MENU_OP_PENDING_MODE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>!=</operator> <literal type="char">'o'</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_NORMAL_MODE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<default>default:</default>

<expr_stmt><expr><operator>--</operator><name>cmd</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>forceit</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_INSERT_MODE</name> <operator>|</operator> <name>MENU_CMDLINE_MODE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>modes</name> <operator>=</operator> <name>MENU_NORMAL_MODE</name> <operator>|</operator> <name>MENU_VISUAL_MODE</name> <operator>|</operator> <name>MENU_SELECT_MODE</name>

<operator>|</operator> <name>MENU_OP_PENDING_MODE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>noremap</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>noremap</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'n'</literal></expr> ?</condition><then> <expr><name>REMAP_NONE</name></expr> </then><else>: <expr><name>REMAP_YES</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unmenu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>unmenu</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'u'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>modes</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>get_menu_mode_str</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>modes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>modes</name> <operator>&amp;</operator> <operator>(</operator><name>MENU_INSERT_MODE</name> <operator>|</operator> <name>MENU_CMDLINE_MODE</name> <operator>|</operator> <name>MENU_NORMAL_MODE</name> <operator>|</operator>

<name>MENU_VISUAL_MODE</name> <operator>|</operator> <name>MENU_SELECT_MODE</name> <operator>|</operator> <name>MENU_OP_PENDING_MODE</name><operator>)</operator><operator>)</operator>

<operator>==</operator> <operator>(</operator><name>MENU_INSERT_MODE</name> <operator>|</operator> <name>MENU_CMDLINE_MODE</name> <operator>|</operator> <name>MENU_NORMAL_MODE</name> <operator>|</operator>

<name>MENU_VISUAL_MODE</name> <operator>|</operator> <name>MENU_SELECT_MODE</name> <operator>|</operator> <name>MENU_OP_PENDING_MODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"a"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>modes</name> <operator>&amp;</operator> <operator>(</operator><name>MENU_NORMAL_MODE</name> <operator>|</operator> <name>MENU_VISUAL_MODE</name> <operator>|</operator> <name>MENU_SELECT_MODE</name> <operator>|</operator>

<name>MENU_OP_PENDING_MODE</name><operator>)</operator><operator>)</operator>

<operator>==</operator> <operator>(</operator><name>MENU_NORMAL_MODE</name> <operator>|</operator> <name>MENU_VISUAL_MODE</name> <operator>|</operator> <name>MENU_SELECT_MODE</name> <operator>|</operator>

<name>MENU_OP_PENDING_MODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>modes</name> <operator>&amp;</operator> <operator>(</operator><name>MENU_INSERT_MODE</name> <operator>|</operator> <name>MENU_CMDLINE_MODE</name><operator>)</operator><operator>)</operator>

<operator>==</operator> <operator>(</operator><name>MENU_INSERT_MODE</name> <operator>|</operator> <name>MENU_CMDLINE_MODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"!"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>modes</name> <operator>&amp;</operator> <operator>(</operator><name>MENU_VISUAL_MODE</name> <operator>|</operator> <name>MENU_SELECT_MODE</name><operator>)</operator><operator>)</operator>

<operator>==</operator> <operator>(</operator><name>MENU_VISUAL_MODE</name> <operator>|</operator> <name>MENU_SELECT_MODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"v"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <name>MENU_VISUAL_MODE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"x"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <name>MENU_SELECT_MODE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"s"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <name>MENU_OP_PENDING_MODE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"o"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <name>MENU_INSERT_MODE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"i"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <name>MENU_TERMINAL_MODE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"tl"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <name>MENU_CMDLINE_MODE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"c"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <name>MENU_NORMAL_MODE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"n"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;</operator> <name>MENU_TIP_MODE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"t"</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>popup_mode_name</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mode_chars</name> <init>= <expr><name><name>menu_mode_chars</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode_chars_len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>mode_chars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>mode_chars_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>mode_chars_len</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mode_chars_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">5</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>menu_mode_chars</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>get_menu_index</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MENU_INDEX_INSERT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MENU_INDEX_CMDLINE</name></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>term_use_loop</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MENU_INDEX_TERMINAL</name></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_select</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MENU_INDEX_SELECT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MENU_INDEX_VISUAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>HITRETURN</name> <operator>||</operator> <name>state</name> <operator>==</operator> <name>ASKMORE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MENU_INDEX_CMDLINE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>finish_op</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MENU_INDEX_OP_PENDING</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <name>NORMAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MENU_INDEX_NORMAL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MENU_INDEX_INVALID</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>MENU_INDEX_INVALID</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MENU_INDEX_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>idx</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>menu_text</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mnemonic</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>actext</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>TAB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>actext</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>actext</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>str</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>text</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mnemonic</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&amp;'</literal></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MVS__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MOTIF390_MNEMONIC_FIXED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>mnemonic</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__etoa_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>mnemonic</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>text</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>menu_is_menubar</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>!</operator><call><name>menu_is_popup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>menu_is_toolbar</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>menu_is_winbar</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>!=</operator> <name>MNU_HIDDEN_CHAR</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>menu_is_popup</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"PopUp"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>XmVersion</name> <operator>&lt;=</operator> <literal type="number">1002</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>menu_is_child_of_popup</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><call><name>menu_is_popup</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>menu_is_toolbar</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ToolBar"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>menu_is_separator</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>menu_is_hidden</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>menu_is_popup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>menu_is_tearoff</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>name</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TEAR_STRING</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>FALSE</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERM_POPUP_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_menu_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>term_use_loop</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MENU_INDEX_TERMINAL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_select</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MENU_INDEX_SELECT</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>MENU_INDEX_VISUAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MENU_INDEX_INSERT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name><operator>)</operator> <operator>||</operator> <name>State</name> <operator>==</operator> <name>ASKMORE</name> <operator>||</operator> <name>State</name> <operator>==</operator> <name>HITRETURN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MENU_INDEX_CMDLINE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>finish_op</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MENU_INDEX_OP_PENDING</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>NORMAL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MENU_INDEX_NORMAL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>LANGMAP</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>MENU_INDEX_INSERT</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>MENU_INDEX_INVALID</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>get_menu_mode_flag</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><call><name>get_menu_mode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MENU_INDEX_INVALID</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>mode</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>show_popupmenu</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>menu_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>menu_mode</name> <operator>=</operator> <call><name>get_menu_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>menu_mode</name> <operator>==</operator> <name>MENU_INDEX_INVALID</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name><name>menu_mode_chars</name><index>[<expr><name>menu_mode</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mode_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_MENUPOPUP</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name><operator>*</operator><operator>)</operator><name>mode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>menu</name> <operator>=</operator> <name>root_menu</name></expr>;</init> <condition><expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><literal type="string">"PopUp"</literal></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>mode_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_update_menus</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_show_popupmenu</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERM_POPUP_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERM_POPUP_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>pum_show_popupmenu</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>check_menu_pointer</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu_to_check</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>root</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>menu_to_check</name>

<operator>||</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>check_menu_pointer</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name>menu_to_check</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_create_initial_menus</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>MENU_ALL_MODES</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_add_menu</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_create_initial_menus</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_add_menu_item</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_update_menus_recurse</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>grey</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>menu</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;</operator> <name>mode</name><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator> <call><name>menu_is_tearoff</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>grey</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>grey</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mch_menu_grey</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>grey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_GREY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>menu</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <call><name>menu_is_toolbar</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_menu_grey</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>grey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_menu_hidden</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>grey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_update_menus_recurse</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_update_menus</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>modes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_mode</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>!=</operator> <literal type="number">0x0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>modes</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>get_menu_mode_flag</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>force_menu_update</name> <operator>||</operator> <name>mode</name> <operator>!=</operator> <name>prev_mode</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_update_menus_recurse</name><argument_list>(<argument><expr><name>root_menu</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_draw_menubar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_mode</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name>force_menu_update</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_PHOTON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>gui_is_menu_shortcut</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>TOLOWER_LOC</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>menu</name> <operator>=</operator> <name>root_menu</name></expr>;</init> <condition><expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>==</operator> <name>key</name>

<operator>||</operator> <operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>&lt;</operator> <literal type="number">256</literal> <operator>&amp;&amp;</operator> <call><name>TOLOWER_LOC</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>key</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_toggle_tearoffs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>pri_tab</name><index>[<expr><name>MENUDEPTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MENUDEPTH</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pri_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>pri_tab</name><index>[<expr><name>MENUDEPTH</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_create_tearoffs_recurse</name><argument_list>(<argument><expr><name>root_menu</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><name>pri_tab</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_destroy_tearoffs_recurse</name><argument_list>(<argument><expr><name>root_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>s_tearoffs</name> <operator>=</operator> <name>enable</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_create_tearoffs_recurse</name><parameter_list>(

<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>pname</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pri_tab</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pri_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newpname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pri_tab</name><index>[<expr><name>pri_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>pri_idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>menu_is_menubar</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>pname</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>newpname</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <name>TEAR_LEN</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newpname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>newpname</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>newpname</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>newpname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>children</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TEAR_STRING</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_add_tearoff</name><argument_list>(<argument><expr><name>newpname</name></expr></argument>, <argument><expr><name>pri_tab</name></expr></argument>, <argument><expr><name>pri_idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>newpname</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_create_tearoffs_recurse</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name>newpname</name></expr></argument>,

<argument><expr><name>pri_tab</name></expr></argument>, <argument><expr><name>pri_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>newpname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_add_tearoff</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tearpath</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pri_tab</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pri_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name></type> <name>menuarg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tbuf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><literal type="number">5</literal> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>tearpath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>K_SECOND</name><argument_list>(<argument><expr><name>K_TEAROFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>K_THIRD</name><argument_list>(<argument><expr><name>K_TEAROFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>tbuf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>tearpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>tbuf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>tearpath</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>tearpath</name></expr></argument>, <argument><expr><name>TEAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>pri_tab</name><index>[<expr><name>pri_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pri_tab</name><index>[<expr><name>pri_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>iconfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>iconidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>icon_builtin</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>noremap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>REMAP_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>silent</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>modes</name></name> <operator>=</operator> <name>MENU_ALL_MODES</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_menu_path</name><argument_list>(<argument><expr><name>tearpath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>menuarg</name></expr></argument>, <argument><expr><name>pri_tab</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menuarg</name><operator>.</operator><name>modes</name></name> <operator>=</operator> <name>MENU_TIP_MODE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_menu_path</name><argument_list>(<argument><expr><name>tearpath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>menuarg</name></expr></argument>, <argument><expr><name>pri_tab</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Tear off this menu"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pri_tab</name><index>[<expr><name>pri_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_destroy_tearoffs_recurse</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>menu</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>children</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TEAR_STRING</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_menu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>gui_destroy_tearoffs_recurse</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type>

<name>execute_menu</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>mode_idx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>restart_edit</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MENU_INDEX_INSERT</name></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>term_use_loop</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MENU_INDEX_TERMINAL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MENU_INDEX_VISUAL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>eap</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>tpos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MENU_INDEX_VISUAL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_start</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_end</name><operator>.</operator><name>lnum</name></name><operator>)</operator> <operator>==</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tpos</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_end</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_curswant</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <literal type="char">'V'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tpos</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>tpos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>eap</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MENU_INDEX_NORMAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>MENU_INDEX_INVALID</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>idx</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>eap</name> <operator>==</operator> <name>NULL</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>save_state_T</name></type> <name>save_state</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>ex_normal_busy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>save_current_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exec_normal_cmd</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>noremap</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>silent</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>restore_current_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>ex_normal_busy</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_typebuf</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>noremap</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>silent</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>eap</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mode</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>idx</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>MENU_INDEX_VISUAL</name></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Visual"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MENU_INDEX_SELECT</name></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Select"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MENU_INDEX_OP_PENDING</name></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Op-pending"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MENU_INDEX_TERMINAL</name></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Terminal"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MENU_INDEX_INSERT</name></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Insert"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MENU_INDEX_CMDLINE</name></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Cmdline"</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Normal"</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E335: Menu not defined for %s mode"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vimmenu_T</name> <modifier>*</modifier></type>

<name>menu_getbyname</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name_arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>saved_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gave_emsg</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>saved_name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>name_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>saved_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <operator>*</operator><call><name>get_root_menu</name><argument_list>(<argument><expr><name>saved_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>saved_name</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>name</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>menu_name_skip</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>menu_name_equal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E333: Menu path must lead to a menu item"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gave_emsg</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notsubmenu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>saved_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gave_emsg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E334: Menu not found: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>menu</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_emenu</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode_idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><name>mode_idx</name> <operator>=</operator> <name>MENU_INDEX_NORMAL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case> <expr_stmt><expr><name>mode_idx</name> <operator>=</operator> <name>MENU_INDEX_VISUAL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><name>mode_idx</name> <operator>=</operator> <name>MENU_INDEX_SELECT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'o'</literal></expr>:</case> <expr_stmt><expr><name>mode_idx</name> <operator>=</operator> <name>MENU_INDEX_OP_PENDING</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><name>mode_idx</name> <operator>=</operator> <name>MENU_INDEX_TERMINAL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> <expr_stmt><expr><name>mode_idx</name> <operator>=</operator> <name>MENU_INDEX_INSERT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><name>mode_idx</name> <operator>=</operator> <name>MENU_INDEX_CMDLINE</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <call><name>menu_getbyname</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>execute_menu</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>, <argument><expr><name>mode_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>winbar_click</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_winbar_items</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winbar_items</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wb_menu</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>winbar_item_T</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_winbar_items</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name><name>item</name><operator>-&gt;</operator><name>wb_startcol</name></name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;=</operator> <name><name>item</name><operator>-&gt;</operator><name>wb_endcol</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>save_curwin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>save_visual</name> <init>= <expr><name>VIsual</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_visual_active</name> <init>= <expr><name>VIsual_active</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_visual_select</name> <init>= <expr><name>VIsual_select</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_visual_reselect</name> <init>= <expr><name>VIsual_reselect</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_visual_mode</name> <init>= <expr><name>VIsual_mode</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>curwin</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>save_curwin</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>execute_menu</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>wb_menu</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>save_curwin</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>win_valid</name><argument_list>(<argument><expr><name>save_curwin</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>save_curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>save_visual</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>save_visual_active</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_select</name> <operator>=</operator> <name>save_visual_select</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>save_visual_reselect</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <name>save_visual_mode</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win_valid</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERM_POPUP_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TIP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>vimmenu_T</name> <modifier>*</modifier></type>

<name>gui_find_menu</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>saved_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <operator>*</operator><call><name>get_root_menu</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>saved_name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>saved_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>saved_name</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>name</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>menu_name_skip</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>menu_name_equal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E336: Menu path must lead to a sub-menu"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notsubmenu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E337: Menu not found - check menu names"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>theend</name>:</label>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>saved_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>menu</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from_noamp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to</name></decl>;</decl_stmt> 

}</block></struct></type> <name>menutrans_T</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>menutrans_ga</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>ex_menutranslate</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier><name>eap</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>menutrans_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>from_noamp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>to</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menutrans_ga</name><operator>.</operator><name>ga_itemsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>menutrans_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>menutrans_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"clear"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>(</operator><name>menutrans_T</name> <operator>*</operator><operator>)</operator><name><name>menutrans_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>menutrans_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from_noamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>menutrans_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>del_menutrans_vars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>from</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>menu_skip_part</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>menu_skip_part</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>to</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>menutrans_ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>(</operator><name>menutrans_T</name> <operator>*</operator><operator>)</operator><name><name>menutrans_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>from</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>from</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>from_noamp</name> <operator>=</operator> <call><name>menu_text</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg</name> <operator>-</operator> <name>to</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>from_noamp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>to</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>menu_translate_tab_and_shift</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>menu_translate_tab_and_shift</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>menu_unescape_name</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>menu_unescape_name</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><index>[<expr><name><name>menutrans_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index></name><operator>.</operator><name>from</name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><index>[<expr><name><name>menutrans_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index></name><operator>.</operator><name>from_noamp</name> <operator>=</operator> <name>from_noamp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><index>[<expr><name><name>menutrans_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index></name><operator>.</operator><name>to</name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>menutrans_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>from_noamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>menu_skip_part</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>Ctrl_V</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>menutrans_lookup</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>menutrans_T</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><operator>(</operator><name>menutrans_T</name> <operator>*</operator><operator>)</operator><name><name>menutrans_ga</name><operator>.</operator><name>ga_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dname</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>menutrans_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>from</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>name</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dname</name> <operator>=</operator> <call><name>menu_text</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>menutrans_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>dname</name></expr></argument>, <argument><expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from_noamp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>menu_unescape_name</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>menu_translate_tab_and_shift</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg_start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>arg_start</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <name>Ctrl_V</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;TAB&gt;"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>TAB</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>arg</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>arg</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>menuitem_getinfo</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modes</name></decl></parameter>, <parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_tearoff</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"display"</literal></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>actext</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"accel"</literal></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>actext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"priority"</literal></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"modes"</literal></expr></argument>,

<argument><expr><call><name>get_menu_mode_str</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>iconfile</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"icon"</literal></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>iconfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"iconidx"</literal></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>utf_char2bytes</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>mnemonic</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"shortcut"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bit</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>bit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bit</name> <operator>&lt;</operator> <name>MENU_MODES</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator> <operator>&amp;</operator> <name>modes</name><operator>)</operator></expr>;</condition> <incr><expr><name>bit</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>bit</name> <operator>&lt;</operator> <name>MENU_MODES</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>bit</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"rhs"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>*</operator><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>bit</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;Nop&gt;"</literal></expr>

</then><else>: <expr><operator>(</operator><name>tofree</name> <operator>=</operator> <call><name>str2special_save</name><argument_list>(

<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>bit</name></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>dict_add_bool</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"noremenu"</literal></expr></argument>,

<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>noremap</name><index>[<expr><name>bit</name></expr>]</index></name> <operator>==</operator> <name>REMAP_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>dict_add_bool</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"script"</literal></expr></argument>,

<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>noremap</name><index>[<expr><name>bit</name></expr>]</index></name> <operator>==</operator> <name>REMAP_SCRIPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>dict_add_bool</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"silent"</literal></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>silent</name><index>[<expr><name>bit</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>dict_add_bool</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"enabled"</literal></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name><name>menu</name><operator>-&gt;</operator><name>enabled</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>list_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dict_add_list</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"submenus"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>child</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>menu_is_tearoff</name><argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>list_append_string</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_menu_info</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>menu_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>which</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>saved_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>retdict</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_dict_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>retdict</name> <operator>=</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>menu_name</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>menu_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>which</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>which</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>which</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>modes</name> <operator>=</operator> <call><name>get_menu_cmd_modes</name><argument_list>(<argument><expr><name>which</name></expr></argument>, <argument><expr><operator>*</operator><name>which</name> <operator>==</operator> <literal type="char">'!'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <operator>*</operator><call><name>get_root_menu</name><argument_list>(<argument><expr><name>menu_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>saved_name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>menu_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>saved_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>saved_name</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>saved_name</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>name</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>menu_name_skip</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>menu_name_equal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>saved_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>modes</name></name> <operator>&amp;</operator> <name>modes</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>menuitem_getinfo</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>modes</name></expr></argument>, <argument><expr><name>retdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
