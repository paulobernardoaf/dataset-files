<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\xdiff\xmacros.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b) ? (a): (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; (b) ? (a): (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_ABS</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v) &gt;= 0 ? (v): -(v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_ISDIGIT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) &gt;= '0' &amp;&amp; (c) &lt;= '9')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_ISSPACE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isspace((unsigned char)(c)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_ADDBITS</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v) + ((v) &gt;&gt; (b)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_MASKBITS</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((1UL &lt;&lt; (b)) - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_HASHLONG</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(XDL_ADDBITS((unsigned long)(v), b) &amp; XDL_MASKBITS(b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_PTRFREE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (p) { xdl_free(p); (p) = NULL; } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_LE32_PUT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { unsigned char *__p = (unsigned char *) (p); *__p++ = (unsigned char) (v); *__p++ = (unsigned char) ((v) &gt;&gt; 8); *__p++ = (unsigned char) ((v) &gt;&gt; 16); *__p = (unsigned char) ((v) &gt;&gt; 24); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDL_LE32_GET</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { unsigned char const *__p = (unsigned char const *) (p); (v) = (unsigned long) __p[0] | ((unsigned long) __p[1]) &lt;&lt; 8 | ((unsigned long) __p[2]) &lt;&lt; 16 | ((unsigned long) __p[3]) &lt;&lt; 24; } while (0)</cpp:value></cpp:define>

</unit>
