<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\xdiff\xemit.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xinclude.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>long</name></type> <name>xdl_get_rec</name><parameter_list>(<parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ri</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>rec</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>rec</name> <operator>=</operator> <name><name>xdf</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name>ri</name></expr>]</index></name><operator>-&gt;</operator><name>ptr</name></expr>;</expr_stmt>

<return>return <expr><name><name>xdf</name><operator>-&gt;</operator><name>recs</name><index>[<expr><name>ri</name></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xdl_emit_record</name><parameter_list>(<parameter><decl><type><name>xdfile_t</name> <modifier>*</modifier></type><name>xdf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ri</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>pre</name></decl></parameter>, <parameter><decl><type><name>xdemitcb_t</name> <modifier>*</modifier></type><name>ecb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>psize</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>pre</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>xdl_get_rec</name><argument_list>(<argument><expr><name>xdf</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_emit_diffrec</name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>pre</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>, <argument><expr><name>ecb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xdl_get_hunk</name><parameter_list>(<parameter><decl><type><name>xdchange_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>xscr</name></decl></parameter>, <parameter><decl><type><name>xdemitconf_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xecfg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xch</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xchp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lxch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>max_common</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name><name>xecfg</name><operator>-&gt;</operator><name>ctxlen</name></name> <operator>+</operator> <name><name>xecfg</name><operator>-&gt;</operator><name>interhunkctxlen</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>max_ignorable</name> <init>= <expr><name><name>xecfg</name><operator>-&gt;</operator><name>ctxlen</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ignored</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>xchp</name> <operator>=</operator> <operator>*</operator><name>xscr</name></expr>;</init> <condition><expr><name>xchp</name> <operator>&amp;&amp;</operator> <name><name>xchp</name><operator>-&gt;</operator><name>ignore</name></name></expr>;</condition> <incr><expr><name>xchp</name> <operator>=</operator> <name><name>xchp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>xch</name> <operator>=</operator> <name><name>xchp</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xch</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<name><name>xch</name><operator>-&gt;</operator><name>i1</name></name> <operator>-</operator> <operator>(</operator><name><name>xchp</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xchp</name><operator>-&gt;</operator><name>chg1</name></name><operator>)</operator> <operator>&gt;=</operator> <name>max_ignorable</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>xscr</name> <operator>=</operator> <name>xch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>xscr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lxch</name> <operator>=</operator> <operator>*</operator><name>xscr</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>xchp</name> <operator>=</operator> <operator>*</operator><name>xscr</name></expr><operator>,</operator> <expr><name>xch</name> <operator>=</operator> <name><name>xchp</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>xch</name></expr>;</condition> <incr><expr><name>xchp</name> <operator>=</operator> <name>xch</name></expr><operator>,</operator> <expr><name>xch</name> <operator>=</operator> <name><name>xch</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>distance</name> <init>= <expr><name><name>xch</name><operator>-&gt;</operator><name>i1</name></name> <operator>-</operator> <operator>(</operator><name><name>xchp</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xchp</name><operator>-&gt;</operator><name>chg1</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>distance</name> <operator>&gt;</operator> <name>max_common</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>distance</name> <operator>&lt;</operator> <name>max_ignorable</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>xch</name><operator>-&gt;</operator><name>ignore</name></name> <operator>||</operator> <name>lxch</name> <operator>==</operator> <name>xchp</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lxch</name> <operator>=</operator> <name>xch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ignored</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>distance</name> <operator>&lt;</operator> <name>max_ignorable</name> <operator>&amp;&amp;</operator> <name><name>xch</name><operator>-&gt;</operator><name>ignore</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ignored</name> <operator>+=</operator> <name><name>xch</name><operator>-&gt;</operator><name>chg2</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lxch</name> <operator>!=</operator> <name>xchp</name> <operator>&amp;&amp;</operator>

<name><name>xch</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <operator>(</operator><name>long</name><operator>)</operator><name>ignored</name> <operator>-</operator> <operator>(</operator><name><name>lxch</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>lxch</name><operator>-&gt;</operator><name>chg1</name></name><operator>)</operator> <operator>&gt;</operator> <name>max_common</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>xch</name><operator>-&gt;</operator><name>ignore</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lxch</name> <operator>=</operator> <name>xch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ignored</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ignored</name> <operator>+=</operator> <name><name>xch</name><operator>-&gt;</operator><name>chg2</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>lxch</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static long def_ff(const char *rec, long len, char *buf, long sz, void *priv UNUSED)

{

if (len &gt; 0 &amp;&amp;

(isalpha((unsigned char)*rec) || 

*rec == '_' || 

*rec == '$')) { 

if (len &gt; sz)

len = sz;

while (0 &lt; len &amp;&amp; isspace((unsigned char)rec[len - 1]))

len--;

memcpy(buf, rec, len);

return len;

}

return -1;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static long match_func_rec(xdfile_t *xdf, xdemitconf_t const *xecfg, long ri,

char *buf, long sz)

{

const char *rec;

long len = xdl_get_rec(xdf, ri, &amp;rec);

if (!xecfg-&gt;find_func)

return def_ff(rec, len, buf, sz, xecfg-&gt;find_func_priv);

return xecfg-&gt;find_func(rec, len, buf, sz, xecfg-&gt;find_func_priv);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static int is_func_rec(xdfile_t *xdf, xdemitconf_t const *xecfg, long ri)

{

char dummy[1];

return match_func_rec(xdf, xecfg, ri, dummy, sizeof(dummy)) &gt;= 0;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>func_line</name> <block>{

<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static long get_func_line(xdfenv_t *xe, xdemitconf_t const *xecfg,

struct func_line *func_line, long start, long limit)

{

long l, size, step = (start &gt; limit) ? -1 : 1;

char *buf, dummy[1];

buf = func_line ? func_line-&gt;buf : dummy;

size = func_line ? sizeof(func_line-&gt;buf) : sizeof(dummy);

for (l = start; l != limit &amp;&amp; 0 &lt;= l &amp;&amp; l &lt; xe-&gt;xdf1.nrec; l += step) {

long len = match_func_rec(&amp;xe-&gt;xdf1, xecfg, l, buf, size);

if (len &gt;= 0) {

if (func_line)

func_line-&gt;len = len;

return l;

}

}

return -1;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static int is_empty_rec(xdfile_t *xdf, long ri)

{

const char *rec;

long len = xdl_get_rec(xdf, ri, &amp;rec);

while (len &gt; 0 &amp;&amp; XDL_ISSPACE(*rec)) {

rec++;

len--;

}

return !len;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>xdl_emit_diff</name><parameter_list>(<parameter><decl><type><name>xdfenv_t</name> <modifier>*</modifier></type><name>xe</name></decl></parameter>, <parameter><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xscr</name></decl></parameter>, <parameter><decl><type><name>xdemitcb_t</name> <modifier>*</modifier></type><name>ecb</name></decl></parameter>,

<parameter><decl><type><name>xdemitconf_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>xecfg</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>e1</name></decl>, <decl><type ref="prev"/><name>e2</name></decl>, <decl><type ref="prev"/><name>lctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdchange_t</name> <modifier>*</modifier></type><name>xch</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xche</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

long funclineprev = -1;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>func_line</name></name></type> <name>func_line</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>func_line</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>xch</name> <operator>=</operator> <name>xscr</name></expr>;</init> <condition><expr><name>xch</name></expr>;</condition> <incr><expr><name>xch</name> <operator>=</operator> <name><name>xche</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>xche</name> <operator>=</operator> <call><name>xdl_get_hunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xch</name></expr></argument>, <argument><expr><name>xecfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>xch</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>XDL_MAX</name><argument_list>(<argument><expr><name><name>xch</name><operator>-&gt;</operator><name>i1</name></name> <operator>-</operator> <name><name>xecfg</name><operator>-&gt;</operator><name>ctxlen</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>XDL_MAX</name><argument_list>(<argument><expr><name><name>xch</name><operator>-&gt;</operator><name>i2</name></name> <operator>-</operator> <name><name>xecfg</name><operator>-&gt;</operator><name>ctxlen</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (xecfg-&gt;flags &amp; XDL_EMIT_FUNCCONTEXT) {

long fs1, i1 = xch-&gt;i1;

if (i1 &gt;= xe-&gt;xdf1.nrec) {

long i2 = xch-&gt;i2;

while (i2 &lt; xe-&gt;xdf2.nrec) {

if (is_func_rec(&amp;xe-&gt;xdf2, xecfg, i2))

goto post_context_calculation;

i2++;

}

i1 = xe-&gt;xdf1.nrec - 1;

}

fs1 = get_func_line(xe, xecfg, NULL, i1, -1);

while (fs1 &gt; 0 &amp;&amp; !is_empty_rec(&amp;xe-&gt;xdf1, fs1 - 1) &amp;&amp;

!is_func_rec(&amp;xe-&gt;xdf1, xecfg, fs1 - 1))

fs1--;

if (fs1 &lt; 0)

fs1 = 0;

if (fs1 &lt; s1) {

s2 -= s1 - fs1;

s1 = fs1;

}

}

post_context_calculation:

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>lctx</name> <operator>=</operator> <name><name>xecfg</name><operator>-&gt;</operator><name>ctxlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lctx</name> <operator>=</operator> <call><name>XDL_MIN</name><argument_list>(<argument><expr><name>lctx</name></expr></argument>, <argument><expr><name><name>xe</name><operator>-&gt;</operator><name>xdf1</name><operator>.</operator><name>nrec</name></name> <operator>-</operator> <operator>(</operator><name><name>xche</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xche</name><operator>-&gt;</operator><name>chg1</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lctx</name> <operator>=</operator> <call><name>XDL_MIN</name><argument_list>(<argument><expr><name>lctx</name></expr></argument>, <argument><expr><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name><operator>.</operator><name>nrec</name></name> <operator>-</operator> <operator>(</operator><name><name>xche</name><operator>-&gt;</operator><name>i2</name></name> <operator>+</operator> <name><name>xche</name><operator>-&gt;</operator><name>chg2</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e1</name> <operator>=</operator> <name><name>xche</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xche</name><operator>-&gt;</operator><name>chg1</name></name> <operator>+</operator> <name>lctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e2</name> <operator>=</operator> <name><name>xche</name><operator>-&gt;</operator><name>i2</name></name> <operator>+</operator> <name><name>xche</name><operator>-&gt;</operator><name>chg2</name></name> <operator>+</operator> <name>lctx</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (xecfg-&gt;flags &amp; XDL_EMIT_FUNCCONTEXT) {

long fe1 = get_func_line(xe, xecfg, NULL,

xche-&gt;i1 + xche-&gt;chg1,

xe-&gt;xdf1.nrec);

while (fe1 &gt; 0 &amp;&amp; is_empty_rec(&amp;xe-&gt;xdf1, fe1 - 1))

fe1--;

if (fe1 &lt; 0)

fe1 = xe-&gt;xdf1.nrec;

if (fe1 &gt; e1) {

e2 += fe1 - e1;

e1 = fe1;

}

if (xche-&gt;next) {

long l = XDL_MIN(xche-&gt;next-&gt;i1,

xe-&gt;xdf1.nrec - 1);

if (l - xecfg-&gt;ctxlen &lt;= e1 ||

get_func_line(xe, xecfg, NULL, l, e1) &lt; 0) {

xche = xche-&gt;next;

goto post_context_calculation;

}

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (xecfg-&gt;flags &amp; XDL_EMIT_FUNCNAMES) {

get_func_line(xe, xecfg, &amp;func_line,

s1 - 1, funclineprev);

funclineprev = s1 - 1;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>xdl_emit_hunk_hdr</name><argument_list>(<argument><expr><name>s1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>e1</name> <operator>-</operator> <name>s1</name></expr></argument>, <argument><expr><name>s2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>e2</name> <operator>-</operator> <name>s2</name></expr></argument>,

<argument><expr><name><name>func_line</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>func_line</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>ecb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>s2</name> <operator>&lt;</operator> <name><name>xch</name><operator>-&gt;</operator><name>i2</name></name></expr>;</condition> <incr><expr><name>s2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>xdl_emit_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name></name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>ecb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>s1</name> <operator>=</operator> <name><name>xch</name><operator>-&gt;</operator><name>i1</name></name></expr><operator>,</operator> <expr><name>s2</name> <operator>=</operator> <name><name>xch</name><operator>-&gt;</operator><name>i2</name></name></expr>;</init><condition>;</condition> <incr><expr><name>xch</name> <operator>=</operator> <name><name>xch</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>s1</name> <operator>&lt;</operator> <name><name>xch</name><operator>-&gt;</operator><name>i1</name></name> <operator>&amp;&amp;</operator> <name>s2</name> <operator>&lt;</operator> <name><name>xch</name><operator>-&gt;</operator><name>i2</name></name></expr>;</condition> <incr><expr><name>s1</name><operator>++</operator></expr><operator>,</operator> <expr><name>s2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>xdl_emit_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name></name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>ecb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>s1</name> <operator>=</operator> <name><name>xch</name><operator>-&gt;</operator><name>i1</name></name></expr>;</init> <condition><expr><name>s1</name> <operator>&lt;</operator> <name><name>xch</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xch</name><operator>-&gt;</operator><name>chg1</name></name></expr>;</condition> <incr><expr><name>s1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>xdl_emit_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf1</name></name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>ecb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>s2</name> <operator>=</operator> <name><name>xch</name><operator>-&gt;</operator><name>i2</name></name></expr>;</init> <condition><expr><name>s2</name> <operator>&lt;</operator> <name><name>xch</name><operator>-&gt;</operator><name>i2</name></name> <operator>+</operator> <name><name>xch</name><operator>-&gt;</operator><name>chg2</name></name></expr>;</condition> <incr><expr><name>s2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>xdl_emit_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name></name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><name>ecb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>xch</name> <operator>==</operator> <name>xche</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>xch</name><operator>-&gt;</operator><name>i1</name></name> <operator>+</operator> <name><name>xch</name><operator>-&gt;</operator><name>chg1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>xch</name><operator>-&gt;</operator><name>i2</name></name> <operator>+</operator> <name><name>xch</name><operator>-&gt;</operator><name>chg2</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>s2</name> <operator>=</operator> <name><name>xche</name><operator>-&gt;</operator><name>i2</name></name> <operator>+</operator> <name><name>xche</name><operator>-&gt;</operator><name>chg2</name></name></expr>;</init> <condition><expr><name>s2</name> <operator>&lt;</operator> <name>e2</name></expr>;</condition> <incr><expr><name>s2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>xdl_emit_record</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xe</name><operator>-&gt;</operator><name>xdf2</name></name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>ecb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
