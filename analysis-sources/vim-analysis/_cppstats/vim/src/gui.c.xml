<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\gui.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>gui_T</name></type> <name>gui</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_guifontwide</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>font_name</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_check_pos</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_reset_scroll_region</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_outstr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>gui_screenchar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>guicolor_T</name></type> <name>fg</name></decl></parameter>, <parameter><decl><type><name>guicolor_T</name></type> <name>bg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>back</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>gui_outstr_nowrap</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>guicolor_T</name></type> <name>fg</name></decl></parameter>, <parameter><decl><type><name>guicolor_T</name></type> <name>bg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>back</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_delete_lines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_insert_lines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>gui_xy2colrow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>colp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>gui_has_tabline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_do_scrollbar</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_update_horiz_scrollbar</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_set_fg_color</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_set_bg_color</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type><name>xy2win</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>mouse_find_T</name></type> <name>popup</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GUI_MAY_FORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_do_fork</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>gui_read_child_pipe</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <block>{

<decl><name>GUI_CHILD_IO_ERROR</name></decl>,

<decl><name>GUI_CHILD_OK</name></decl>,

<decl><name>GUI_CHILD_FAILED</name></decl>

}</block>;</enum>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_attempt_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>can_update_cursor</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>disable_flush</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCROLL_PAST_END</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_start</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>arg</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>old_term</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recursive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GUI_MAY_SPAWN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EXPERIMENTAL_GUI_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>old_term</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>T_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>settmode</name><argument_list>(<argument><expr><name>TMODE_COOK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>full_screen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cursor_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>full_screen</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>recursive</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GUI_MAY_FORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>dofork</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_FORG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>recursive</name> <operator>&lt;=</operator> <literal type="number">1</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>job_any_running</name><argument_list>()</argument_list></call></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_do_fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GUI_MAY_SPAWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><name><name>gui</name><operator>.</operator><name>dospawn</name></name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXPERIMENTAL_GUI_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>dofork</name></name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_FORG</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>anyBufIsChanged</name><argument_list>()</argument_list></call>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>job_any_running</name><argument_list>()</argument_list></call></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXPERIMENTAL_GUI_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>msg</name> <operator>=</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<call><name>gui_mch_do_spawn</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>gui_mch_init_check</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>getout_preserve_modified</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_attempt_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>termcapinit</name><argument_list>(<argument><expr><name>old_term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>settmode</name><argument_list>(<argument><expr><name>TMODE_RAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_title_defaults</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GUI_MAY_SPAWN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EXPERIMENTAL_GUI_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>old_term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr> ?</condition><then> <expr><name>EVENT_GUIENTER</name></expr> </then><else>: <expr><name>EVENT_GUIFAILED</name></expr></else></ternary></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>recursive</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_attempt_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recursive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>recursive</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>starting</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>event_time</name></name> <operator>=</operator> <name>GDK_CURRENT_TIME</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>termcapinit</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"builtin_gui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>starting</name></name> <operator>=</operator> <name>recursive</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>Window</name></type> <name>x11_window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>x11_display</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gui_get_x11_windis</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x11_window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x11_display</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_WINDOWID</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>x11_window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>display_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>--</operator><name>recursive</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GUI_MAY_FORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_WAIT_H</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNION_WAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_do_fork</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>pipefd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pipe_error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>exit_status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pipe_error</name> <operator>=</operator> <operator>(</operator><call><name>pipe</name><argument_list>(<argument><expr><name>pipefd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E851: Failed to create a new process for the GUI"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>pid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pipe_error</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>gui_read_child_pipe</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>GUI_CHILD_FAILED</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NeXT__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>wait4</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exit_status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>rusage</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>waitpid</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exit_status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E852: The child process failed to start the GUI"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <name>GUI_CHILD_IO_ERROR</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pipe_error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pipe_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ui_delay</name><argument_list>(<argument><expr><literal type="number">301L</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>newline_on_exit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>gui_mch_init_check</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>getout_preserve_modified</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETSID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETPGID</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETSID</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setsid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setpgid</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pipe_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gui_mch_forked</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_attempt_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pipe_error</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_eintr</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ok"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_eintr</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"fail"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipefd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>getout_preserve_modified</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>gui_read_child_pipe</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>bytes_read</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_BUFFER_SIZE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>READ_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>read_eintr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>READ_BUFFER_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>READ_BUFFER_SIZE</name></cpp:undef>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GUI_CHILD_IO_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>bytes_read</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"ok"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GUI_CHILD_OK</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>GUI_CHILD_FAILED</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type>

<name>gui_prepare</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>starting</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>gui_mch_prepare</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_init_check</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>result</name> <init>= <expr><name>MAYBE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>MAYBE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E229: Cannot start the GUI"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>shell_created</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dying</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>in_focus</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dragged_sb</name></name> <operator>=</operator> <name>SBAR_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dragged_wp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>pointer_hidden</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>num_cols</name></name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>num_rows</name></name> <operator>=</operator> <name>Rows</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>cursor_is_valid</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_region_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>highlight_mask</name></name> <operator>=</operator> <name>HL_NORMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_ascent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>border_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>bold_font</name></name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>ital_font</name></name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>boldital_font</name></name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>fontset</name></name> <operator>=</operator> <name>NOFONTSET</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>wide_font</name></name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>wide_bold_font</name></name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>wide_ital_font</name></name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>wide_boldital_font</name></name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_fontset</name></name> <operator>=</operator> <name>NOFONTSET</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_font</name></name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_is_active</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_height</name></name> <operator>=</operator> <name>MENU_DEFAULT_HEIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>toolbar_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOOTER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>footer_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>tooltip_fontset</name></name> <operator>=</operator> <name>NOFONTSET</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scrollbar_width</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>scrollbar_height</name></name> <operator>=</operator> <name>SB_DEFAULT_WIDTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>prev_wrap</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALWAYS_USE_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>result</name> <operator>=</operator> <ternary><condition><expr><name><name>gui</name><operator>.</operator><name>dofork</name></name></expr> ?</condition><then> <expr><call><name>gui_mch_early_init_check</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>gui_mch_init_check</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gui_mch_init_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recursive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>recursive</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>recursive</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clip_init</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gui_init_check</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>recursive</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clip_init</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"paste"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_MENU_FILE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_NOSYSMENU</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>sys_menu</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_source</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>SYS_MENU_FILE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>DOSO_NONE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sys_menu</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_was_set</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"mouse"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"mouse"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"a"</literal></expr></argument>, <argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><name>SID_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_gvimrc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>use_gvimrc</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>use_gvimrc</name></expr></argument>, <argument><expr><literal type="string">"NORC"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>do_source</name><argument_list>(<argument><expr><name>use_gvimrc</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>DOSO_NONE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E230: Cannot read from \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>use_gvimrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_GVIMRC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>do_source</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>SYS_GVIMRC_FILE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>DOSO_NONE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>process_env</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"GVIMINIT"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>

<operator>&amp;&amp;</operator> <call><name>do_source</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>USR_GVIMRC_FILE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,

<argument><expr><name>DOSO_GVIMRC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USR_GVIMRC_FILE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <call><name>do_source</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>USR_GVIMRC_FILE2</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,

<argument><expr><name>DOSO_GVIMRC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USR_GVIMRC_FILE3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <call><name>do_source</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>USR_GVIMRC_FILE3</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,

<argument><expr><name>DOSO_GVIMRC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USR_GVIMRC_FILE4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_source</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>USR_GVIMRC_FILE4</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,

<argument><expr><name>DOSO_GVIMRC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_exrc</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>stat_T</name></type> <name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_stat</name><argument_list>(<argument><expr><name>GVIMRC_FILE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>s</name><operator>.</operator><name>st_uid</name></name> <operator>!=</operator> <call><name>getuid</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>secure</name> <operator>=</operator> <name>p_secure</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>secure</name> <operator>=</operator> <name>p_secure</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>( <expr><call><name>fullpathcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>USR_GVIMRC_FILE</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>GVIMRC_FILE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FPC_SAME</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_GVIMRC_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <call><name>fullpathcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>SYS_GVIMRC_FILE</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>GVIMRC_FILE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FPC_SAME</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USR_GVIMRC_FILE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <call><name>fullpathcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>USR_GVIMRC_FILE2</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>GVIMRC_FILE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FPC_SAME</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USR_GVIMRC_FILE3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <call><name>fullpathcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>USR_GVIMRC_FILE3</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>GVIMRC_FILE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FPC_SAME</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USR_GVIMRC_FILE4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <call><name>fullpathcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>USR_GVIMRC_FILE4</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>GVIMRC_FILE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FPC_SAME</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_source</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>GVIMRC_FILE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>DOSO_GVIMRC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>secure</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>secure</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_wait_return</name> <operator>||</operator> <name>msg_didany</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wait_return</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>recursive</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>gui_mch_init</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>emsg_on_display</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_scrolled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_sb_text</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_didany</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>border_width</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>border_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>font_argument</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"gfn"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>font_argument</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><operator>*</operator><name>p_guifontset</name> <operator>==</operator> <name>NUL</name>

<operator>||</operator> <call><name>gui_init_font</name><argument_list>(<argument><expr><name>p_guifontset</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name><operator>)</operator> <operator>&amp;&amp;</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<call><name>gui_init_font</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name>p_guifont</name> <operator>==</operator> <name>NUL</name></expr> ?</condition><then> <expr><call><name>hl_get_font_name</name><argument_list>()</argument_list></call></expr>

</then><else>: <expr><name>p_guifont</name></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E665: Cannot start GUI, no valid font found"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error2</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gui_get_wide_font</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E231: 'guifontwide' invalid"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>num_cols</name></name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>num_rows</name></name> <operator>=</operator> <name>Rows</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_reset_scroll_region</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_create_scrollbar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name></expr></argument>, <argument><expr><name>SBAR_LEFT</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_create_scrollbar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name></expr></argument>, <argument><expr><name>SBAR_RIGHT</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>gui_create_scrollbar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>bottom_sbar</name></name></expr></argument>, <argument><expr><name>SBAR_BOTTOM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_create_initial_menus</name><argument_list>(<argument><expr><name>root_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGN_ICONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>sign_gui_started</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_init_which_components</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>shell_created</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>gui_mch_maximized</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>RESIZE_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>RESIZE_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>RESIZE_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gui_mch_compute_menu_height</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>gui_mch_open</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>maketitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>resettitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>init_gui_options</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p_tbidi</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_MENUS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_enable_menu</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>gui_mch_maximized</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>RESIZE_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>RESIZE_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>win_new_shellsize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>balloonEval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>balloonEval</name><operator>-&gt;</operator><name>vts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>balloonEval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>balloonEvalForTerm</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>balloonEval</name> <operator>=</operator> <call><name>gui_mch_create_beval_area</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>general_beval_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><specifier>extern</specifier> <name>Widget</name></type> <name>textArea</name></decl>;</decl_stmt>

<expr_stmt><expr><name>balloonEval</name> <operator>=</operator> <call><name>gui_mch_create_beval_area</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>general_beval_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>balloonEval</name> <operator>=</operator> <call><name>gui_mch_create_beval_area</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>general_beval_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_beval</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_disable_beval_area</name><argument_list>(<argument><expr><name>balloonEval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>im_xim_isvalid_imactivate</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E599: Value of 'imactivatekey' is invalid"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>p_ch</name> <operator>!=</operator> <literal type="number">1L</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>command_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<label><name>error2</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mch_uninit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>error</name>:</label>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clip_init</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_exit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free_highlight_fonts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_exit</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_PHOTON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MAC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEED_GUI_UPDATE_SCREEN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function><type><name>void</name></type>

<name>gui_shell_closed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cmdmod_T</name></type> <name>save_cmdmod</name></decl>;</decl_stmt>

<expr_stmt><expr><name>save_cmdmod</name> <operator>=</operator> <name>cmdmod</name></expr>;</expr_stmt>

<expr_stmt><expr><name>exiting</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>browse</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CON_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>confirm</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_changed_any</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>getout</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>exiting</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmdmod</name> <operator>=</operator> <name>save_cmdmod</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_update_screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>gui_init_font</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>font_list</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>fontset</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FONTLEN</name></cpp:macro> <cpp:value>320</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>font_name</name><index>[<expr><name>FONTLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>font_list_empty</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>FAIL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>font_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>font_list</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>font_list_empty</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fontset</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>gui_mch_init_font</name><argument_list>(<argument><expr><name>font_list</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><operator>*</operator><name>font_list</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_list</name></expr></argument>, <argument><expr><name>font_name</name></expr></argument>, <argument><expr><name>FONTLEN</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gui_mch_init_font</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p_guifontwide</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>p_guifontwide</name> <operator>==</operator> <name>NUL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>font_name</name></expr></argument>, <argument><expr><literal type="string">"10646"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_guifontwide</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>OK</name>

<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>font_list</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>font_list_empty</name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>norm_font</name></name> <operator>==</operator> <name>NOFONT</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>gui_mch_init_font</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>fontset</name></name> <operator>!=</operator> <name>NOFONTSET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_set_fontset</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>fontset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_mch_set_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>RESIZE_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_guifontwide</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>wide_name</name><index>[<expr><name>FONTLEN</name> <operator>+</operator> <literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GuiFont</name></type> <name>font</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>wide_name</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>wp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>wp</name><operator>++</operator> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>wp</name></expr></argument>, <argument><expr><literal type="string">"%d%s"</literal></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>gui_mch_get_font</name><argument_list>(<argument><expr><name>wide_name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>!=</operator> <name>NOFONT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>wide_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>wide_font</name></name> <operator>=</operator> <name>font</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"gfw"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>wide_name</name></expr></argument>, <argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>int</name></type>

<name>gui_get_wide_font</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiFont</name></type> <name>font</name> <init>= <expr><name>NOFONT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>font_name</name><index>[<expr><name>FONTLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>p_guifontwide</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_guifontwide</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>p_guifontwide</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>font_name</name></expr></argument>, <argument><expr><name>FONTLEN</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>gui_mch_get_font</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>!=</operator> <name>NOFONT</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>==</operator> <name>NOFONT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>wide_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>font</name> <operator>!=</operator> <name>NOFONT</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>norm_font</name></name> <operator>!=</operator> <name>NOFONT</name>

<operator>&amp;&amp;</operator> <call><name>pango_font_description_equal</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>wide_font</name></name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>wide_font</name></name> <operator>=</operator> <name>font</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mch_wide_font_changed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_set_cursor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_check_pos</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>row</name></name> <operator>&gt;=</operator> <name>screen_Rows</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name>screen_Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <name>screen_Columns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>screen_Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>&gt;=</operator> <name>screen_Rows</name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>cursor_col</name></name> <operator>&gt;=</operator> <name>screen_Columns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>cursor_is_valid</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_update_cursor</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>clear_selection</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cur_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_hl_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cursorentry_T</name> <modifier>*</modifier></type><name>shape</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>guicolor_T</name></type> <name>shape_fg</name> <init>= <expr><name>INVALCOLOR</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guicolor_T</name></type> <name>shape_bg</name> <init>= <expr><name>INVALCOLOR</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>guicolor_T</name></type> <name>cfg</name></decl>, <decl><type ref="prev"/><name>cbg</name></decl>, <decl><type ref="prev"/><name>cc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cattr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>attrentry_T</name> <modifier>*</modifier></type><name>aep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>can_update_cursor</name> <operator>||</operator> <name>screen_Columns</name> <operator>!=</operator> <name><name>gui</name><operator>.</operator><name>num_cols</name></name>

<operator>||</operator> <name>screen_Rows</name> <operator>!=</operator> <name><name>gui</name><operator>.</operator><name>num_rows</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_check_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>cursor_is_valid</name></name> <operator>||</operator> <name>force</name>

<operator>||</operator> <name><name>gui</name><operator>.</operator><name>row</name></name> <operator>!=</operator> <name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <name><name>gui</name><operator>.</operator><name>cursor_col</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_undraw_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INPUT_METHOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>row</name></name> <operator>!=</operator> <name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <name><name>gui</name><operator>.</operator><name>cursor_col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>im_set_position</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>cursor_col</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>screen_cleared</name> <operator>||</operator> <name>ScreenLines</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>clear_selection</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clip_may_clear_selection</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>row</name></name> <operator>&gt;=</operator> <name>screen_Rows</name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <name>screen_Columns</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>cursor_is_valid</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>terminal_is_active</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>shape</name> <operator>=</operator> <call><name>term_get_cursor_shape</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shape_fg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shape_bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>shape</name> <operator>=</operator> <operator>&amp;</operator><name><name>shape_table</name><index>[<expr><call><name>get_shape_idx</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>LANGMAP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>shape</name><operator>-&gt;</operator><name>id_lm</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>shape</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>cfg</name> <operator>=</operator> <name>INVALCOLOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cbg</name> <operator>=</operator> <name>INVALCOLOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cattr</name> <operator>=</operator> <name>HL_INVERSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_set_blinking</name><argument_list>(<argument><expr><name><name>shape</name><operator>-&gt;</operator><name>blinkwait</name></name></expr></argument>,

<argument><expr><name><name>shape</name><operator>-&gt;</operator><name>blinkon</name></name></expr></argument>,

<argument><expr><name><name>shape</name><operator>-&gt;</operator><name>blinkoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shape</name><operator>-&gt;</operator><name>blinkwait</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>shape</name><operator>-&gt;</operator><name>blinkon</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>shape</name><operator>-&gt;</operator><name>blinkoff</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_stop_blink</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>shape_bg</name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cattr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cfg</name> <operator>=</operator> <name>shape_fg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cbg</name> <operator>=</operator> <name>shape_bg</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cattr</name> <operator>=</operator> <call><name>syn_id2colors</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INPUT_METHOD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>iid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guicolor_T</name></type> <name>fg</name></decl>, <decl><type ref="prev"/><name>bg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><macro><name>preedit_get_status</name><argument_list>()</argument_list></macro>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<call><name>im_get_status</name><argument_list>()</argument_list></call></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name>iid</name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"CursorIM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>iid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>syn_id2colors</name><argument_list>(<argument><expr><name>iid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bg</name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cbg</name> <operator>=</operator> <name>bg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fg</name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cfg</name> <operator>=</operator> <name>fg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <name><name>ScreenAttrs</name><index>[<expr><name><name>LineOffset</name><index>[<expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr>]</index></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>col</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&gt;</operator> <name>HL_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>aep</name> <operator>=</operator> <call><name>syn_gui_attr2entry</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>aep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_attr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cfg</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cfg</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_INVERSE</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>bg_color</name></name></expr>

</then><else>: <expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fg_color</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cbg</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cbg</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_INVERSE</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fg_color</name></name></expr>

</then><else>: <expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>bg_color</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cfg</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cfg</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_INVERSE</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr> </then><else>: <expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cbg</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cbg</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_INVERSE</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr> </then><else>: <expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>aep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>xim_bg_color</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_INVERSE</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fg_color</name></name></expr>

</then><else>: <expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>bg_color</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>xim_fg_color</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_INVERSE</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>bg_color</name></name></expr>

</then><else>: <expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fg_color</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xim_bg_color</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>xim_bg_color</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_INVERSE</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr>

</then><else>: <expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xim_fg_color</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>xim_fg_color</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_INVERSE</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>

</then><else>: <expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>xim_bg_color</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_INVERSE</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr>

</then><else>: <expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>xim_fg_color</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_INVERSE</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>

</then><else>: <expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>HL_INVERSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cattr</name> <operator>&amp;</operator> <name>HL_INVERSE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>cbg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cbg</name> <operator>=</operator> <name>cfg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cfg</name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cattr</name> <operator>&amp;=</operator> <operator>~</operator><name>HL_INVERSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_focus</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_draw_hollow_cursor</name><argument_list>(<argument><expr><name>cbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old_hl_mask</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>highlight_mask</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shape</name><operator>-&gt;</operator><name>shape</name></name> <operator>==</operator> <name>SHAPE_BLOCK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>highlight_mask</name></name> <operator>=</operator> <operator>(</operator><name>cattr</name> <operator>|</operator> <name>attr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gui_screenchar</name><argument_list>(<argument><expr><name><name>LineOffset</name><index>[<expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr>]</index></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>,

<argument><expr><name>GUI_MON_IS_CURSOR</name> <operator>|</operator> <name>GUI_MON_NOCLEAR</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>cbg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>col_off</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>shape</name><operator>-&gt;</operator><name>shape</name></name> <operator>==</operator> <name>SHAPE_VER</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cur_height</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_width</name> <operator>=</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <name><name>shape</name><operator>-&gt;</operator><name>percentage</name></name> <operator>+</operator> <literal type="number">99</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>cur_height</name> <operator>=</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>*</operator> <name><name>shape</name><operator>-&gt;</operator><name>percentage</name></name> <operator>+</operator> <literal type="number">99</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_width</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_off2cells</name>)<argument_list>(<argument><expr><name><name>LineOffset</name><index>[<expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr>]</index></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>,

<argument><expr><name><name>LineOffset</name><index>[<expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr>]</index></name> <operator>+</operator> <name>screen_Columns</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>shape</name><operator>-&gt;</operator><name>shape</name></name> <operator>!=</operator> <name>SHAPE_VER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cur_width</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>CURSOR_BAR_RIGHT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>col_off</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>gui</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mch_draw_part_cursor</name><argument_list>(<argument><expr><name>cur_width</name></expr></argument>, <argument><expr><name>cur_height</name></expr></argument>, <argument><expr><name>cbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>col_off</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>gui</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>highlight_mask</name></name> <operator>=</operator> <name><name>ScreenAttrs</name><index>[<expr><name><name>LineOffset</name><index>[<expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr>]</index></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>col</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gui_screenchar</name><argument_list>(<argument><expr><name><name>LineOffset</name><index>[<expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr>]</index></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>,

<argument><expr><name>GUI_MON_TRS_CURSOR</name> <operator>|</operator> <name>GUI_MON_NOCLEAR</name></expr></argument>,

<argument><expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>highlight_mask</name></name> <operator>=</operator> <name>old_hl_mask</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_position_menu</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_is_active</name></name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_set_menu_pos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_width</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_position_components</name><parameter_list>(<parameter><decl><type><name>int</name> <name>total_width</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>text_area_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>text_area_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>text_area_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>text_area_height</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>hold_gui_events</name></expr>;</expr_stmt>

<expr_stmt><expr><name>text_area_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>text_area_x</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>scrollbar_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>text_area_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_PHOTON</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_width</name></name> <operator>=</operator> <name>total_width</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_is_active</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>text_area_y</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>menu_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>text_area_y</name> <operator>=</operator> <name>TOOLBAR_BUTTON_HEIGHT</name> <operator>+</operator> <name>TOOLBAR_BORDER_HEIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MAC</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>gui_has_tabline</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>text_area_y</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>tabline_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gui_mch_set_toolbar_pos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>text_area_y</name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>menu_width</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>toolbar_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>text_area_y</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>toolbar_height</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gui_mch_set_tabline_pos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>text_area_y</name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>menu_width</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>tabline_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gui_has_tabline</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>text_area_y</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>tabline_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>text_area_width</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>num_cols</name></name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>text_area_height</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>num_rows</name></name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_set_text_area_pos</name><argument_list>(<argument><expr><name>text_area_x</name></expr></argument>,

<argument><expr><name>text_area_y</name></expr></argument>,

<argument><expr><name>text_area_width</name></expr></argument>,

<argument><expr><name>text_area_height</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>+</operator> <call><name>xim_get_status_area_height</name><argument_list>()</argument_list></call></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_position_menu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_BOTTOM</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_set_scrollbar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>bottom_sbar</name></name></expr></argument>,

<argument><expr><name>text_area_x</name></expr></argument>,

<argument><expr><name>text_area_y</name> <operator>+</operator> <name>text_area_height</name></expr></argument>,

<argument><expr><name>text_area_width</name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>scrollbar_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>left_sbar_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>right_sbar_x</name></name> <operator>=</operator> <name>text_area_x</name> <operator>+</operator> <name>text_area_width</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>hold_gui_events</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_get_base_width</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>base_width</name></decl>;</decl_stmt>

<expr_stmt><expr><name>base_width</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>base_width</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>scrollbar_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>base_width</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>scrollbar_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>base_width</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_get_base_height</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>base_height</name></decl>;</decl_stmt>

<expr_stmt><expr><name>base_height</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_BOTTOM</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>base_height</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>scrollbar_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_is_active</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>base_height</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>menu_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>base_height</name> <operator>+=</operator> <operator>(</operator><name>TOOLBAR_BUTTON_HEIGHT</name> <operator>+</operator> <name>TOOLBAR_BORDER_HEIGHT</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>base_height</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>toolbar_height</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>gui_has_tabline</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>base_height</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>tabline_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOOTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_FOOTER</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>base_height</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>footer_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>base_height</name> <operator>+=</operator> <call><name>gui_mch_text_area_extra_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>base_height</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_resize_shell</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pixel_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pixel_height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>busy</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>shell_created</name></name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>updating_screen</name> <operator>||</operator> <name>busy</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>new_pixel_width</name> <operator>=</operator> <name>pixel_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_pixel_height</name> <operator>=</operator> <name>pixel_height</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<label><name>again</name>:</label>

<expr_stmt><expr><name>new_pixel_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_pixel_height</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>busy</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_lock_screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>num_cols</name></name> <operator>=</operator> <operator>(</operator><name>pixel_width</name> <operator>-</operator> <call><name>gui_get_base_width</name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>num_rows</name></name> <operator>=</operator> <operator>(</operator><name>pixel_height</name> <operator>-</operator> <call><name>gui_get_base_height</name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_position_components</name><argument_list>(<argument><expr><name>pixel_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_reset_scroll_region</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>==</operator> <name>ASKMORE</name> <operator>||</operator> <name>State</name> <operator>==</operator> <name>CONFIRM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>num_rows</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>num_rows</name></name> <operator>!=</operator> <name>screen_Rows</name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>num_cols</name></name> <operator>!=</operator> <name>screen_Columns</name>

<operator>||</operator> <name><name>gui</name><operator>.</operator><name>num_rows</name></name> <operator>!=</operator> <name>Rows</name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>num_cols</name></name> <operator>!=</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>shell_resized</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_unlock_screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_update_scrollbars</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>xim_set_status_area</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>busy</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_pixel_height</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pixel_width</name> <operator>==</operator> <name>new_pixel_width</name> <operator>&amp;&amp;</operator> <name>pixel_height</name> <operator>==</operator> <name>new_pixel_height</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>new_pixel_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_pixel_height</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>pixel_width</name> <operator>=</operator> <name>new_pixel_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_height</name> <operator>=</operator> <name>new_pixel_height</name></expr>;</expr_stmt>

<goto>goto <name>again</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_may_resize_shell</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>new_pixel_height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_resize_shell</name><argument_list>(<argument><expr><name>new_pixel_width</name></expr></argument>, <argument><expr><name>new_pixel_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_get_shellsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>Rows</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>num_rows</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Columns</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>num_cols</name></name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_set_shellsize</name><parameter_list>(

<parameter><decl><type><name>int</name> <name>mustset</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>fit_to_display</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>base_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>base_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>screen_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>screen_h</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>un_maximize</name> <init>= <expr><name>mustset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_adjust</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>shell_created</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mustset</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_KEEPWINSIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <call><name>gui_mch_maximized</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_newfont</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>base_width</name> <operator>=</operator> <call><name>gui_get_base_width</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base_height</name> <operator>=</operator> <call><name>gui_get_base_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fit_to_display</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gui_mch_get_winpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>Columns</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>+</operator> <name>base_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name>Rows</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>+</operator> <name>base_height</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fit_to_display</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_get_screen_dimensions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>screen_w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>direction</name> <operator>&amp;</operator> <name>RESIZE_HOR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>width</name> <operator>&gt;</operator> <name>screen_w</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>Columns</name> <operator>=</operator> <operator>(</operator><name>screen_w</name> <operator>-</operator> <name>base_width</name><operator>)</operator> <operator>/</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Columns</name> <operator>&lt;</operator> <name>MIN_COLUMNS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Columns</name> <operator>=</operator> <name>MIN_COLUMNS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>Columns</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>+</operator> <name>base_width</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>++</operator><name>did_adjust</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>direction</name> <operator>&amp;</operator> <name>RESIZE_VERT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>height</name> <operator>&gt;</operator> <name>screen_h</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>Rows</name> <operator>=</operator> <operator>(</operator><name>screen_h</name> <operator>-</operator> <name>base_height</name><operator>)</operator> <operator>/</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_shellsize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name>Rows</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>+</operator> <name>base_height</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>++</operator><name>did_adjust</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>did_adjust</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><name>width</name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>&gt;=</operator> <name>screen_w</name>

<operator>&amp;&amp;</operator> <name>height</name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>&gt;=</operator> <name>screen_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>un_maximize</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>limit_screen_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>num_cols</name></name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>num_rows</name></name> <operator>=</operator> <name>Rows</name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_width</name> <operator>=</operator> <name>base_width</name> <operator>+</operator> <name>MIN_COLUMNS</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_height</name> <operator>=</operator> <name>base_height</name> <operator>+</operator> <name>MIN_LINES</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_height</name> <operator>+=</operator> <call><name>tabline_height</name><argument_list>()</argument_list></call> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>un_maximize</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_get_screen_dimensions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>screen_w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>width</name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>&lt;</operator> <name>screen_w</name>

<operator>||</operator> <name>height</name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>screen_h</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>gui_mch_maximized</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_unmaximize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_mch_set_shellsize</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>min_width</name></expr></argument>, <argument><expr><name>min_height</name></expr></argument>,

<argument><expr><name>base_width</name></expr></argument>, <argument><expr><name>base_height</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fit_to_display</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gui_mch_get_winpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_set_winpos</name><argument_list>(<argument><expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>y</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gui_position_components</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_update_scrollbars</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_reset_scroll_region</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_new_shellsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_reset_scroll_region</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_reset_scroll_region</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_region_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>num_rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>num_cols</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_start_highlight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&gt;</operator> <name>HL_ALL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>highlight_mask</name></name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>highlight_mask</name></name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_stop_highlight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&gt;</operator> <name>HL_ALL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>highlight_mask</name></name> <operator>=</operator> <name>HL_NORMAL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>highlight_mask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>mask</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_clear_block</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>row1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>col1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>row2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>col2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>clip_may_clear_selection</name><argument_list>(<argument><expr><name>row1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_clear_block</name><argument_list>(<argument><expr><name>row1</name></expr></argument>, <argument><expr><name>col1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>col2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>&gt;=</operator> <name>row1</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>&lt;=</operator> <name>row2</name>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>cursor_col</name></name> <operator>&gt;=</operator> <name>col1</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>cursor_col</name></name> <operator>&lt;=</operator> <name>col2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>cursor_is_valid</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_update_cursor_later</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><call><name>IF_EB</name><argument_list>(<argument><expr><literal type="string">"\033|s"</literal></expr></argument>, <argument><expr><name>ESC_STR</name> <literal type="string">"|s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_write</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>arg1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>arg2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>force_cursor</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>force_scrollbar</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type><name>old_curwin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_GUI_WRITE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"gui_write(%d):\n "</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>ESC</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;ESC&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>transchar_byte</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;%s&gt;"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name>len</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ESC</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>arg1</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>s</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg2</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>s</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'C'</literal></expr>:</case> 

<expr_stmt><expr><call><name>clip_scroll_selection</name><argument_list>(<argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_clear_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>cursor_is_valid</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>force_scrollbar</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'M'</literal></expr>:</case> 

<expr_stmt><expr><call><name>gui_set_cursor</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> 

<expr_stmt><expr><name>force_cursor</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'R'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>arg1</name> <operator>&lt;</operator> <name>arg2</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_region_top</name></name> <operator>=</operator> <name>arg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>=</operator> <name>arg2</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_region_top</name></name> <operator>=</operator> <name>arg2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>=</operator> <name>arg1</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'V'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>arg1</name> <operator>&lt;</operator> <name>arg2</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name> <operator>=</operator> <name>arg1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name> <operator>=</operator> <name>arg2</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name> <operator>=</operator> <name>arg2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name> <operator>=</operator> <name>arg1</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> 

<expr_stmt><expr><call><name>gui_delete_lines</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case> 

<expr_stmt><expr><call><name>gui_delete_lines</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> 

<expr_stmt><expr><call><name>gui_insert_lines</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'I'</literal></expr>:</case> 

<expr_stmt><expr><call><name>gui_insert_lines</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'$'</literal></expr>:</case> 

<expr_stmt><expr><call><name>gui_clear_block</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'h'</literal></expr>:</case> 

<expr_stmt><expr><call><name>gui_start_highlight</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'H'</literal></expr>:</case> 

<expr_stmt><expr><call><name>gui_stop_highlight</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> 

<expr_stmt><expr><call><name>gui_mch_flash</name><argument_list>(<argument><expr><ternary><condition><expr><name>arg1</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">20</literal></expr> </then><else>: <expr><name>arg1</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>++</operator><name>p</name> <operator>-</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>CtrlChar</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x20</literal> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGN_ICONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>SIGN_BYTE</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>MULTISIGN_BYTE</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>row</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_delete_lines</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_top</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\b'</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>gui</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>Ctrl_L</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>gui</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>Ctrl_G</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<call><name>CtrlChar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="number">0x20</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGN_ICONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>SIGN_BYTE</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>MULTISIGN_BYTE</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>gui_outstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>force_cursor</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_curwin</name> <operator>!=</operator> <name>curwin</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dragged_sb</name></name> <operator>=</operator> <name>SBAR_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>force_scrollbar</name> <operator>||</operator> <name>old_curwin</name> <operator>!=</operator> <name>curwin</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_update_scrollbars</name><argument_list>(<argument><expr><name>force_scrollbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_update_horiz_scrollbar</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>old_curwin</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dragged_sb</name></name> <operator>=</operator> <name>SBAR_NONE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_may_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_dont_update_cursor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>undraw</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>undraw</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_undraw_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>can_update_cursor</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_can_update_cursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>can_update_cursor</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_disable_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>disable_flush</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_enable_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>disable_flush</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_may_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>disable_flush</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_outstr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>this_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cells</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cells</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>this_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>this_len</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>cells</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2cells</name>)<argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>this_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name>cells</name> <operator>&gt;</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>this_len</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>this_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>this_len</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>this_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<if type="elseif">else

if <condition>(<expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>this_len</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <name><name>gui</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>this_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gui_outstr_nowrap</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>this_len</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>this_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>this_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gui_outstr_nowrap</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <name>Columns</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>row</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>gui_screenchar</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>guicolor_T</name></type> <name>fg</name></decl></parameter>, 

<parameter><decl><type><name>guicolor_T</name></type> <name>bg</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>back</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>gui_outstr_nowrap</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>utfc_char2bytes</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>, <argument><expr><name>back</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x8e</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ScreenLines2</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><call><name>gui_outstr_nowrap</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>, <argument><expr><name>back</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>gui_outstr_nowrap</name><argument_list>(<argument><expr><name>ScreenLines</name> <operator>+</operator> <name>off</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>enc_dbcs</name></expr> ?</condition><then> <expr><call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>ScreenLines</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>, <argument><expr><name>back</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>

<name>gui_screenstr</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>guicolor_T</name></type> <name>fg</name></decl></parameter>, 

<parameter><decl><type><name>guicolor_T</name></type> <name>bg</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>back</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>outlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>off</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>off</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ScreenLines</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>ScreenLinesUC</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>outlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ScreenLines</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>outlen</name> <operator>+=</operator> <call><name>utfc_char2bytes</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>outlen</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>gui_outstr_nowrap</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>, <argument><expr><name>back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>off</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>off</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>outlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ScreenLines</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ScreenLines</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x8e</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>outlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ScreenLines2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name><name>ScreenLines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>outlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ScreenLines</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>outlen</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>gui_outstr_nowrap</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>, <argument><expr><name>back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<return>return <expr><call><name>gui_outstr_nowrap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>, <argument><expr><name>back</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>int</name></type>

<name>gui_outstr_nowrap</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>guicolor_T</name></type> <name>fg</name></decl></parameter>, 

<parameter><decl><type><name>guicolor_T</name></type> <name>bg</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>back</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>long_u</name></type> <name>highlight_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>hl_mask_todo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guicolor_T</name></type> <name>fg_color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guicolor_T</name></type> <name>bg_color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guicolor_T</name></type> <name>sp_color</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>GuiFont</name></type> <name>font</name> <init>= <expr><name>NOFONT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GuiFont</name></type> <name>wide_font</name> <init>= <expr><name>NOFONT</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GuiFontset</name></type> <name>fontset</name> <init>= <expr><name>NOFONTSET</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>attrentry_T</name> <modifier>*</modifier></type><name>aep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>draw_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGN_ICONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>draw_sign</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>signcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>extra</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>multi_sign</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGN_ICONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>SIGN_BYTE</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>MULTISIGN_BYTE</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>MULTISIGN_BYTE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>multi_sign</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scl</name></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scl</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'u'</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_rnu</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>extra</name></expr></argument>, <argument><expr><literal type="string">"%*c "</literal></expr></argument>, <argument><expr><call><name>number_width</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>signcol</name> <operator>=</operator> <name>col</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>signcol</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>draw_sign</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>highlight_mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><name><name>gui</name><operator>.</operator><name>highlight_mask</name></name> <operator>&gt;</operator> <name>HL_ALL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>aep</name> <operator>=</operator> <call><name>syn_gui_attr2entry</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>highlight_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>aep</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>highlight_mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>highlight_mask</name> <operator>=</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_attr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>highlight_mask</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>highlight_mask</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>hl_mask_todo</name> <operator>=</operator> <name>highlight_mask</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>aep</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>font</name></name> <operator>!=</operator> <name>NOFONT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>font</name></name></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>aep</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fontset</name></name> <operator>!=</operator> <name>NOFONTSET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fontset</name> <operator>=</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fontset</name></name></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>fontset</name></name> <operator>!=</operator> <name>NOFONTSET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fontset</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>fontset</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><name>hl_mask_todo</name> <operator>&amp;</operator> <operator>(</operator><name>HL_BOLD</name> <operator>|</operator> <name>HL_STANDOUT</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hl_mask_todo</name> <operator>&amp;</operator> <name>HL_ITALIC</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>boldital_font</name></name> <operator>!=</operator> <name>NOFONT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>boldital_font</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hl_mask_todo</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>HL_BOLD</name> <operator>|</operator> <name>HL_STANDOUT</name> <operator>|</operator> <name>HL_ITALIC</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>gui</name><operator>.</operator><name>bold_font</name></name> <operator>!=</operator> <name>NOFONT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>bold_font</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hl_mask_todo</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>HL_BOLD</name> <operator>|</operator> <name>HL_STANDOUT</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>hl_mask_todo</name> <operator>&amp;</operator> <name>HL_ITALIC</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>ital_font</name></name> <operator>!=</operator> <name>NOFONT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>ital_font</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hl_mask_todo</name> <operator>&amp;=</operator> <operator>~</operator><name>HL_ITALIC</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>==</operator> <name><name>gui</name><operator>.</operator><name>boldital_font</name></name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>wide_boldital_font</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wide_font</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>wide_boldital_font</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>font</name> <operator>==</operator> <name><name>gui</name><operator>.</operator><name>bold_font</name></name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>wide_bold_font</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wide_font</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>wide_bold_font</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>font</name> <operator>==</operator> <name><name>gui</name><operator>.</operator><name>ital_font</name></name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>wide_ital_font</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wide_font</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>wide_ital_font</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>font</name> <operator>==</operator> <name><name>gui</name><operator>.</operator><name>norm_font</name></name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>wide_font</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wide_font</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>wide_font</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fontset</name> <operator>!=</operator> <name>NOFONTSET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_set_fontset</name><argument_list>(<argument><expr><name>fontset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_mch_set_font</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>draw_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bg_color</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>GUI_MON_IS_CURSOR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>in_focus</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>draw_flags</name> <operator>|=</operator> <name>DRAW_CURSOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fg_color</name> <operator>=</operator> <name>fg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bg_color</name> <operator>=</operator> <name>bg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sp_color</name> <operator>=</operator> <name>fg</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>aep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>fg_color</name> <operator>=</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>fg_color</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fg_color</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fg_color</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bg_color</name> <operator>=</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>bg_color</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bg_color</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bg_color</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sp_color</name> <operator>=</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>gui</name><operator>.</operator><name>sp_color</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sp_color</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sp_color</name> <operator>=</operator> <name>fg_color</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>fg_color</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sp_color</name> <operator>=</operator> <name>fg_color</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>highlight_mask</name> <operator>&amp;</operator> <operator>(</operator><name>HL_INVERSE</name> <operator>|</operator> <name>HL_STANDOUT</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gui_mch_set_colors</name><argument_list>(<argument><expr><name>bg_color</name></expr></argument>, <argument><expr><name>fg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gui_mch_set_fg_color</name><argument_list>(<argument><expr><name>bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_set_bg_color</name><argument_list>(<argument><expr><name>fg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gui_mch_set_colors</name><argument_list>(<argument><expr><name>fg_color</name></expr></argument>, <argument><expr><name>bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gui_mch_set_fg_color</name><argument_list>(<argument><expr><name>fg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_set_bg_color</name><argument_list>(<argument><expr><name>bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gui_mch_set_sp_color</name><argument_list>(<argument><expr><name>sp_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>GUI_MON_NOCLEAR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clip_may_clear_selection</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hl_mask_todo</name> <operator>&amp;</operator> <operator>(</operator><name>HL_BOLD</name> <operator>|</operator> <name>HL_STANDOUT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>draw_flags</name> <operator>|=</operator> <name>DRAW_BOLD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>back</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>draw_flags</name> <operator>&amp;</operator> <name>DRAW_BOLD</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>highlight_mask</name> <operator>&amp;</operator> <name>HL_ITALIC</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>hl_mask_todo</name> <operator>&amp;</operator> <name>HL_ITALIC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>draw_flags</name> <operator>|=</operator> <name>DRAW_ITALIC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hl_mask_todo</name> <operator>&amp;</operator> <name>HL_UNDERLINE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>draw_flags</name> <operator>|=</operator> <name>DRAW_UNDERL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hl_mask_todo</name> <operator>&amp;</operator> <name>HL_UNDERLINE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>hl_mask_todo</name> <operator>&amp;</operator> <name>HL_ITALIC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>draw_flags</name> <operator>|=</operator> <name>DRAW_UNDERL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>hl_mask_todo</name> <operator>&amp;</operator> <name>HL_UNDERCURL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>draw_flags</name> <operator>|=</operator> <name>DRAW_UNDERC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hl_mask_todo</name> <operator>&amp;</operator> <name>HL_STRIKETHROUGH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>draw_flags</name> <operator>|=</operator> <name>DRAW_STRIKE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>GUI_MON_TRS_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>draw_flags</name> <operator>|=</operator> <name>DRAW_TRANSP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>gui_gtk2_draw_string</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>draw_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cells</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>thislen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cn</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>comping</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>scol</name> <init>= <expr><name>col</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>curr_wide</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>prev_wide</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wide_changed</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>sep_comp</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>sep_comp</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cells</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>cl</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cn</name> <operator>=</operator> <call><name>utf_char2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comping</name> <operator>=</operator> <call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>comping</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>cells</name> <operator>+=</operator> <name>cn</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>comping</name> <operator>||</operator> <name>sep_comp</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cn</name> <operator>&gt;</operator> <literal type="number">1</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>fontset</name> <operator>==</operator> <name>NOFONTSET</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>&amp;&amp;</operator> <name>wide_font</name> <operator>!=</operator> <name>NOFONT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curr_wide</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>curr_wide</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cl</name> <operator>=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cl</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>cl</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>wide_changed</name> <operator>=</operator> <name>curr_wide</name> <operator>!=</operator> <name>prev_wide</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>cl</name> <operator>&gt;=</operator> <name>len</name> <operator>||</operator> <operator>(</operator><name>comping</name> <operator>&amp;&amp;</operator> <name>sep_comp</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <name>start</name><operator>)</operator>

<operator>||</operator> <name>wide_changed</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator> <operator>(</operator><name>cn</name> <operator>&gt;</operator> <literal type="number">1</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>fontset</name> <operator>==</operator> <name>NOFONTSET</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>comping</name> <operator>&amp;&amp;</operator> <name>sep_comp</name><operator>)</operator> <operator>||</operator> <name>wide_changed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>thislen</name> <operator>=</operator> <name>i</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>thislen</name> <operator>=</operator> <name>i</name> <operator>-</operator> <name>start</name> <operator>+</operator> <name>cl</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>thislen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prev_wide</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_set_font</name><argument_list>(<argument><expr><name>wide_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mch_draw_string</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name>scol</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>thislen</name></expr></argument>,

<argument><expr><name>draw_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_wide</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_set_font</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name>thislen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>scol</name> <operator>+=</operator> <name>cells</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cells</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wide_changed</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>comping</name> <operator>&amp;&amp;</operator> <name>sep_comp</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>scol</name> <operator>-=</operator> <name>cn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>cn</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>draw_flags</name> <operator>&amp;</operator> <name>DRAW_TRANSP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>fontset</name> <operator>==</operator> <name>NOFONTSET</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>&amp;&amp;</operator> <operator>!</operator><name>wide_changed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_draw_string</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name>scol</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>draw_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>comping</name> <operator>&amp;&amp;</operator> <name>sep_comp</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE_CC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>TARGET_API_MAC_CARBON</name></expr></cpp:if>

<expr_stmt><expr><call><name>gui_mch_draw_string</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name>scol</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>,

<argument><expr><name>draw_flags</name> <operator>|</operator> <name>DRAW_TRANSP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gui_mch_draw_string</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name>scol</name> <operator>-</operator> <name>cn</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>,

<argument><expr><name>draw_flags</name> <operator>|</operator> <name>DRAW_TRANSP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>cl</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_wide</name> <operator>=</operator> <name>curr_wide</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>scol</name> <operator>-</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_draw_string</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>draw_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mb_string2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>GUI_MON_IS_CURSOR</name> <operator>|</operator> <name>GUI_MON_TRS_CURSOR</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>GUI_MON_NOCLEAR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clip_may_redraw_selection</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>GUI_MON_IS_CURSOR</name> <operator>|</operator> <name>GUI_MON_TRS_CURSOR</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>==</operator> <name><name>gui</name><operator>.</operator><name>row</name></name>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>cursor_col</name></name> <operator>&gt;=</operator> <name>col</name>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>cursor_col</name></name> <operator>&lt;</operator> <name>col</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>cursor_is_valid</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGN_ICONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>draw_sign</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_drawsign</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name>signcol</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>highlight_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>multi_sign</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>netbeans_draw_multisign_indicator</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_undraw_cursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>cursor_is_valid</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_redraw_block</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>cursor_row</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>gui</name><operator>.</operator><name>cursor_col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>gui</name><operator>.</operator><name>cursor_col</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>gui</name><operator>.</operator><name>cursor_col</name></name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>cursor_row</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>cursor_col</name></name></expr></argument>, <argument><expr><name>GUI_MON_NOCLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>cursor_is_valid</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_redraw</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row1</name></decl>, <decl><type ref="prev"/><name>col1</name></decl>, <decl><type ref="prev"/><name>row2</name></decl>, <decl><type ref="prev"/><name>col2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>row1</name> <operator>=</operator> <call><name>Y_2_ROW</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col1</name> <operator>=</operator> <call><name>X_2_COL</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row2</name> <operator>=</operator> <call><name>Y_2_ROW</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col2</name> <operator>=</operator> <call><name>X_2_COL</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_redraw_block</name><argument_list>(<argument><expr><name>row1</name></expr></argument>, <argument><expr><name>col1</name></expr></argument>, <argument><expr><name>row2</name></expr></argument>, <argument><expr><name>col2</name></expr></argument>, <argument><expr><name>GUI_MON_NOCLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name><name>gui</name><operator>.</operator><name>cursor_row</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_redraw_block</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>row1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>col1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>row2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>col2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>old_row</name></decl>, <decl><type ref="prev"/><name>old_col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>old_hl_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sattr_T</name></type> <name>first_attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>back</name></decl>, <decl><type ref="prev"/><name>nback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>orig_col1</name></decl>, <decl><type ref="prev"/><name>orig_col2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>screen_cleared</name> <operator>||</operator> <name>ScreenLines</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>col1</name> <operator>=</operator> <call><name>check_col</name><argument_list>(<argument><expr><name>col1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col2</name> <operator>=</operator> <call><name>check_col</name><argument_list>(<argument><expr><name>col2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row1</name> <operator>=</operator> <call><name>check_row</name><argument_list>(<argument><expr><name>row1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row2</name> <operator>=</operator> <call><name>check_row</name><argument_list>(<argument><expr><name>row2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_row</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_col</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_hl_mask</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>highlight_mask</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>orig_col1</name> <operator>=</operator> <name>col1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>orig_col2</name> <operator>=</operator> <name>col2</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name><name>gui</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name>row1</name></expr>;</init> <condition><expr><name><name>gui</name><operator>.</operator><name>row</name></name> <operator>&lt;=</operator> <name>row2</name></expr>;</condition> <incr><expr><name><name>gui</name><operator>.</operator><name>row</name></name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>col1</name> <operator>=</operator> <name>orig_col1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col2</name> <operator>=</operator> <name>orig_col2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>col1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col1</name> <operator>-=</operator> <call><name>dbcs_screen_head_off</name><argument_list>(<argument><expr><name>ScreenLines</name> <operator>+</operator> <name>off</name></expr></argument>,

<argument><expr><name>ScreenLines</name> <operator>+</operator> <name>off</name> <operator>+</operator> <name>col1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>col2</name> <operator>+=</operator> <call><name>dbcs_screen_tail_off</name><argument_list>(<argument><expr><name>ScreenLines</name> <operator>+</operator> <name>off</name></expr></argument>,

<argument><expr><name>ScreenLines</name> <operator>+</operator> <name>off</name> <operator>+</operator> <name>col2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>enc_utf8</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>+</operator> <name>col1</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>col1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>col1</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,

<argument><expr><literal type="string">"INTERNAL ERROR: NUL in ScreenLines in row %ld"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>col2</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>Columns</name> <operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>+</operator> <name>col2</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>col2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr>]</index></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>col2</name> <operator>-</operator> <name>col1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>back</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>back</name> <operator>&lt;</operator> <name>col1</name></expr>;</condition> <incr><expr><operator>++</operator><name>back</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>back</name></expr>]</index></name> <operator>!=</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name>

<operator>||</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>back</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>first_attr</name> <operator>=</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>highlight_mask</name></name> <operator>=</operator> <name>first_attr</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>nback</name> <operator>=</operator> <call><name>gui_screenchar</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,

<argument><expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name>Columns</name> <operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x8e</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>nback</name> <operator>=</operator> <call><name>gui_screenchar</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,

<argument><expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>+</operator> <name>idx</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name> <operator>+</operator> <name>idx</name></expr>]</index></name> <operator>!=</operator> <name>first_attr</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>nback</name> <operator>=</operator> <call><name>gui_screenstr</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,

<argument><expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off</name> <operator>+</operator> <name>idx</name></expr>]</index></name> <operator>==</operator> <name>first_attr</name></expr>;</condition>

<incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name><name>ScreenLinesUC</name><index>[<expr><name>off</name> <operator>+</operator> <name>idx</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>+</operator> <name>idx</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x8e</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>ScreenLines</name>

<operator>+</operator> <name>off</name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>nback</name> <operator>=</operator> <call><name>gui_outstr_nowrap</name><argument_list>(<argument><expr><name>ScreenLines</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,

<argument><expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nback</name> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>-=</operator> <name>back</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>back</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>-=</operator> <name>back</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>idx</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>back</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name>old_row</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>old_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>highlight_mask</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>old_hl_mask</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_delete_lines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>+</operator> <name>count</name> <operator>&gt;</operator> <name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_clear_block</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_delete_lines</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>&gt;=</operator> <name>row</name>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>cursor_col</name></name> <operator>&gt;=</operator> <name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>cursor_col</name></name> <operator>&lt;=</operator> <name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>&lt;</operator> <name>row</name> <operator>+</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>cursor_is_valid</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>&lt;=</operator> <name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_insert_lines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>+</operator> <name>count</name> <operator>&gt;</operator> <name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_clear_block</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_insert_lines</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>&gt;=</operator> <name><name>gui</name><operator>.</operator><name>row</name></name>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>cursor_col</name></name> <operator>&gt;=</operator> <name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>cursor_col</name></name> <operator>&lt;=</operator> <name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>&lt;=</operator> <name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>-</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>&lt;=</operator> <name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>cursor_is_valid</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>

<name>gui_wait_for_chars_3</name><parameter_list>(

<parameter><decl><type><name>long</name></type> <name>wtime</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier><name>interrupted</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>ignore_input</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>gui_mch_wait_for_chars</name><argument_list>(<argument><expr><name>wtime</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>gui_wait_for_chars_or_timer</name><parameter_list>(

<parameter><decl><type><name>long</name></type> <name>wtime</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier><name>interrupted</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>ignore_input</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>ui_wait_for_chars_or_timer</name><argument_list>(<argument><expr><name>wtime</name></expr></argument>, <argument><expr><name>gui_wait_for_chars_3</name></expr></argument>,

<argument><expr><name>interrupted</name></expr></argument>, <argument><expr><name>ignore_input</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>gui_mch_wait_for_chars</name><argument_list>(<argument><expr><name>wtime</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>gui_wait_for_chars_buf</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>wtime</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>tb_change_cnt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>wtime</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_update_menus</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>input_available</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>typebuf_changed</name><argument_list>(<argument><expr><name>tb_change_cnt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>read_from_input_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wtime</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mch_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_start_blink</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>inchar_loop</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>wtime</name></expr></argument>, <argument><expr><name>tb_change_cnt</name></expr></argument>,

<argument><expr><name>gui_wait_for_chars_or_timer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_stop_blink</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_wait_for_chars</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>wtime</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tb_change_cnt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>gui_wait_for_chars_buf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wtime</name></expr></argument>, <argument><expr><name>tb_change_cnt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_inchar</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>wtime</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>tb_change_cnt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>gui_wait_for_chars_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>wtime</name></expr></argument>, <argument><expr><name>tb_change_cnt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>fill_mouse_coord</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><operator>(</operator><name>col</name> <operator>/</operator> <literal type="number">128</literal> <operator>+</operator> <literal type="char">' '</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><operator>(</operator><name>col</name> <operator>%</operator> <literal type="number">128</literal> <operator>+</operator> <literal type="char">' '</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><operator>(</operator><name>row</name> <operator>/</operator> <literal type="number">128</literal> <operator>+</operator> <literal type="char">' '</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><operator>(</operator><name>row</name> <operator>%</operator> <literal type="number">128</literal> <operator>+</operator> <literal type="char">' '</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_send_mouse_event</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>repeated_click</name></decl></parameter>,

<parameter><decl><type><name>int_u</name></type> <name>modifiers</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>prev_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_button</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>num_clicks</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>string</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>key_extra</name></name></type> <name>button_char</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>checkfor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_clip</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>button</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>MOUSE_X1</name></expr>:</case>

<expr_stmt><expr><name>button_char</name> <operator>=</operator> <name>KE_X1MOUSE</name></expr>;</expr_stmt>

<goto>goto <name>button_set</name>;</goto>

<case>case <expr><name>MOUSE_X2</name></expr>:</case>

<expr_stmt><expr><name>button_char</name> <operator>=</operator> <name>KE_X2MOUSE</name></expr>;</expr_stmt>

<goto>goto <name>button_set</name>;</goto>

<case>case <expr><name>MOUSE_4</name></expr>:</case>

<expr_stmt><expr><name>button_char</name> <operator>=</operator> <name>KE_MOUSEDOWN</name></expr>;</expr_stmt>

<goto>goto <name>button_set</name>;</goto>

<case>case <expr><name>MOUSE_5</name></expr>:</case>

<expr_stmt><expr><name>button_char</name> <operator>=</operator> <name>KE_MOUSEUP</name></expr>;</expr_stmt>

<goto>goto <name>button_set</name>;</goto>

<case>case <expr><name>MOUSE_6</name></expr>:</case>

<expr_stmt><expr><name>button_char</name> <operator>=</operator> <name>KE_MOUSELEFT</name></expr>;</expr_stmt>

<goto>goto <name>button_set</name>;</goto>

<case>case <expr><name>MOUSE_7</name></expr>:</case>

<expr_stmt><expr><name>button_char</name> <operator>=</operator> <name>KE_MOUSERIGHT</name></expr>;</expr_stmt>

<label><name>button_set</name>:</label>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hold_gui_events</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>button_char</name></expr>;</expr_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>gui_xy2colrow</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><operator>(</operator><name>col</name> <operator>/</operator> <literal type="number">128</literal> <operator>+</operator> <literal type="char">' '</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><operator>(</operator><name>col</name> <operator>%</operator> <literal type="number">128</literal> <operator>+</operator> <literal type="char">' '</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><operator>(</operator><name>row</name> <operator>/</operator> <literal type="number">128</literal> <operator>+</operator> <literal type="char">' '</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><operator>(</operator><name>row</name> <operator>%</operator> <literal type="number">128</literal> <operator>+</operator> <literal type="char">' '</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_MODIFIER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>&amp;</operator> <name>MOUSE_SHIFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <name>MOD_MASK_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>&amp;</operator> <name>MOUSE_CTRL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <name>MOD_MASK_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>&amp;</operator> <name>MOUSE_ALT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <name>MOD_MASK_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block>

</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>clip_star</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>SELECT_IN_PROGRESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clip_process_selection</name><argument_list>(<argument><expr><name>button</name></expr></argument>, <argument><expr><call><name>X_2_COL</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Y_2_ROW</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>repeated_click</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>gui_xy2colrow</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>!=</operator> <name>MOUSE_RELEASE</name> <operator>||</operator> <name>row</name> <operator>!=</operator> <name>prev_row</name> <operator>||</operator> <name>col</name> <operator>!=</operator> <name>prev_col</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>get_real_state</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>NORMAL_BUSY</name></expr>:</case>

<case>case <expr><name>OP_PENDING</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TERMINAL</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>NORMAL</name></expr>:</case> <expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_NORMAL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VISUAL</name></expr>:</case> <expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_VISUAL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SELECTMODE</name></expr>:</case> <expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_VISUAL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>REPLACE</name></expr>:</case>

<case>case <expr><name>REPLACE</name><operator>+</operator><name>LANGMAP</name></expr>:</case>

<case>case <expr><name>VREPLACE</name></expr>:</case>

<case>case <expr><name>VREPLACE</name><operator>+</operator><name>LANGMAP</name></expr>:</case>

<case>case <expr><name>INSERT</name></expr>:</case>

<case>case <expr><name>INSERT</name><operator>+</operator><name>LANGMAP</name></expr>:</case> <expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_INSERT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ASKMORE</name></expr>:</case>

<case>case <expr><name>HITRETURN</name></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><name>Y_2_ROW</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>msg_row</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_NORMAL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_RETURN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>CMDLINE</name></expr>:</case>

<case>case <expr><name>CMDLINE</name><operator>+</operator><name>LANGMAP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>Y_2_ROW</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>cmdline_row</name> <operator>&amp;&amp;</operator> <name>button</name> <operator>!=</operator> <name>MOUSE_MIDDLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_NONE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_COMMAND</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_NONE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>==</operator> <name>NORMAL</name> <operator>||</operator> <name>State</name> <operator>==</operator> <name>NORMAL_BUSY</name> <operator>||</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>Y_2_ROW</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>topframe</name><operator>-&gt;</operator><name>fr_height</name></name> <operator>+</operator> <name><name>firstwin</name><operator>-&gt;</operator><name>w_winrow</name></name>

<operator>&amp;&amp;</operator> <name>button</name> <operator>!=</operator> <name>MOUSE_DRAG</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name>drag_status_line</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name>drag_sep_line</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name>MOUSE_CTRL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name>MOUSE_SHIFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_NONEF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>exmode_active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>checkfor</name> <operator>=</operator> <name>MOUSE_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mouse_has</name><argument_list>(<argument><expr><name>checkfor</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>checkfor</name> <operator>==</operator> <name>MOUSE_COMMAND</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>checkfor</name> <operator>!=</operator> <name>MOUSE_NONEF</name> <operator>&amp;&amp;</operator> <name>VIsual_active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>NORMAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mouse_model_popup</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>button</name> <operator>==</operator> <name>MOUSE_LEFT</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name>MOUSE_SHIFT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name>MOUSE_CTRL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_RIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>modifiers</name> <operator>&amp;=</operator> <operator>~</operator> <name>MOUSE_SHIFT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <name>MOUSE_RIGHT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>clip_star</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>SELECT_CLEARED</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>msg_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>+</operator> <call><name>W_WINROW</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>clip_start_selection</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>clip_process_selection</name><argument_list>(<argument><expr><name>button</name></expr></argument>, <argument><expr><call><name>X_2_COL</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Y_2_ROW</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>repeated_click</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_clip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>button</name> <operator>==</operator> <name>MOUSE_LEFT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clip_start_selection</name><argument_list>(<argument><expr><call><name>X_2_COL</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Y_2_ROW</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>repeated_click</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_clip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>!=</operator> <name>MOUSE_MIDDLE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mouse_has</name><argument_list>(<argument><expr><name>checkfor</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>button</name> <operator>==</operator> <name>MOUSE_RELEASE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>checkfor</name> <operator>!=</operator> <name>MOUSE_COMMAND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>repeated_click</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>clip_star</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>SELECT_CLEARED</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>did_clip</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clip_clear_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>hold_gui_events</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>gui_xy2colrow</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>==</operator> <name>MOUSE_DRAG</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>prev_row</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>==</operator> <name>prev_col</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>row</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>!=</operator> <name>gui_prev_topline</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>!=</operator> <name>gui_prev_topfill</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>repeated_click</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_MOUSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>KE_FILLER</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>!=</operator> <name>MOUSE_DRAG</name> <operator>&amp;&amp;</operator> <name>button</name> <operator>!=</operator> <name>MOUSE_RELEASE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>repeated_click</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>!=</operator> <name>prev_button</name> <operator>||</operator> <name>row</name> <operator>!=</operator> <name>prev_row</name> <operator>||</operator> <name>col</name> <operator>!=</operator> <name>prev_col</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_clicks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>++</operator><name>num_clicks</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_clicks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>num_clicks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>prev_button</name> <operator>=</operator> <name>button</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gui_prev_topline</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>gui_prev_topfill</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><operator>(</operator><name>button</name> <operator>|</operator> <literal type="number">0x20</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_NUM_MOUSE_CLICKS</name><argument_list>(<argument><expr><name><name>string</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>num_clicks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>button</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <name>modifiers</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_mouse_coord</name><argument_list>(<argument><expr><name>string</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_row</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>prev_col</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dragged_sb</name></name> <operator>=</operator> <name>SBAR_NONE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>gui_xy2colrow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>colp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><call><name>check_col</name><argument_list>(<argument><expr><call><name>X_2_COL</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><call><name>check_row</name><argument_list>(<argument><expr><call><name>Y_2_ROW</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>colp</name> <operator>=</operator> <call><name>mb_fix_col</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>row</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_menu_cb</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>bytes</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>long_u</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hold_gui_events</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_MENU</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>KE_FILLER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_long_to_buf</name><argument_list>(<argument><expr><operator>(</operator><name>long_u</name><operator>)</operator><name>menu</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf_csi</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long_u</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>prev_which_scrollbars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>gui_init_which_components</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>oldval</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DARKTHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_dark_theme</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>using_dark_theme</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_menu_is_active</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_toolbar</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>using_toolbar</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>using_tabline</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOOTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_footer</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>using_footer</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_tearoff</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>using_tearoff</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>grey_old</name></decl>, <decl><type ref="prev"/><name>grey_new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_set_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fix_size</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>oldval</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>grey_old</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>GO_GREY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>grey_new</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_GREY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grey_old</name> <operator>!=</operator> <name>grey_new</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>p_go</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_go</name> <operator>=</operator> <name>oldval</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_update_menus</name><argument_list>(<argument><expr><name>MENU_ALL_MODES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_go</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_is_active</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>p_go</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>GO_LEFT</name></expr>:</case>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GO_RIGHT</name></expr>:</case>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GO_VLEFT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>win_hasvertsplit</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>GO_VRIGHT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>win_hasvertsplit</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>GO_BOT</name></expr>:</case>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_BOTTOM</name></expr>]</index></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DARKTHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>GO_DARKTHEME</name></expr>:</case>

<expr_stmt><expr><name>using_dark_theme</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>GO_MENUS</name></expr>:</case>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_is_active</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>GO_GREY</name></expr>:</case>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>GO_TOOLBAR</name></expr>:</case>

<expr_stmt><expr><name>using_toolbar</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOOTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>GO_FOOTER</name></expr>:</case>

<expr_stmt><expr><name>using_footer</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>GO_TEAROFF</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>using_tearoff</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>need_set_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fix_size</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DARKTHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>using_dark_theme</name> <operator>!=</operator> <name>prev_dark_theme</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_set_dark_theme</name><argument_list>(<argument><expr><name>using_dark_theme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_dark_theme</name> <operator>=</operator> <name>using_dark_theme</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>using_tabline</name> <operator>=</operator> <call><name>gui_has_tabline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gui_mch_showing_tabline</name><argument_list>()</argument_list></call> <operator>!=</operator> <operator>!</operator><name>using_tabline</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>Rows</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_update_tabline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Rows</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>need_set_size</name> <operator>|=</operator> <name>RESIZE_VERT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>using_tabline</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fix_size</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gui_use_tabline</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>redraw_tabline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>prev_which_scrollbars</name><index>[<expr><name>i</name></expr>]</index></name>

<operator>||</operator> <name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>i</name></expr>]</index></name>

<operator>!=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_prev_which_scrollbars</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>SBAR_BOTTOM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_enable_scrollbar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>bottom_sbar</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>gui_do_scrollbar</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>prev_which_scrollbars</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>SBAR_BOTTOM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>need_set_size</name> <operator>|=</operator> <name>RESIZE_VERT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>need_set_size</name> <operator>|=</operator> <name>RESIZE_HOR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fix_size</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_prev_which_scrollbars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prev_which_scrollbars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_is_active</name></name> <operator>!=</operator> <name>prev_menu_is_active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>Rows</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_enable_menu</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>menu_is_active</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Rows</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_menu_is_active</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>menu_is_active</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>need_set_size</name> <operator>|=</operator> <name>RESIZE_VERT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_is_active</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fix_size</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>using_toolbar</name> <operator>!=</operator> <name>prev_toolbar</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_show_toolbar</name><argument_list>(<argument><expr><name>using_toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_toolbar</name> <operator>=</operator> <name>using_toolbar</name></expr>;</expr_stmt>

<expr_stmt><expr><name>need_set_size</name> <operator>|=</operator> <name>RESIZE_VERT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>using_toolbar</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fix_size</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOOTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>using_footer</name> <operator>!=</operator> <name>prev_footer</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_enable_footer</name><argument_list>(<argument><expr><name>using_footer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_footer</name> <operator>=</operator> <name>using_footer</name></expr>;</expr_stmt>

<expr_stmt><expr><name>need_set_size</name> <operator>|=</operator> <name>RESIZE_VERT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>using_footer</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fix_size</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEAROFF</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>using_tearoff</name> <operator>!=</operator> <name>prev_tearoff</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_toggle_tearoffs</name><argument_list>(<argument><expr><name>using_tearoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_tearoff</name> <operator>=</operator> <name>using_tearoff</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>need_set_size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>long</name></type> <name>prev_Columns</name> <init>= <expr><name>Columns</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>prev_Rows</name> <init>= <expr><name>Rows</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>fix_size</name></expr></argument>, <argument><expr><name>need_set_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name> <operator>&amp;&amp;</operator> <name>need_set_size</name> <operator>!=</operator> <operator>(</operator><name>RESIZE_VERT</name> <operator>|</operator> <name>RESIZE_HOR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>char_avail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>need_set_size</name> <operator>&amp;</operator> <name>RESIZE_VERT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Rows</name> <operator>=</operator> <name>prev_Rows</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>need_set_size</name> <operator>&amp;</operator> <name>RESIZE_HOR</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Columns</name> <operator>=</operator> <name>prev_Columns</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>firstwin</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>!=</operator> <call><name>tabline_height</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>shell_new_rows</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>gui_use_tabline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_TABLINE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>gui_has_tabline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gui_use_tabline</name><argument_list>()</argument_list></call>

<operator>||</operator> <name>p_stal</name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><name>p_stal</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>first_tabpage</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_update_tabline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>showit</name> <init>= <expr><call><name>gui_has_tabline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shown</name> <init>= <expr><call><name>gui_mch_showing_tabline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name> <operator>&amp;&amp;</operator> <name>starting</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>showit</name> <operator>!=</operator> <operator>!</operator><name>shown</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_show_tabline</name><argument_list>(<argument><expr><name>showit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>showit</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_update_tabline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>showit</name> <operator>!=</operator> <operator>!</operator><name>shown</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>showit</name></expr></argument>, <argument><expr><name>RESIZE_VERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>get_tabline_label</name><parameter_list>(

<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>tooltip</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>modified</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wincount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>opt</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>tooltip</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>p_gtt</name></expr> </then><else>: <expr><operator>&amp;</operator><name>p_gtl</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>opt</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>use_sandbox</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>called_emsg_before</name> <init>= <expr><name>called_emsg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>res</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>save_curtab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>opt_name</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>tooltip</name></expr> ?</condition><then> <expr><literal type="string">"guitabtooltip"</literal></expr>

</then><else>: <expr><literal type="string">"guitablabel"</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>printer_page_num</name> <operator>=</operator> <call><name>tabpage_index</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_LNUM</name></expr></argument>, <argument><expr><name>printer_page_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>use_sandbox</name> <operator>=</operator> <call><name>was_set_insecurely</name><argument_list>(<argument><expr><name>opt_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_firstwin</name></name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_lastwin</name></name> <operator>=</operator> <name>lastwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_curwin</name></name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_curtab</name> <operator>=</operator> <name>curtab</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curtab</name> <operator>=</operator> <name>tp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>topframe</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_topframe</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>firstwin</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_firstwin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lastwin</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_lastwin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_curwin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>build_stl_str_hl</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><operator>*</operator><name>opt</name></expr></argument>, <argument><expr><name>use_sandbox</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curtab</name> <operator>=</operator> <name>save_curtab</name></expr>;</expr_stmt>

<expr_stmt><expr><name>topframe</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_topframe</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>firstwin</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_firstwin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lastwin</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_lastwin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_curwin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>called_emsg</name> <operator>&gt;</operator> <name>called_emsg_before</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><name>opt_name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><name>SID_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>opt</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>NameBuff</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>get_trans_bufname</name><argument_list>(<argument><expr><ternary><condition><expr><name>tp</name> <operator>==</operator> <name>curtab</name></expr> ?</condition><then> <expr><name>curbuf</name></expr> </then><else>: <expr><name><name>tp</name><operator>-&gt;</operator><name>tp_curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tooltip</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>shorten_dir</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>tp</name> <operator>==</operator> <name>curtab</name><operator>)</operator></expr> ?</condition><then> <expr><name>firstwin</name></expr> </then><else>: <expr><name><name>tp</name><operator>-&gt;</operator><name>tp_firstwin</name></name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>wincount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>wincount</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>bufIsChanged</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modified</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>modified</name> <operator>||</operator> <name>wincount</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wincount</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>wincount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modified</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>NameBuff</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>send_tabline_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>string</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>==</operator> <call><name>tabpage_index</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hold_gui_events</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_set_curtab</name><argument_list>(<argument><expr><call><name>tabpage_index</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_TABLINE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>KE_FILLER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf_csi</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>send_tabline_menu_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tabidx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>string</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hold_gui_events</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>event</name> <operator>==</operator> <name>TABLINE_MENU_CLOSE</name> <operator>&amp;&amp;</operator> <name><name>first_tabpage</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_TABMENU</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>KE_FILLER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tabidx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>event</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf_csi</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_remove_scrollbars</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>SBAR_BOTTOM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_enable_scrollbar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>bottom_sbar</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>gui_do_scrollbar</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_prev_which_scrollbars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_create_scrollbar</name><parameter_list>(<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sbar_ident</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>ident</name></name> <operator>=</operator> <name>sbar_ident</name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>wp</name></name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>pixval</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>status_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_create_scrollbar</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>wp</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>SBAR_HORIZ</name></expr> </then><else>: <expr><name>SBAR_VERT</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>scrollbar_T</name> <modifier>*</modifier></type>

<name>gui_find_scrollbar</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ident</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>bottom_sbar</name><operator>.</operator><name>ident</name></name> <operator>==</operator> <name>ident</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>bottom_sbar</name></name></expr>;</return></block_content></block></if></if_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name><operator>.</operator><name>ident</name> <operator>==</operator> <name>ident</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name><operator>.</operator><name>ident</name> <operator>==</operator> <name>ident</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_drag_scrollbar</name><parameter_list>(<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>still_dragging</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sb_num</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ON_FLY_SCROLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>old_leftcol</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>old_topline</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>old_topfill</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>bytes</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>long_u</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>byte_count</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hold_gui_events</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sb</name><operator>-&gt;</operator><name>wp</name></name> <operator>!=</operator> <name>curwin</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>still_dragging</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>wp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dragged_sb</name></name> <operator>=</operator> <name>SBAR_BOTTOM</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>sb</name> <operator>==</operator> <operator>&amp;</operator><name><name>sb</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dragged_sb</name></name> <operator>=</operator> <name>SBAR_LEFT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dragged_sb</name></name> <operator>=</operator> <name>SBAR_RIGHT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dragged_wp</name></name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>wp</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dragged_sb</name></name> <operator>=</operator> <name>SBAR_NONE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dragged_wp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>wp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sb</name> <operator>=</operator> <operator>&amp;</operator><name><name>sb</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SCROLL_PAST_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name><name>sb</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name><name>sb</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <name><name>sb</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <name><name>sb</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ON_FLY_SCROLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>dont_scroll</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>wp</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>sb</name><operator>-&gt;</operator><name>wp</name></name> <operator>==</operator> <name>curwin</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>pum_visible</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>wp</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>max</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>sb</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>wp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>sb_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <name>firstwin</name></expr>;</init> <condition><expr><name>wp</name> <operator>!=</operator> <name><name>sb</name><operator>-&gt;</operator><name>wp</name></name> <operator>&amp;&amp;</operator> <name>wp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sb_num</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ON_FLY_SCROLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>current_scrollbar</name> <operator>=</operator> <name>sb_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name>scrollbar_value</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>NORMAL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_do_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ins_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msg_scrolled</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_do_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redrawcmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_set_scrollbar_thumb</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>sb</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[

<expr><ternary><condition><expr><name>sb</name> <operator>==</operator> <operator>&amp;</operator><name><name>sb</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name></expr>

?</condition><then> <expr><name>SBAR_LEFT</name></expr> </then><else>: <expr><name>SBAR_RIGHT</name></expr></else></ternary></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_VER_SCROLLBAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>KE_FILLER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>sb_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name>byte_count</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ON_FLY_SCROLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>scrollbar_value</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>NORMAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_do_horiz_scroll</name><argument_list>(<argument><expr><name>scrollbar_value</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_horscroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msg_scrolled</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_do_horiz_scroll</name><argument_list>(<argument><expr><name>scrollbar_value</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redrawcmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_leftcol</name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>updateWindow</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_HOR_SCROLLBAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>KE_FILLER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>byte_count</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ON_FLY_SCROLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scb</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>wp</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>!=</operator> <name>old_leftcol</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>wp</name></name> <operator>==</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>!=</operator> <name>old_topline</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>!=</operator> <name>old_topfill</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>do_check_scrollbind</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>updateWindow</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>out_flush_cursor</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_long_to_buf</name><argument_list>(<argument><expr><operator>(</operator><name>long_u</name><operator>)</operator><name>value</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf_csi</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long_u</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_may_update_scrollbars</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <name>starting</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_init_which_components</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_update_scrollbars</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_update_scrollbars</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>which_sb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type><name>prev_curwin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gui_update_horiz_scrollbar</name><argument_list>(<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>dragged_sb</name></name> <operator>==</operator> <name>SBAR_LEFT</name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>dragged_sb</name></name> <operator>==</operator> <name>SBAR_RIGHT</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>which_sb</name> <operator>=</operator> <name>SBAR_LEFT</name> <operator>+</operator> <name>SBAR_RIGHT</name> <operator>-</operator> <name><name>gui</name><operator>.</operator><name>dragged_sb</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>dragged_wp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_set_scrollbar_thumb</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>dragged_wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>which_sb</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>dragged_wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>dragged_wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>dragged_wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>hold_gui_events</name></expr>;</expr_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>dragged_sb</name></name> <operator>==</operator> <name>SBAR_LEFT</name>

<operator>||</operator> <name><name>gui</name><operator>.</operator><name>dragged_sb</name></name> <operator>==</operator> <name>SBAR_RIGHT</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>dragged_wp</name></name> <operator>==</operator> <name>wp</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SCROLL_PAST_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SCROLL_PAST_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>max</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>max</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>max</name> <operator>-</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>max</name> <operator>-</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sb</name> <operator>=</operator> <operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>size</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument> &gt;</argument_list></name> <name>max</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_do_scrollbar</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>SBAR_LEFT</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_do_scrollbar</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>SBAR_RIGHT</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>force</name> <operator>||</operator> <name><name>sb</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name>

<operator>||</operator> <name><name>sb</name><operator>-&gt;</operator><name>top</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name>

<operator>||</operator> <name><name>sb</name><operator>-&gt;</operator><name>status_height</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name>

<operator>||</operator> <name><name>sb</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name>

<operator>||</operator> <name>prev_curwin</name> <operator>!=</operator> <name>curwin</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>status_height</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name><name>sb</name><operator>-&gt;</operator><name>status_height</name></name><operator>)</operator> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>top</name></name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_PHOTON</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_is_active</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>menu_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>toolbar_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>TOOLBAR_BUTTON_HEIGHT</name> <operator>+</operator> <name>TOOLBAR_BORDER_HEIGHT</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>gui_has_tabline</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>tabline_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_set_scrollbar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>left_sbar_x</name></name></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>scrollbar_width</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_do_scrollbar</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>SBAR_LEFT</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_set_scrollbar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>right_sbar_x</name></name></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>scrollbar_width</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_do_scrollbar</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>SBAR_RIGHT</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>max</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>*</operator> <operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>+</operator> <name>max</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>max</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>force</name> <operator>||</operator> <name><name>sb</name><operator>-&gt;</operator><name>pixval</name></name> <operator>!=</operator> <name>y</name> <operator>||</operator> <name><name>sb</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name>size</name> <operator>||</operator> <name><name>sb</name><operator>-&gt;</operator><name>max</name></name> <operator>!=</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>force</name> <operator>||</operator> <name><name>sb</name><operator>-&gt;</operator><name>value</name></name> <operator>!=</operator> <name>val</name> <operator>||</operator> <name><name>sb</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name>size</name> <operator>||</operator> <name><name>sb</name><operator>-&gt;</operator><name>max</name></name> <operator>!=</operator> <name>max</name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>pixval</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>dragged_sb</name></name> <operator>!=</operator> <name>SBAR_LEFT</name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>dragged_wp</name></name> <operator>!=</operator> <name>wp</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_set_scrollbar_thumb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name></expr></argument>,

<argument><expr><name>val</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>dragged_sb</name></name> <operator>!=</operator> <name>SBAR_RIGHT</name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>dragged_wp</name></name> <operator>!=</operator> <name>wp</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_set_scrollbar_thumb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name></expr></argument>,

<argument><expr><name>val</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name>prev_curwin</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>hold_gui_events</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_do_scrollbar</name><parameter_list>(

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>midcol</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_midcol</name> <init>= <expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>&lt;=</operator> <name>midcol</name>

<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>&gt;=</operator> <name>midcol</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name> <operator>!=</operator> <name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_midcol</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>enable</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>midcol</name> <operator>&gt;</operator> <name>Columns</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>which</name> <operator>==</operator> <name>SBAR_LEFT</name></expr> ?</condition><then> <expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> </then><else>: <expr><operator>!</operator><name>has_midcol</name></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>enable</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>which</name> <operator>==</operator> <name>SBAR_RIGHT</name></expr> ?</condition><then> <expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>!=</operator> <name>Columns</name></expr>

</then><else>: <expr><operator>!</operator><name>has_midcol</name></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>enable</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gui_mch_enable_scrollbar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>which</name></expr>]</index></name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_do_scroll</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>save_wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>nlines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>old_cursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>old_topline</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>old_topfill</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>wp</name> <operator>=</operator> <name>firstwin</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>current_scrollbar</name></expr>;</condition> <incr><expr><name>wp</name> <operator>=</operator> <call><name>W_NEXT</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nlines</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>scrollbar_value</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nlines</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>save_wp</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_topline</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>old_topfill</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>old_cursor</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nlines</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>scrolldown</name><argument_list>(<argument><expr><operator>-</operator><name>nlines</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>dragged_wp</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>scrollup</name><argument_list>(<argument><expr><name>nlines</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>dragged_wp</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>dragged_sb</name></name> <operator>==</operator> <name>SBAR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dragged_wp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_topline</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>old_topfill</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_scrolloff_value</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>cursor_correct</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>old_cursor</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_curswant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_scbind_pos</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>save_wp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>save_wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_topline</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name>

<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>!=</operator> <literal type="number">0</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>old_topfill</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name>VALID</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pum_visible</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NOT_VALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>&lt;</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_disable_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>updateWindow</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>mch_enable_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pum_visible</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pum_redraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>wp</name> <operator>==</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>EQUAL_POS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>old_cursor</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>colnr_T</name></type>

<name>scroll_line_len</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>chartabsize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

<return>return <expr><name>col</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>longest_lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>linenr_T</name></type>

<name>gui_find_longest_lnum</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_HORSCROLL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&lt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>scroll_line_len</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>max</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>max</name>

<operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>lnum</name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>)</operator></expr></argument>)</argument_list></call>

<operator>&lt;</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ret</name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_update_horiz_scrollbar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>value</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_BOTTOM</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>dragged_sb</name></name> <operator>==</operator> <name>SBAR_BOTTOM</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>prev_wrap</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>bottom_sbar</name><operator>.</operator><name>value</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SCROLL_PAST_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>longest_lnum</name> <operator>=</operator> <call><name>gui_find_longest_lnum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>scroll_line_len</name><argument_list>(<argument><expr><name>longest_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>virtual_active</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>&gt;=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>max</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCROLL_PAST_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>max</name> <operator>+=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <call><name>curwin_col_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCROLL_PAST_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>max</name> <operator>-=</operator> <call><name>curwin_col_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SCROLL_PAST_END</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>max</name> <operator>-</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>max</name> <operator>-</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>max</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>size</name> <operator>-</operator> <name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>==</operator> <name><name>gui</name><operator>.</operator><name>bottom_sbar</name><operator>.</operator><name>value</name></name> <operator>&amp;&amp;</operator> <name>size</name> <operator>==</operator> <name><name>gui</name><operator>.</operator><name>bottom_sbar</name><operator>.</operator><name>size</name></name>

<operator>&amp;&amp;</operator> <name>max</name> <operator>==</operator> <name><name>gui</name><operator>.</operator><name>bottom_sbar</name><operator>.</operator><name>max</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>bottom_sbar</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>bottom_sbar</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>bottom_sbar</name><operator>.</operator><name>max</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>prev_wrap</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_set_scrollbar_thumb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>bottom_sbar</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_do_horiz_scroll</name><parameter_list>(<parameter><decl><type><name>long_u</name></type> <name>leftcol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compute_longest_lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>==</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>leftcol</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>leftcol</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_HORSCROLL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>virtual_active</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>leftcol</name> <operator>&gt;</operator> <call><name>scroll_line_len</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compute_longest_lnum</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <call><name>gui_find_longest_lnum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>longest_lnum</name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name>

<operator>&amp;&amp;</operator> <name>longest_lnum</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>longest_lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>leftcol_changed</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_check_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>==</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_set_bg_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"White"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>==</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_set_fg_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Black"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_set_fg_color</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>=</operator> <call><name>gui_get_color</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hl_set_fg_color_name</name><argument_list>(<argument><expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_set_bg_color</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name> <operator>=</operator> <call><name>gui_get_color</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hl_set_bg_color_name</name><argument_list>(<argument><expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>guicolor_T</name></type>

<name>gui_get_color</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>guicolor_T</name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INVALCOLOR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>gui_mch_get_color</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>INVALCOLOR</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E254: Cannot allocate color %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_get_lightness</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>pixel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long_u</name></type> <name>rgb</name> <init>= <expr><operator>(</operator><name>long_u</name><operator>)</operator><call><name>gui_mch_get_rgb</name><argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>*</operator> <literal type="number">299</literal><operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>*</operator> <literal type="number">587</literal><operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><name>rgb</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>*</operator> <literal type="number">114</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>gui_bg_default</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>gui_get_lightness</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"dark"</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"light"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>init_gui_options</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_was_set</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"bg"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>p_bg</name></expr></argument>, <argument><expr><call><name>gui_bg_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"bg"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><call><name>gui_bg_default</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>highlight_changed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_new_scrollbar_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_set_scrollbar_colors</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_set_scrollbar_colors</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>gui_mch_set_scrollbar_colors</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>bottom_sbar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_focus_change</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>in_focus</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>in_focus</name></name> <operator>=</operator> <name>in_focus</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>xim_set_focus</name><argument_list>(<argument><expr><name>in_focus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hold_gui_events</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>in_focus</name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_FOCUSGAINED</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><name>KE_FOCUSLOST</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_mouse_focus</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>st</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>xy2win</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>IGNORE_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>p_mousef</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name>hold_gui_events</name> 

<operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <operator>(</operator><name>NORMAL</name><operator>|</operator><name>INSERT</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <name>State</name> <operator>!=</operator> <name>HITRETURN</name> 

<operator>&amp;&amp;</operator> <name>msg_scrolled</name> <operator>==</operator> <literal type="number">0</literal> 

<operator>&amp;&amp;</operator> <operator>!</operator><name>need_mouse_correct</name> 

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>in_focus</name></name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>x</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>x</name></expr></argument> &gt;</argument_list></name> <name>Columns</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>xy2win</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>IGNORE_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>curwin</name> <operator>||</operator> <name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>Y_2_ROW</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>tabline_height</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>finish_op</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>st</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ESC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_MOUSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>KE_FILLER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>MOUSE_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_mouse_coord</name><argument_list>(<argument><expr><name>st</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name>MOUSE_COLOFF</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>MOUSE_RELEASE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>gtk_main_level</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_main_quit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mouse_moved</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mouse_focus</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>popup_visible</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_send_mouse_event</name><argument_list>(<argument><expr><name>MOUSE_DRAG</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>win_T</name> <modifier>*</modifier></type>

<name>gui_mouse_window</name><parameter_list>(<parameter><decl><type><name>mouse_find_T</name></type> <name>popup</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p_mousef</name> <operator>||</operator> <name>popup</name> <operator>==</operator> <name>FIND_POPUP</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mch_getmouse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <name>Columns</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name>

<operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>Y_2_ROW</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>tabline_height</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>xy2win</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>popup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mouse_correct</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>gui_mouse_window</name><argument_list>(<argument><expr><name>IGNORE_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>validate_cline_row</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_setmouse</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument>,

<argument><expr><operator>(</operator><call><name>W_WINROW</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name><operator>)</operator> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name>

<operator>+</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>char_height</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type>

<name>xy2win</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>mouse_find_T</name></type> <name>popup</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>Y_2_ROW</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>X_2_COL</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>mouse_find_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>popup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>State</name> <operator>==</operator> <name>HITRETURN</name> <operator>||</operator> <name>State</name> <operator>==</operator> <name>ASKMORE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>Y_2_ROW</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>msg_row</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_mouseshape</name><argument_list>(<argument><expr><name>SHAPE_IDX_MOREL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_mouseshape</name><argument_list>(<argument><expr><name>SHAPE_IDX_MORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>row</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>update_mouseshape</name><argument_list>(<argument><expr><name>SHAPE_IDX_CLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>row</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>||</operator> <operator>!</operator><call><name>stl_connected</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>msg_scrolled</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_mouseshape</name><argument_list>(<argument><expr><name>SHAPE_IDX_VSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>row</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&amp;&amp;</operator> <name>msg_scrolled</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_mouseshape</name><argument_list>(<argument><expr><name>SHAPE_IDX_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_mouseshape</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>wp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_gui</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>||</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'b'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dofork</name></name> <operator>=</operator> <operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'b'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EXPERIMENTAL_GUI_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nogvim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msg_clr_eos_force</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GUI_MAY_SPAWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_start</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_start</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>channel_gui_register_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ends_excmd</name><argument_list>(<argument><expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ex_next</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_PHOTON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gfp_setname</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>gfp_buffer</name> <init>= <expr><name>cookie</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>MAXPATHL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>gfp_buffer</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>gfp_buffer</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_find_bitmap</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MAXPATHL</name> <operator>-</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><literal type="string">"bitmaps/%s.%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>do_in_runtimepath</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>gfp_setname</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>

<operator>||</operator> <operator>*</operator><name>buffer</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_find_iconfile</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MAXPATHL</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>expand_env</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mch_isFullName</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>gui_find_bitmap</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>display_errors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isatty</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>error_ga</name><operator>.</operator><name>ga_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>error_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2000</literal> <operator>-</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><literal type="string">"...(truncated)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_dialog</name><argument_list>(<argument><expr><name>VIM_ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&amp;Ok"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_CONSOLE_INPUT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>no_console_input</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>starting</name></name><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_CONSOLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIND_REPLACE_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>NEED_GUI_UPDATE_SCREEN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_update_screen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>conceal_old_cursor_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>conceal_new_cursor_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>conceal_update_lines</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>finish_op</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>has_cursormoved</name><argument_list>()</argument_list></call>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>popup_visible</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>EQUAL_POS</name><argument_list>(<argument><expr><name>last_cursormoved</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>has_cursormoved</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_CURSORMOVED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>popup_visible</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>popup_check_cursor_pos</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>conceal_old_cursor_line</name> <operator>=</operator> <name><name>last_cursormoved</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>conceal_new_cursor_line</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>conceal_update_lines</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>last_cursormoved</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>conceal_update_lines</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>conceal_old_cursor_line</name> <operator>!=</operator> <name>conceal_new_cursor_line</name>

<operator>||</operator> <call><name>conceal_cursor_line</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call>

<operator>||</operator> <name>need_cursor_line_redraw</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>conceal_old_cursor_line</name> <operator>!=</operator> <name>conceal_new_cursor_line</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redrawWinline</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>conceal_old_cursor_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>redrawWinline</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>conceal_new_cursor_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VALID_CROW</name></expr>;</expr_stmt>

<expr_stmt><expr><name>need_cursor_line_redraw</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIND_REPLACE_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>get_find_dialog_text</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>wwordp</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mcasep</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>last_search_pat</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"\\V"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>text</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>text</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <name><name>text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mcasep</name> <operator>=</operator> <operator>(</operator><name><name>text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>text</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal>

<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"\\&lt;"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>text</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"\\&gt;"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>wwordp</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>text</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>text</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal>

<operator>||</operator> <name><name>text</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>text</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>text</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>text</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_do_findrepl</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>find_text</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>repl_text</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>down</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FRD_TYPE_MASK</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_did_emsg</name> <init>= <expr><name>did_emsg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>busy</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>updating_screen</name> <operator>||</operator> <name>busy</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>==</operator> <name>FRD_REPLACE</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>FRD_REPLACEALL</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>text_locked</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>busy</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>FRD_REPLACEALL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"%s/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FRD_MATCH_CASE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FRD_WHOLE_WORD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><name>find_text</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"/\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FRD_WHOLE_WORD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>FRD_REPLACEALL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><name>repl_text</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"/\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"/g"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>FRD_REPLACE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><name>RE_MAGIC</name> <operator>+</operator> <name>RE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ml_get_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_regexec_nl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>p</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_end_prompt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>u_sync</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>del_bytes</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>regmatch</name><operator>.</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,

<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_str</name><argument_list>(<argument><expr><name>repl_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"No match at cursor, finding next"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>FRD_REPLACEALL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>u_sync</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>searchflags</name> <init>= <expr><name>SEARCH_MSG</name> <operator>+</operator> <name>SEARCH_MARK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>FRD_REPLACE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>searchflags</name> <operator>+=</operator> <name>SEARCH_START</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>msg_scroll</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>down</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_search</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>searchflags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_search</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>searchflags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>save_did_emsg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <operator>(</operator><name>NORMAL</name> <operator>|</operator> <name>INSERT</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_update_screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>busy</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DROP_FILE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_wingoto_xy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><call><name>Y_2_ROW</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><call><name>X_2_COL</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>mouse_find_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>FAIL_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>wp</name> <operator>!=</operator> <name>curwin</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>win_goto</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>drop_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>cookie</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mch_isdir</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mch_chdir</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>shorten_fnames</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>vim_chdirfile</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"drop"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>shorten_fnames</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_update_menus</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>maketitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush_cursor</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_handle_drop</name><parameter_list>(

<parameter><decl><type><name>int</name> <name>x</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>y</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int_u</name></type> <name>modifiers</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>fnames</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>entered</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>entered</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>entered</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>shorten_filenames</name><argument_list>(<argument><expr><name>fnames</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fnames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name><operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><name><name>fnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" \t\"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><name><name>fnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\ \t\"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_to_input_buf_csi</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>fnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>gui_wingoto_xy</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shorten_filenames</name><argument_list>(<argument><expr><name>fnames</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name>MOUSE_SHIFT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>fnames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name>MOUSE_SHIFT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>mch_isdir</name><argument_list>(<argument><expr><name><name>fnames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>fnames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>handle_drop</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>fnames</name></expr></argument>, <argument><expr><operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name>MOUSE_CTRL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>,

<argument><expr><name>drop_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>entered</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
