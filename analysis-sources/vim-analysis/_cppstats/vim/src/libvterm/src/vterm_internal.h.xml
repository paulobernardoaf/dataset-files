<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\libvterm\src\vterm_internal.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vterm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERNAL</name></cpp:macro> <cpp:value>__attribute__((visibility("internal")))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name></cpp:macro> <cpp:value>__attribute__((unused))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERNAL</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_LOG</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_LOG1</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, s, a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_LOG2</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, s, a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_LOG3</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, s, a, b, c)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_LOG</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_LOG1</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_LOG2</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_LOG3</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESC_S</name></cpp:macro> <cpp:value>"\x1b"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERMED_MAX</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSI_ARGS_MAX</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSI_LEADER_MAX</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>VTermEncoding</name></name></type> <name>VTermEncoding</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>VTermEncoding</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">4</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>VTermEncodingInstance</name>;</typedef>

<struct>struct <name>VTermPen</name>

<block>{

<decl_stmt><decl><type><name>VTermColor</name></type> <name>fg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermColor</name></type> <name>bg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bold</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>underline</name><range>:<expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>italic</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>blink</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>reverse</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>strike</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>font</name><range>:<expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt> 

}</block>;</struct>

<function_decl><type><name>int</name></type> <name>vterm_color_equal</name><parameter_list>(<parameter><decl><type><name>VTermColor</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>VTermColor</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFINE_INLINES</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>USE_INLINE</name></expr></cpp:if>

<function><type><name>INLINE</name> <name>int</name></type> <name>vterm_color_equal</name><parameter_list>(<parameter><decl><type><name>VTermColor</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>VTermColor</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>a</name><operator>.</operator><name>red</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>red</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>green</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>green</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>blue</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>blue</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>VTermState</name>

<block>{

<decl_stmt><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VTermStateCallbacks</name> <modifier>*</modifier></type><name>callbacks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cbdata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VTermParserCallbacks</name> <modifier>*</modifier></type><name>fallbacks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>fbdata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rows</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cols</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermPos</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>at_phantom</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>scrollregion_top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scrollregion_bottom</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCROLLREGION_BOTTOM</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((state)-&gt;scrollregion_bottom &gt; -1 ? (state)-&gt;scrollregion_bottom : (state)-&gt;rows)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>scrollregion_left</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCROLLREGION_LEFT</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((state)-&gt;mode.leftrightmargin ? (state)-&gt;scrollregion_left : 0)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>scrollregion_right</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCROLLREGION_RIGHT</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((state)-&gt;mode.leftrightmargin &amp;&amp; (state)-&gt;scrollregion_right &gt; -1 ? (state)-&gt;scrollregion_right : (state)-&gt;cols)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tabstops</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermLineInfo</name> <modifier>*</modifier></type><name>lineinfo</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROWWIDTH</name><parameter_list>(<parameter><type><name>state</name></type></parameter>,<parameter><type><name>row</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((state)-&gt;lineinfo[(row)].doublewidth ? ((state)-&gt;cols / 2) : (state)-&gt;cols)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THISROWWIDTH</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ROWWIDTH(state, (state)-&gt;pos.row)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>mouse_col</name></decl>, <decl><type ref="prev"/><name>mouse_row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mouse_buttons</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mouse_flags</name></decl>;</decl_stmt>

<enum>enum <block>{ <decl><name>MOUSE_X10</name></decl>, <decl><name>MOUSE_UTF8</name></decl>, <decl><name>MOUSE_SGR</name></decl>, <decl><name>MOUSE_RXVT</name></decl> }</block> <decl><name>mouse_protocol</name></decl>;</enum>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>combine_chars</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>combine_chars_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>combine_width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>VTermPos</name></type> <name>combine_pos</name></decl>;</decl_stmt> 

<struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>keypad</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cursor</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>autowrap</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>insert</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>newline</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cursor_visible</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cursor_blink</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cursor_shape</name><range>:<expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>alt_screen</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>origin</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>screen</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>leftrightmargin</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bracketpaste</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>report_focus</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>modify_other_keys</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block> <decl><name>mode</name></decl>;</struct>

<decl_stmt><decl><type><name>VTermEncodingInstance</name></type> <name><name>encoding</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>encoding_utf8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gl_set</name></decl>, <decl><type ref="prev"/><name>gr_set</name></decl>, <decl><type ref="prev"/><name>gsingle_set</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>VTermPen</name></name></type> <name>pen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermColor</name></type> <name>default_fg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermColor</name></type> <name>default_bg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermColor</name></type> <name><name>colors</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fg_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bg_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bold_is_highbright</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>protected_cell</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>VTermPos</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>VTermPen</name></name></type> <name>pen</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cursor_visible</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cursor_blink</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cursor_shape</name><range>:<expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>

}</block> <decl><name>mode</name></decl>;</struct>

}</block> <decl><name>saved</name></decl>;</struct>

}</block>;</struct>

<typedef>typedef <type><enum>enum <block>{

<decl><name>VTERM_PARSER_OSC</name></decl>,

<decl><name>VTERM_PARSER_DCS</name></decl>,

<decl><name>VTERM_N_PARSER_TYPES</name></decl>

}</block></enum></type> <name>VTermParserStringType</name>;</typedef>

<struct>struct <name>VTerm</name>

<block>{

<decl_stmt><decl><type><name>VTermAllocatorFunctions</name> <modifier>*</modifier></type><name>allocator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>allocdata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rows</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cols</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>utf8</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ctrl8bit</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block> <decl><name>mode</name></decl>;</struct>

<struct>struct <block>{

<enum>enum <name>VTermParserState</name> <block>{

<decl><name>NORMAL</name></decl>,

<decl><name>CSI_LEADER</name></decl>,

<decl><name>CSI_ARGS</name></decl>,

<decl><name>CSI_INTERMED</name></decl>,

<decl><name>ESC</name></decl>,

<decl><name>STRING</name></decl>,

<decl><name>ESC_IN_STRING</name></decl>,

}</block> <decl><name>state</name></decl>;</enum>

<decl_stmt><decl><type><name>int</name></type> <name>intermedlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>intermed</name><index>[<expr><name>INTERMED_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>csi_leaderlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>csi_leader</name><index>[<expr><name>CSI_LEADER_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>csi_argi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name><name>csi_args</name><index>[<expr><name>CSI_ARGS_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VTermParserCallbacks</name> <modifier>*</modifier></type><name>callbacks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cbdata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermParserStringType</name></type> <name>stringtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strbuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>strbuffer_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>strbuffer_cur</name></decl>;</decl_stmt>

}</block> <decl><name>parser</name></decl>;</struct>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>outbuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>outbuffer_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>outbuffer_cur</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_backspace</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>VTermEncoding</name> <block>{

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init</name>) <parameter_list>(<parameter><decl><type><name>VTermEncoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>decode</name>)<parameter_list>(<parameter><decl><type><name>VTermEncoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name><name>cp</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cpi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cplen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>bytes</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<typedef>typedef <type><enum>enum <block>{

<decl><name>ENC_UTF8</name></decl>,

<decl><name>ENC_SINGLE_94</name></decl>

}</block></enum></type> <name>VTermEncodingType</name>;</typedef>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>vterm_allocator_malloc</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_allocator_free</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_push_output_bytes</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_push_output_vsprintf</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_push_output_sprintf</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_push_output_sprintf_ctrl</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>ctrl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_push_output_sprintf_dcs</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_state_free</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_state_newpen</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_state_resetpen</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_state_setpen</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name><name>args</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>vterm_state_getpen</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name><name>args</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_state_savepen</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>save</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <block>{

<decl><name>C1_SS3</name> <init>= <expr><literal type="number">0x8f</literal></expr></init></decl>,

<decl><name>C1_DCS</name> <init>= <expr><literal type="number">0x90</literal></expr></init></decl>,

<decl><name>C1_CSI</name> <init>= <expr><literal type="number">0x9b</literal></expr></init></decl>,

<decl><name>C1_ST</name> <init>= <expr><literal type="number">0x9c</literal></expr></init></decl>,

<decl><name>C1_OSC</name> <init>= <expr><literal type="number">0x9d</literal></expr></init></decl>,

}</block>;</enum>

<function_decl><type><name>void</name></type> <name>vterm_state_push_output_sprintf_CSI</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>vts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_screen_free</name><parameter_list>(<parameter><decl><type><name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VTermEncoding</name> <modifier>*</modifier></type><name>vterm_lookup_encoding</name><parameter_list>(<parameter><decl><type><name>VTermEncodingType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>designation</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>vterm_unicode_width</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>codepoint</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>vterm_unicode_is_combining</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>codepoint</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>vterm_unicode_is_ambiguous</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>codepoint</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>vterm_get_special_pty_type</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

</unit>
