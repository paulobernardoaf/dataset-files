<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\libvterm\src\pen.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vterm_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VTermColor</name></type> <name><name>ansi_colors</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">224</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">224</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">224</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">224</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>ramp6</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xFF</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>ramp24</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x76</literal></expr>,

<expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xEE</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lookup_colour_ansi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>VTermColor</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>col</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>colors</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lookup_colour_palette</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>VTermColor</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>lookup_colour_ansi</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <literal type="number">232</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>index</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>blue</name></name> <operator>=</operator> <name><name>ramp6</name><index>[<expr><name>index</name> <operator>%</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>green</name></name> <operator>=</operator> <name><name>ramp6</name><index>[<expr><name>index</name><operator>/</operator><literal type="number">6</literal> <operator>%</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <name><name>ramp6</name><index>[<expr><name>index</name><operator>/</operator><literal type="number">6</literal><operator>/</operator><literal type="number">6</literal> <operator>%</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>ansi_index</name></name> <operator>=</operator> <name>VTERM_ANSI_INDEX_NONE</name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">232</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>index</name> <operator>-=</operator> <literal type="number">232</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>blue</name></name> <operator>=</operator> <name><name>ramp24</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>green</name></name> <operator>=</operator> <name><name>ramp24</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <name><name>ramp24</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>ansi_index</name></name> <operator>=</operator> <name>VTERM_ANSI_INDEX_NONE</name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lookup_colour</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>palette</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name><name>args</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>, <parameter><decl><type><name>VTermColor</name> <modifier>*</modifier></type><name>col</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>palette</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name>argcount</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>argcount</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>red</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>green</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>blue</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>ansi_index</name></name> <operator>=</operator> <name>VTERM_ANSI_INDEX_NONE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">3</literal></expr>;</return>

<case>case <expr><literal type="number">5</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name>index</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>index</name> <operator>=</operator> <call><name>CSI_ARG_OR</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lookup_colour_palette</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><ternary><condition><expr><name>argcount</name></expr> ?</condition><then> <expr><call><name>CSI_ARG_OR</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>argcount</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>DEBUG_LOG1</name><argument_list>(<argument><expr><literal type="string">"Unrecognised colour palette %d\n"</literal></expr></argument>, <argument><expr><name>palette</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setpenattr</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermAttr</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>VTermValueType</name> <name>type</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>VTermValue</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>type</name> <operator>!=</operator> <call><name>vterm_get_attr_type</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUG_LOG3</name><argument_list>(<argument><expr><literal type="string">"Cannot set attr %d as it has type %d, not type %d\n"</literal></expr></argument>,

<argument><expr><name>attr</name></expr></argument>, <argument><expr><call><name>vterm_get_attr_type</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>callbacks</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>setpenattr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>setpenattr</name></name>)<argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>cbdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setpenattr_bool</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermAttr</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>boolean</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermValue</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>boolean</name></name> <operator>=</operator> <name>boolean</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>VTERM_VALUETYPE_BOOL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setpenattr_int</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermAttr</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>number</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermValue</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>number</name></name> <operator>=</operator> <name>number</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>VTERM_VALUETYPE_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setpenattr_col</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermAttr</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>VTermColor</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermValue</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>VTERM_VALUETYPE_COLOR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_pen_col_ansi</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermAttr</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermColor</name> <modifier>*</modifier></type><name>colp</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>attr</name> <operator>==</operator> <name>VTERM_ATTR_BACKGROUND</name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bg</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>fg</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lookup_colour_ansi</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>colp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_col</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><operator>*</operator><name>colp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>INTERNAL</name> <name>void</name></type> <name>vterm_state_newpen</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>default_fg</name><operator>.</operator><name>red</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>default_fg</name><operator>.</operator><name>green</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>default_fg</name><operator>.</operator><name>blue</name></name> <operator>=</operator> <literal type="number">240</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>default_fg</name><operator>.</operator><name>ansi_index</name></name> <operator>=</operator> <name>VTERM_ANSI_INDEX_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>default_bg</name><operator>.</operator><name>red</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>default_bg</name><operator>.</operator><name>green</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>default_bg</name><operator>.</operator><name>blue</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>default_bg</name><operator>.</operator><name>ansi_index</name></name> <operator>=</operator> <name>VTERM_ANSI_INDEX_DEFAULT</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>colors</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <name><name>ansi_colors</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>INTERNAL</name> <name>void</name></type> <name>vterm_state_resetpen</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bold</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>setpenattr_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_BOLD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>underline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>setpenattr_int</name><argument_list>( <argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_UNDERLINE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>italic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>setpenattr_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_ITALIC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>blink</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>setpenattr_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_BLINK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>reverse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>setpenattr_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_REVERSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>strike</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>setpenattr_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_STRIKE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>font</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>setpenattr_int</name><argument_list>( <argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_FONT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>fg_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>bg_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>fg</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>default_fg</name></name></expr>;</expr_stmt> <expr_stmt><expr><call><name>setpenattr_col</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_FOREGROUND</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>default_fg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>default_bg</name></name></expr>;</expr_stmt> <expr_stmt><expr><call><name>setpenattr_col</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_BACKGROUND</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>default_bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>INTERNAL</name> <name>void</name></type> <name>vterm_state_savepen</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>save</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>save</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>saved</name><operator>.</operator><name>pen</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pen</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>saved</name><operator>.</operator><name>pen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_BOLD</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_int</name><argument_list>( <argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_UNDERLINE</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>underline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_ITALIC</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>italic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_BLINK</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>blink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_REVERSE</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>reverse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_STRIKE</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>strike</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_int</name><argument_list>( <argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_FONT</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_col</name><argument_list>( <argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_FOREGROUND</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>fg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_col</name><argument_list>( <argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_BACKGROUND</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_state_get_default_colors</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermColor</name> <modifier>*</modifier></type><name>default_fg</name></decl></parameter>, <parameter><decl><type><name>VTermColor</name> <modifier>*</modifier></type><name>default_bg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>default_fg</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>default_fg</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>default_bg</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>default_bg</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_state_get_palette_color</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>VTermColor</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>lookup_colour_palette</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_state_set_default_colors</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermColor</name> <modifier>*</modifier></type><name>default_fg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermColor</name> <modifier>*</modifier></type><name>default_bg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>default_fg</name></name> <operator>=</operator> <operator>*</operator><name>default_fg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>default_bg</name></name> <operator>=</operator> <operator>*</operator><name>default_bg</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_state_set_palette_color</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermColor</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>colors</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>colors</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>ansi_index</name> <operator>=</operator> <name>index</name> <operator>+</operator> <name>VTERM_ANSI_INDEX_MIN</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_state_set_bold_highbright</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bold_is_highbright</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>bold_is_highbright</name></name> <operator>=</operator> <name>bold_is_highbright</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>INTERNAL</name> <name>void</name></type> <name>vterm_state_setpen</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name><name>args</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>argi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

<while>while<condition>(<expr><name>argi</name> <operator>&lt;</operator> <name>argcount</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>arg</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>arg</name> <operator>=</operator> <call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>argi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CSI_ARG_MISSING</name></expr>:</case>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<expr_stmt><expr><call><name>vterm_state_resetpen</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bold</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_BOLD</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>fg_index</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>fg_index</name></name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>bold_is_highbright</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_pen_col_ansi</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_FOREGROUND</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>fg_index</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bold</name></name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>italic</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_ITALIC</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>underline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_int</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_UNDERLINE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>blink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_BLINK</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>reverse</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_REVERSE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>strike</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_STRIKE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">10</literal></expr>:</case> <case>case <expr><literal type="number">11</literal></expr>:</case> <case>case <expr><literal type="number">12</literal></expr>:</case> <case>case <expr><literal type="number">13</literal></expr>:</case> <case>case <expr><literal type="number">14</literal></expr>:</case>

<case>case <expr><literal type="number">15</literal></expr>:</case> <case>case <expr><literal type="number">16</literal></expr>:</case> <case>case <expr><literal type="number">17</literal></expr>:</case> <case>case <expr><literal type="number">18</literal></expr>:</case> <case>case <expr><literal type="number">19</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>font</name></name> <operator>=</operator> <call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>argi</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_int</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_FONT</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">21</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>underline</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_int</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_UNDERLINE</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">22</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bold</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_BOLD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">23</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>italic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_ITALIC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">24</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>underline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_int</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_UNDERLINE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">25</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>blink</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_BLINK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">27</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>reverse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_REVERSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">29</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>strike</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_STRIKE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">30</literal></expr>:</case> <case>case <expr><literal type="number">31</literal></expr>:</case> <case>case <expr><literal type="number">32</literal></expr>:</case> <case>case <expr><literal type="number">33</literal></expr>:</case>

<case>case <expr><literal type="number">34</literal></expr>:</case> <case>case <expr><literal type="number">35</literal></expr>:</case> <case>case <expr><literal type="number">36</literal></expr>:</case> <case>case <expr><literal type="number">37</literal></expr>:</case> 

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>argi</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>fg_index</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bold</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>bold_is_highbright</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_pen_col_ansi</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_FOREGROUND</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">38</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>fg_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>argcount</name> <operator>-</operator> <name>argi</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>argi</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>lookup_colour</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>argi</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>args</name><operator>+</operator><name>argi</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>argcount</name><operator>-</operator><name>argi</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>fg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>fg_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_col</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_FOREGROUND</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>fg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">39</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>fg_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>fg</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>default_fg</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_col</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_FOREGROUND</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>fg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">40</literal></expr>:</case> <case>case <expr><literal type="number">41</literal></expr>:</case> <case>case <expr><literal type="number">42</literal></expr>:</case> <case>case <expr><literal type="number">43</literal></expr>:</case>

<case>case <expr><literal type="number">44</literal></expr>:</case> <case>case <expr><literal type="number">45</literal></expr>:</case> <case>case <expr><literal type="number">46</literal></expr>:</case> <case>case <expr><literal type="number">47</literal></expr>:</case> 

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>argi</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>bg_index</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_pen_col_ansi</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_BACKGROUND</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">48</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>bg_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>argcount</name> <operator>-</operator> <name>argi</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>argi</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>lookup_colour</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>argi</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>args</name><operator>+</operator><name>argi</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>argcount</name><operator>-</operator><name>argi</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>bg_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_col</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_BACKGROUND</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">49</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>bg_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bg</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>default_bg</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpenattr_col</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_BACKGROUND</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">90</literal></expr>:</case> <case>case <expr><literal type="number">91</literal></expr>:</case> <case>case <expr><literal type="number">92</literal></expr>:</case> <case>case <expr><literal type="number">93</literal></expr>:</case>

<case>case <expr><literal type="number">94</literal></expr>:</case> <case>case <expr><literal type="number">95</literal></expr>:</case> <case>case <expr><literal type="number">96</literal></expr>:</case> <case>case <expr><literal type="number">97</literal></expr>:</case> 

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>argi</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">90</literal> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>fg_index</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_pen_col_ansi</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_FOREGROUND</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">100</literal></expr>:</case> <case>case <expr><literal type="number">101</literal></expr>:</case> <case>case <expr><literal type="number">102</literal></expr>:</case> <case>case <expr><literal type="number">103</literal></expr>:</case>

<case>case <expr><literal type="number">104</literal></expr>:</case> <case>case <expr><literal type="number">105</literal></expr>:</case> <case>case <expr><literal type="number">106</literal></expr>:</case> <case>case <expr><literal type="number">107</literal></expr>:</case> 

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>argi</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">100</literal> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>bg_index</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_pen_col_ansi</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_BACKGROUND</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DEBUG_LOG1</name><argument_list>(<argument><expr><literal type="string">"libvterm: Unhandled CSI SGR %ld\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>CSI_ARG_HAS_MORE</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>INTERNAL</name> <name>int</name></type> <name>vterm_state_getpen</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name><name>args</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name> <name>argcount</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>argi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bold</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>italic</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>underline</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>blink</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>reverse</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>strike</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>font</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">10</literal> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>font</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>underline</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>fg_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>fg_index</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">30</literal> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>fg_index</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>fg_index</name></name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>fg_index</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">90</literal> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>fg_index</name></name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>fg_index</name></name> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>fg_index</name></name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CSI_ARG_FLAG_MORE</name><operator>|</operator><literal type="number">38</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CSI_ARG_FLAG_MORE</name><operator>|</operator><literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>fg_index</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>fg_index</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>fg</name><operator>.</operator><name>red</name></name> <operator>!=</operator> <name><name>state</name><operator>-&gt;</operator><name>default_fg</name><operator>.</operator><name>red</name></name> <operator>||</operator>

<name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>fg</name><operator>.</operator><name>green</name></name> <operator>!=</operator> <name><name>state</name><operator>-&gt;</operator><name>default_fg</name><operator>.</operator><name>green</name></name> <operator>||</operator>

<name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>fg</name><operator>.</operator><name>blue</name></name> <operator>!=</operator> <name><name>state</name><operator>-&gt;</operator><name>default_fg</name><operator>.</operator><name>blue</name></name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CSI_ARG_FLAG_MORE</name><operator>|</operator><literal type="number">38</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CSI_ARG_FLAG_MORE</name><operator>|</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CSI_ARG_FLAG_MORE</name> <operator>|</operator> <name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>fg</name><operator>.</operator><name>red</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CSI_ARG_FLAG_MORE</name> <operator>|</operator> <name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>fg</name><operator>.</operator><name>green</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>fg</name><operator>.</operator><name>blue</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>bg_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>bg_index</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">40</literal> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>bg_index</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>bg_index</name></name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>bg_index</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">100</literal> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>bg_index</name></name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>bg_index</name></name> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>bg_index</name></name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CSI_ARG_FLAG_MORE</name><operator>|</operator><literal type="number">48</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CSI_ARG_FLAG_MORE</name><operator>|</operator><literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>bg_index</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>bg_index</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bg</name><operator>.</operator><name>red</name></name> <operator>!=</operator> <name><name>state</name><operator>-&gt;</operator><name>default_bg</name><operator>.</operator><name>red</name></name> <operator>||</operator>

<name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bg</name><operator>.</operator><name>green</name></name> <operator>!=</operator> <name><name>state</name><operator>-&gt;</operator><name>default_bg</name><operator>.</operator><name>green</name></name> <operator>||</operator>

<name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bg</name><operator>.</operator><name>blue</name></name> <operator>!=</operator> <name><name>state</name><operator>-&gt;</operator><name>default_bg</name><operator>.</operator><name>blue</name></name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CSI_ARG_FLAG_MORE</name><operator>|</operator><literal type="number">48</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CSI_ARG_FLAG_MORE</name><operator>|</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CSI_ARG_FLAG_MORE</name> <operator>|</operator> <name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bg</name><operator>.</operator><name>red</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CSI_ARG_FLAG_MORE</name> <operator>|</operator> <name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bg</name><operator>.</operator><name>green</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><name>argi</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bg</name><operator>.</operator><name>blue</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>argi</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vterm_state_get_penattr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermAttr</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>VTermValue</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VTERM_ATTR_BOLD</name></expr>:</case>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>boolean</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bold</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VTERM_ATTR_UNDERLINE</name></expr>:</case>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>underline</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VTERM_ATTR_ITALIC</name></expr>:</case>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>boolean</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>italic</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VTERM_ATTR_BLINK</name></expr>:</case>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>boolean</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>blink</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VTERM_ATTR_REVERSE</name></expr>:</case>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>boolean</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>reverse</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VTERM_ATTR_STRIKE</name></expr>:</case>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>boolean</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>strike</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VTERM_ATTR_FONT</name></expr>:</case>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>font</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VTERM_ATTR_FOREGROUND</name></expr>:</case>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>fg</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VTERM_ATTR_BACKGROUND</name></expr>:</case>

<expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pen</name><operator>.</operator><name>bg</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VTERM_N_ATTRS</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
