<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\libvterm\src\keyboard.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vterm_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>vterm_is_modify_other_keys</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>vt</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>modify_other_keys</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_keyboard_unichar</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>VTermModifier</name></type> <name>mod</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>needs_CSIu</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>modify_other_keys</name></name> <operator>&amp;&amp;</operator> <name>mod</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"27;%d;%d~"</literal></expr></argument>, <argument><expr><name>mod</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mod</name> <operator>&amp;=</operator> <operator>~</operator><name>VTERM_MOD_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>mod</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seqlen</name> <init>= <expr><call><name>fill_utf8</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vterm_push_output_bytes</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>seqlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> <case>case <expr><literal type="char">'j'</literal></expr>:</case> <case>case <expr><literal type="char">'m'</literal></expr>:</case> <case>case <expr><literal type="char">'['</literal></expr>:</case>

<expr_stmt><expr><name>needs_CSIu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case> <case>case <expr><literal type="char">']'</literal></expr>:</case> <case>case <expr><literal type="char">'^'</literal></expr>:</case> <case>case <expr><literal type="char">'_'</literal></expr>:</case>

<expr_stmt><expr><name>needs_CSIu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<expr_stmt><expr><name>needs_CSIu</name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>mod</name> <operator>&amp;</operator> <name>VTERM_MOD_SHIFT</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>needs_CSIu</name> <operator>=</operator> <operator>(</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'a'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'z'</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>needs_CSIu</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>mod</name> <operator>&amp;</operator> <operator>~</operator><name>VTERM_MOD_ALT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"%d;%du"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mod</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>mod</name> <operator>&amp;</operator> <name>VTERM_MOD_CTRL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>&amp;=</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vterm_push_output_sprintf</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><literal type="string">"%s%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>mod</name> <operator>&amp;</operator> <name>VTERM_MOD_ALT</name></expr> ?</condition><then> <expr><name>ESC_S</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<enum>enum <block>{

<decl><name>KEYCODE_NONE</name></decl>,

<decl><name>KEYCODE_LITERAL</name></decl>,

<decl><name>KEYCODE_TAB</name></decl>,

<decl><name>KEYCODE_ENTER</name></decl>,

<decl><name>KEYCODE_SS3</name></decl>,

<decl><name>KEYCODE_CSI</name></decl>,

<decl><name>KEYCODE_CSI_CURSOR</name></decl>,

<decl><name>KEYCODE_CSINUM</name></decl>,

<decl><name>KEYCODE_KEYPAD</name></decl>,

}</block> <decl><name>type</name></decl>;</enum>

<decl_stmt><decl><type><name>char</name></type> <name>literal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>csinum</name></decl>;</decl_stmt>

}</block></struct></type> <name>keycodes_s</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>keycodes_s</name></type> <name><name>keycodes</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>KEYCODE_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_ENTER</name></expr>, <expr><literal type="char">'\r'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_TAB</name></expr>, <expr><literal type="char">'\t'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_LITERAL</name></expr>, <expr><literal type="char">'\x7f'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_LITERAL</name></expr>, <expr><literal type="char">'\x1b'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSI_CURSOR</name></expr>, <expr><literal type="char">'A'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSI_CURSOR</name></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSI_CURSOR</name></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSI_CURSOR</name></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSINUM</name></expr>, <expr><literal type="char">'~'</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSINUM</name></expr>, <expr><literal type="char">'~'</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSI_CURSOR</name></expr>, <expr><literal type="char">'H'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSI_CURSOR</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSINUM</name></expr>, <expr><literal type="char">'~'</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSINUM</name></expr>, <expr><literal type="char">'~'</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>keycodes_s</name></type> <name><name>keycodes_fn</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>KEYCODE_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSI_CURSOR</name></expr>, <expr><literal type="char">'P'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSI_CURSOR</name></expr>, <expr><literal type="char">'Q'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSI_CURSOR</name></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSI_CURSOR</name></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSINUM</name></expr>, <expr><literal type="char">'~'</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSINUM</name></expr>, <expr><literal type="char">'~'</literal></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSINUM</name></expr>, <expr><literal type="char">'~'</literal></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSINUM</name></expr>, <expr><literal type="char">'~'</literal></expr>, <expr><literal type="number">19</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSINUM</name></expr>, <expr><literal type="char">'~'</literal></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSINUM</name></expr>, <expr><literal type="char">'~'</literal></expr>, <expr><literal type="number">21</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSINUM</name></expr>, <expr><literal type="char">'~'</literal></expr>, <expr><literal type="number">23</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_CSINUM</name></expr>, <expr><literal type="char">'~'</literal></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>keycodes_s</name></type> <name><name>keycodes_kp</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>KEYCODE_KEYPAD</name></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'p'</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_KEYPAD</name></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'q'</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_KEYPAD</name></expr>, <expr><literal type="char">'2'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_KEYPAD</name></expr>, <expr><literal type="char">'3'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_KEYPAD</name></expr>, <expr><literal type="char">'4'</literal></expr>, <expr><literal type="char">'t'</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_KEYPAD</name></expr>, <expr><literal type="char">'5'</literal></expr>, <expr><literal type="char">'u'</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_KEYPAD</name></expr>, <expr><literal type="char">'6'</literal></expr>, <expr><literal type="char">'v'</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_KEYPAD</name></expr>, <expr><literal type="char">'7'</literal></expr>, <expr><literal type="char">'w'</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_KEYPAD</name></expr>, <expr><literal type="char">'8'</literal></expr>, <expr><literal type="char">'x'</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_KEYPAD</name></expr>, <expr><literal type="char">'9'</literal></expr>, <expr><literal type="char">'y'</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_KEYPAD</name></expr>, <expr><literal type="char">'*'</literal></expr>, <expr><literal type="char">'j'</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_KEYPAD</name></expr>, <expr><literal type="char">'+'</literal></expr>, <expr><literal type="char">'k'</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_KEYPAD</name></expr>, <expr><literal type="char">','</literal></expr>, <expr><literal type="char">'l'</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_KEYPAD</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><literal type="char">'m'</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_KEYPAD</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_KEYPAD</name></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_KEYPAD</name></expr>, <expr><literal type="char">'\n'</literal></expr>, <expr><literal type="char">'M'</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>KEYCODE_KEYPAD</name></expr>, <expr><literal type="char">'='</literal></expr>, <expr><literal type="char">'X'</literal></expr> }</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>vterm_keyboard_key</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>VTermKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>VTermModifier</name></type> <name>mod</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>keycodes_s</name></type> <name>k</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>key</name> <operator>==</operator> <name>VTERM_KEY_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>key</name> <operator>&lt;</operator> <name>VTERM_KEY_FUNCTION_0</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>key</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>keycodes</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>keycodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>keycodes</name><index>[<expr><name>key</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>key</name> <operator>&gt;=</operator> <name>VTERM_KEY_FUNCTION_0</name> <operator>&amp;&amp;</operator> <name>key</name> <operator>&lt;=</operator> <name>VTERM_KEY_FUNCTION_MAX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>key</name> <operator>-</operator> <name>VTERM_KEY_FUNCTION_0</name><operator>)</operator> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>keycodes_fn</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>keycodes_fn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>keycodes_fn</name><index>[<expr><name>key</name> <operator>-</operator> <name>VTERM_KEY_FUNCTION_0</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>key</name> <operator>&gt;=</operator> <name>VTERM_KEY_KP_0</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>key</name> <operator>-</operator> <name>VTERM_KEY_KP_0</name><operator>)</operator> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>keycodes_kp</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>keycodes_kp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>keycodes_kp</name><index>[<expr><name>key</name> <operator>-</operator> <name>VTERM_KEY_KP_0</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>k</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>KEYCODE_NONE</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>KEYCODE_TAB</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>mod</name> <operator>==</operator> <name>VTERM_MOD_SHIFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>mod</name> <operator>&amp;</operator> <name>VTERM_MOD_SHIFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"1;%dZ"</literal></expr></argument>, <argument><expr><name>mod</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>case_LITERAL</name>;</goto></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>KEYCODE_ENTER</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>newline</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>case_LITERAL</name>;</goto></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>KEYCODE_LITERAL</name></expr>:</case> <label><name>case_LITERAL</name>:</label>

<if_stmt><if>if<condition>(<expr><name>mod</name> <operator>&amp;</operator> <operator>(</operator><name>VTERM_MOD_SHIFT</name><operator>|</operator><name>VTERM_MOD_CTRL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"%d;%du"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>literal</name></name></expr></argument>, <argument><expr><name>mod</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><ternary><condition><expr><name>mod</name> <operator>&amp;</operator> <name>VTERM_MOD_ALT</name></expr> ?</condition><then> <expr><name>ESC_S</name> <literal type="string">"%c"</literal></expr> </then><else>: <expr><literal type="string">"%c"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>KEYCODE_SS3</name></expr>:</case> <label><name>case_SS3</name>:</label>

<if_stmt><if>if<condition>(<expr><name>mod</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>C1_SS3</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>case_CSI</name>;</goto></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>KEYCODE_CSI</name></expr>:</case> <label><name>case_CSI</name>:</label>

<if_stmt><if>if<condition>(<expr><name>mod</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"1;%d%c"</literal></expr></argument>, <argument><expr><name>mod</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>KEYCODE_CSINUM</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>mod</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"%d%c"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>csinum</name></name></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"%d;%d%c"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>csinum</name></name></expr></argument>, <argument><expr><name>mod</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>literal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>KEYCODE_CSI_CURSOR</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>cursor</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>case_SS3</name>;</goto></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>case_CSI</name>;</goto></block_content></block></else></if_stmt>

<case>case <expr><name>KEYCODE_KEYPAD</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>keypad</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>k</name><operator>.</operator><name>literal</name></name> <operator>=</operator> <name><name>k</name><operator>.</operator><name>csinum</name></name></expr>;</expr_stmt>

<goto>goto <name>case_SS3</name>;</goto>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>case_LITERAL</name>;</goto></block_content></block></else></if_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_keyboard_start_paste</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>bracketpaste</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"200~"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_keyboard_end_paste</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>bracketpaste</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"201~"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
