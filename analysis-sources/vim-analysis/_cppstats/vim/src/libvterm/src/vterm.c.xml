<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\libvterm\src\vterm.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_INLINES</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vterm_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>default_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>allocdata</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>default_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>allocdata</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VTermAllocatorFunctions</name></type> <name>default_allocator</name> <init>= <expr><block>{

<expr><operator>&amp;</operator><name>default_malloc</name></expr>, 

<expr><operator>&amp;</operator><name>default_free</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>VTerm</name> <modifier>*</modifier></type><name>vterm_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vterm_new_with_allocator</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>default_allocator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VTerm</name> <modifier>*</modifier></type><name>vterm_new_with_allocator</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>VTermAllocatorFunctions</name> <modifier>*</modifier></type><name>funcs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>allocdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><call>(<modifier>*</modifier><name><name>funcs</name><operator>-&gt;</operator><name>malloc</name></name>)<argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VTerm</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocdata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>allocator</name></name> <operator>=</operator> <name>funcs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>allocdata</name></name> <operator>=</operator> <name>allocdata</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>rows</name></name> <operator>=</operator> <name>rows</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <name>cols</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>cbdata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>strbuffer_len</name></name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>strbuffer_cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>strbuffer</name></name> <operator>=</operator> <call><name>vterm_allocator_malloc</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>strbuffer_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>strbuffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vterm_allocator_free</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer_len</name></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer</name></name> <operator>=</operator> <call><name>vterm_allocator_malloc</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vterm_allocator_free</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>strbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_allocator_free</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>vt</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_free</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>screen</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_screen_free</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>screen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_state_free</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vterm_allocator_free</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>strbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_allocator_free</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_allocator_free</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>INTERNAL</name> <name>void</name> <modifier>*</modifier></type><name>vterm_allocator_malloc</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call>(<modifier>*</modifier><name><name>vt</name><operator>-&gt;</operator><name>allocator</name><operator>-&gt;</operator><name>malloc</name></name>)<argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>allocdata</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>INTERNAL</name> <name>void</name></type> <name>vterm_allocator_free</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>vt</name><operator>-&gt;</operator><name>allocator</name><operator>-&gt;</operator><name>free</name></name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>allocdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_get_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rowsp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>colsp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>rowsp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>rowsp</name> <operator>=</operator> <name><name>vt</name><operator>-&gt;</operator><name>rows</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>colsp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>colsp</name> <operator>=</operator> <name><name>vt</name><operator>-&gt;</operator><name>cols</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_set_size</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>rows</name></name> <operator>=</operator> <name>rows</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <name>cols</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name></name> <operator>&amp;&amp;</operator> <name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name><operator>-&gt;</operator><name>resize</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>callbacks</name><operator>-&gt;</operator><name>resize</name></name>)<argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>cbdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vterm_get_utf8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>vt</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>utf8</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_set_utf8</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_utf8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>utf8</name></name> <operator>=</operator> <name>is_utf8</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>INTERNAL</name> <name>void</name></type> <name>vterm_push_output_bytes</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>vt</name><operator>-&gt;</operator><name>outbuffer_len</name></name> <operator>-</operator> <name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUG_LOG</name><argument_list>(<argument><expr><literal type="string">"vterm_push_output(): buffer overflow; truncating output\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>vt</name><operator>-&gt;</operator><name>outbuffer_len</name></name> <operator>-</operator> <name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer</name></name> <operator>+</operator> <name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>outbuffer_is_full</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name> <operator>&gt;=</operator> <name><name>vt</name><operator>-&gt;</operator><name>outbuffer_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_XOPEN_SOURCE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_XOPEN_SOURCE</name> <operator>&gt;=</operator> <literal type="number">500</literal><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_ISOC99_SOURCE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_BSD_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VSNPRINTF</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSNPRINTF</name></cpp:macro> <cpp:value>vsnprintf</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSNPRINTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>VSNPRINTF</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>str_m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>INTERNAL</name> <name>void</name></type> <name>vterm_push_output_vsprintf</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>written</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VSNPRINTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>outbuffer_is_full</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUG_LOG</name><argument_list>(<argument><expr><literal type="string">"vterm_push_output(): buffer overflow; truncating output\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VSNPRINTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>VSNPRINTF</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer</name></name> <operator>+</operator> <name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name></expr></argument>,

<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer_len</name></name> <operator>-</operator> <name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name></expr></argument>,

<argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>written</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>vt</name><operator>-&gt;</operator><name>outbuffer_len</name></name> <operator>-</operator> <name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name> <operator>=</operator> <name><name>vt</name><operator>-&gt;</operator><name>outbuffer_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name> <operator>+=</operator> <name>written</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>vsprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>written</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>vt</name><operator>-&gt;</operator><name>outbuffer_len</name></name> <operator>-</operator> <name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>written</name> <operator>=</operator> <name><name>vt</name><operator>-&gt;</operator><name>outbuffer_len</name></name> <operator>-</operator> <name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>written</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer</name></name> <operator>+</operator> <name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>written</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name> <operator>+=</operator> <name>written</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>INTERNAL</name> <name>void</name></type> <name>vterm_push_output_sprintf</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_push_output_vsprintf</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>INTERNAL</name> <name>void</name></type> <name>vterm_push_output_sprintf_ctrl</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>ctrl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>orig_cur</name> <init>= <expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ctrl</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vt</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>ctrl8bit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>ESC_S</name> <literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>ctrl</name> <operator>-</operator> <literal type="number">0x40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>ctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_push_output_vsprintf</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>outbuffer_is_full</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name> <operator>=</operator> <name>orig_cur</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>INTERNAL</name> <name>void</name></type> <name>vterm_push_output_sprintf_dcs</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>orig_cur</name> <init>= <expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>vt</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>ctrl8bit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>ESC_S</name> <literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>C1_DCS</name> <operator>-</operator> <literal type="number">0x40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>C1_DCS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_push_output_vsprintf</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>C1_ST</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>outbuffer_is_full</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name> <operator>=</operator> <name>orig_cur</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>vterm_output_get_buffer_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer_len</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>vterm_output_get_buffer_current</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>vterm_output_get_buffer_remaining</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer_len</name></name> <operator>-</operator> <name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>vterm_output_read</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer</name></name></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>outbuffer_cur</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VTermValueType</name></type> <name>vterm_get_attr_type</name><parameter_list>(<parameter><decl><type><name>VTermAttr</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VTERM_ATTR_BOLD</name></expr>:</case> <return>return <expr><name>VTERM_VALUETYPE_BOOL</name></expr>;</return>

<case>case <expr><name>VTERM_ATTR_UNDERLINE</name></expr>:</case> <return>return <expr><name>VTERM_VALUETYPE_INT</name></expr>;</return>

<case>case <expr><name>VTERM_ATTR_ITALIC</name></expr>:</case> <return>return <expr><name>VTERM_VALUETYPE_BOOL</name></expr>;</return>

<case>case <expr><name>VTERM_ATTR_BLINK</name></expr>:</case> <return>return <expr><name>VTERM_VALUETYPE_BOOL</name></expr>;</return>

<case>case <expr><name>VTERM_ATTR_REVERSE</name></expr>:</case> <return>return <expr><name>VTERM_VALUETYPE_BOOL</name></expr>;</return>

<case>case <expr><name>VTERM_ATTR_STRIKE</name></expr>:</case> <return>return <expr><name>VTERM_VALUETYPE_BOOL</name></expr>;</return>

<case>case <expr><name>VTERM_ATTR_FONT</name></expr>:</case> <return>return <expr><name>VTERM_VALUETYPE_INT</name></expr>;</return>

<case>case <expr><name>VTERM_ATTR_FOREGROUND</name></expr>:</case> <return>return <expr><name>VTERM_VALUETYPE_COLOR</name></expr>;</return>

<case>case <expr><name>VTERM_ATTR_BACKGROUND</name></expr>:</case> <return>return <expr><name>VTERM_VALUETYPE_COLOR</name></expr>;</return>

<case>case <expr><name>VTERM_N_ATTRS</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><name>VTermValueType</name></type> <name>vterm_get_prop_type</name><parameter_list>(<parameter><decl><type><name>VTermProp</name></type> <name>prop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>prop</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VTERM_PROP_CURSORVISIBLE</name></expr>:</case> <return>return <expr><name>VTERM_VALUETYPE_BOOL</name></expr>;</return>

<case>case <expr><name>VTERM_PROP_CURSORBLINK</name></expr>:</case> <return>return <expr><name>VTERM_VALUETYPE_BOOL</name></expr>;</return>

<case>case <expr><name>VTERM_PROP_ALTSCREEN</name></expr>:</case> <return>return <expr><name>VTERM_VALUETYPE_BOOL</name></expr>;</return>

<case>case <expr><name>VTERM_PROP_TITLE</name></expr>:</case> <return>return <expr><name>VTERM_VALUETYPE_STRING</name></expr>;</return>

<case>case <expr><name>VTERM_PROP_ICONNAME</name></expr>:</case> <return>return <expr><name>VTERM_VALUETYPE_STRING</name></expr>;</return>

<case>case <expr><name>VTERM_PROP_REVERSE</name></expr>:</case> <return>return <expr><name>VTERM_VALUETYPE_BOOL</name></expr>;</return>

<case>case <expr><name>VTERM_PROP_CURSORSHAPE</name></expr>:</case> <return>return <expr><name>VTERM_VALUETYPE_INT</name></expr>;</return>

<case>case <expr><name>VTERM_PROP_MOUSE</name></expr>:</case> <return>return <expr><name>VTERM_VALUETYPE_INT</name></expr>;</return>

<case>case <expr><name>VTERM_PROP_CURSORCOLOR</name></expr>:</case> <return>return <expr><name>VTERM_VALUETYPE_STRING</name></expr>;</return>

<case>case <expr><name>VTERM_N_PROPS</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_scroll_rect</name><parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>rect</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>downward</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>rightward</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>moverect</name>)<parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>VTermRect</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>eraserect</name>)<parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>rect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>selective</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermRect</name></type> <name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermRect</name></type> <name>dest</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>downward</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>||</operator>

<call><name>abs</name><argument_list>(<argument><expr><name>rightward</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>start_col</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>eraserect</name>)<argument_list>(<argument><expr><name>rect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rightward</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>start_col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>-</operator> <name>rightward</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>+</operator> <name>rightward</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>end_col</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>leftward</name> <init>= <expr><operator>-</operator><name>rightward</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dest</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>+</operator> <name>leftward</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>end_col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>start_col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>-</operator> <name>leftward</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>downward</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>start_row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>-</operator> <name>downward</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>+</operator> <name>downward</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>end_row</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>upward</name> <init>= <expr><operator>-</operator><name>downward</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dest</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>+</operator> <name>upward</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>end_row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>start_row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>-</operator> <name>upward</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>moverect</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>moverect</name>)<argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>downward</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>-</operator> <name>downward</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>downward</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>-</operator> <name>downward</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rightward</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>-</operator> <name>rightward</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>rightward</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>-</operator> <name>rightward</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>eraserect</name>)<argument_list>(<argument><expr><name>rect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_copy_cells</name><parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>dest</name></decl></parameter>,

<parameter><decl><type><name>VTermRect</name></type> <name>src</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>copycell</name>)<parameter_list>(<parameter><decl><type><name>VTermPos</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>downward</name> <init>= <expr><name><name>src</name><operator>.</operator><name>start_row</name></name> <operator>-</operator> <name><name>dest</name><operator>.</operator><name>start_row</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rightward</name> <init>= <expr><name><name>src</name><operator>.</operator><name>start_col</name></name> <operator>-</operator> <name><name>dest</name><operator>.</operator><name>start_col</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>init_row</name></decl>, <decl><type ref="prev"/><name>test_row</name></decl>, <decl><type ref="prev"/><name>init_col</name></decl>, <decl><type ref="prev"/><name>test_col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inc_row</name></decl>, <decl><type ref="prev"/><name>inc_col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermPos</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>downward</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>init_row</name> <operator>=</operator> <name><name>dest</name><operator>.</operator><name>end_row</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>test_row</name> <operator>=</operator> <name><name>dest</name><operator>.</operator><name>start_row</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>inc_row</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>init_row</name> <operator>=</operator> <name><name>dest</name><operator>.</operator><name>start_row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>test_row</name> <operator>=</operator> <name><name>dest</name><operator>.</operator><name>end_row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>inc_row</name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rightward</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>init_col</name> <operator>=</operator> <name><name>dest</name><operator>.</operator><name>end_col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>test_col</name> <operator>=</operator> <name><name>dest</name><operator>.</operator><name>start_col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>inc_col</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>init_col</name> <operator>=</operator> <name><name>dest</name><operator>.</operator><name>start_col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>test_col</name> <operator>=</operator> <name><name>dest</name><operator>.</operator><name>end_col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>inc_col</name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for<control>(<init><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name>init_row</name></expr>;</init> <condition><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>!=</operator> <name>test_row</name></expr>;</condition> <incr><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>+=</operator> <name>inc_row</name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>init_col</name></expr>;</init> <condition><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <name>test_col</name></expr>;</condition> <incr><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <name>inc_col</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VTermPos</name></type> <name>srcpos</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>srcpos</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>row</name></name> <operator>+</operator> <name>downward</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name>rightward</name></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>copycell</name>)<argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>srcpos</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></function>

</unit>
