<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\libvterm\src\state.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vterm_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strneq</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(strncmp(a,b,n)==0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>DEBUG</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_GLYPH_COMBINE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>on_resize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>putglyph</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>chars</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermGlyphInfo</name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>chars</name></name> <operator>=</operator> <name>chars</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>protected_cell</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>protected_cell</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>dwl</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>lineinfo</name><index>[<expr><name><name>pos</name><operator>.</operator><name>row</name></name></expr>]</index></name><operator>.</operator><name>doublewidth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>dhl</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>lineinfo</name><index>[<expr><name><name>pos</name><operator>.</operator><name>row</name></name></expr>]</index></name><operator>.</operator><name>doubleheight</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>callbacks</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>putglyph</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>putglyph</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>cbdata</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUG_LOG3</name><argument_list>(<argument><expr><literal type="string">"libvterm: Unhandled putglyph U+%04x at (%d,%d)\n"</literal></expr></argument>, <argument><expr><name><name>chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>updatecursor</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name> <modifier>*</modifier></type><name>oldpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cancel_phantom</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name><name>oldpos</name><operator>-&gt;</operator><name>col</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name><name>oldpos</name><operator>-&gt;</operator><name>row</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>cancel_phantom</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>callbacks</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>movecursor</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>movecursor</name></name>)<argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>*</operator><name>oldpos</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>cursor_visible</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>cbdata</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermRect</name></type> <name>rect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>selective</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>callbacks</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>erase</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>erase</name></name>)<argument_list>(<argument><expr><name>rect</name></expr></argument>, <argument><expr><name>selective</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>cbdata</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VTermState</name> <modifier>*</modifier></type><name>vterm_state_new</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><call><name>vterm_allocator_malloc</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VTermState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name> <operator>=</operator> <name>vt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>rows</name></name> <operator>=</operator> <name><name>vt</name><operator>-&gt;</operator><name>rows</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <name><name>vt</name><operator>-&gt;</operator><name>cols</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_buttons</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_protocol</name></name> <operator>=</operator> <name>MOUSE_X10</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>callbacks</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>cbdata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_state_newpen</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>bold_is_highbright</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>state</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>INTERNAL</name> <name>void</name></type> <name>vterm_state_free</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vterm_allocator_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>tabstops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_allocator_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>lineinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_allocator_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_allocator_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scroll</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermRect</name></type> <name>rect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>downward</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rightward</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rows</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cols</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>downward</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>rightward</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rows</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>start_row</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>downward</name> <operator>&gt;</operator> <name>rows</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>downward</name> <operator>=</operator> <name>rows</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>downward</name> <operator>&lt;</operator> <operator>-</operator><name>rows</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>downward</name> <operator>=</operator> <operator>-</operator><name>rows</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>start_col</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rightward</name> <operator>&gt;</operator> <name>cols</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rightward</name> <operator>=</operator> <name>cols</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>rightward</name> <operator>&lt;</operator> <operator>-</operator><name>cols</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rightward</name> <operator>=</operator> <operator>-</operator><name>cols</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>cols</name></name> <operator>&amp;&amp;</operator> <name>rightward</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>-</operator> <call><name>abs</name><argument_list>(<argument><expr><name>downward</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>downward</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lineinfo</name></name> <operator>+</operator> <name><name>rect</name><operator>.</operator><name>start_row</name></name></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lineinfo</name></name> <operator>+</operator> <name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>+</operator> <name>downward</name></expr></argument>,

<argument><expr><name>height</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lineinfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lineinfo</name></name> <operator>+</operator> <name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>-</operator> <name>downward</name></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lineinfo</name></name> <operator>+</operator> <name><name>rect</name><operator>.</operator><name>start_row</name></name></expr></argument>,

<argument><expr><name>height</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>lineinfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>callbacks</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>scrollrect</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>scrollrect</name></name>)<argument_list>(<argument><expr><name>rect</name></expr></argument>, <argument><expr><name>downward</name></expr></argument>, <argument><expr><name>rightward</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>cbdata</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>callbacks</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_scroll_rect</name><argument_list>(<argument><expr><name>rect</name></expr></argument>, <argument><expr><name>downward</name></expr></argument>, <argument><expr><name>rightward</name></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>moverect</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>erase</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>cbdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>linefeed</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>==</operator> <call><name>SCROLLREGION_BOTTOM</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VTermRect</name></type> <name>rect</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <call><name>SCROLLREGION_BOTTOM</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <call><name>SCROLLREGION_LEFT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <call><name>SCROLLREGION_RIGHT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scroll</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>rows</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>grow_combine_buffer</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_size</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars_size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>new_chars</name> <init>= <expr><call><name>vterm_allocator_malloc</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>new_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>new_chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_chars</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars_size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>new_chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_allocator_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars</name></name> <operator>=</operator> <name>new_chars</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars_size</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_col_tabstop</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mask</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>col</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>tabstops</name><index>[<expr><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_col_tabstop</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mask</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>col</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>tabstops</name><index>[<expr><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>mask</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_col_tabstop</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mask</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>col</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>tabstops</name><index>[<expr><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_cursor_in_scrollregion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name> <operator>||</operator>

<name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>&gt;=</operator> <call><name>SCROLLREGION_BOTTOM</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <call><name>SCROLLREGION_LEFT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <call><name>SCROLLREGION_RIGHT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tab</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while<condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>direction</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <call><name>THISROWWIDTH</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>direction</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>is_col_tabstop</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_FORCE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORCE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DWL_OFF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DWL_ON</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DHL_OFF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DHL_TOP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DHL_BOTTOM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_lineinfo</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dwl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dhl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermLineInfo</name></type> <name>info</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>lineinfo</name><index>[<expr><name>row</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>dwl</name> <operator>==</operator> <name>DWL_OFF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>doublewidth</name></name> <operator>=</operator> <name>DWL_OFF</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>dwl</name> <operator>==</operator> <name>DWL_ON</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>doublewidth</name></name> <operator>=</operator> <name>DWL_ON</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>dhl</name> <operator>==</operator> <name>DHL_OFF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>doubleheight</name></name> <operator>=</operator> <name>DHL_OFF</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>dhl</name> <operator>==</operator> <name>DHL_TOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>doubleheight</name></name> <operator>=</operator> <name>DHL_TOP</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>dhl</name> <operator>==</operator> <name>DHL_BOTTOM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>doubleheight</name></name> <operator>=</operator> <name>DHL_BOTTOM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>callbacks</name></name> <operator>&amp;&amp;</operator>

<name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>setlineinfo</name></name> <operator>&amp;&amp;</operator>

<call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>setlineinfo</name></name>)<argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>lineinfo</name></name> <operator>+</operator> <name>row</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>cbdata</name></name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <name>force</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lineinfo</name><index>[<expr><name>row</name></expr>]</index></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_text</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>bytes</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>codepoints</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>npoints</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>eaten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermEncodingInstance</name> <modifier>*</modifier></type><name>encoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermPos</name></type> <name>oldpos</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>codepoints</name> <operator>=</operator> <call><name>vterm_allocator_malloc</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>codepoints</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>encoding</name> <operator>=</operator>

<ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>gsingle_set</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>encoding</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>gsingle_set</name></name></expr>]</index></name></expr> </then><else>:

<expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name><name>bytes</name><index>[<expr><name>eaten</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>encoding</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>gl_set</name></name></expr>]</index></name></expr> </then><else>:

<expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>utf8</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>encoding_utf8</name></name></expr> </then><else>:

<expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>encoding</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>gr_set</name></name></expr>]</index></name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>encoding</name><operator>-&gt;</operator><name>enc</name><operator>-&gt;</operator><name>decode</name></name>)<argument_list>(<argument><expr><name><name>encoding</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name><name>encoding</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name>codepoints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>npoints</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>gsingle_set</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></else></ternary></expr></argument>,

<argument><expr><name>bytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eaten</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>npoints</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vterm_allocator_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>codepoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>eaten</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>gsingle_set</name></name> <operator>&amp;&amp;</operator> <name>npoints</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>gsingle_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>vterm_unicode_is_combining</name><argument_list>(<argument><expr><name><name>codepoints</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>combine_pos</name><operator>.</operator><name>row</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>combine_pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>combine_width</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_GLYPH_COMBINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>printpos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DEBUG: COMBINING SPLIT GLYPH of chars {"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>printpos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars</name><index>[<expr><name>printpos</name></expr>]</index></name></expr>;</condition> <incr><expr><name>printpos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"U+%04x "</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars</name><index>[<expr><name>printpos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"} + {"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>saved_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars</name><index>[<expr><name>saved_i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>saved_i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>npoints</name> <operator>&amp;&amp;</operator> <call><name>vterm_unicode_is_combining</name><argument_list>(<argument><expr><name><name>codepoints</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>saved_i</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>combine_chars_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grow_combine_buffer</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars</name><index>[<expr><name>saved_i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>codepoints</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>saved_i</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>combine_chars_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grow_combine_buffer</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars</name><index>[<expr><name>saved_i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_GLYPH_COMBINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for<control>(<init>;</init> <condition><expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars</name><index>[<expr><name>printpos</name></expr>]</index></name></expr>;</condition> <incr><expr><name>printpos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"U+%04x "</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars</name><index>[<expr><name>printpos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>putglyph</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>combine_width</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>combine_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>DEBUG_LOG</name><argument_list>(<argument><expr><literal type="string">"libvterm: TODO: Skip over split char+combining\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>npoints</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>glyph_starts</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>glyph_ends</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>chars</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>glyph_ends</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>glyph_ends</name> <operator>&lt;</operator> <name>npoints</name></expr>;</condition> <incr><expr><name>glyph_ends</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>vterm_unicode_is_combining</name><argument_list>(<argument><expr><name><name>codepoints</name><index>[<expr><name>glyph_ends</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>chars</name> <operator>=</operator> <call><name>vterm_allocator_malloc</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>glyph_ends</name> <operator>-</operator> <name>glyph_starts</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chars</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>glyph_ends</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>this_width</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>vterm_get_special_pty_type</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>in_backspace</name></name> <operator>-=</operator> <ternary><condition><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>in_backspace</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>in_backspace</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>codepoints</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>chars</name><index>[<expr><name>i</name> <operator>-</operator> <name>glyph_starts</name></expr>]</index></name> <operator>=</operator> <name><name>codepoints</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>this_width</name> <operator>=</operator> <call><name>vterm_unicode_width</name><argument_list>(<argument><expr><name><name>codepoints</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>this_width</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Text with negative-width codepoint U+%04x\n"</literal></expr></argument>, <argument><expr><name><name>codepoints</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>width</name> <operator>+=</operator> <name>this_width</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>chars</name><index>[<expr><name>glyph_ends</name> <operator>-</operator> <name>glyph_starts</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_GLYPH_COMBINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>printpos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DEBUG: COMBINED GLYPH of %d chars {"</literal></expr></argument>, <argument><expr><name>glyph_ends</name> <operator>-</operator> <name>glyph_starts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>printpos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>printpos</name> <operator>&lt;</operator> <name>glyph_ends</name> <operator>-</operator> <name>glyph_starts</name></expr>;</condition> <incr><expr><name>printpos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"U+%04x "</literal></expr></argument>, <argument><expr><name><name>chars</name><index>[<expr><name>printpos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"}, onscreen width %d\n"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name>width</name> <operator>&gt;</operator> <call><name>THISROWWIDTH</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>linefeed</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>insert</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VTermRect</name></type> <name>rect</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <call><name>THISROWWIDTH</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scroll</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>putglyph</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>npoints</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>save_i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>chars</name><index>[<expr><name>save_i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>save_i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>save_i</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>combine_chars_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grow_combine_buffer</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars</name><index>[<expr><name>save_i</name></expr>]</index></name> <operator>=</operator> <name><name>chars</name><index>[<expr><name>save_i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>save_i</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>combine_chars_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grow_combine_buffer</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars</name><index>[<expr><name>save_i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>combine_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>combine_pos</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name>width</name> <operator>&gt;=</operator> <call><name>THISROWWIDTH</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>autowrap</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vterm_allocator_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>updatecursor</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldpos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>&gt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>rows</name></name> <operator>||</operator>

<name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>cols</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Position out of bounds after text: (%d,%d)\n"</literal></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vterm_allocator_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>codepoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>eaten</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_control</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>control</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermPos</name></type> <name>oldpos</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermScreenCell</name></type> <name>cell</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermPos</name></type> <name>leadpos</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>leadpos</name><operator>.</operator><name>col</name></name> <operator>-=</operator> <operator>(</operator><ternary><condition><expr><name><name>leadpos</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>control</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x07</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>callbacks</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>bell</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>bell</name></name>)<argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>cbdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x08</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>vterm_get_special_pty_type</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vterm_screen_get_cell</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>screen</name></name></expr></argument>, <argument><expr><name>leadpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>vterm_unicode_width</name><argument_list>(<argument><expr><name><name>cell</name><operator>.</operator><name>chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x09</literal></expr>:</case> 

<expr_stmt><expr><call><name>tab</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0a</literal></expr>:</case> 

<case>case <expr><literal type="number">0x0b</literal></expr>:</case> 

<case>case <expr><literal type="number">0x0c</literal></expr>:</case> 

<expr_stmt><expr><call><name>linefeed</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>newline</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0d</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0e</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>gl_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0f</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>gl_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x84</literal></expr>:</case> 

<expr_stmt><expr><call><name>linefeed</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x85</literal></expr>:</case> 

<expr_stmt><expr><call><name>linefeed</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x88</literal></expr>:</case> 

<expr_stmt><expr><call><name>set_col_tabstop</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x8d</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VTermRect</name></type> <name>rect</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <call><name>SCROLLREGION_BOTTOM</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <call><name>SCROLLREGION_LEFT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <call><name>SCROLLREGION_RIGHT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scroll</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x8e</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>gsingle_set</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x8f</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>gsingle_set</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>fallbacks</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>fallbacks</name><operator>-&gt;</operator><name>control</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>fallbacks</name><operator>-&gt;</operator><name>control</name></name>)<argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>fbdata</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>updatecursor</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldpos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>&gt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>rows</name></name> <operator>||</operator>

<name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>cols</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Position out of bounds after Ctrl %02x: (%d,%d)\n"</literal></expr></argument>,

<argument><expr><name>control</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>settermprop_bool</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermProp</name></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermValue</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>boolean</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<return>return <expr><call><name>vterm_state_set_termprop</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>settermprop_int</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermProp</name></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermValue</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>number</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<return>return <expr><call><name>vterm_state_set_termprop</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>settermprop_string</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermProp</name></type> <name>prop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strvalue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermValue</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>strvalue</name> <operator>=</operator> <call><name>vterm_allocator_malloc</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>len</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>strvalue</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strvalue</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>string</name></name> <operator>=</operator> <name>strvalue</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vterm_state_set_termprop</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_allocator_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>strvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>savecursor</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>save</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>save</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>saved</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>saved</name><operator>.</operator><name>mode</name><operator>.</operator><name>cursor_visible</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>cursor_visible</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>saved</name><operator>.</operator><name>mode</name><operator>.</operator><name>cursor_blink</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>cursor_blink</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>saved</name><operator>.</operator><name>mode</name><operator>.</operator><name>cursor_shape</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>cursor_shape</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_state_savepen</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>VTermPos</name></type> <name>oldpos</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>saved</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>settermprop_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORVISIBLE</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>saved</name><operator>.</operator><name>mode</name><operator>.</operator><name>cursor_visible</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>settermprop_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORBLINK</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>saved</name><operator>.</operator><name>mode</name><operator>.</operator><name>cursor_blink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>settermprop_int</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORSHAPE</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>saved</name><operator>.</operator><name>mode</name><operator>.</operator><name>cursor_shape</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_state_savepen</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>updatecursor</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldpos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_escape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'F'</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>ctrl8bit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'G'</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>ctrl8bit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">2</literal></expr>;</return>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'3'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>leftrightmargin</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_lineinfo</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name>NO_FORCE</name></expr></argument>, <argument><expr><name>DWL_ON</name></expr></argument>, <argument><expr><name>DHL_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'4'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>leftrightmargin</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_lineinfo</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name>NO_FORCE</name></expr></argument>, <argument><expr><name>DWL_ON</name></expr></argument>, <argument><expr><name>DHL_BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'5'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>leftrightmargin</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_lineinfo</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name>NO_FORCE</name></expr></argument>, <argument><expr><name>DWL_OFF</name></expr></argument>, <argument><expr><name>DHL_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'6'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>leftrightmargin</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_lineinfo</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name>NO_FORCE</name></expr></argument>, <argument><expr><name>DWL_ON</name></expr></argument>, <argument><expr><name>DHL_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'8'</literal></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>VTermPos</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>E</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'E'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>rows</name></name></expr>;</condition> <incr><expr><name><name>pos</name><operator>.</operator><name>row</name></name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <call><name>ROWWIDTH</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name><name>pos</name><operator>.</operator><name>col</name></name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>putglyph</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">2</literal></expr>;</return>

<case>case <expr><literal type="char">'('</literal></expr>:</case> <case>case <expr><literal type="char">')'</literal></expr>:</case> <case>case <expr><literal type="char">'*'</literal></expr>:</case> <case>case <expr><literal type="char">'+'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>setnum</name> <init>= <expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">0x28</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermEncoding</name> <modifier>*</modifier></type><name>newenc</name> <init>= <expr><call><name>vterm_lookup_encoding</name><argument_list>(<argument><expr><name>ENC_SINGLE_94</name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>newenc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>encoding</name><index>[<expr><name>setnum</name></expr>]</index></name><operator>.</operator><name>enc</name> <operator>=</operator> <name>newenc</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>newenc</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>newenc</name><operator>-&gt;</operator><name>init</name></name>)<argument_list>(<argument><expr><name>newenc</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>encoding</name><index>[<expr><name>setnum</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><literal type="number">2</literal></expr>;</return>

<case>case <expr><literal type="char">'7'</literal></expr>:</case> 

<expr_stmt><expr><call><name>savecursor</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="char">'8'</literal></expr>:</case> 

<expr_stmt><expr><call><name>savecursor</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> 

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="char">'='</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>keypad</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>keypad</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>VTermPos</name></type> <name>oldpos</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vterm_state_reset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>callbacks</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>movecursor</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>movecursor</name></name>)<argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>oldpos</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>cursor_visible</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>cbdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>gl_set</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="char">'o'</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>gl_set</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="char">'~'</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>gr_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="char">'}'</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>gr_set</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="char">'|'</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>gr_set</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_mode</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>num</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">4</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>insert</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">20</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>newline</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>DEBUG_LOG1</name><argument_list>(<argument><expr><literal type="string">"libvterm: Unknown mode %d\n"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_dec_mode</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>num</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> 

<expr_stmt><expr><call><name>settermprop_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_REVERSE</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>VTermPos</name></type> <name>oldpos</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>origin</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>=</operator> <ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>origin</name></name></expr> ?</condition><then> <expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>origin</name></name></expr> ?</condition><then> <expr><call><name>SCROLLREGION_LEFT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>updatecursor</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldpos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>autowrap</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">12</literal></expr>:</case>

<expr_stmt><expr><call><name>settermprop_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORBLINK</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">25</literal></expr>:</case>

<expr_stmt><expr><call><name>settermprop_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORVISIBLE</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">69</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>leftrightmargin</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_lineinfo</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>FORCE</name></expr></argument>, <argument><expr><name>DWL_OFF</name></expr></argument>, <argument><expr><name>DHL_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1000</literal></expr>:</case>

<case>case <expr><literal type="number">1002</literal></expr>:</case>

<case>case <expr><literal type="number">1003</literal></expr>:</case>

<expr_stmt><expr><call><name>settermprop_int</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_MOUSE</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>!</operator><name>val</name></expr> ?</condition><then> <expr><name>VTERM_PROP_MOUSE_NONE</name></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>num</name> <operator>==</operator> <literal type="number">1000</literal><operator>)</operator></expr> ?</condition><then> <expr><name>VTERM_PROP_MOUSE_CLICK</name></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>num</name> <operator>==</operator> <literal type="number">1002</literal><operator>)</operator></expr> ?</condition><then> <expr><name>VTERM_PROP_MOUSE_DRAG</name></expr> </then><else>:

<expr><name>VTERM_PROP_MOUSE_MOVE</name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1004</literal></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>report_focus</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1005</literal></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_protocol</name></name> <operator>=</operator> <ternary><condition><expr><name>val</name></expr> ?</condition><then> <expr><name>MOUSE_UTF8</name></expr> </then><else>: <expr><name>MOUSE_X10</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1006</literal></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_protocol</name></name> <operator>=</operator> <ternary><condition><expr><name>val</name></expr> ?</condition><then> <expr><name>MOUSE_SGR</name></expr> </then><else>: <expr><name>MOUSE_X10</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1015</literal></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_protocol</name></name> <operator>=</operator> <ternary><condition><expr><name>val</name></expr> ?</condition><then> <expr><name>MOUSE_RXVT</name></expr> </then><else>: <expr><name>MOUSE_X10</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1047</literal></expr>:</case>

<expr_stmt><expr><call><name>settermprop_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_ALTSCREEN</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1048</literal></expr>:</case>

<expr_stmt><expr><call><name>savecursor</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1049</literal></expr>:</case>

<expr_stmt><expr><call><name>settermprop_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_ALTSCREEN</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>savecursor</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2004</literal></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>bracketpaste</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>DEBUG_LOG1</name><argument_list>(<argument><expr><literal type="string">"libvterm: Unknown DEC mode %d\n"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>request_dec_mode</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>reply</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>num</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>screen</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>origin</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>autowrap</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">12</literal></expr>:</case>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>cursor_blink</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">25</literal></expr>:</case>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>cursor_visible</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">69</literal></expr>:</case>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>leftrightmargin</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1000</literal></expr>:</case>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mouse_flags</name></name> <operator>==</operator> <name>MOUSE_WANT_CLICK</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1002</literal></expr>:</case>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mouse_flags</name></name> <operator>==</operator> <operator>(</operator><name>MOUSE_WANT_CLICK</name><operator>|</operator><name>MOUSE_WANT_DRAG</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1003</literal></expr>:</case>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mouse_flags</name></name> <operator>==</operator> <operator>(</operator><name>MOUSE_WANT_CLICK</name><operator>|</operator><name>MOUSE_WANT_MOVE</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1004</literal></expr>:</case>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>report_focus</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1005</literal></expr>:</case>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mouse_protocol</name></name> <operator>==</operator> <name>MOUSE_UTF8</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1006</literal></expr>:</case>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mouse_protocol</name></name> <operator>==</operator> <name>MOUSE_SGR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1015</literal></expr>:</case>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mouse_protocol</name></name> <operator>==</operator> <name>MOUSE_RXVT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1047</literal></expr>:</case>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>alt_screen</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2004</literal></expr>:</case>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>bracketpaste</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"?%d;%d$y"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"?%d;%d$y"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><ternary><condition><expr><name>reply</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_csi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>leader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name><name>args</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>intermed</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>leader_byte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>intermed_byte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermPos</name></type> <name>oldpos</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>handled</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermRect</name></type> <name>rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>selective</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>leader</name> <operator>&amp;&amp;</operator> <name><name>leader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>leader</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>leader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'?'</literal></expr>:</case>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>

<expr_stmt><expr><name>leader_byte</name> <operator>=</operator> <name><name>leader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>intermed</name> <operator>&amp;&amp;</operator> <name><name>intermed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>intermed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>intermed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<case>case <expr><literal type="char">'$'</literal></expr>:</case>

<case>case <expr><literal type="char">'\''</literal></expr>:</case>

<expr_stmt><expr><name>intermed_byte</name> <operator>=</operator> <name><name>intermed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>oldpos</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LBOUND</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>min</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if((v) &lt; (min)) (v) = (min)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UBOUND</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if((v) &gt; (max)) (v) = (max)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEADER</name><parameter_list>(<parameter><type><name>l</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((l &lt;&lt; 8) | b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERMED</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i &lt;&lt; 16) | b)</cpp:value></cpp:define>

<switch>switch<condition>(<expr><name>intermed_byte</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <name>leader_byte</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>command</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x40</literal></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>is_cursor_in_scrollregion</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>leftrightmargin</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <call><name>SCROLLREGION_RIGHT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <call><name>THISROWWIDTH</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>scroll</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x41</literal></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x42</literal></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x43</literal></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x44</literal></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x45</literal></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x46</literal></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x47</literal></expr>:</case> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>CSI_ARG_OR</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>val</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x48</literal></expr>:</case> 

<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>CSI_ARG_OR</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <ternary><condition><expr><name>argcount</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <call><name>CSI_ARG_IS_MISSING</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>vterm_get_special_pty_type</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name>row</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>, <decl><type ref="prev"/><name>ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>cnt</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VTermPos</name></type> <name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermScreenCell</name></type> <name>c0</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name>row</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_screen_get_cell</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>screen</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>col</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_screen_get_cell</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>screen</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name><name>c1</name><operator>.</operator><name>chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> 

?</condition><then> <expr><ternary><condition><expr><operator>(</operator><call><name>vterm_unicode_is_ambiguous</name><argument_list>(<argument><expr><name><name>c0</name><operator>.</operator><name>chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> 

?</condition><then> <expr><call><name>vterm_unicode_width</name><argument_list>(<argument><expr><literal type="number">0x00a1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr> 

</then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name>row</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>origin</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <call><name>SCROLLREGION_LEFT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x49</literal></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tab</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x4a</literal></expr>:</case> 

<case>case <expr><call><name>LEADER</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><literal type="number">0x4a</literal></expr></argument>)</argument_list></call></expr>:</case> 

<expr_stmt><expr><name>selective</name> <operator>=</operator> <operator>(</operator><name>leader_byte</name> <operator>==</operator> <literal type="char">'?'</literal><operator>)</operator></expr>;</expr_stmt>

<switch>switch<condition>(<expr><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CSI_ARG_MISSING</name></expr>:</case>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>cols</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>&gt;</operator> <name><name>rect</name><operator>.</operator><name>start_col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>erase</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><name>selective</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>rows</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>start_row</name></name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name><name>rect</name><operator>.</operator><name>end_row</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_lineinfo</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>FORCE</name></expr></argument>, <argument><expr><name>DWL_OFF</name></expr></argument>, <argument><expr><name>DHL_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>&gt;</operator> <name><name>rect</name><operator>.</operator><name>start_row</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>erase</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><name>selective</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>cols</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>start_row</name></name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name><name>rect</name><operator>.</operator><name>end_row</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_lineinfo</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>FORCE</name></expr></argument>, <argument><expr><name>DWL_OFF</name></expr></argument>, <argument><expr><name>DHL_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>&gt;</operator> <name><name>rect</name><operator>.</operator><name>start_col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>erase</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><name>selective</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>&gt;</operator> <name><name>rect</name><operator>.</operator><name>start_row</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>erase</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><name>selective</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>rows</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>cols</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>start_row</name></name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name><name>rect</name><operator>.</operator><name>end_row</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_lineinfo</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>FORCE</name></expr></argument>, <argument><expr><name>DWL_OFF</name></expr></argument>, <argument><expr><name>DHL_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>erase</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><name>selective</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">0x4b</literal></expr>:</case> 

<case>case <expr><call><name>LEADER</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><literal type="number">0x4b</literal></expr></argument>)</argument_list></call></expr>:</case> 

<expr_stmt><expr><name>selective</name> <operator>=</operator> <operator>(</operator><name>leader_byte</name> <operator>==</operator> <literal type="char">'?'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch<condition>(<expr><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CSI_ARG_MISSING</name></expr>:</case>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <call><name>THISROWWIDTH</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <call><name>THISROWWIDTH</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>&gt;</operator> <name><name>rect</name><operator>.</operator><name>start_col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>erase</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><name>selective</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x4c</literal></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>is_cursor_in_scrollregion</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <call><name>SCROLLREGION_BOTTOM</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <call><name>SCROLLREGION_LEFT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <call><name>SCROLLREGION_RIGHT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scroll</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><operator>-</operator><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x4d</literal></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>is_cursor_in_scrollregion</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <call><name>SCROLLREGION_BOTTOM</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <call><name>SCROLLREGION_LEFT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <call><name>SCROLLREGION_RIGHT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scroll</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x50</literal></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>is_cursor_in_scrollregion</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>leftrightmargin</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <call><name>SCROLLREGION_RIGHT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <call><name>THISROWWIDTH</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>scroll</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x53</literal></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <call><name>SCROLLREGION_BOTTOM</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <call><name>SCROLLREGION_LEFT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <call><name>SCROLLREGION_RIGHT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scroll</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x54</literal></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <call><name>SCROLLREGION_BOTTOM</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <call><name>SCROLLREGION_LEFT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <call><name>SCROLLREGION_RIGHT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scroll</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><operator>-</operator><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x58</literal></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UBOUND</name><argument_list>(<argument><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name></expr></argument>, <argument><expr><call><name>THISROWWIDTH</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>erase</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x5a</literal></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tab</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x60</literal></expr>:</case> 

<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>CSI_ARG_OR</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x61</literal></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x63</literal></expr>:</case> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>CSI_ARG_OR</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"?1;2c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><call><name>LEADER</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><literal type="number">0x63</literal></expr></argument>)</argument_list></call></expr>:</case> 

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"&gt;%d;%d;%dc"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x64</literal></expr>:</case> 

<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>CSI_ARG_OR</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name>row</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>origin</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x65</literal></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x66</literal></expr>:</case> 

<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>CSI_ARG_OR</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <ternary><condition><expr><name>argcount</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <call><name>CSI_ARG_IS_MISSING</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name>row</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>origin</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <call><name>SCROLLREGION_LEFT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x67</literal></expr>:</case> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>CSI_ARG_OR</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>clear_col_tabstop</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<for>for<control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>cols</name></name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_col_tabstop</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">0x68</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CSI_ARG_IS_MISSING</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_mode</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><call><name>LEADER</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><literal type="number">0x68</literal></expr></argument>)</argument_list></call></expr>:</case> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CSI_ARG_IS_MISSING</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_dec_mode</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x6a</literal></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x6b</literal></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x6c</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CSI_ARG_IS_MISSING</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_mode</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><call><name>LEADER</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><literal type="number">0x6c</literal></expr></argument>)</argument_list></call></expr>:</case> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CSI_ARG_IS_MISSING</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_dec_mode</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x6d</literal></expr>:</case> 

<expr_stmt><expr><call><name>vterm_state_setpen</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>argcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>LEADER</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><literal type="number">0x6d</literal></expr></argument>)</argument_list></call></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>argcount</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>modify_other_keys</name></name> <operator>=</operator> <name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x6e</literal></expr>:</case> 

<case>case <expr><call><name>LEADER</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><literal type="number">0x6e</literal></expr></argument>)</argument_list></call></expr>:</case> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>CSI_ARG_OR</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>qmark</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>leader_byte</name> <operator>==</operator> <literal type="char">'?'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"?"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <case>case <expr><literal type="number">1</literal></expr>:</case> <case>case <expr><literal type="number">2</literal></expr>:</case> <case>case <expr><literal type="number">3</literal></expr>:</case> <case>case <expr><literal type="number">4</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"%s0n"</literal></expr></argument>, <argument><expr><name>qmark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> 

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"%s%d;%dR"</literal></expr></argument>, <argument><expr><name>qmark</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block>

<break>break;</break>

<case>case <expr><call><name>LEADER</name><argument_list>(<argument><expr><literal type="char">'!'</literal></expr></argument>, <argument><expr><literal type="number">0x70</literal></expr></argument>)</argument_list></call></expr>:</case> 

<expr_stmt><expr><call><name>vterm_state_reset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>LEADER</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><call><name>INTERMED</name><argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>, <argument><expr><literal type="number">0x70</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><call><name>request_dec_mode</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>INTERMED</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">0x71</literal></expr></argument>)</argument_list></call></expr>:</case> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>CSI_ARG_OR</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>settermprop_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORBLINK</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>settermprop_int</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORSHAPE</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORSHAPE_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><call><name>settermprop_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORBLINK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>settermprop_int</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORSHAPE</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORSHAPE_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><call><name>settermprop_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORBLINK</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>settermprop_int</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORSHAPE</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORSHAPE_UNDERLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><call><name>settermprop_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORBLINK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>settermprop_int</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORSHAPE</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORSHAPE_UNDERLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><call><name>settermprop_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORBLINK</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>settermprop_int</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORSHAPE</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORSHAPE_BAR_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<expr_stmt><expr><call><name>settermprop_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORBLINK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>settermprop_int</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORSHAPE</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORSHAPE_BAR_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><call><name>INTERMED</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><literal type="number">0x71</literal></expr></argument>)</argument_list></call></expr>:</case> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>CSI_ARG_OR</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>protected_cell</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>protected_cell</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">0x72</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name> <operator>=</operator> <call><name>CSI_ARG_OR</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_bottom</name></name> <operator>=</operator> <ternary><condition><expr><name>argcount</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <call><name>CSI_ARG_IS_MISSING</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LBOUND</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UBOUND</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LBOUND</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_bottom</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>scrollregion_bottom</name></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>rows</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_bottom</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>UBOUND</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_bottom</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SCROLLREGION_BOTTOM</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_bottom</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x73</literal></expr>:</case> 

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_left</name></name> <operator>=</operator> <call><name>CSI_ARG_OR</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_right</name></name> <operator>=</operator> <ternary><condition><expr><name>argcount</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <call><name>CSI_ARG_IS_MISSING</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LBOUND</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_left</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UBOUND</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_left</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LBOUND</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_right</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_left</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>scrollregion_right</name></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>cols</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_right</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>UBOUND</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_right</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_right</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>state</name><operator>-&gt;</operator><name>scrollregion_right</name></name> <operator>&lt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>scrollregion_left</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_right</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x74</literal></expr>:</case>

<switch>switch<condition>(<expr><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">8</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>argcount</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>on_resize</name><argument_list>(<argument><expr><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>handled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><call><name>INTERMED</name><argument_list>(<argument><expr><literal type="char">'\''</literal></expr></argument>, <argument><expr><literal type="number">0x7D</literal></expr></argument>)</argument_list></call></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>is_cursor_in_scrollregion</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <call><name>SCROLLREGION_BOTTOM</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <call><name>SCROLLREGION_RIGHT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scroll</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>INTERMED</name><argument_list>(<argument><expr><literal type="char">'\''</literal></expr></argument>, <argument><expr><literal type="number">0x7E</literal></expr></argument>)</argument_list></call></expr>:</case> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CSI_ARG_COUNT</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>is_cursor_in_scrollregion</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <call><name>SCROLLREGION_BOTTOM</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <call><name>SCROLLREGION_RIGHT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scroll</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>handled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handled</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>fallbacks</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>fallbacks</name><operator>-&gt;</operator><name>csi</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>fallbacks</name><operator>-&gt;</operator><name>csi</name></name>)<argument_list>(<argument><expr><name>leader</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>argcount</name></expr></argument>, <argument><expr><name>intermed</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>fbdata</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>origin</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LBOUND</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UBOUND</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><call><name>SCROLLREGION_BOTTOM</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LBOUND</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><call><name>SCROLLREGION_LEFT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UBOUND</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><call><name>SCROLLREGION_RIGHT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>LBOUND</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UBOUND</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>rows</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LBOUND</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UBOUND</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><call><name>THISROWWIDTH</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>updatecursor</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldpos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>&gt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>rows</name></name> <operator>||</operator>

<name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>cols</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Position out of bounds after CSI %c: (%d,%d)\n"</literal></expr></argument>,

<argument><expr><name>command</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SCROLLREGION_BOTTOM</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Scroll region height out of bounds after CSI %c: %d &lt;= %d\n"</literal></expr></argument>,

<argument><expr><name>command</name></expr></argument>, <argument><expr><call><name>SCROLLREGION_BOTTOM</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SCROLLREGION_RIGHT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>SCROLLREGION_LEFT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Scroll region width out of bounds after CSI %c: %d &lt;= %d\n"</literal></expr></argument>,

<argument><expr><name>command</name></expr></argument>, <argument><expr><call><name>SCROLLREGION_RIGHT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SCROLLREGION_LEFT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_osc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cmdlen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>cmdlen</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strneq</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"0;"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>settermprop_string</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_ICONNAME</name></expr></argument>, <argument><expr><name>command</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>cmdlen</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>settermprop_string</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_TITLE</name></expr></argument>, <argument><expr><name>command</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>cmdlen</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strneq</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"1;"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>settermprop_string</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_ICONNAME</name></expr></argument>, <argument><expr><name>command</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>cmdlen</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strneq</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"2;"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>settermprop_string</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_TITLE</name></expr></argument>, <argument><expr><name>command</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>cmdlen</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strneq</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"10;"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>red</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>default_fg</name><operator>.</operator><name>red</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blue</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>default_fg</name><operator>.</operator><name>blue</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>green</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>default_fg</name><operator>.</operator><name>green</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>C1_OSC</name></expr></argument>, <argument><expr><literal type="string">"10;rgb:%02x%02x/%02x%02x/%02x%02x\x07"</literal></expr></argument>, <argument><expr><name>red</name></expr></argument>, <argument><expr><name>red</name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><name>blue</name></expr></argument>, <argument><expr><name>blue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strneq</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"11;"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>red</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>default_bg</name><operator>.</operator><name>red</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blue</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>default_bg</name><operator>.</operator><name>blue</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>green</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>default_bg</name><operator>.</operator><name>green</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>C1_OSC</name></expr></argument>, <argument><expr><literal type="string">"11;rgb:%02x%02x/%02x%02x/%02x%02x\x07"</literal></expr></argument>, <argument><expr><name>red</name></expr></argument>, <argument><expr><name>red</name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><name>blue</name></expr></argument>, <argument><expr><name>blue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strneq</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"12;"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>settermprop_string</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORCOLOR</name></expr></argument>, <argument><expr><name>command</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>cmdlen</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>fallbacks</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>fallbacks</name><operator>-&gt;</operator><name>osc</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>fallbacks</name><operator>-&gt;</operator><name>osc</name></name>)<argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>cmdlen</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>fbdata</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>request_status_string</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cmdlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>cmdlen</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<switch>switch<condition>(<expr><name><name>command</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name><name>args</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><call><name>vterm_state_getpen</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>argi</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>C1_DCS</name></expr></argument>, <argument><expr><literal type="string">"1$r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>argi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>argi</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>argi</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>argi</name> <operator>==</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"%d"</literal></expr> </then><else>:

<expr><ternary><condition><expr><call><name>CSI_ARG_HAS_MORE</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>argi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"%d:"</literal></expr> </then><else>:

<expr><literal type="string">"%d;"</literal></expr></else></ternary></expr></else></ternary></expr></argument>,

<argument><expr><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>argi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vterm_push_output_sprintf</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><literal type="string">"m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>C1_ST</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return;</return>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> 

<expr_stmt><expr><call><name>vterm_push_output_sprintf_dcs</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><literal type="string">"1$r%d;%dr"</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>SCROLLREGION_BOTTOM</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> 

<expr_stmt><expr><call><name>vterm_push_output_sprintf_dcs</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><literal type="string">"1$r%d;%ds"</literal></expr></argument>, <argument><expr><call><name>SCROLLREGION_LEFT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>SCROLLREGION_RIGHT</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></switch></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>cmdlen</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strneq</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">" q"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>reply</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>cursor_shape</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VTERM_PROP_CURSORSHAPE_BLOCK</name></expr>:</case> <expr_stmt><expr><name>reply</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VTERM_PROP_CURSORSHAPE_UNDERLINE</name></expr>:</case> <expr_stmt><expr><name>reply</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>reply</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>cursor_blink</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>reply</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_dcs</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><literal type="string">"1$r%d q"</literal></expr></argument>, <argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strneq</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"\"q"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_dcs</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><literal type="string">"1$r%d\"q"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>protected_cell</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_dcs</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><literal type="string">"0$r%.s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>cmdlen</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_dcs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cmdlen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>cmdlen</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>strneq</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"$q"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>request_status_string</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>command</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>cmdlen</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>fallbacks</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>fallbacks</name><operator>-&gt;</operator><name>dcs</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>fallbacks</name><operator>-&gt;</operator><name>dcs</name></name>)<argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>cmdlen</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>fbdata</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_resize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermPos</name></type> <name>oldpos</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermPos</name></type> <name>delta</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>cols</name> <operator>!=</operator> <name><name>state</name><operator>-&gt;</operator><name>cols</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>newtabstops</name> <init>= <expr><call><name>vterm_allocator_malloc</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>cols</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>newtabstops</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>cols</name></name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name>cols</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mask</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>col</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>tabstops</name><index>[<expr><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>newtabstops</name><index>[<expr><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>newtabstops</name><index>[<expr><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>mask</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<for>for<control>( <init>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>cols</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mask</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>col</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>col</name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>newtabstops</name><index>[<expr><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>newtabstops</name><index>[<expr><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>mask</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vterm_allocator_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>tabstops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>tabstops</name></name> <operator>=</operator> <name>newtabstops</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rows</name> <operator>!=</operator> <name><name>state</name><operator>-&gt;</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermLineInfo</name> <modifier>*</modifier></type><name>newlineinfo</name> <init>= <expr><call><name>vterm_allocator_malloc</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>rows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VTermLineInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>newlineinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>rows</name></name> <operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>newlineinfo</name><index>[<expr><name>row</name></expr>]</index></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>lineinfo</name><index>[<expr><name>row</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>newlineinfo</name><index>[<expr><name>row</name></expr>]</index></name><operator>.</operator><name>doublewidth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newlineinfo</name><index>[<expr><name>row</name></expr>]</index></name><operator>.</operator><name>doubleheight</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vterm_allocator_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>lineinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lineinfo</name></name> <operator>=</operator> <name>newlineinfo</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>rows</name></name> <operator>=</operator> <name>rows</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <name>cols</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_bottom</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>UBOUND</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_bottom</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_right</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>UBOUND</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_right</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>callbacks</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>resize</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>resize</name></name>)<argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>cbdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name>cols</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>+=</operator> <name><name>delta</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <name><name>delta</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>&gt;=</operator> <name>rows</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name>rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <name>cols</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>cols</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>updatecursor</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldpos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VTermParserCallbacks</name></type> <name>parser_callbacks</name> <init>= <expr><block>{

<expr><name>on_text</name></expr>, 

<expr><name>on_control</name></expr>, 

<expr><name>on_escape</name></expr>, 

<expr><name>on_csi</name></expr>, 

<expr><name>on_osc</name></expr>, 

<expr><name>on_dcs</name></expr>, 

<expr><name>on_resize</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>VTermState</name> <modifier>*</modifier></type><name>vterm_obtain_state</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>vt</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>vt</name><operator>-&gt;</operator><name>state</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>vterm_state_new</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars_size</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars</name></name> <operator>=</operator> <call><name>vterm_allocator_malloc</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars_size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>combine_chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>tabstops</name></name> <operator>=</operator> <call><name>vterm_allocator_malloc</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>cols</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lineinfo</name></name> <operator>=</operator> <call><name>vterm_allocator_malloc</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>rows</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VTermLineInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>encoding_utf8</name><operator>.</operator><name>enc</name></name> <operator>=</operator> <call><name>vterm_lookup_encoding</name><argument_list>(<argument><expr><name>ENC_UTF8</name></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name><name>state</name><operator>-&gt;</operator><name>encoding_utf8</name><operator>.</operator><name>enc</name><operator>-&gt;</operator><name>init</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>encoding_utf8</name><operator>.</operator><name>enc</name><operator>-&gt;</operator><name>init</name></name>)<argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>encoding_utf8</name><operator>.</operator><name>enc</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>encoding_utf8</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vterm_parser_set_callbacks</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parser_callbacks</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>state</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_state_reset</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hard</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermEncoding</name> <modifier>*</modifier></type><name>default_enc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_bottom</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>scrollregion_right</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>keypad</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>autowrap</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>insert</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>newline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>alt_screen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>origin</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>leftrightmargin</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>bracketpaste</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>report_focus</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>ctrl8bit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>cols</name></name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name>col</name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_col_tabstop</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_col_tabstop</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_lineinfo</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>FORCE</name></expr></argument>, <argument><expr><name>DWL_OFF</name></expr></argument>, <argument><expr><name>DHL_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>callbacks</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>initpen</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>initpen</name></name>)<argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>cbdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vterm_state_resetpen</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>default_enc</name> <operator>=</operator> <ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>utf8</name></name></expr> ?</condition><then>

<expr><call><name>vterm_lookup_encoding</name><argument_list>(<argument><expr><name>ENC_UTF8</name></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>vterm_lookup_encoding</name><argument_list>(<argument><expr><name>ENC_SINGLE_94</name></expr></argument>, <argument><expr><literal type="char">'B'</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>encoding</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>enc</name> <operator>=</operator> <name>default_enc</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>default_enc</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>default_enc</name><operator>-&gt;</operator><name>init</name></name>)<argument_list>(<argument><expr><name>default_enc</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>encoding</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>gl_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>gr_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>gsingle_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>protected_cell</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>settermprop_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORVISIBLE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>settermprop_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORBLINK</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>settermprop_int</name> <argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORSHAPE</name></expr></argument>, <argument><expr><name>VTERM_PROP_CURSORSHAPE_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>hard</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VTermRect</name></type> <name>rect</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>at_phantom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>rows</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>cols</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>erase</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_state_get_cursorpos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name> <modifier>*</modifier></type><name>cursorpos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cursorpos</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_state_get_mousestate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermMouseState</name> <modifier>*</modifier></type><name>mousestate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>mousestate</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mouse_col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mousestate</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mouse_row</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mousestate</name><operator>-&gt;</operator><name>buttons</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mouse_buttons</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mousestate</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>mouse_flags</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_state_set_callbacks</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermStateCallbacks</name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>callbacks</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>callbacks</name></name> <operator>=</operator> <name>callbacks</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>cbdata</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>callbacks</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>initpen</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>initpen</name></name>)<argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>cbdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>callbacks</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>cbdata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>vterm_state_get_cbdata</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>cbdata</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_state_set_unrecognised_fallbacks</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermParserCallbacks</name> <modifier>*</modifier></type><name>fallbacks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>fallbacks</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>fallbacks</name></name> <operator>=</operator> <name>fallbacks</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>fbdata</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>fallbacks</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>fbdata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>vterm_state_get_unrecognised_fbdata</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>fbdata</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vterm_state_set_termprop</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermProp</name></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>VTermValue</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>callbacks</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>settermprop</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call>(<modifier>*</modifier><name><name>state</name><operator>-&gt;</operator><name>callbacks</name><operator>-&gt;</operator><name>settermprop</name></name>)<argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>cbdata</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>prop</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VTERM_PROP_TITLE</name></expr>:</case>

<case>case <expr><name>VTERM_PROP_ICONNAME</name></expr>:</case>

<case>case <expr><name>VTERM_PROP_CURSORCOLOR</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VTERM_PROP_CURSORVISIBLE</name></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>cursor_visible</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>boolean</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VTERM_PROP_CURSORBLINK</name></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>cursor_blink</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>boolean</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VTERM_PROP_CURSORSHAPE</name></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>cursor_shape</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VTERM_PROP_REVERSE</name></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>screen</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>boolean</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VTERM_PROP_ALTSCREEN</name></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>alt_screen</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>boolean</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>alt_screen</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VTermRect</name></type> <name>rect</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>rows</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>cols</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>erase</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VTERM_PROP_MOUSE</name></expr>:</case>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>number</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_flags</name></name> <operator>|=</operator> <name>MOUSE_WANT_CLICK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>number</name></name> <operator>==</operator> <name>VTERM_PROP_MOUSE_DRAG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_flags</name></name> <operator>|=</operator> <name>MOUSE_WANT_DRAG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>number</name></name> <operator>==</operator> <name>VTERM_PROP_MOUSE_MOVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mouse_flags</name></name> <operator>|=</operator> <name>MOUSE_WANT_MOVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VTERM_N_PROPS</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_state_focus_in</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>report_focus</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vterm_state_focus_out</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mode</name><operator>.</operator><name>report_focus</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_push_output_sprintf_ctrl</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>vt</name></name></expr></argument>, <argument><expr><name>C1_CSI</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>VTermLineInfo</name> <modifier>*</modifier></type><name>vterm_state_get_lineinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>lineinfo</name></name> <operator>+</operator> <name>row</name></expr>;</return>

</block_content>}</block></function>

</unit>
