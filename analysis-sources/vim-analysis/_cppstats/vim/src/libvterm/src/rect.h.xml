<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\libvterm\src\rect.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRFrect</name></cpp:macro> <cpp:value>"(%d,%d-%d,%d)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGSrect</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(r).start_row, (r).start_col, (r).end_row, (r).end_col</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rect_expand</name><parameter_list>(<parameter><decl><type><name>VTermRect</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>VTermRect</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>start_row</name></name> <operator>&gt;</operator> <name><name>src</name><operator>-&gt;</operator><name>start_row</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>start_row</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>start_row</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>start_col</name></name> <operator>&gt;</operator> <name><name>src</name><operator>-&gt;</operator><name>start_col</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>start_col</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>start_col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>end_row</name></name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>end_row</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>end_row</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>end_row</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>end_col</name></name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>end_col</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>end_col</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>end_col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rect_clip</name><parameter_list>(<parameter><decl><type><name>VTermRect</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>VTermRect</name> <modifier>*</modifier></type><name>bounds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>start_row</name></name> <operator>&lt;</operator> <name><name>bounds</name><operator>-&gt;</operator><name>start_row</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>start_row</name></name> <operator>=</operator> <name><name>bounds</name><operator>-&gt;</operator><name>start_row</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>start_col</name></name> <operator>&lt;</operator> <name><name>bounds</name><operator>-&gt;</operator><name>start_col</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>start_col</name></name> <operator>=</operator> <name><name>bounds</name><operator>-&gt;</operator><name>start_col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>end_row</name></name> <operator>&gt;</operator> <name><name>bounds</name><operator>-&gt;</operator><name>end_row</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>end_row</name></name> <operator>=</operator> <name><name>bounds</name><operator>-&gt;</operator><name>end_row</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>end_col</name></name> <operator>&gt;</operator> <name><name>bounds</name><operator>-&gt;</operator><name>end_col</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>end_col</name></name> <operator>=</operator> <name><name>bounds</name><operator>-&gt;</operator><name>end_col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>end_row</name></name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>start_row</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>end_row</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>start_row</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>end_col</name></name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>start_col</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>end_col</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>start_col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rect_equal</name><parameter_list>(<parameter><decl><type><name>VTermRect</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>VTermRect</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>start_row</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>start_row</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>start_col</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>start_col</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>end_row</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>end_row</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>end_col</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>end_col</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rect_contains</name><parameter_list>(<parameter><decl><type><name>VTermRect</name> <modifier>*</modifier></type><name>big</name></decl></parameter>, <parameter><decl><type><name>VTermRect</name> <modifier>*</modifier></type><name>small</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>small</name><operator>-&gt;</operator><name>start_row</name></name> <operator>&lt;</operator> <name><name>big</name><operator>-&gt;</operator><name>start_row</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>small</name><operator>-&gt;</operator><name>start_col</name></name> <operator>&lt;</operator> <name><name>big</name><operator>-&gt;</operator><name>start_col</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>small</name><operator>-&gt;</operator><name>end_row</name></name> <operator>&gt;</operator> <name><name>big</name><operator>-&gt;</operator><name>end_row</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>small</name><operator>-&gt;</operator><name>end_col</name></name> <operator>&gt;</operator> <name><name>big</name><operator>-&gt;</operator><name>end_col</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rect_intersects</name><parameter_list>(<parameter><decl><type><name>VTermRect</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>VTermRect</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>start_row</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>end_row</name></name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>start_row</name></name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>end_row</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>start_col</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>end_col</name></name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>start_col</name></name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>end_col</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

</unit>
