<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\libvterm\include\vterm.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vterm_keycodes.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>uint8_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>uint32_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>VTerm</name></name></type> <name>VTerm</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>VTermState</name></name></type> <name>VTermState</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>VTermScreen</name></name></type> <name>VTermScreen</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

}</block></struct></type> <name>VTermPos</name>;</typedef>

<function_decl><type><name>int</name></type> <name>vterm_pos_cmp</name><parameter_list>(<parameter><decl><type><name>VTermPos</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFINE_INLINES</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>USE_INLINE</name></expr></cpp:if>

<function><type><name>INLINE</name> <name>int</name></type> <name>vterm_pos_cmp</name><parameter_list>(<parameter><decl><type><name>VTermPos</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>row</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>col</name></name></expr> </then><else>: <expr><name><name>a</name><operator>.</operator><name>row</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>row</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>start_row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_col</name></decl>;</decl_stmt>

}</block></struct></type> <name>VTermRect</name>;</typedef>

<function_decl><type><name>int</name></type> <name>vterm_rect_contains</name><parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFINE_INLINES</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>USE_INLINE</name></expr></cpp:if>

<function><type><name>INLINE</name> <name>int</name></type> <name>vterm_rect_contains</name><parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>p</name><operator>.</operator><name>row</name></name> <operator>&gt;=</operator> <name><name>r</name><operator>.</operator><name>start_row</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name><name>r</name><operator>.</operator><name>end_row</name></name> <operator>&amp;&amp;</operator>

<name><name>p</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <name><name>r</name><operator>.</operator><name>start_col</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name><name>r</name><operator>.</operator><name>end_col</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>vterm_rect_move</name><parameter_list>(<parameter><decl><type><name>VTermRect</name> <modifier>*</modifier></type><name>rect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row_delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col_delta</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFINE_INLINES</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>USE_INLINE</name></expr></cpp:if>

<function><type><name>INLINE</name> <name>void</name></type> <name>vterm_rect_move</name><parameter_list>(<parameter><decl><type><name>VTermRect</name> <modifier>*</modifier></type><name>rect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row_delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col_delta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>start_row</name></name> <operator>+=</operator> <name>row_delta</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>end_row</name></name> <operator>+=</operator> <name>row_delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>start_col</name></name> <operator>+=</operator> <name>col_delta</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>end_col</name></name> <operator>+=</operator> <name>col_delta</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTERM_ANSI_INDEX_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTERM_ANSI_INDEX_MIN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTERM_ANSI_INDEX_MAX</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTERM_ANSI_INDEX_NONE</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>red</name></decl>, <name>green</name>, <name>blue</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ansi_index</name></decl>;</decl_stmt>

}</block></struct></type> <name>VTermColor</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>VTERM_VALUETYPE_BOOL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>VTERM_VALUETYPE_INT</name></decl>,

<decl><name>VTERM_VALUETYPE_STRING</name></decl>,

<decl><name>VTERM_VALUETYPE_COLOR</name></decl>,

<decl><name>VTERM_N_VALUETYPES</name></decl>

}</block></enum></type> <name>VTermValueType</name>;</typedef>

<typedef>typedef <type><union>union <block>{

<decl_stmt><decl><type><name>int</name></type> <name>boolean</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermColor</name></type> <name>color</name></decl>;</decl_stmt>

}</block></union></type> <name>VTermValue</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>VTERM_ATTR_BOLD</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>VTERM_ATTR_UNDERLINE</name></decl>, 

<decl><name>VTERM_ATTR_ITALIC</name></decl>, 

<decl><name>VTERM_ATTR_BLINK</name></decl>, 

<decl><name>VTERM_ATTR_REVERSE</name></decl>, 

<decl><name>VTERM_ATTR_STRIKE</name></decl>, 

<decl><name>VTERM_ATTR_FONT</name></decl>, 

<decl><name>VTERM_ATTR_FOREGROUND</name></decl>, 

<decl><name>VTERM_ATTR_BACKGROUND</name></decl>, 

<decl><name>VTERM_N_ATTRS</name></decl>

}</block></enum></type> <name>VTermAttr</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>VTERM_PROP_CURSORVISIBLE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>VTERM_PROP_CURSORBLINK</name></decl>, 

<decl><name>VTERM_PROP_ALTSCREEN</name></decl>, 

<decl><name>VTERM_PROP_TITLE</name></decl>, 

<decl><name>VTERM_PROP_ICONNAME</name></decl>, 

<decl><name>VTERM_PROP_REVERSE</name></decl>, 

<decl><name>VTERM_PROP_CURSORSHAPE</name></decl>, 

<decl><name>VTERM_PROP_MOUSE</name></decl>, 

<decl><name>VTERM_PROP_CURSORCOLOR</name></decl>, 

<decl><name>VTERM_N_PROPS</name></decl>

}</block></enum></type> <name>VTermProp</name>;</typedef>

<enum>enum <block>{

<decl><name>VTERM_PROP_CURSORSHAPE_BLOCK</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>VTERM_PROP_CURSORSHAPE_UNDERLINE</name></decl>,

<decl><name>VTERM_PROP_CURSORSHAPE_BAR_LEFT</name></decl>,

<decl><name>VTERM_N_PROP_CURSORSHAPES</name></decl>

}</block>;</enum>

<enum>enum <block>{

<decl><name>VTERM_PROP_MOUSE_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>VTERM_PROP_MOUSE_CLICK</name></decl>,

<decl><name>VTERM_PROP_MOUSE_DRAG</name></decl>,

<decl><name>VTERM_PROP_MOUSE_MOVE</name></decl>,

<decl><name>VTERM_N_PROP_MOUSES</name></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>chars</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>protected_cell</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dwl</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dhl</name><range>:<expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt> 

}</block></struct></type> <name>VTermGlyphInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>doublewidth</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>doubleheight</name><range>:<expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt> 

}</block></struct></type> <name>VTermLineInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>malloc</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>allocdata</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>allocdata</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>VTermAllocatorFunctions</name>;</typedef>

<function_decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vterm_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vterm_new_with_allocator</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>VTermAllocatorFunctions</name> <modifier>*</modifier></type><name>funcs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>allocdata</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_free</name><parameter_list>(<parameter><decl><type><name>VTerm</name><modifier>*</modifier></type> <name>vt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_get_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rowsp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>colsp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_set_size</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>vterm_get_utf8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_set_utf8</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_utf8</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>vterm_input_write</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>vterm_output_get_buffer_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>vterm_output_get_buffer_current</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>vterm_output_get_buffer_remaining</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>vterm_output_read</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>vterm_is_modify_other_keys</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_keyboard_unichar</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>VTermModifier</name></type> <name>mod</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_keyboard_key</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>VTermKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>VTermModifier</name></type> <name>mod</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_keyboard_start_paste</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_keyboard_end_paste</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_mouse_move</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>VTermModifier</name></type> <name>mod</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_mouse_button</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pressed</name></decl></parameter>, <parameter><decl><type><name>VTermModifier</name></type> <name>mod</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSI_ARG_FLAG_MORE</name></cpp:macro> <cpp:value>(1U&lt;&lt;31)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSI_ARG_MASK</name></cpp:macro> <cpp:value>(~(1U&lt;&lt;31))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSI_ARG_HAS_MORE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; CSI_ARG_FLAG_MORE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSI_ARG</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; CSI_ARG_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSI_ARG_MISSING</name></cpp:macro> <cpp:value>((1&lt;&lt;30)-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSI_ARG_IS_MISSING</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CSI_ARG(a) == CSI_ARG_MISSING)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSI_ARG_OR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>def</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CSI_ARG(a) == CSI_ARG_MISSING ? (def) : CSI_ARG(a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSI_ARG_COUNT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CSI_ARG(a) == CSI_ARG_MISSING || CSI_ARG(a) == 0 ? 1 : CSI_ARG(a))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>text</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>control</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>control</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>escape</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>csi</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>leader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name><name>args</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>intermed</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>osc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cmdlen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>dcs</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cmdlen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>resize</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>VTermParserCallbacks</name>;</typedef>

<function_decl><type><name>void</name></type> <name>vterm_parser_set_callbacks</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermParserCallbacks</name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>vterm_parser_get_cbdata</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <block>{

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>putglyph</name>)<parameter_list>(<parameter><decl><type><name>VTermGlyphInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>movecursor</name>)<parameter_list>(<parameter><decl><type><name>VTermPos</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name></type> <name>oldpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>visible</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>scrollrect</name>)<parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>rect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>downward</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rightward</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>moverect</name>)<parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>VTermRect</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>erase</name>)<parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>rect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>selective</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>initpen</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>setpenattr</name>)<parameter_list>(<parameter><decl><type><name>VTermAttr</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>VTermValue</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>settermprop</name>)<parameter_list>(<parameter><decl><type><name>VTermProp</name></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>VTermValue</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>bell</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>resize</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name> <modifier>*</modifier></type><name>delta</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>setlineinfo</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermLineInfo</name> <modifier>*</modifier></type><name>newinfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermLineInfo</name> <modifier>*</modifier></type><name>oldinfo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>VTermStateCallbacks</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>VTermPos</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buttons</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_BUTTON_LEFT</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_BUTTON_MIDDLE</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_BUTTON_RIGHT</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_WANT_CLICK</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_WANT_DRAG</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_WANT_MOVE</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

}</block></struct></type> <name>VTermMouseState</name>;</typedef>

<function_decl><type><name>VTermState</name> <modifier>*</modifier></type><name>vterm_obtain_state</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_state_set_callbacks</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermStateCallbacks</name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>vterm_state_get_cbdata</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_state_set_unrecognised_fallbacks</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermParserCallbacks</name> <modifier>*</modifier></type><name>fallbacks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>vterm_state_get_unrecognised_fbdata</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_state_reset</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hard</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_state_get_cursorpos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name> <modifier>*</modifier></type><name>cursorpos</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_state_get_mousestate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermMouseState</name> <modifier>*</modifier></type><name>mousestate</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_state_get_default_colors</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermColor</name> <modifier>*</modifier></type><name>default_fg</name></decl></parameter>, <parameter><decl><type><name>VTermColor</name> <modifier>*</modifier></type><name>default_bg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_state_get_palette_color</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>VTermColor</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_state_set_default_colors</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermColor</name> <modifier>*</modifier></type><name>default_fg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermColor</name> <modifier>*</modifier></type><name>default_bg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_state_set_palette_color</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermColor</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_state_set_bold_highbright</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bold_is_highbright</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>vterm_state_get_penattr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermAttr</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>VTermValue</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>vterm_state_set_termprop</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>VTermProp</name></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>VTermValue</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_state_focus_in</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_state_focus_out</name><parameter_list>(<parameter><decl><type><name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>VTermLineInfo</name> <modifier>*</modifier></type><name>vterm_state_get_lineinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bold</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>underline</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>italic</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>blink</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>reverse</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>strike</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>font</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dwl</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dhl</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt> 

}</block></struct></type> <name>VTermScreenCellAttrs</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTERM_MAX_CHARS_PER_CELL</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>chars</name><index>[<expr><name>VTERM_MAX_CHARS_PER_CELL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermScreenCellAttrs</name></type> <name>attrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermColor</name></type> <name>fg</name></decl>, <name>bg</name>;</decl_stmt>

}</block></struct></type> <name>VTermScreenCell</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>damage</name>)<parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>rect</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>moverect</name>)<parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>VTermRect</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>movecursor</name>)<parameter_list>(<parameter><decl><type><name>VTermPos</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name></type> <name>oldpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>visible</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>settermprop</name>)<parameter_list>(<parameter><decl><type><name>VTermProp</name></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>VTermValue</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>bell</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>resize</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sb_pushline</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermScreenCell</name> <modifier>*</modifier></type><name>cells</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sb_popline</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>VTermScreenCell</name> <modifier>*</modifier></type><name>cells</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>VTermScreenCallbacks</name>;</typedef>

<function_decl><type><name>VTermScreen</name> <modifier>*</modifier></type><name>vterm_obtain_screen</name><parameter_list>(<parameter><decl><type><name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_screen_set_callbacks</name><parameter_list>(<parameter><decl><type><name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermScreenCallbacks</name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>vterm_screen_get_cbdata</name><parameter_list>(<parameter><decl><type><name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_screen_set_unrecognised_fallbacks</name><parameter_list>(<parameter><decl><type><name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermParserCallbacks</name> <modifier>*</modifier></type><name>fallbacks</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>vterm_screen_get_unrecognised_fbdata</name><parameter_list>(<parameter><decl><type><name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_screen_enable_altscreen</name><parameter_list>(<parameter><decl><type><name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>altscreen</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><enum>enum <block>{

<decl><name>VTERM_DAMAGE_CELL</name></decl>, 

<decl><name>VTERM_DAMAGE_ROW</name></decl>, 

<decl><name>VTERM_DAMAGE_SCREEN</name></decl>, 

<decl><name>VTERM_DAMAGE_SCROLL</name></decl>, 

<decl><name>VTERM_N_DAMAGES</name></decl>

}</block></enum></type> <name>VTermDamageSize</name>;</typedef>

<function_decl><type><name>void</name></type> <name>vterm_screen_flush_damage</name><parameter_list>(<parameter><decl><type><name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_screen_set_damage_merge</name><parameter_list>(<parameter><decl><type><name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl></parameter>, <parameter><decl><type><name>VTermDamageSize</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_screen_reset</name><parameter_list>(<parameter><decl><type><name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hard</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>vterm_screen_get_chars</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>chars</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermRect</name></type> <name>rect</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>vterm_screen_get_text</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermRect</name></type> <name>rect</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><enum>enum <block>{

<decl><name>VTERM_ATTR_BOLD_MASK</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,

<decl><name>VTERM_ATTR_UNDERLINE_MASK</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>VTERM_ATTR_ITALIC_MASK</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,

<decl><name>VTERM_ATTR_BLINK_MASK</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,

<decl><name>VTERM_ATTR_REVERSE_MASK</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,

<decl><name>VTERM_ATTR_STRIKE_MASK</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>,

<decl><name>VTERM_ATTR_FONT_MASK</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></init></decl>,

<decl><name>VTERM_ATTR_FOREGROUND_MASK</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></init></decl>,

<decl><name>VTERM_ATTR_BACKGROUND_MASK</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></init></decl>,

<decl><name>VTERM_ALL_ATTRS_MASK</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>

}</block></enum></type> <name>VTermAttrMask</name>;</typedef>

<function_decl><type><name>int</name></type> <name>vterm_screen_get_attrs_extent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl></parameter>, <parameter><decl><type><name>VTermRect</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>VTermAttrMask</name></type> <name>attrs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>vterm_screen_get_cell</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>VTermScreenCell</name> <modifier>*</modifier></type><name>cell</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>vterm_screen_is_eol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VTermValueType</name></type> <name>vterm_get_attr_type</name><parameter_list>(<parameter><decl><type><name>VTermAttr</name></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VTermValueType</name></type> <name>vterm_get_prop_type</name><parameter_list>(<parameter><decl><type><name>VTermProp</name></type> <name>prop</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_scroll_rect</name><parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>rect</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>downward</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>rightward</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>moverect</name>)<parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>VTermRect</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>eraserect</name>)<parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>rect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>selective</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vterm_copy_cells</name><parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>dest</name></decl></parameter>,

<parameter><decl><type><name>VTermRect</name></type> <name>src</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>copycell</name>)<parameter_list>(<parameter><decl><type><name>VTermPos</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
