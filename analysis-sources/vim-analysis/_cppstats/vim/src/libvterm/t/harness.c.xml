<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\libvterm\t\harness.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vterm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../src/vterm_internal.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>streq</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!strcmp(a,b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strstartswith</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!strncmp(a,b,strlen(b)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>inplace_hex2bytes</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>inpos</name> <init>= <expr><name>s</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outpos</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>*</operator><name>inpos</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>inpos</name></expr></argument>, <argument><expr><literal type="string">"%2x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>outpos</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>outpos</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>inpos</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>outpos</name> <operator>-</operator> <name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VTermModifier</name></type> <name>strpe_modifiers</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>strp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermModifier</name></type> <name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>strp</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><operator>(</operator><operator>(</operator><operator>*</operator><name>strp</name><operator>)</operator><operator>++</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'S'</literal></expr>:</case> <expr_stmt><expr><name>state</name> <operator>|=</operator> <name>VTERM_MOD_SHIFT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case> <expr_stmt><expr><name>state</name> <operator>|=</operator> <name>VTERM_MOD_CTRL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'A'</literal></expr>:</case> <expr_stmt><expr><name>state</name> <operator>|=</operator> <name>VTERM_MOD_ALT</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <return>return <expr><name>state</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></while>

<return>return <expr><name>state</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VTermKey</name></type> <name>strp_key</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<struct><specifier>static</specifier> struct <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermKey</name></type> <name>key</name></decl>;</decl_stmt>

}</block> <decl><name><name>keys</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"Up"</literal></expr>, <expr><name>VTERM_KEY_UP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Tab"</literal></expr>, <expr><name>VTERM_KEY_TAB</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Enter"</literal></expr>, <expr><name>VTERM_KEY_ENTER</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"KP0"</literal></expr>, <expr><name>VTERM_KEY_KP_0</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>VTERM_KEY_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VTERM_KEY_NONE</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VTerm</name> <modifier>*</modifier></type><name>vt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VTermState</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VTermScreen</name> <modifier>*</modifier></type><name>screen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VTermEncodingInstance</name></type> <name>encoding</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parser_text</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>bytes</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"text "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name> <init>= <expr><name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">0x20</literal> <operator>||</operator> <name>b</name> <operator>==</operator> <literal type="number">0x7f</literal> <operator>||</operator> <operator>(</operator><name>b</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;</operator> <literal type="number">0xa0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><literal type="string">",%x"</literal></expr> </then><else>: <expr><literal type="string">"%x"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parser_control</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>control</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"control %02x\n"</literal></expr></argument>, <argument><expr><name>control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parser_escape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>bytes</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x30</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"escape "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parser_csi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>leader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name><name>args</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>intermed</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"csi %02x"</literal></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>leader</name> <operator>&amp;&amp;</operator> <name><name>leader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" L="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>leader</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>leader</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argcount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>sep</name> <init>= <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><literal type="char">','</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>CSI_ARG_MISSING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c*"</literal></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c%ld%s"</literal></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><call><name>CSI_ARG</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><call><name>CSI_ARG_HAS_MORE</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"+"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>intermed</name> <operator>&amp;&amp;</operator> <name><name>intermed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" I="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>intermed</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>intermed</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parser_osc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cmdlen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"osc "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cmdlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>command</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parser_dcs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cmdlen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"dcs "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cmdlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>command</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VTermParserCallbacks</name></type> <name>parser_cbs</name> <init>= <expr><block>{

<expr><name>parser_text</name></expr>, 

<expr><name>parser_control</name></expr>, 

<expr><name>parser_escape</name></expr>, 

<expr><name>parser_csi</name></expr>, 

<expr><name>parser_osc</name></expr>, 

<expr><name>parser_dcs</name></expr>, 

<expr><name>NULL</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>want_movecursor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VTermPos</name></type> <name>state_pos</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>movecursor</name><parameter_list>(<parameter><decl><type><name>VTermPos</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name></type> <name>oldpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>visible</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>state_pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>want_movecursor</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"movecursor %d,%d\n"</literal></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>want_scrollrect</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scrollrect</name><parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>rect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>downward</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rightward</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>want_scrollrect</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"scrollrect %d..%d,%d..%d =&gt; %+d,%+d\n"</literal></expr></argument>,

<argument><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name></expr></argument>,

<argument><expr><name>downward</name></expr></argument>, <argument><expr><name>rightward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>want_moverect</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>moverect</name><parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>VTermRect</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>want_moverect</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"moverect %d..%d,%d..%d -&gt; %d..%d,%d..%d\n"</literal></expr></argument>,

<argument><expr><name><name>src</name><operator>.</operator><name>start_row</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>.</operator><name>end_row</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>.</operator><name>start_col</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>.</operator><name>end_col</name></name></expr></argument>,

<argument><expr><name><name>dest</name><operator>.</operator><name>start_row</name></name></expr></argument>, <argument><expr><name><name>dest</name><operator>.</operator><name>end_row</name></name></expr></argument>, <argument><expr><name><name>dest</name><operator>.</operator><name>start_col</name></name></expr></argument>, <argument><expr><name><name>dest</name><operator>.</operator><name>end_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>want_settermprop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>settermprop</name><parameter_list>(<parameter><decl><type><name>VTermProp</name></type> <name>prop</name></decl></parameter>, <parameter><decl><type><name>VTermValue</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTermValueType</name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>want_settermprop</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>vterm_get_prop_type</name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VTERM_VALUETYPE_BOOL</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"settermprop %d %s\n"</literal></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>val</name><operator>-&gt;</operator><name>boolean</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VTERM_VALUETYPE_INT</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"settermprop %d %d\n"</literal></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VTERM_VALUETYPE_STRING</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"settermprop %d \"%s\"\n"</literal></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VTERM_VALUETYPE_COLOR</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"settermprop %d rgb(%d,%d,%d)\n"</literal></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>color</name><operator>.</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>color</name><operator>.</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>color</name><operator>.</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>VTERM_N_VALUETYPES</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>want_state_putglyph</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>state_putglyph</name><parameter_list>(<parameter><decl><type><name>VTermGlyphInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>VTermPos</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>want_state_putglyph</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"putglyph "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>info</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><literal type="string">",%x"</literal></expr> </then><else>: <expr><literal type="string">"%x"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %d %d,%d"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>protected_cell</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" prot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>dwl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" dwl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>dhl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" dhl-%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>info</name><operator>-&gt;</operator><name>dhl</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"top"</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>info</name><operator>-&gt;</operator><name>dhl</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="string">"bottom"</literal></expr> </then><else>: <expr><literal type="string">"?"</literal></expr></else></ternary></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>want_state_erase</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>state_erase</name><parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>rect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>selective</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>want_state_erase</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"erase %d..%d,%d..%d%s\n"</literal></expr></argument>,

<argument><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>selective</name></expr> ?</condition><then> <expr><literal type="string">" selective"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>bold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>underline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>italic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blink</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reverse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>strike</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermColor</name></type> <name>foreground</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermColor</name></type> <name>background</name></decl>;</decl_stmt>

}</block> <decl><name>state_pen</name></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>state_setpenattr</name><parameter_list>(<parameter><decl><type><name>VTermAttr</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>VTermValue</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VTERM_ATTR_BOLD</name></expr>:</case>

<expr_stmt><expr><name><name>state_pen</name><operator>.</operator><name>bold</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>boolean</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VTERM_ATTR_UNDERLINE</name></expr>:</case>

<expr_stmt><expr><name><name>state_pen</name><operator>.</operator><name>underline</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VTERM_ATTR_ITALIC</name></expr>:</case>

<expr_stmt><expr><name><name>state_pen</name><operator>.</operator><name>italic</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>boolean</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VTERM_ATTR_BLINK</name></expr>:</case>

<expr_stmt><expr><name><name>state_pen</name><operator>.</operator><name>blink</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>boolean</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VTERM_ATTR_REVERSE</name></expr>:</case>

<expr_stmt><expr><name><name>state_pen</name><operator>.</operator><name>reverse</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>boolean</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VTERM_ATTR_STRIKE</name></expr>:</case>

<expr_stmt><expr><name><name>state_pen</name><operator>.</operator><name>strike</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>boolean</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VTERM_ATTR_FONT</name></expr>:</case>

<expr_stmt><expr><name><name>state_pen</name><operator>.</operator><name>font</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VTERM_ATTR_FOREGROUND</name></expr>:</case>

<expr_stmt><expr><name><name>state_pen</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>color</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VTERM_ATTR_BACKGROUND</name></expr>:</case>

<expr_stmt><expr><name><name>state_pen</name><operator>.</operator><name>background</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>color</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VTERM_N_ATTRS</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>state_setlineinfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermLineInfo</name> <modifier>*</modifier></type><name>newinfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermLineInfo</name> <modifier>*</modifier></type><name>oldinfo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>VTermStateCallbacks</name></type> <name>state_cbs</name> <init>= <expr><block>{

<expr><name>state_putglyph</name></expr>, 

<expr><name>movecursor</name></expr>, 

<expr><name>scrollrect</name></expr>, 

<expr><name>moverect</name></expr>, 

<expr><name>state_erase</name></expr>, 

<expr><name>NULL</name></expr>, 

<expr><name>state_setpenattr</name></expr>, 

<expr><name>settermprop</name></expr>, 

<expr><name>NULL</name></expr>, 

<expr><name>NULL</name></expr>, 

<expr><name>state_setlineinfo</name></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>want_screen_damage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>want_screen_damage_cells</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>screen_damage</name><parameter_list>(<parameter><decl><type><name>VTermRect</name></type> <name>rect</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>want_screen_damage</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"damage %d..%d,%d..%d"</literal></expr></argument>,

<argument><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>want_screen_damage_cells</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>equals</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>row</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>start_row</name></name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name><name>rect</name><operator>.</operator><name>end_row</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>eol</name> <init>= <expr><name><name>rect</name><operator>.</operator><name>end_col</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>eol</name> <operator>&gt;</operator> <name><name>rect</name><operator>.</operator><name>start_col</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VTermScreenCell</name></type> <name>cell</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermPos</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>eol</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_screen_get_cell</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cell</name><operator>.</operator><name>chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>eol</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>eol</name> <operator>==</operator> <name><name>rect</name><operator>.</operator><name>start_col</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>equals</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" ="</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>equals</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %d&lt;"</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>col</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>start_col</name></name></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>eol</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VTermScreenCell</name></type> <name>cell</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermPos</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_screen_get_cell</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>col</name> <operator>==</operator> <name><name>rect</name><operator>.</operator><name>start_col</name></name></expr> ?</condition><then> <expr><literal type="string">"%02X"</literal></expr> </then><else>: <expr><literal type="string">" %02X"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>cell</name><operator>.</operator><name>chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>want_screen_scrollback</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>screen_sb_pushline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VTermScreenCell</name> <modifier>*</modifier></type><name>cells</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>eol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>want_screen_scrollback</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>eol</name> <operator>=</operator> <name>cols</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>eol</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cells</name><index>[<expr><name>eol</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>eol</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sb_pushline %d ="</literal></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>eol</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %02X"</literal></expr></argument>, <argument><expr><name><name>cells</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>screen_sb_popline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>VTermScreenCell</name> <modifier>*</modifier></type><name>cells</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>want_screen_scrollback</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>cols</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>col</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cells</name><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name><name>chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'A'</literal> <operator>+</operator> <name>col</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cells</name><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name><name>chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>cells</name><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sb_popline %d\n"</literal></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>VTermScreenCallbacks</name></type> <name>screen_cbs</name> <init>= <expr><block>{

<expr><name>screen_damage</name></expr>, 

<expr><name>moverect</name></expr>, 

<expr><name>movecursor</name></expr>, 

<expr><name>settermprop</name></expr>, 

<expr><name>NULL</name></expr>, 

<expr><name>NULL</name></expr>, 

<expr><name>screen_sb_pushline</name></expr>, 

<expr><name>screen_sb_popline</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setvbuf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>_IONBF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof <name>line</name></sizeof></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>outlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>nl</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>nl</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"INIT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>vt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vt</name> <operator>=</operator> <call><name>vterm_new</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"WANTPARSER"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vterm_parser_set_callbacks</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parser_cbs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstartswith</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"WANTSTATE"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>line</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name><name>line</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sense</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>vterm_obtain_state</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_state_set_callbacks</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state_cbs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_state_set_bold_highbright</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_state_reset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<for>for<control>( <init>;</init> <condition><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<switch>switch<condition>(<expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<expr_stmt><expr><name>sense</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><name>sense</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<expr_stmt><expr><name>want_state_putglyph</name> <operator>=</operator> <name>sense</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<expr_stmt><expr><name>want_scrollrect</name> <operator>=</operator> <name>sense</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<expr_stmt><expr><name>want_moverect</name> <operator>=</operator> <name>sense</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<expr_stmt><expr><name>want_state_erase</name> <operator>=</operator> <name>sense</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<expr_stmt><expr><name>want_settermprop</name> <operator>=</operator> <name>sense</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<expr_stmt><expr><call><name>vterm_state_set_unrecognised_fallbacks</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><ternary><condition><expr><name>sense</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>parser_cbs</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unrecognised WANTSTATE flag '%c'\n"</literal></expr></argument>, <argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch></block_content></block></for>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstartswith</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"WANTSCREEN"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>line</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name><name>line</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sense</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>screen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>screen</name> <operator>=</operator> <call><name>vterm_obtain_screen</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vterm_screen_enable_altscreen</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_screen_set_callbacks</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_cbs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<for>for<control>( <init>;</init> <condition><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<switch>switch<condition>(<expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><name>sense</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<expr_stmt><expr><name>want_screen_damage</name> <operator>=</operator> <name>sense</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case>

<expr_stmt><expr><name>want_screen_damage</name> <operator>=</operator> <name>sense</name></expr>;</expr_stmt>

<expr_stmt><expr><name>want_screen_damage_cells</name> <operator>=</operator> <name>sense</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<expr_stmt><expr><name>want_moverect</name> <operator>=</operator> <name>sense</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><name>want_movecursor</name> <operator>=</operator> <name>sense</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<expr_stmt><expr><name>want_settermprop</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<expr_stmt><expr><name>want_screen_scrollback</name> <operator>=</operator> <name>sense</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unrecognised WANTSCREEN flag '%c'\n"</literal></expr></argument>, <argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch></block_content></block></for>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"UTF8 %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vterm_set_utf8</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"RESET"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vterm_state_reset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_state_get_cursorpos</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>screen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vterm_screen_reset</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstartswith</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"RESIZE "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rows</name></decl>, <decl><type ref="prev"/><name>cols</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linep</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>linep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>linep</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"%d, %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_set_size</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstartswith</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"PUSH "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bytes</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>inplace_hex2bytes</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>written</name> <init>= <expr><call><name>vterm_input_write</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>written</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"! short write\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"WANTENCODING"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>encoding</name><operator>.</operator><name>enc</name></name> <operator>=</operator> <call><name>vterm_lookup_encoding</name><argument_list>(<argument><expr><name>ENC_UTF8</name></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>encoding</name><operator>.</operator><name>enc</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>encoding</name><operator>.</operator><name>enc</name><operator>-&gt;</operator><name>init</name></name>)<argument_list>(<argument><expr><name><name>encoding</name><operator>.</operator><name>enc</name></name></expr></argument>, <argument><expr><name><name>encoding</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstartswith</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"ENCIN "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bytes</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>inplace_hex2bytes</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>cp</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cpi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>encoding</name><operator>.</operator><name>enc</name><operator>-&gt;</operator><name>decode</name></name>)<argument_list>(<argument><expr><name><name>encoding</name><operator>.</operator><name>enc</name></name></expr></argument>, <argument><expr><name><name>encoding</name><operator>.</operator><name>data</name></name></expr></argument>,

<argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpi</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cpi</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"encout "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cpi</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><literal type="string">",%x"</literal></expr> </then><else>: <expr><literal type="string">"%x"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstartswith</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"INCHAR "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linep</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermModifier</name></type> <name>mod</name></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>linep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>linep</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <call><name>strpe_modifiers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>linep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">" %x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_keyboard_unichar</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstartswith</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"INKEY "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VTermModifier</name></type> <name>mod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermKey</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linep</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>linep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>linep</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <call><name>strpe_modifiers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>linep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name><name>linep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>linep</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>strp_key</name><argument_list>(<argument><expr><name>linep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_keyboard_key</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstartswith</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"PASTE "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linep</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"START"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_keyboard_start_paste</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"END"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_keyboard_end_paste</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>abort_line</name>;</goto></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstartswith</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"FOCUS "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linep</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_state_focus_in</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"OUT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_state_focus_out</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>abort_line</name>;</goto></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstartswith</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"MOUSEMOVE "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linep</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermModifier</name></type> <name>mod</name></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>linep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>linep</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"%d,%d%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>linep</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name><name>linep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>linep</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <call><name>strpe_modifiers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>linep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_mouse_move</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstartswith</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"MOUSEBTN "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linep</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">9</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>press</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>button</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermModifier</name></type> <name>mod</name></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>linep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>linep</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"%c %d%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>press</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>button</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>linep</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name><name>linep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>linep</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <call><name>strpe_modifiers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>linep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_mouse_button</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>button</name></expr></argument>, <argument><expr><operator>(</operator><name>press</name> <operator>==</operator> <literal type="char">'d'</literal> <operator>||</operator> <name>press</name> <operator>==</operator> <literal type="char">'D'</literal><operator>)</operator></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstartswith</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"DAMAGEMERGE "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linep</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>linep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>linep</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"CELL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_screen_set_damage_merge</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>VTERM_DAMAGE_CELL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"ROW"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_screen_set_damage_merge</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>VTERM_DAMAGE_ROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"SCREEN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_screen_set_damage_merge</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>VTERM_DAMAGE_SCREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"SCROLL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vterm_screen_set_damage_merge</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>VTERM_DAMAGE_SCROLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstartswith</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"DAMAGEFLUSH"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vterm_screen_flush_damage</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"?cursor"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VTermPos</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vterm_state_get_cursorpos</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>!=</operator> <name><name>state_pos</name><operator>.</operator><name>row</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"! row mismatch: state=%d,%d event=%d,%d\n"</literal></expr></argument>,

<argument><expr><name><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>state_pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>state_pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <name><name>state_pos</name><operator>.</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"! col mismatch: state=%d,%d event=%d,%d\n"</literal></expr></argument>,

<argument><expr><name><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>state_pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>state_pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d,%d\n"</literal></expr></argument>, <argument><expr><name><name>state_pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>state_pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstartswith</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"?pen "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VTermValue</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linep</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>linep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>linep</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOLSTR</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v) ? "on" : "off")</cpp:value></cpp:define>

<if_stmt><if>if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"bold"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vterm_state_get_penattr</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_BOLD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>val</name><operator>.</operator><name>boolean</name></name> <operator>!=</operator> <name><name>state_pen</name><operator>.</operator><name>bold</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"! pen bold mismatch; state=%s, event=%s\n"</literal></expr></argument>,

<argument><expr><call><name>BOOLSTR</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>boolean</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BOOLSTR</name><argument_list>(<argument><expr><name><name>state_pen</name><operator>.</operator><name>bold</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>BOOLSTR</name><argument_list>(<argument><expr><name><name>state_pen</name><operator>.</operator><name>bold</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"underline"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vterm_state_get_penattr</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_UNDERLINE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>val</name><operator>.</operator><name>boolean</name></name> <operator>!=</operator> <name><name>state_pen</name><operator>.</operator><name>underline</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"! pen underline mismatch; state=%d, event=%d\n"</literal></expr></argument>,

<argument><expr><name><name>val</name><operator>.</operator><name>boolean</name></name></expr></argument>, <argument><expr><name><name>state_pen</name><operator>.</operator><name>underline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>state_pen</name><operator>.</operator><name>underline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"italic"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vterm_state_get_penattr</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_ITALIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>val</name><operator>.</operator><name>boolean</name></name> <operator>!=</operator> <name><name>state_pen</name><operator>.</operator><name>italic</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"! pen italic mismatch; state=%s, event=%s\n"</literal></expr></argument>,

<argument><expr><call><name>BOOLSTR</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>boolean</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BOOLSTR</name><argument_list>(<argument><expr><name><name>state_pen</name><operator>.</operator><name>italic</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>BOOLSTR</name><argument_list>(<argument><expr><name><name>state_pen</name><operator>.</operator><name>italic</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"blink"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vterm_state_get_penattr</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_BLINK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>val</name><operator>.</operator><name>boolean</name></name> <operator>!=</operator> <name><name>state_pen</name><operator>.</operator><name>blink</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"! pen blink mismatch; state=%s, event=%s\n"</literal></expr></argument>,

<argument><expr><call><name>BOOLSTR</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>boolean</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BOOLSTR</name><argument_list>(<argument><expr><name><name>state_pen</name><operator>.</operator><name>blink</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>BOOLSTR</name><argument_list>(<argument><expr><name><name>state_pen</name><operator>.</operator><name>blink</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"reverse"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vterm_state_get_penattr</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_REVERSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>val</name><operator>.</operator><name>boolean</name></name> <operator>!=</operator> <name><name>state_pen</name><operator>.</operator><name>reverse</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"! pen reverse mismatch; state=%s, event=%s\n"</literal></expr></argument>,

<argument><expr><call><name>BOOLSTR</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>boolean</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BOOLSTR</name><argument_list>(<argument><expr><name><name>state_pen</name><operator>.</operator><name>reverse</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>BOOLSTR</name><argument_list>(<argument><expr><name><name>state_pen</name><operator>.</operator><name>reverse</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"font"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vterm_state_get_penattr</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>VTERM_ATTR_FONT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>val</name><operator>.</operator><name>boolean</name></name> <operator>!=</operator> <name><name>state_pen</name><operator>.</operator><name>font</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"! pen font mismatch; state=%d, event=%d\n"</literal></expr></argument>,

<argument><expr><name><name>val</name><operator>.</operator><name>boolean</name></name></expr></argument>, <argument><expr><name><name>state_pen</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>state_pen</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"foreground"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"rgb(%d,%d,%d)\n"</literal></expr></argument>, <argument><expr><name><name>state_pen</name><operator>.</operator><name>foreground</name><operator>.</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>state_pen</name><operator>.</operator><name>foreground</name><operator>.</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>state_pen</name><operator>.</operator><name>foreground</name><operator>.</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>streq</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"background"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"rgb(%d,%d,%d)\n"</literal></expr></argument>, <argument><expr><name><name>state_pen</name><operator>.</operator><name>background</name><operator>.</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>state_pen</name><operator>.</operator><name>background</name><operator>.</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>state_pen</name><operator>.</operator><name>background</name><operator>.</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstartswith</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"?screen_chars "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linep</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">13</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermRect</name></type> <name>rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>linep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>linep</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"%d,%d,%d,%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rect</name><operator>.</operator><name>start_row</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rect</name><operator>.</operator><name>start_col</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rect</name><operator>.</operator><name>end_row</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rect</name><operator>.</operator><name>end_col</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"! screen_chars unrecognised input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>abort_line</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>vterm_screen_get_chars</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"! screen_chars error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>chars</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vterm_screen_get_chars</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0x%02x%s"</literal></expr></argument>, <argument><expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name><operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">"\n"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstartswith</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"?screen_text "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linep</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermRect</name></type> <name>rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>linep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>linep</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"%d,%d,%d,%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rect</name><operator>.</operator><name>start_row</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rect</name><operator>.</operator><name>start_col</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rect</name><operator>.</operator><name>end_row</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rect</name><operator>.</operator><name>end_col</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"! screen_text unrecognised input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>abort_line</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>vterm_screen_get_text</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"! screen_text error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><name>buffer</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>text</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x55</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>text</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xAA</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x55</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>text</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xAA</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vterm_screen_get_text</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>text</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x55</literal> <operator>||</operator> <name><name>text</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xAA</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"! screen_get_text buffer overrun left [%02x,%02x]\n"</literal></expr></argument>, <argument><expr><name><name>text</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>text</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>text</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0x55</literal> <operator>||</operator> <name><name>text</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xAA</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"! screen_get_text buffer overrun right [%02x,%02x]\n"</literal></expr></argument>, <argument><expr><name><name>text</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>text</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0x%02x%s"</literal></expr></argument>, <argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name><operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">"\n"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstartswith</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"?screen_cell "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linep</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermPos</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermScreenCell</name></type> <name>cell</name></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>linep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>linep</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"%d,%d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"! screen_cell unrecognised input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>abort_line</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>vterm_screen_get_cell</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cell</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>abort_line</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VTERM_MAX_CHARS_PER_CELL</name> <operator>&amp;&amp;</operator> <name><name>cell</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s0x%x"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>cell</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"} width=%d attrs={"</literal></expr></argument>, <argument><expr><name><name>cell</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cell</name><operator>.</operator><name>attrs</name><operator>.</operator><name>bold</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cell</name><operator>.</operator><name>attrs</name><operator>.</operator><name>underline</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"U%d"</literal></expr></argument>, <argument><expr><name><name>cell</name><operator>.</operator><name>attrs</name><operator>.</operator><name>underline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cell</name><operator>.</operator><name>attrs</name><operator>.</operator><name>italic</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"I"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cell</name><operator>.</operator><name>attrs</name><operator>.</operator><name>blink</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cell</name><operator>.</operator><name>attrs</name><operator>.</operator><name>reverse</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"R"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cell</name><operator>.</operator><name>attrs</name><operator>.</operator><name>font</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"F%d"</literal></expr></argument>, <argument><expr><name><name>cell</name><operator>.</operator><name>attrs</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"} "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cell</name><operator>.</operator><name>attrs</name><operator>.</operator><name>dwl</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"dwl "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cell</name><operator>.</operator><name>attrs</name><operator>.</operator><name>dhl</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"dhl-%s "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>cell</name><operator>.</operator><name>attrs</name><operator>.</operator><name>dhl</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="string">"bottom"</literal></expr> </then><else>: <expr><literal type="string">"top"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"fg=rgb(%d,%d,%d) "</literal></expr></argument>, <argument><expr><name><name>cell</name><operator>.</operator><name>fg</name><operator>.</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>cell</name><operator>.</operator><name>fg</name><operator>.</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>cell</name><operator>.</operator><name>fg</name><operator>.</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"bg=rgb(%d,%d,%d)\n"</literal></expr></argument>, <argument><expr><name><name>cell</name><operator>.</operator><name>bg</name><operator>.</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>cell</name><operator>.</operator><name>bg</name><operator>.</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>cell</name><operator>.</operator><name>bg</name><operator>.</operator><name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstartswith</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"?screen_eol "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VTermPos</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linep</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>linep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>linep</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"%d,%d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"! screen_eol unrecognised input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>abort_line</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><call><name>vterm_screen_is_eol</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strstartswith</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"?screen_attrs_extent "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VTermPos</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTermRect</name></type> <name>rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linep</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">21</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>linep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>linep</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>linep</name></expr></argument>, <argument><expr><literal type="string">"%d,%d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"! screen_attrs_extent unrecognised input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>abort_line</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>vterm_screen_get_attrs_extent</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"! screen_attrs_extent failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>abort_line</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d,%d-%d,%d\n"</literal></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>start_row</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>start_col</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>end_row</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>end_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>line</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<label><name>abort_line</name>:</label> <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>outlen</name> <operator>=</operator> <call><name>vterm_output_get_buffer_current</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>outlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>outbuff</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vterm_output_read</name><argument_list>(<argument><expr><name>vt</name></expr></argument>, <argument><expr><name>outbuff</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"output "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>outlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%x%s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>outbuff</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <name>outlen</name><operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">"\n"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><literal type="string">"?\n"</literal></expr> </then><else>: <expr><literal type="string">"DONE\n"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vterm_free</name><argument_list>(<argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
