<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\termlib.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"termlib.pro"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sgtty.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getent</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>nextent</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_match</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>_addfmt</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>_find</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tent</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>PC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>UP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>BC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name></type> <name>ospeed</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TERMCAPFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TERMCAPFILE</name></cpp:macro> <cpp:value>"s:termcap"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TERMCAPFILE</name></cpp:macro> <cpp:value>"VIMRUNTIME:termcap"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TERMCAPFILE</name></cpp:macro> <cpp:value>"/etc/termcap"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>tgetent</name><parameter_list>(

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbuf</name></decl></parameter>, 

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>term</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>tcbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tcptr</name> <init>= <expr><name>tcbuf</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tcap</name> <init>= <expr><name>TERMCAPFILE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>termcap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"TERMCAP"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tmp</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>tcap</name> <operator>=</operator> <name>tmp</name></expr> ;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>tcap</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>tcap</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>tmp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>tmp</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nexttmp</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>tmp</name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>nexttmp</name> <operator>=</operator> <call><name>_find</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">":|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>tmp</name><operator>+</operator><name>tlen</name> <operator>==</operator> <name>nexttmp</name> <operator>&amp;&amp;</operator> <call><name>_match</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>tlen</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tent</name> <operator>=</operator> <name>tbuf</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>nexttmp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>termcap</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><name>tcap</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tcap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>getent</name><argument_list>(<argument><expr><name>tbuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>termcap</name></expr></argument>, <argument><expr><name>TBUFSZ</name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tcptr</name> <operator>=</operator> <name>tcbuf</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>term</name> <operator>=</operator> <call><name>tgetstr</name><argument_list>(<argument><expr><literal type="string">"tc"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>termcap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tent</name> <operator>=</operator> <name>tbuf</name></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>termcap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>getent</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbuf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>termcap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>nextent</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>termcap</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>tptr</name> <operator>=</operator> <name>tbuf</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>tptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>tptr</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nexttptr</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>tptr</name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>tptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>nexttptr</name> <operator>=</operator> <call><name>_find</name><argument_list>(<argument><expr><name>tptr</name></expr></argument>, <argument><expr><literal type="string">":|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>tptr</name> <operator>+</operator> <name>tlen</name> <operator>==</operator> <name>nexttptr</name> <operator>&amp;&amp;</operator>

<call><name>_match</name><argument_list>(<argument><expr><name>tptr</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>tlen</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>tent</name> <operator>=</operator> <name>tbuf</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>tptr</name> <operator>=</operator> <name>nexttptr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>nextent</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbuf</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>termcap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lbuf</name> <init>= <expr><name>tbuf</name></expr></init></decl>;</decl_stmt> 

<while>while <condition>(<expr><name>lbuf</name> <operator>&lt;</operator> <name>tbuf</name><operator>+</operator><name>buflen</name> <operator>&amp;&amp;</operator> 

<call><name>fgets</name><argument_list>(<argument><expr><name>lbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>tbuf</name><operator>+</operator><name>buflen</name><operator>-</operator><name>lbuf</name><operator>)</operator></expr></argument>, <argument><expr><name>termcap</name></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>llen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>lbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>lbuf</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lbuf</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> 

<name><name>lbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator>

<name><name>lbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>lbuf</name></expr></argument>, <argument><expr><name>lbuf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>llen</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lbuf</name><index>[<expr><name>llen</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>lbuf</name> <operator>+=</operator> <name>llen</name><operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>lbuf</name><index>[<expr><name>llen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> 

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>tgetflag</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><call><name>tgetstr</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>tgetnum</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"/><name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tgetstr</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>atoi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>tgetstr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name><init>=<expr><name>tent</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>_find</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>*</operator><name>tmp</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_match</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tmp</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>hold</name><operator>=</operator> <operator>*</operator><name>buf</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><operator>++</operator><name>tmp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>tmp</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content> 

<switch>switch<condition>(<expr><operator>*</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case> 

<switch>switch<condition>(<expr><operator>*</operator><operator>++</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<expr_stmt><expr><name>tmp</name><operator>--</operator></expr>;</expr_stmt> 

<break>break;</break> 

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<case>case <expr><literal type="char">'E'</literal></expr>:</case> 

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>++</operator> <operator>=</operator> <name>ESC</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> 

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> 

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>++</operator> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> 

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>++</operator> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> 

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>++</operator> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> 

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>++</operator> <operator>=</operator> <literal type="char">'\f'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'0'</literal></expr>:</case> 

<case>case <expr><literal type="char">'1'</literal></expr>:</case>

<case>case <expr><literal type="char">'2'</literal></expr>:</case>

<case>case <expr><literal type="char">'3'</literal></expr>:</case>

<case>case <expr><literal type="char">'4'</literal></expr>:</case>

<case>case <expr><literal type="char">'5'</literal></expr>:</case>

<case>case <expr><literal type="char">'6'</literal></expr>:</case>

<case>case <expr><literal type="char">'7'</literal></expr>:</case>

<case>case <expr><literal type="char">'8'</literal></expr>:</case>

<case>case <expr><literal type="char">'9'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>*</operator><name>buf</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>buf</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <operator>*</operator><name>tmp</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>++</operator><operator>=</operator> <operator>*</operator><name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'^'</literal></expr>:</case> 

<expr_stmt><expr><operator>++</operator><name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>++</operator> <operator>=</operator> <call><name>Ctrl_chr</name><argument_list>(<argument><expr><operator>*</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>*</operator><name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>hold</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>*</operator><name>tmp</name></expr>)</condition>;</do>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>tgoto</name><parameter_list>(

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cm</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>gx</name></decl>, <decl><type ref="prev"/><name>gy</name></decl>, 

<decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>, 

<decl><type ref="prev"/><name>reverse</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><type ref="prev"><modifier>*</modifier></type><name>bufp</name></decl>, 

<decl><type ref="prev"/><name>addup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><type ref="prev"/><name>addbak</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cm</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"OOPS"</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>bufp</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>cm</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>bufp</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<switch>switch<condition>(<expr><name>c</name> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> 

<expr_stmt><expr><name>bufp</name> <operator>=</operator> <call><name>_addfmt</name><argument_list>(<argument><expr><name>bufp</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'2'</literal></expr>:</case> 

<expr_stmt><expr><name>bufp</name> <operator>=</operator> <call><name>_addfmt</name><argument_list>(<argument><expr><name>bufp</name></expr></argument>, <argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'3'</literal></expr>:</case> 

<expr_stmt><expr><name>bufp</name> <operator>=</operator> <call><name>_addfmt</name><argument_list>(<argument><expr><name>bufp</name></expr></argument>, <argument><expr><literal type="string">"%03d"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> 

<expr_stmt><expr><name>gx</name> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>gy</name> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name><operator>&gt;</operator><name>gx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>col</name> <operator>+=</operator> <name>gy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name><operator>&gt;</operator><name>gx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>line</name> <operator>+=</operator> <name>gy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'+'</literal></expr>:</case> 

<expr_stmt><expr><name>line</name> <operator>+=</operator> <operator>*</operator><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

<case>case <expr><literal type="char">'.'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> 

<name>line</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> 

<name>line</name> <operator>==</operator> <literal type="char">'\004'</literal> <operator>||</operator> 

<name>line</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>reverse</name> <operator>==</operator> <operator>(</operator><name>line</name> <operator>==</operator> <name>col</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>addup</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>addbak</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>bufp</name><operator>++</operator><operator>=</operator><name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> 

<expr_stmt><expr><name>gx</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>gx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>reverse</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> 

<expr_stmt><expr><name>col</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'%'</literal></expr>:</case> 

<expr_stmt><expr><operator>*</operator><name>bufp</name><operator>++</operator><operator>=</operator><literal type="char">'%'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> 

<expr_stmt><expr><name>line</name> <operator>^=</operator> <literal type="number">0140</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>^=</operator> <literal type="number">0140</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case> 

<expr_stmt><expr><name>line</name> <operator>=</operator> <name>line</name><operator>/</operator><literal type="number">10</literal><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>+</operator><name>line</name><operator>%</operator><literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>col</name><operator>/</operator><literal type="number">10</literal><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>+</operator><name>col</name><operator>%</operator><literal type="number">10</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case> 

<expr_stmt><expr><name>line</name> <operator>=</operator> <name>line</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>line</name><operator>&amp;</operator><literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>col</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>col</name><operator>&amp;</operator><literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<return>return <expr><literal type="string">"OOPS"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>addup</name></expr>)</condition><block type="pseudo"><block_content> 

<if_stmt><if>if <condition>(<expr><name>UP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>=</operator><name>UP</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>bufp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>addbak</name></expr>)</condition><block type="pseudo"><block_content> 

<if_stmt><if>if <condition>(<expr><name>BC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>=</operator><name>BC</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>bufp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>bufp</name><operator>++</operator><operator>=</operator><literal type="char">'\b'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>bufp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return<expr><operator>(</operator><name>buffer</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>long</name></type> <name><name>_bauds</name><index>[<expr><literal type="number">16</literal></expr>]</index></name><init>=<expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">110</literal></expr>,

<expr><literal type="number">134</literal></expr>, <expr><literal type="number">150</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">300</literal></expr>,

<expr><literal type="number">600</literal></expr>, <expr><literal type="number">1200</literal></expr>, <expr><literal type="number">1800</literal></expr>, <expr><literal type="number">2400</literal></expr>,

<expr><literal type="number">4800</literal></expr>, <expr><literal type="number">9600</literal></expr>, <expr><literal type="number">19200</literal></expr>, <expr><literal type="number">19200</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>

<name>tputs</name><parameter_list>(

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>affcnt</name></decl></parameter>, 

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>outc</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>frac</name></decl>, 

<decl><type ref="prev"/><name>counter</name></decl>, 

<decl><type ref="prev"/><name>atol</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>frac</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>counter</name> <operator>=</operator> <name>counter</name> <operator>*</operator> <literal type="number">10L</literal> <operator>+</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><operator>*</operator><name>cp</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><operator>++</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>counter</name> <operator>=</operator> <name>counter</name> <operator>*</operator> <literal type="number">10L</literal> <operator>+</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><operator>*</operator><name>cp</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>frac</name> <operator>=</operator> <name>frac</name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></while></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name><operator>!=</operator><literal type="char">'*'</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>affcnt</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>affcnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ospeed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>counter</name> <operator>=</operator> <operator>(</operator><name>counter</name> <operator>*</operator> <name><name>_bauds</name><index>[<expr><name>ospeed</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>long</name><operator>)</operator><name>affcnt</name><operator>)</operator> <operator>/</operator> <name>frac</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>cp</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call>(<modifier>*</modifier><name>outc</name>)<argument_list>(<argument><expr><operator>*</operator><name>cp</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>ospeed</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name>counter</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call>(<modifier>*</modifier><name>outc</name>)<argument_list>(<argument><expr><name>PC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<while>while <condition>(<expr><operator>*</operator><name>cp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>outc</name>)<argument_list>(<argument><expr><operator>*</operator><name>cp</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>_match</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>_find</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for<control>(<init>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>set</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <operator>*</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>_addfmt</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

</unit>
