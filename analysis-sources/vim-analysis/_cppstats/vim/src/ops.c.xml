<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\ops.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>shift_block</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>amount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mb_adjust_opend</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>do_addsub</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op_type</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>Prenum1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ends_in_white</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fmt_check_par</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_comments</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPF_LINES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPF_CHANGE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>opchars</name><index>[]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><name>NUL</name></expr>, <expr><name>NUL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'d'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_CHANGE</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'y'</literal></expr>, <expr><name>NUL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'c'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_CHANGE</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'&lt;'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_LINES</name> <operator>|</operator> <name>OPF_CHANGE</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'&gt;'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_LINES</name> <operator>|</operator> <name>OPF_CHANGE</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'!'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_LINES</name> <operator>|</operator> <name>OPF_CHANGE</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'~'</literal></expr>, <expr><name>OPF_CHANGE</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'='</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_LINES</name> <operator>|</operator> <name>OPF_CHANGE</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'q'</literal></expr>, <expr><name>OPF_LINES</name> <operator>|</operator> <name>OPF_CHANGE</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">':'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_LINES</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'U'</literal></expr>, <expr><name>OPF_CHANGE</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><name>OPF_CHANGE</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'J'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_LINES</name> <operator>|</operator> <name>OPF_CHANGE</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'J'</literal></expr>, <expr><name>OPF_LINES</name> <operator>|</operator> <name>OPF_CHANGE</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'?'</literal></expr>, <expr><name>OPF_CHANGE</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'r'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_CHANGE</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'I'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_CHANGE</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'A'</literal></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_CHANGE</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><name>OPF_LINES</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><name>OPF_LINES</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'O'</literal></expr>, <expr><name>OPF_LINES</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><name>OPF_LINES</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><name>OPF_LINES</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><name>OPF_LINES</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><name>OPF_LINES</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'w'</literal></expr>, <expr><name>OPF_LINES</name> <operator>|</operator> <name>OPF_CHANGE</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><name>OPF_CHANGE</name></expr>}</block></expr>, 

<expr><block>{<expr><name>Ctrl_A</name></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_CHANGE</name></expr>}</block></expr>, 

<expr><block>{<expr><name>Ctrl_X</name></expr>, <expr><name>NUL</name></expr>, <expr><name>OPF_CHANGE</name></expr>}</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>

<name>get_op_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>char1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>char2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>char1</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>OP_REPLACE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>char1</name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>OP_TILDE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>char1</name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name>char2</name> <operator>==</operator> <name>Ctrl_A</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>OP_NR_ADD</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>char1</name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name>char2</name> <operator>==</operator> <name>Ctrl_X</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>OP_NR_SUB</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opchars</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>char1</name> <operator>&amp;&amp;</operator> <name><name>opchars</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>char2</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>opchars</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>char</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"get_op_type()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>op_on_lines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>opchars</name><index>[<expr><name>op</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>OPF_LINES</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>op_is_change</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>opchars</name><index>[<expr><name>op</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>OPF_CHANGE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>get_op_char</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>optype</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>opchars</name><index>[<expr><name>optype</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>get_extra_op_char</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>optype</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>opchars</name><index>[<expr><name>optype</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>op_shift</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curs_top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>amount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first_char</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>block_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>block_col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>first_char</name> <operator>=</operator> <operator>*</operator><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first_char</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>block_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>shift_block</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SMARTINDENT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>

if <condition>(<expr><name>first_char</name> <operator>!=</operator> <literal type="char">'#'</literal> <operator>||</operator> <operator>!</operator><call><name>preprocs_left</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>shift_line</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_LSHIFT</name></expr></argument>, <argument><expr><name>p_sr</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>block_mode</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>block_col</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>curs_top</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_SOL</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>&gt;</operator> <name>p_report</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg_line_single</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg_line_plural</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_RSHIFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"&gt;"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="string">"&lt;"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>msg_line_single</name> <operator>=</operator> <call><name>NGETTEXT</name><argument_list>(<argument><expr><literal type="string">"%ld line %sed %d time"</literal></expr></argument>,

<argument><expr><literal type="string">"%ld line %sed %d times"</literal></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_line_plural</name> <operator>=</operator> <call><name>NGETTEXT</name><argument_list>(<argument><expr><literal type="string">"%ld lines %sed %d time"</literal></expr></argument>,

<argument><expr><literal type="string">"%ld lines %sed %d times"</literal></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,

<argument><expr><call><name>NGETTEXT</name><argument_list>(<argument><expr><name>msg_line_single</name></expr></argument>, <argument><expr><name>msg_line_plural</name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_attr_keep</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>shift_line</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>round</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>amount</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>call_changed_bytes</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sw_val</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>get_sw_value_indent</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>get_indent</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>round</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>count</name> <operator>/</operator> <name>sw_val</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>count</name> <operator>%</operator> <name>sw_val</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;&amp;</operator> <name>left</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>--</operator><name>amount</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>amount</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>amount</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>i</name> <operator>*</operator> <name>sw_val</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>-=</operator> <name>sw_val</name> <operator>*</operator> <name>amount</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>sw_val</name> <operator>*</operator> <name>amount</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>VREPLACE_FLAG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>change_indent</name><argument_list>(<argument><expr><name>INDENT_SET</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>call_changed_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>set_indent</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><ternary><condition><expr><name>call_changed_bytes</name></expr> ?</condition><then> <expr><name>SIN_CHANGED</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>shift_block</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>amount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_LSHIFT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>oldstate</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oldp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>oldcol</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sw_val</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>get_sw_value_indent</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ts_val</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block_def</name></name></type> <name>bd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>incr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>ws_vcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>old_p_ri</name> <init>= <expr><name>p_ri</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_ri</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>INSERT</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>is_short</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>total</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>amount</name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>sw_val</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>total</name> <operator>/</operator> <name>sw_val</name><operator>)</operator> <operator>!=</operator> <name>amount</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>oldp</name> <operator>=</operator> <call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>left</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>pre_whitesp</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>ws_vcol</name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>start_vcol</name></name> <operator>-</operator> <name><name>bd</name><operator>.</operator><name>pre_whitesp</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>startspaces</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name><name>bd</name><operator>.</operator><name>textstart</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>bd</name><operator>.</operator><name>textstart</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>ws_vcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>startspaces</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>bd</name><operator>.</operator><name>textstart</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>( <init>;</init> <condition><expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name><name>bd</name><operator>.</operator><name>textstart</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>incr</name> <operator>=</operator> <call><name>lbr_chartabsize_adv</name><argument_list>(<argument><expr><name><name>bd</name><operator>.</operator><name>textstart</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bd</name><operator>.</operator><name>textstart</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name><name>bd</name><operator>.</operator><name>start_vcol</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>start_vcol</name></name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>tabstop_fromto</name><argument_list>(<argument><expr><name>ws_vcol</name></expr></argument>, <argument><expr><name>ws_vcol</name> <operator>+</operator> <name>total</name></expr></argument>,

<argument><expr><name>ts_val</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>total</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ws_vcol</name> <operator>%</operator> <name>ts_val</name><operator>)</operator> <operator>+</operator> <name>total</name><operator>)</operator> <operator>/</operator> <name>ts_val</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ws_vcol</name> <operator>%</operator> <name>ts_val</name><operator>)</operator> <operator>+</operator> <name>total</name><operator>)</operator> <operator>%</operator> <name>ts_val</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>total</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>-=</operator> <name><name>bd</name><operator>.</operator><name>pre_whitesp_c</name></name> <operator>-</operator> <operator>(</operator><name><name>bd</name><operator>.</operator><name>startspaces</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>bd</name><operator>.</operator><name>textstart</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>newp</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>+</operator> <name>len</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>, <argument><expr><name>TAB</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name><name>bd</name><operator>.</operator><name>textstart</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>destination_col</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>verbatim_copy_end</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>verbatim_copy_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>fill</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>new_line_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>block_space_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>shift_amount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>non_white</name> <init>= <expr><name><name>bd</name><operator>.</operator><name>textstart</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>non_white_col</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>startspaces</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>non_white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>non_white_col</name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>start_vcol</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>non_white</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>incr</name> <operator>=</operator> <call><name>lbr_chartabsize_adv</name><argument_list>(<argument><expr><name><name>bd</name><operator>.</operator><name>textstart</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>non_white</name></expr></argument>, <argument><expr><name>non_white_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>non_white_col</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>block_space_width</name> <operator>=</operator> <name>non_white_col</name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>shift_amount</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>block_space_width</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>total</name></expr>

?</condition><then> <expr><name>block_space_width</name></expr> </then><else>: <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>total</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>destination_col</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>non_white_col</name> <operator>-</operator> <name>shift_amount</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>verbatim_copy_end</name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>textstart</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>verbatim_copy_width</name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>start_vcol</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>startspaces</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>verbatim_copy_width</name> <operator>-=</operator> <name><name>bd</name><operator>.</operator><name>start_char_vcols</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>verbatim_copy_width</name> <operator>&lt;</operator> <name>destination_col</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>verbatim_copy_end</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>incr</name> <operator>=</operator> <call><name>lbr_chartabsize</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>verbatim_copy_end</name></expr></argument>,

<argument><expr><name>verbatim_copy_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>verbatim_copy_width</name> <operator>+</operator> <name>incr</name> <operator>&gt;</operator> <name>destination_col</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>verbatim_copy_width</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>verbatim_copy_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>fill</name> <operator>=</operator> <name>destination_col</name> <operator>-</operator> <name>verbatim_copy_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_line_len</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>verbatim_copy_end</name> <operator>-</operator> <name>oldp</name><operator>)</operator>

<operator>+</operator> <name>fill</name>

<operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>non_white</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>newp</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>new_line_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>verbatim_copy_end</name> <operator>-</operator> <name>oldp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <operator>(</operator><name>verbatim_copy_end</name> <operator>-</operator> <name>oldp</name><operator>)</operator></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <operator>(</operator><name>verbatim_copy_end</name> <operator>-</operator> <name>oldp</name><operator>)</operator> <operator>+</operator> <name>fill</name></expr></argument>, <argument><expr><name>non_white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>newp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_bytes</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>oldstate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>oldcol</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p_ri</name> <operator>=</operator> <name>old_p_ri</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>block_insert</name><parameter_list>(

<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>b_insert</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>block_def</name></name> <modifier>*</modifier></type><name>bdp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ts_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>spaces</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>s_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oldp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>oldstate</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>INSERT</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>s_len</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</condition> <incr><expr><name>lnum</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>bdp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bdp</name><operator>-&gt;</operator><name>is_short</name></name> <operator>&amp;&amp;</operator> <name>b_insert</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>oldp</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b_insert</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ts_val</name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>start_char_vcols</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>spaces</name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>spaces</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>ts_val</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>textcol</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>ts_val</name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>end_char_vcols</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bdp</name><operator>-&gt;</operator><name>is_short</name></name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>spaces</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name></expr> ?</condition><then> <expr><name>ts_val</name> <operator>-</operator> <name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>spaces</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>ts_val</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>textcol</name></name> <operator>+</operator> <name><name>bdp</name><operator>-&gt;</operator><name>textlen</name></name> <operator>-</operator> <operator>(</operator><name>spaces</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bdp</name><operator>-&gt;</operator><name>is_MAX</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>spaces</name> <operator>=</operator> <operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>spaces</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>textcol</name></name> <operator>+</operator> <name><name>bdp</name><operator>-&gt;</operator><name>textlen</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <name>spaces</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b_insert</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>oldp</name></expr></argument>, <argument><expr><name>oldp</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_off_next</name>)<argument_list>(<argument><expr><name>oldp</name></expr></argument>, <argument><expr><name>oldp</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>off</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>spaces</name> <operator>-=</operator> <name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>-=</operator> <name>off</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>newp</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>oldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>s_len</name> <operator>+</operator> <name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldp</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>spaces</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>s_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>s_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>spaces</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>bdp</name><operator>-&gt;</operator><name>is_short</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>spaces</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>ts_val</name> <operator>-</operator> <name>spaces</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>spaces</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>newp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for> 

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>oldstate</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>stuffescaped</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>literally</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>arg</name> <operator>&gt;=</operator> <literal type="char">' '</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>&lt;</operator> <name>DEL</name> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>*</operator><name>arg</name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>literally</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>arg</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>&gt;</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stuffReadbuffLen</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>arg</name> <operator>-</operator> <name>start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>mb_cptr2char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>arg</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>literally</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>TAB</name><operator>)</operator> <operator>||</operator> <name>c</name> <operator>==</operator> <name>DEL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>Ctrl_V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>op_delete</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oldp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block_def</name></name></type> <name>bd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>old_lcount</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_yank</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>empty</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_modifiable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>adjust_clip_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mb_adjust_opend</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>MCHAR</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>block_mode</name></name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>motion_force</name></name> <operator>==</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_DELETE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <call><name>inindent</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MLINE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>MCHAR</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_DELETE</name>

<operator>&amp;&amp;</operator> <operator>*</operator><call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>virtual_op</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>setmarks</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_EMPTYREGION</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_yank_reg</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_yank_register</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>op_yank</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>did_yank</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>MLINE</name> <operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal>

<operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>use_reg_one</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>shift_delete_registers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>op_yank</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>did_yank</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>(</operator><operator>(</operator><name>clip_unnamed</name> <operator>&amp;</operator> <name>CLIP_UNNAMED</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>==</operator> <literal type="char">'*'</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>clip_unnamed</name> <operator>&amp;</operator> <name>CLIP_UNNAMED_PLUS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator> <operator>||</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>!=</operator> <name>MLINE</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_yank_register</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>op_yank</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>did_yank</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_yank</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>msg_silent_save</name> <init>= <expr><name>msg_silent</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>ask_yesno</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot yank; delete anyway"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <name>msg_silent_save</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="char">'y'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_abort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>did_yank</name> <operator>&amp;&amp;</operator> <call><name>has_textyankpost</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>yank_do_autocmd</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><call><name>get_y_current</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>block_mode</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>textlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>startspaces</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name> <operator>-</operator> <name><name>bd</name><operator>.</operator><name>startspaces</name></name> <operator>-</operator> <name><name>bd</name><operator>.</operator><name>endspaces</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>oldp</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newp</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>oldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>bd</name><operator>.</operator><name>startspaces</name></name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>endspaces</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldp</name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>startspaces</name></name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>endspaces</name></name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>newp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_has_textprop</name></name> <operator>&amp;&amp;</operator> <name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>adjust_prop_columns</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>, <argument><expr><operator>-</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr></argument>,

<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>MLINE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_CHANGE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>del_lines</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ai</name></name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>did_ai</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>ai_col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>truncate_line</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>u_clearline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>del_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u_clearline</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>virtual_op</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>endcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gchar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>endcol</name> <operator>=</operator> <call><name>getviscol2</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>coladvance_force</name><argument_list>(<argument><expr><call><name>getviscol2</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>coladd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name>endcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gchar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'\t'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name> <operator>&lt;</operator> <name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coladvance_force</name><argument_list>(<argument><expr><call><name>getviscol2</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mb_adjust_opend</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_DOLLAR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_CHANGE</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>display_dollar</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>-</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>virtual_op</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>curline</name> <init>= <expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>curline</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>coladd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>coladd</name></name> <operator>!=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>del_bytes</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><operator>!</operator><name>virtual_op</name></expr></argument>,

<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_DELETE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>curpos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>truncate_line</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>curpos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>del_lines</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>del_bytes</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><operator>!</operator><name>virtual_op</name></expr></argument>,

<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_DELETE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>curpos</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_join</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msgmore</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>old_lcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>setmarks</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>block_mode</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>mb_adjust_opend</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <call><name>mb_tail_off</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>replace_character</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>REPLACE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dec_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>op_replace</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>numc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_chars</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oldp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>oldlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block_def</name></name></type> <name>bd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>after_p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>had_ctrl_v_cr</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name> <operator>)</operator> <operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>empty</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>REPLACE_CR_NCHAR</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>had_ctrl_v_cr</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>REPLACE_NL_NCHAR</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>had_ctrl_v_cr</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>NL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mb_adjust_opend</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>block_mode</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>is_MAX</name></name> <operator>=</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>==</operator> <name>MAXCOL</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>( <init>;</init> <condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>textlen</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>virtual_op</name> <operator>||</operator> <name><name>bd</name><operator>.</operator><name>is_MAX</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>virtual_op</name> <operator>&amp;&amp;</operator> <name><name>bd</name><operator>.</operator><name>is_short</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>bd</name><operator>.</operator><name>textstart</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>vpos</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getvpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vpos</name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>startspaces</name></name> <operator>+=</operator> <name><name>vpos</name><operator>.</operator><name>coladd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>startspaces</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>bd</name><operator>.</operator><name>startspaces</name></name></expr> ?</condition><then> <expr><name><name>bd</name><operator>.</operator><name>start_char_vcols</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name><name>bd</name><operator>.</operator><name>endspaces</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>bd</name><operator>.</operator><name>is_oneChar</name></name>

<operator>&amp;&amp;</operator> <name><name>bd</name><operator>.</operator><name>end_char_vcols</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>bd</name><operator>.</operator><name>end_char_vcols</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>numc</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>is_short</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>virtual_op</name> <operator>||</operator> <name><name>bd</name><operator>.</operator><name>is_MAX</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>numc</name> <operator>-=</operator> <operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>bd</name><operator>.</operator><name>end_vcol</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>mb_char2cells</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>numc</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>bd</name><operator>.</operator><name>is_short</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>bd</name><operator>.</operator><name>endspaces</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>numc</name> <operator>=</operator> <name>numc</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num_chars</name> <operator>=</operator> <name>numc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>numc</name> <operator>*=</operator> <call>(<modifier>*</modifier><name>mb_char2len</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>numc</name> <operator>-</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>oldp</name> <operator>=</operator> <call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldlen</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>oldp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newp</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>oldlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>oldlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>n</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldp</name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>startspaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>had_ctrl_v_cr</name> <operator>||</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>newp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>--</operator><name>num_chars</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>newp</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>newp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>numc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bd</name><operator>.</operator><name>is_short</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>newp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>endspaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>newp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>oldp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>after_p</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>oldlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>n</name> <operator>-</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>newp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>after_p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>after_p</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>newp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>after_p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>++</operator></expr></argument>, <argument><expr><name>after_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>appended_lines_mark</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>after_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>MLINE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dec</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>LTOREQ_POS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>mb_char2len</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <call>(<modifier>*</modifier><name>mb_char2len</name>)<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_char2len</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>-</operator> <call>(<modifier>*</modifier><name>mb_char2len</name>)<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>replace_character</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>TAB</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>end_vcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>end_vcol</name> <operator>=</operator> <call><name>getviscol2</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr></argument>,

<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>coladvance_force</name><argument_list>(<argument><expr><call><name>getviscol</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>getvpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>end_vcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PBYTE</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>virtual_op</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>virtcols</name> <init>= <expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>coladd</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>virtcols</name> <operator>-=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>coladd</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>coladvance_force</name><argument_list>(<argument><expr><call><name>getviscol2</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-=</operator> <operator>(</operator><name>virtcols</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>virtcols</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>virtcols</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>mb_char2len</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>replace_character</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PBYTE</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inc_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>swapchars</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op_type</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>op_tilde</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block_def</name></name></type> <name>bd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_change</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>block_mode</name></name></expr>)</condition> 

<block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>&lt;=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>one_change</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>one_change</name> <operator>=</operator> <call><name>swapchars</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name><name>bd</name><operator>.</operator><name>textlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_change</name> <operator>|=</operator> <name>one_change</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>netbeans_active</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>one_change</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>netbeans_removed</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>textlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>netbeans_inserted</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ptr</name><index>[<expr><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bd</name><operator>.</operator><name>textlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>did_change</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>MLINE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dec</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>did_change</name> <operator>=</operator> <call><name>swapchars</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>,

<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>did_change</name> <operator>|=</operator> <call><name>swapchars</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr> ?</condition><then> <expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr></then><else>:

<expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LTOREQ_POS</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>did_change</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>netbeans_active</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>did_change</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>netbeans_removed</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>netbeans_inserted</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ptr</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>netbeans_removed</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>netbeans_inserted</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ptr</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_change</name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>&gt;</operator> <name>p_report</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>NGETTEXT</name><argument_list>(<argument><expr><literal type="string">"%ld line changed"</literal></expr></argument>, <argument><expr><literal type="string">"%ld lines changed"</literal></expr></argument>,

<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>swapchars</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op_type</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_change</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>todo</name> <operator>=</operator> <name>length</name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>todo</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><call><name>ml_get_pos</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>todo</name> <operator>-=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>did_change</name> <operator>|=</operator> <call><name>swapchar</name><argument_list>(<argument><expr><name>op_type</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inc</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>did_change</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>swapchar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op_type</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>gchar_pos</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>op_type</name> <operator>==</operator> <name>OP_ROT13</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op_type</name> <operator>==</operator> <name>OP_UPPER</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="number">0xdf</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>enc_latin1like</name> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"iso-8859-2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>sp</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>del_char</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_char</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_char</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>inc</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MB_ISLOWER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>op_type</name> <operator>==</operator> <name>OP_ROT13</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>ROT13</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>op_type</name> <operator>!=</operator> <name>OP_LOWER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>MB_TOUPPER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>MB_ISUPPER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>op_type</name> <operator>==</operator> <name>OP_ROT13</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>ROT13</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>op_type</name> <operator>!=</operator> <name>OP_UPPER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>MB_TOLOWER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nc</name> <operator>!=</operator> <name>c</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>||</operator> <name>nc</name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>sp</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>del_bytes</name><argument_list>(<argument><expr><call><name>utf_ptr2len</name><argument_list>(<argument><expr><call><name>ml_get_cursor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_char</name><argument_list>(<argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PBYTE</name><argument_list>(<argument><expr><operator>*</operator><name>pos</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>op_insert</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>ins_len</name></decl>, <decl><type ref="prev"/><name>pre_textlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>firstline</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ins_text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>ind_pre</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ind_post</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block_def</name></name></type> <name>bd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>t1</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>is_MAX</name></name> <operator>=</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>==</operator> <name>MAXCOL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>block_mode</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>old_ve_flags</name> <init>= <expr><name>ve_flags</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ve_flags</name> <operator>=</operator> <name>VE_ALL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>coladvance_force</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name></expr>

?</condition><then> <expr><name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><call><name>getviscol</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ve_flags</name> <operator>=</operator> <name>old_ve_flags</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ind_pre</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>getwhitecols_curline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>firstline</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>firstline</name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pre_textlen</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>firstline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>block_mode</name></name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><call><name>ml_get_cursor</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>is_short</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>bd</name><operator>.</operator><name>is_MAX</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bd</name><operator>.</operator><name>endspaces</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_char</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textlen</name></name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>endspaces</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LINEEMPTY</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>!=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>inc_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>edit</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>count1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>t1</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <call><name>LT_POS</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name></name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>||</operator> <name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>block_mode</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>block_def</name></name></type> <name>bd2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_indent</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>add</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ind_post</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>getwhitecols_curline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name>ind_pre</name> <operator>&amp;&amp;</operator> <name>ind_post</name> <operator>&gt;</operator> <name>ind_pre</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+=</operator> <name>ind_post</name> <operator>-</operator> <name>ind_pre</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>start_vcol</name></name> <operator>+=</operator> <name>ind_post</name> <operator>-</operator> <name>ind_pre</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_indent</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>bd</name><operator>.</operator><name>is_MAX</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>did_indent</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_INSERT</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>coladd</name></name>

<operator>!=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>col</name></name>

<operator>+</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>coladd</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>getviscol2</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>col</name></name></expr></argument>,

<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>coladd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pre_textlen</name> <operator>-=</operator> <name>t</name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name>

<operator>&gt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>col</name></name>

<operator>+</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>coladd</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>getviscol2</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>col</name></name></expr></argument>,

<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>coladd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start_orig</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pre_textlen</name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pre_textlen</name> <operator>-=</operator> <name>t</name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>=</operator> <name>OP_INSERT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd2</name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bd</name><operator>.</operator><name>is_MAX</name></name> <operator>||</operator> <name><name>bd2</name><operator>.</operator><name>textlen</name></name> <operator>&lt;</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pre_textlen</name> <operator>+=</operator> <name><name>bd2</name><operator>.</operator><name>textlen</name></name> <operator>-</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd2</name><operator>.</operator><name>endspaces</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>bd2</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>=</operator> <name><name>bd2</name><operator>.</operator><name>textcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textlen</name></name> <operator>=</operator> <name><name>bd2</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>firstline</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>firstline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>add</name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>add</name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>add</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>firstline</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>firstline</name> <operator>+=</operator> <name>add</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pre_textlen</name> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>ins_len</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>firstline</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>pre_textlen</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ins_text</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>firstline</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>ins_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ins_text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_insert</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>ins_text</name></expr></argument>, <argument><expr><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_INSERT</name><operator>)</operator></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ins_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>op_change</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>linenr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ins_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>pre_textlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>pre_indent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>firstline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ins_text</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oldp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block_def</name></name></type> <name>bd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>MLINE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SMARTINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_paste</name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_si</name></name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cin</name></name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>can_si</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>op_delete</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>LINEEMPTY</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><name>virtual_op</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>inc_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>block_mode</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>virtual_op</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>coladvance_force</name><argument_list>(<argument><expr><call><name>getviscol</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>firstline</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pre_textlen</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>firstline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pre_indent</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>getwhitecols</name><argument_list>(<argument><expr><name>firstline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>MLINE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fix_indent</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>edit</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>block_mode</name></name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>firstline</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>pre_indent</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>new_indent</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator><call><name>getwhitecols</name><argument_list>(<argument><expr><name>firstline</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pre_textlen</name> <operator>+=</operator> <name>new_indent</name> <operator>-</operator> <name>pre_indent</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bd</name><operator>.</operator><name>textcol</name></name> <operator>+=</operator> <name>new_indent</name> <operator>-</operator> <name>pre_indent</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ins_len</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>firstline</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>pre_textlen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ins_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ins_text</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>ins_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>ins_text</name></expr></argument>, <argument><expr><name>firstline</name> <operator>+</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>ins_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>linenr</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>linenr</name> <operator>&lt;=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</condition>

<incr><expr><name>linenr</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name>linenr</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bd</name><operator>.</operator><name>is_short</name></name> <operator>||</operator> <name>virtual_op</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>vpos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bd</name><operator>.</operator><name>is_short</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>vpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>linenr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>getvpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vpos</name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vpos</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>oldp</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>linenr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newp</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>oldp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>vpos</name><operator>.</operator><name>coladd</name></name> <operator>+</operator> <name>ins_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>textcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>vpos</name><operator>.</operator><name>coladd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>vpos</name><operator>.</operator><name>coladd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>ins_text</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>ins_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>ins_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>oldp</name> <operator>+=</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>newp</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>oldp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name>linenr</name></expr></argument>, <argument><expr><name>newp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ins_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>adjust_cursor_eol</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>ve_flags</name> <operator>&amp;</operator> <name>VE_ONEMORE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>restart_edit</name> <operator>||</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dec_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ve_flags</name> <operator>==</operator> <name>VE_ALL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>scol</name></decl>, <decl><type ref="prev"/><name>ecol</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <name>ecol</name> <operator>-</operator> <name>scol</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>skip_comment</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>process</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>include_space</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_comment</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>comment_flags</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lead_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>leader_offset</name> <init>= <expr><call><name>get_last_leader_offset</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>comment_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>is_comment</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>leader_offset</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>comment_flags</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>comment_flags</name> <operator>==</operator> <name>COM_END</name>

<operator>||</operator> <operator>*</operator><name>comment_flags</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>comment_flags</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>comment_flags</name> <operator>!=</operator> <name>COM_END</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>is_comment</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>process</name> <operator>==</operator> <name>FALSE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>line</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lead_len</name> <operator>=</operator> <call><name>get_leader_len</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>comment_flags</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>include_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lead_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>line</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>comment_flags</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>comment_flags</name> <operator>==</operator> <name>COM_END</name>

<operator>||</operator> <operator>*</operator><name>comment_flags</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>comment_flags</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>comment_flags</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <operator>*</operator><name>comment_flags</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>lead_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>line</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>do_join</name><parameter_list>(

<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>insert_space</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>save_undo</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>use_formatoptions</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>setmark</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>curr_start</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>spaces</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>endcurr1</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>endcurr2</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>currsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sumsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>comments</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>remove_comments</name> <init>= <expr><operator>(</operator><name>use_formatoptions</name> <operator>==</operator> <name>TRUE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_REMOVE_COMS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_was_comment</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>textprop_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>prop_lines</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>prop_lengths</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>save_undo</name> <operator>&amp;&amp;</operator> <call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <name>count</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>spaces</name> <operator>=</operator> <call><name>lalloc_clear</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>spaces</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>remove_comments</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>comments</name> <operator>=</operator> <call><name>lalloc_clear</name><argument_list>(<argument><expr><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>comments</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>curr_start</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <name>t</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>setmark</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>remove_comments</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>prev_was_comment</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_curr</name> <init>= <expr><call><name>skip_comment</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>insert_space</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>prev_was_comment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>comments</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>new_curr</name> <operator>-</operator> <name>curr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>new_curr</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <call><name>skip_comment</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>insert_space</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>prev_was_comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>insert_space</name> <operator>&amp;&amp;</operator> <name>t</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>curr</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>curr</name> <operator>!=</operator> <literal type="char">')'</literal>

<operator>&amp;&amp;</operator> <name>sumsize</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>endcurr1</name> <operator>!=</operator> <name>TAB</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_MBYTE_JOIN</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><call><name>mb_ptr2char</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0x100</literal> <operator>&amp;&amp;</operator> <name>endcurr1</name> <operator>&lt;</operator> <literal type="number">0x100</literal><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_MBYTE_JOIN2</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>mb_ptr2char</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0x100</literal> <operator>||</operator> <name>endcurr1</name> <operator>&lt;</operator> <literal type="number">0x100</literal><operator>)</operator></expr>

)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>endcurr1</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>endcurr1</name> <operator>=</operator> <name>endcurr2</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>spaces</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name>p_js</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>endcurr1</name> <operator>==</operator> <literal type="char">'.'</literal>

<operator>||</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_JOINSP</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>endcurr1</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>||</operator> <name>endcurr1</name> <operator>==</operator> <literal type="char">'!'</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>spaces</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>currsize</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumsize</name> <operator>+=</operator> <name>currsize</name> <operator>+</operator> <name><name>spaces</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>endcurr1</name> <operator>=</operator> <name>endcurr2</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>insert_space</name> <operator>&amp;&amp;</operator> <name>currsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cend</name> <operator>=</operator> <name>curr</name> <operator>+</operator> <name>currsize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>cend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endcurr1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2char</name>)<argument_list>(<argument><expr><name>cend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cend</name> <operator>&gt;</operator> <name>curr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>cend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endcurr2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2char</name>)<argument_list>(<argument><expr><name>cend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>endcurr1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>curr</name> <operator>+</operator> <name>currsize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>currsize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>endcurr2</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>curr</name> <operator>+</operator> <name>currsize</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>sumsize</name> <operator>-</operator> <name>currsize</name> <operator>-</operator> <name><name>spaces</name><index>[<expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>newp</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>sumsize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cend</name> <operator>=</operator> <name>newp</name> <operator>+</operator> <name>sumsize</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cend</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_has_textprop</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>text_prop_frozen</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>prop_lines</name> <operator>=</operator> <call><name>ALLOC_CLEAR_MULT</name><argument_list>(<argument><expr><name>textprop_T</name> <operator>*</operator></expr></argument>, <argument><expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prop_lengths</name> <operator>=</operator> <call><name>ALLOC_CLEAR_MULT</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prop_lengths</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>prop_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition>;</condition> <incr><expr><operator>--</operator><name>t</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>spaces_removed</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cend</name> <operator>-=</operator> <name>currsize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>cend</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>currsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spaces</name><index>[<expr><name>t</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cend</name> <operator>-=</operator> <name><name>spaces</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>cend</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>spaces</name><index>[<expr><name>t</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>spaces_removed</name> <operator>=</operator> <operator>(</operator><name>curr</name> <operator>-</operator> <name>curr_start</name><operator>)</operator> <operator>-</operator> <name><name>spaces</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mark_col_adjust</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <name>t</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>-</operator><name>t</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>cend</name> <operator>-</operator> <name>newp</name> <operator>-</operator> <name>spaces_removed</name><operator>)</operator></expr></argument>, <argument><expr><name>spaces_removed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>prop_lines</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>adjust_props_for_join</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <name>t</name></expr></argument>,

<argument><expr><name>prop_lines</name> <operator>+</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>prop_lengths</name> <operator>+</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>cend</name> <operator>-</operator> <name>newp</name> <operator>-</operator> <name>spaces_removed</name><operator>)</operator></expr></argument>, <argument><expr><name>spaces_removed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>curr_start</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>remove_comments</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curr</name> <operator>+=</operator> <name><name>comments</name><index>[<expr><name>t</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>insert_space</name> <operator>&amp;&amp;</operator> <name>t</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>currsize</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>prop_lines</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>join_prop_lines</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>newp</name></expr></argument>,

<argument><expr><name>prop_lines</name></expr></argument>, <argument><expr><name>prop_lengths</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>newp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>setmark</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>sumsize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>currsize</name></expr></argument>,

<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>del_lines</name><argument_list>(<argument><expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator>

<operator>(</operator><ternary><condition><expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_JOINCOL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>currsize</name></expr> </then><else>: <expr><name>col</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<label><name>theend</name>:</label>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>spaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>remove_comments</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>comments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>same_leader</name><parameter_list>(

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>leader1_len</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>leader1_flags</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>leader2_len</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>leader2_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>idx2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>leader1_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>leader2_len</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>leader1_flags</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>leader1_flags</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">':'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>COM_FIRST</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>leader2_len</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>COM_END</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>COM_START</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>leader1_len</name><operator>)</operator> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>leader2_flags</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>leader2_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>leader2_flags</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">':'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>COM_MIDDLE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line1</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line1</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>idx1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>line1</name><index>[<expr><name>idx1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>idx1</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>line2</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>idx2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx2</name> <operator>&lt;</operator> <name>leader2_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx2</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>line2</name><index>[<expr><name>idx2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>line1</name><index>[<expr><name>idx1</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <name><name>line2</name><index>[<expr><name>idx2</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<while>while <condition>(<expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>line1</name><index>[<expr><name>idx1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>idx1</name></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>line1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>idx2</name> <operator>==</operator> <name>leader2_len</name> <operator>&amp;&amp;</operator> <name>idx1</name> <operator>==</operator> <name>leader1_len</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>op_format</name><parameter_list>(

<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>keep_cursor</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>old_line_count</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>cursor_start</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keep_cursor</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>saved_cursor</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>cursor_start</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>format_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr></argument>, <argument><expr><name>keep_cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>end_adjusted</name></name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_line_count</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>old_line_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msgmore</name><argument_list>(<argument><expr><name>old_line_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keep_cursor</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>saved_cursor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>saved_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>+=</operator> <name>old_line_count</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name> <operator>+=</operator> <name>old_line_count</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>op_formatexpr</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fex_format</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>op_format</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>fex_format</name><parameter_list>(

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>use_sandbox</name> <init>= <expr><call><name>was_set_insecurely</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"formatexpr"</literal></expr></argument>,

<argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fex</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_LNUM</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_COUNT</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fex</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fex</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sandbox</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>sandbox</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>eval_to_number</name><argument_list>(<argument><expr><name>fex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sandbox</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>sandbox</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_CHAR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>format_lines</name><parameter_list>(

<parameter><decl><type><name>linenr_T</name></type> <name>line_count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>avoid_fex</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>max_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_not_par</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>next_is_not_par</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>is_end_par</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>prev_is_end_par</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_is_start_par</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>leader_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>next_leader_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>leader_flags</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>next_leader_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>do_comments</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>do_comments_list</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>advance</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>second_indent</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>do_second_indent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_number_indent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_trail_white</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first_par_line</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>smd_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_set_indent</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>force_format</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_State</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>max_len</name> <operator>=</operator> <call><name>comp_textwidth</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>do_comments</name> <operator>=</operator> <call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_Q_COMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>do_second_indent</name> <operator>=</operator> <call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_Q_SECOND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>do_number_indent</name> <operator>=</operator> <call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_Q_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>do_trail_white</name> <operator>=</operator> <call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_WHITE_PAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_not_par</name> <operator>=</operator> <call><name>fmt_check_par</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>

, <argument><expr><operator>&amp;</operator><name>leader_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>leader_flags</name></expr></argument>, <argument><expr><name>do_comments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>is_not_par</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>next_is_not_par</name> <operator>=</operator> <call><name>fmt_check_par</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>

, <argument><expr><operator>&amp;</operator><name>next_leader_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_leader_flags</name></expr></argument>, <argument><expr><name>do_comments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_end_par</name> <operator>=</operator> <operator>(</operator><name>is_not_par</name> <operator>||</operator> <name>next_is_not_par</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_end_par</name> <operator>&amp;&amp;</operator> <name>do_trail_white</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_end_par</name> <operator>=</operator> <operator>!</operator><call><name>ends_in_white</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>--</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <name>line_count</name></expr>;</init> <condition><expr><name>count</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>--</operator><name>count</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>advance</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_is_end_par</name> <operator>=</operator> <name>is_end_par</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_not_par</name> <operator>=</operator> <name>next_is_not_par</name></expr>;</expr_stmt>

<expr_stmt><expr><name>leader_len</name> <operator>=</operator> <name>next_leader_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>leader_flags</name> <operator>=</operator> <name>next_leader_flags</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>next_is_not_par</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_leader_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>next_leader_flags</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>next_is_not_par</name> <operator>=</operator> <call><name>fmt_check_par</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>

, <argument><expr><operator>&amp;</operator><name>next_leader_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_leader_flags</name></expr></argument>, <argument><expr><name>do_comments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_number_indent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next_is_start_par</name> <operator>=</operator>

<operator>(</operator><call><name>get_number_indent</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>advance</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_end_par</name> <operator>=</operator> <operator>(</operator><name>is_not_par</name> <operator>||</operator> <name>next_is_not_par</name> <operator>||</operator> <name>next_is_start_par</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_end_par</name> <operator>&amp;&amp;</operator> <name>do_trail_white</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_end_par</name> <operator>=</operator> <operator>!</operator><call><name>ends_in_white</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_not_par</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>line_count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first_par_line</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>do_second_indent</name> <operator>||</operator> <name>do_number_indent</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>prev_is_end_par</name>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>do_second_indent</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>LINEEMPTY</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>leader_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next_leader_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>second_indent</name> <operator>=</operator>

<call><name>get_indent_lnum</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>second_indent</name> <operator>=</operator> <name>next_leader_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>do_comments_list</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>do_number_indent</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>leader_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next_leader_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>second_indent</name> <operator>=</operator>

<call><name>get_number_indent</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>second_indent</name> <operator>=</operator>

<call><name>get_number_indent</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>do_comments_list</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>||</operator> <operator>!</operator><call><name>same_leader</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><name>leader_len</name></expr></argument>, <argument><expr><name>leader_flags</name></expr></argument>,

<argument><expr><name>next_leader_len</name></expr></argument>, <argument><expr><name>next_leader_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_end_par</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_end_par</name> <operator>||</operator> <name>force_format</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>need_set_indent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>set_indent</name><argument_list>(<argument><expr><call><name>get_indent</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SIN_CHANGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>MAXCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&amp;&amp;</operator> <call><name>vim_isspace</name><argument_list>(<argument><expr><call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dec_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>INSERT</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>smd_save</name> <operator>=</operator> <name>p_smd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_smd</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>insertchar</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>INSCHAR_FORMAT</name>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>do_comments</name></expr> ?</condition><then> <expr><name>INSCHAR_DO_COM</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>do_comments</name> <operator>&amp;&amp;</operator> <name>do_comments_list</name></expr>

?</condition><then> <expr><name>INSCHAR_COM_LIST</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>avoid_fex</name></expr> ?</condition><then> <expr><name>INSCHAR_NO_FEX</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>second_indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>old_State</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_smd</name> <operator>=</operator> <name>smd_save</name></expr>;</expr_stmt>

<expr_stmt><expr><name>second_indent</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>need_set_indent</name> <operator>=</operator> <name>is_end_par</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_end_par</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>line_count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first_par_line</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>force_format</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_end_par</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>advance</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line_count</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next_leader_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>del_bytes</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>next_leader_len</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mark_col_adjust</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><name>next_leader_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>second_indent</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>indent</name> <init>= <expr><call><name>getwhitecols_curline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>indent</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>del_bytes</name><argument_list>(<argument><expr><name>indent</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mark_col_adjust</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><name>indent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>do_join</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first_par_line</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>max_len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>force_format</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>force_format</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ends_in_white</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>fmt_check_par</name><parameter_list>(

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>leader_len</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>leader_flags</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>do_comments</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>flags</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_comments</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>leader_len</name> <operator>=</operator> <call><name>get_leader_len</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>leader_flags</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>leader_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>leader_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>*</operator><name>leader_flags</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>flags</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>flags</name> <operator>!=</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>flags</name> <operator>!=</operator> <name>COM_END</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>flags</name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <operator>*</operator><name>leader_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name>

<operator>||</operator> <operator>(</operator><operator>*</operator><name>leader_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>flags</name> <operator>==</operator> <name>COM_END</name><operator>)</operator>

<operator>||</operator> <call><name>startPS</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>paragraph_start</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>leader_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>leader_flags</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>next_leader_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>next_leader_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>do_comments</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>do_comments</name> <operator>=</operator> <call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_Q_COMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fmt_check_par</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>leader_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>leader_flags</name></expr></argument>, <argument><expr><name>do_comments</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>fmt_check_par</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_leader_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_leader_flags</name></expr></argument>, <argument><expr><name>do_comments</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_WHITE_PAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ends_in_white</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_Q_NUMBER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>get_number_indent</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>same_leader</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>leader_len</name></expr></argument>, <argument><expr><name>leader_flags</name></expr></argument>,

<argument><expr><name>next_leader_len</name></expr></argument>, <argument><expr><name>next_leader_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>block_prep</name><parameter_list>(

<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>block_def</name></name> <modifier>*</modifier></type><name>bdp</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>is_del</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>incr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pstart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>prev_pstart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>prev_pend</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>lbr_saved</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>textlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>is_short</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>is_oneChar</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>pre_whitesp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>pre_whitesp_c</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>end_char_vcols</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>start_char_vcols</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pstart</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_pstart</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>bdp</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>&lt;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pstart</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>incr</name> <operator>=</operator> <call><name>lbr_chartabsize</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>pstart</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>bdp</name><operator>-&gt;</operator><name>start_vcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>pstart</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>pre_whitesp</name></name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>pre_whitesp_c</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>pre_whitesp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>pre_whitesp_c</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>prev_pstart</name> <operator>=</operator> <name>pstart</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>pstart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>start_char_vcols</name></name> <operator>=</operator> <name>incr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bdp</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>&lt;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>start_vcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>is_short</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_del</name> <operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_del</name> <operator>&amp;&amp;</operator> <name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>start_char_vcols</name></name> <operator>-</operator> <name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pend</name> <operator>=</operator> <name>pstart</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>start_vcol</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>&gt;</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>is_oneChar</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_INSERT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>start_char_vcols</name></name> <operator>-</operator> <name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name> <operator>+=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>start_char_vcols</name></name> <operator>-</operator> <name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_del</name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_LSHIFT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>start_char_vcols</name></name>

<operator>-</operator> <operator>(</operator><name><name>bdp</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>prev_pend</name> <operator>=</operator> <name>pend</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>&lt;=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pend</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>prev_pend</name> <operator>=</operator> <name>pend</name></expr>;</expr_stmt>

<expr_stmt><expr><name>incr</name> <operator>=</operator> <call><name>lbr_chartabsize_adv</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pend</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>&lt;=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>is_del</name>

<operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name>

<operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_REPLACE</name><operator>)</operator></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>is_short</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_APPEND</name> <operator>||</operator> <name>virtual_op</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name>

<operator>+</operator> <name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>&gt;</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name> <operator>=</operator> <name><name>bdp</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_del</name> <operator>&amp;&amp;</operator> <name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name> <operator>=</operator> <name>incr</name> <operator>-</operator> <name><name>bdp</name><operator>-&gt;</operator><name>endspaces</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pend</name> <operator>!=</operator> <name>pstart</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pend</name> <operator>=</operator> <name>prev_pend</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>end_char_vcols</name></name> <operator>=</operator> <name>incr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_del</name> <operator>&amp;&amp;</operator> <name><name>bdp</name><operator>-&gt;</operator><name>startspaces</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pstart</name> <operator>=</operator> <name>prev_pstart</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>textlen</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>pend</name> <operator>-</operator> <name>pstart</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>textcol</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator> <operator>(</operator><name>pstart</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bdp</name><operator>-&gt;</operator><name>textstart</name></name> <operator>=</operator> <name>pstart</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>=</operator> <name>lbr_saved</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>op_addsub</name><parameter_list>(

<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>Prenum1</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>g_cmd</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block_def</name></name></type> <name>bd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>change_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>amount</name> <init>= <expr><name>Prenum1</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>disable_fold_update</name><operator>++</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>disable_fold_update</name><operator>--</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>change_cnt</name> <operator>=</operator> <call><name>do_addsub</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>disable_fold_update</name><operator>--</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>change_cnt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>one_change</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>startpos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>disable_fold_update</name><operator>--</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>&lt;=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>block_mode</name></name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>textcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>MLINE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dec</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>one_change</name> <operator>=</operator> <call><name>do_addsub</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>one_change</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>change_cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>startpos</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>change_cnt</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>netbeans_active</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>one_change</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>netbeans_removed</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>netbeans_inserted</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ptr</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>g_cmd</name> <operator>&amp;&amp;</operator> <name>one_change</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>amount</name> <operator>+=</operator> <name>Prenum1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>disable_fold_update</name><operator>--</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>change_cnt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>change_cnt</name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>change_cnt</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name>startpos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>change_cnt</name> <operator>&gt;</operator> <name>p_report</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>NGETTEXT</name><argument_list>(<argument><expr><literal type="string">"%d line changed"</literal></expr></argument>, <argument><expr><literal type="string">"%d lines changed"</literal></expr></argument>,

<argument><expr><name>change_cnt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>change_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>do_addsub</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>op_type</name></decl></parameter>,

<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>Prenum1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf2</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pre</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>hexupper</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uvarnumber_T</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uvarnumber_T</name></type> <name>oldn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>todel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dohex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dooct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dobin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>doalp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>firstdigit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>subtract</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>negative</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>was_positive</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>visual</name> <init>= <expr><name>VIsual_active</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_change</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>save_cursor</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>startpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>endpos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dohex</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_nf</name></name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>dooct</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_nf</name></name></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>dobin</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_nf</name></name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>doalp</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_nf</name></name></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dobin</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>vim_isbdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dohex</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>vim_isxdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>dobin</name>

<operator>&amp;&amp;</operator> <name>dohex</name>

<operator>&amp;&amp;</operator> <operator>!</operator> <operator>(</operator><operator>(</operator><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal>

<operator>||</operator> <name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>has_mbyte</name> <operator>||</operator>

<operator>!</operator><call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>vim_isxdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>vim_isdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>col</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator> <name>dohex</name>

<operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal>

<operator>||</operator> <name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>has_mbyte</name> <operator>||</operator>

<operator>!</operator><call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>vim_isxdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator> <name>dobin</name>

<operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal>

<operator>||</operator> <name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'b'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>has_mbyte</name> <operator>||</operator>

<operator>!</operator><call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>vim_isbdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_isdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>doalp</name> <operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>vim_isdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>doalp</name> <operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>visual</name></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>length</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_isdigit</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>doalp</name> <operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mb_len</name> <init>= <expr><call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>mb_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <name>mb_len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>has_mbyte</name> <operator>||</operator> <operator>!</operator><call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>negative</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>was_positive</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>firstdigit</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><name>firstdigit</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>doalp</name> <operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name>firstdigit</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>doalp</name> <operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name>firstdigit</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>op_type</name> <operator>==</operator> <name>OP_NR_SUB</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CharOrd</name><argument_list>(<argument><expr><name>firstdigit</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>Prenum1</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isupper</name><argument_list>(<argument><expr><name>firstdigit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>firstdigit</name> <operator>=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>firstdigit</name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>firstdigit</name> <operator>=</operator> <call><name>EBCDIC_CHAR_ADD</name><argument_list>(<argument><expr><name>firstdigit</name></expr></argument>, <argument><expr><operator>-</operator><name>Prenum1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>firstdigit</name> <operator>-=</operator> <name>Prenum1</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">26</literal> <operator>-</operator> <call><name>CharOrd</name><argument_list>(<argument><expr><name>firstdigit</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>Prenum1</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isupper</name><argument_list>(<argument><expr><name>firstdigit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>firstdigit</name> <operator>=</operator> <literal type="char">'Z'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>firstdigit</name> <operator>=</operator> <literal type="char">'z'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>firstdigit</name> <operator>=</operator> <call><name>EBCDIC_CHAR_ADD</name><argument_list>(<argument><expr><name>firstdigit</name></expr></argument>, <argument><expr><name>Prenum1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>firstdigit</name> <operator>+=</operator> <name>Prenum1</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_change</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>startpos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>did_change</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>del_char</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_char</name><argument_list>(<argument><expr><name>firstdigit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endpos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>has_mbyte</name> <operator>||</operator>

<operator>!</operator><call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name>visual</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>negative</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>visual</name> <operator>&amp;&amp;</operator> <name>VIsual_mode</name> <operator>!=</operator> <literal type="char">'V'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_curswant</name></name> <operator>==</operator> <name>MAXCOL</name></expr>

?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>col</name></expr>

</then><else>: <expr><name>length</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_str2nr</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pre</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>,

<argument><expr><literal type="number">0</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>dobin</name></expr> ?</condition><then> <expr><name>STR2NR_BIN</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>dooct</name></expr> ?</condition><then> <expr><name>STR2NR_OCT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>dohex</name></expr> ?</condition><then> <expr><name>STR2NR_HEX</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pre</name> <operator>&amp;&amp;</operator> <name>negative</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>negative</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>subtract</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op_type</name> <operator>==</operator> <name>OP_NR_SUB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>subtract</name> <operator>^=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>subtract</name> <operator>^=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>oldn</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>subtract</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>-=</operator> <operator>(</operator><name>uvarnumber_T</name><operator>)</operator><name>Prenum1</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <operator>(</operator><name>uvarnumber_T</name><operator>)</operator><name>Prenum1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pre</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>subtract</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>oldn</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>n</name> <operator>^</operator> <operator>(</operator><name>uvarnumber_T</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>negative</name> <operator>^=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>oldn</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>^</operator> <operator>(</operator><name>uvarnumber_T</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>negative</name> <operator>^=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>negative</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>visual</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>was_positive</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>negative</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>col</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_change</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>startpos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>did_change</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>todel</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>todel</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x100</literal> <operator>&amp;&amp;</operator> <call><name>isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hexupper</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>hexupper</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>del_char</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>buf1</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>length</name> <operator>+</operator> <name>NUMBUFLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>negative</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>visual</name> <operator>||</operator> <name>was_positive</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pre</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>length</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pre</name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator> <name>pre</name> <operator>==</operator> <literal type="char">'B'</literal> <operator>||</operator>

<name>pre</name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name>pre</name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <name>pre</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>length</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pre</name> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator> <name>pre</name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uvarnumber_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>bit</name> <operator>=</operator> <name>bits</name></expr>;</init> <condition><expr><name>bit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>bit</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>bit</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>bit</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf2</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>bit</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>buf2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>pre</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf2</name></expr></argument>, <argument><expr><name>NUMBUFLEN</name></expr></argument>, <argument><expr><literal type="string">"%llu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uvarnumber_T</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>pre</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf2</name></expr></argument>, <argument><expr><name>NUMBUFLEN</name></expr></argument>, <argument><expr><literal type="string">"%llo"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uvarnumber_T</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>pre</name> <operator>&amp;&amp;</operator> <name>hexupper</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf2</name></expr></argument>, <argument><expr><name>NUMBUFLEN</name></expr></argument>, <argument><expr><literal type="string">"%llX"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uvarnumber_T</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf2</name></expr></argument>, <argument><expr><name>NUMBUFLEN</name></expr></argument>, <argument><expr><literal type="string">"%llx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uvarnumber_T</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>firstdigit</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>dooct</name> <operator>&amp;&amp;</operator> <name>pre</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name>length</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_str</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endpos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>did_change</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>did_change</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name>startpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name>endpos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>theend</name>:</label>

<if_stmt><if>if <condition>(<expr><name>visual</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>save_cursor</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>did_change</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>did_change</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>clear_oparg</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oparg_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>varnumber_T</name></type>

<name>line_count_info</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>varnumber_T</name> <modifier>*</modifier></type><name>wc</name></decl></parameter>,

<parameter><decl><type><name>varnumber_T</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,

<parameter><decl><type><name>varnumber_T</name></type> <name>limit</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>eol_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>words</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>chars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_word</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>limit</name> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_word</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_isspace</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>words</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_word</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>vim_isspace</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_word</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>chars</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>is_word</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>words</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>wc</name> <operator>+=</operator> <name>words</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>limit</name> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>eol_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chars</name> <operator>+=</operator> <name>eol_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cc</name> <operator>+=</operator> <name>chars</name></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>cursor_pos_info</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf1</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf2</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>byte_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>bom_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>byte_count_cursor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>char_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>char_count_cursor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>word_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>word_count_cursor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eol_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>last_check</name> <init>= <expr><literal type="number">100000L</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>line_count_selected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>min_pos</name></decl>, <decl><type ref="prev"/><name>max_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>oparg_T</name></type> <name>oparg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block_def</name></name></type> <name>bd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>no_lines_msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_fileformat</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOL_DOS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>eol_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>eol_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>LT_POS</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>min_pos</name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>min_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_pos</name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <name><name>max_pos</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>max_pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type> <name>saved_sbr</name> <init>= <expr><name>p_sbr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type> <name>saved_w_sbr</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_sbr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_sbr</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_sbr</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>oparg</name><operator>.</operator><name>is_VIsual</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oparg</name><operator>.</operator><name>block_mode</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oparg</name><operator>.</operator><name>op_type</name></name> <operator>=</operator> <name>OP_NOP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getvcols</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_pos</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>oparg</name><operator>.</operator><name>start_vcol</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oparg</name><operator>.</operator><name>end_vcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p_sbr</name> <operator>=</operator> <name>saved_sbr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_sbr</name></name> <operator>=</operator> <name>saved_w_sbr</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oparg</name><operator>.</operator><name>end_vcol</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oparg</name><operator>.</operator><name>end_vcol</name></name> <operator>&lt;</operator> <name><name>oparg</name><operator>.</operator><name>start_vcol</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>oparg</name><operator>.</operator><name>end_vcol</name></name> <operator>+=</operator> <name><name>oparg</name><operator>.</operator><name>start_vcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oparg</name><operator>.</operator><name>start_vcol</name></name> <operator>=</operator> <name><name>oparg</name><operator>.</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>oparg</name><operator>.</operator><name>start_vcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oparg</name><operator>.</operator><name>end_vcol</name></name> <operator>-=</operator> <name><name>oparg</name><operator>.</operator><name>start_vcol</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line_count_selected</name> <operator>=</operator> <name><name>max_pos</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <name><name>min_pos</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>byte_count</name> <operator>&gt;</operator> <name>last_check</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ui_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_check</name> <operator>=</operator> <name>byte_count</name> <operator>+</operator> <literal type="number">100000L</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name>

<operator>&amp;&amp;</operator> <name>lnum</name> <operator>&gt;=</operator> <name><name>min_pos</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>max_pos</name><operator>.</operator><name>lnum</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>VIsual_mode</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>Ctrl_V</name></expr>:</case>

<expr_stmt><expr><name>virtual_op</name> <operator>=</operator> <call><name>virtual_active</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_prep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oparg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bd</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual_op</name> <operator>=</operator> <name>MAYBE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>bd</name><operator>.</operator><name>textstart</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>bd</name><operator>.</operator><name>textlen</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'V'</literal></expr>:</case>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>start_col</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>lnum</name> <operator>==</operator> <name><name>min_pos</name><operator>.</operator><name>lnum</name></name><operator>)</operator></expr>

?</condition><then> <expr><name><name>min_pos</name><operator>.</operator><name>col</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>end_col</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>lnum</name> <operator>==</operator> <name><name>max_pos</name><operator>.</operator><name>lnum</name></name><operator>)</operator></expr>

?</condition><then> <expr><name><name>max_pos</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name>start_col</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>MAXCOL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>start_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>end_col</name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>byte_count_cursor</name> <operator>+=</operator> <call><name>line_count_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>word_count_cursor</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>char_count_cursor</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>eol_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_eol</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bin</name></name> <operator>||</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fixeol</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>byte_count_cursor</name> <operator>-=</operator> <name>eol_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>word_count_cursor</name> <operator>+=</operator> <name>word_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>char_count_cursor</name> <operator>+=</operator> <name>char_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>byte_count_cursor</name> <operator>=</operator> <name>byte_count</name> <operator>+</operator>

<call><name>line_count_info</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>word_count_cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>char_count_cursor</name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name>eol_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>byte_count</name> <operator>+=</operator> <call><name>line_count_info</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>word_count</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>char_count</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>MAXCOL</name></expr></argument>,

<argument><expr><name>eol_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_eol</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bin</name></name> <operator>||</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fixeol</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>byte_count</name> <operator>-=</operator> <name>eol_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>&lt;</operator> <name>MAXCOL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>getvcols</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>min_pos</name><operator>.</operator><name>col</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>max_pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%ld Cols; "</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>oparg</name><operator>.</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>oparg</name><operator>.</operator><name>start_vcol</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>char_count_cursor</name> <operator>==</operator> <name>byte_count_cursor</name>

<operator>&amp;&amp;</operator> <name>char_count</name> <operator>==</operator> <name>byte_count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Selected %s%ld of %ld Lines; %lld of %lld Words; %lld of %lld Bytes"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>line_count_selected</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>word_count_cursor</name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>word_count</name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>byte_count_cursor</name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Selected %s%ld of %ld Lines; %lld of %lld Words; %lld of %lld Chars; %lld of %lld Bytes"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>line_count_selected</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>word_count_cursor</name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>word_count</name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>char_count_cursor</name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>char_count</name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>byte_count_cursor</name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>validate_virtcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>col_print</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>col_print</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>linetabsize</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>char_count_cursor</name> <operator>==</operator> <name>byte_count_cursor</name>

<operator>&amp;&amp;</operator> <name>char_count</name> <operator>==</operator> <name>byte_count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Col %s of %s; Line %ld of %ld; Word %lld of %lld; Byte %lld of %lld"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf1</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf2</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>word_count_cursor</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>word_count</name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>byte_count_cursor</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Col %s of %s; Line %ld of %ld; Word %lld of %lld; Char %lld of %lld; Byte %lld of %lld"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf1</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf2</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>word_count_cursor</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>word_count</name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>char_count_cursor</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>char_count</name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>byte_count_cursor</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bom_count</name> <operator>=</operator> <call><name>bomb_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>bom_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>IOSIZE</name> <operator>-</operator> <name>len</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"(+%lld for BOM)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>bom_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_shm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_shm</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_shm</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"words"</literal></expr></argument>, <argument><expr><name>word_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"chars"</literal></expr></argument>, <argument><expr><name>char_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"bytes"</literal></expr></argument>, <argument><expr><name>byte_count</name> <operator>+</operator> <name>bom_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><ternary><condition><expr><name>VIsual_active</name></expr> ?</condition><then> <expr><literal type="string">"visual_bytes"</literal></expr> </then><else>: <expr><literal type="string">"cursor_bytes"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>byte_count_cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><ternary><condition><expr><name>VIsual_active</name></expr> ?</condition><then> <expr><literal type="string">"visual_chars"</literal></expr> </then><else>: <expr><literal type="string">"cursor_chars"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>char_count_cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><ternary><condition><expr><name>VIsual_active</name></expr> ?</condition><then> <expr><literal type="string">"visual_words"</literal></expr> </then><else>: <expr><literal type="string">"cursor_words"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>word_count_cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>op_colon</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stuffReadbuff</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"'&lt;,'&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stuffnumReadbuff</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>stuffReadbuff</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stuffnumReadbuff</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stuffnumReadbuff</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_COLON</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stuffReadbuff</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_INDENT</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>get_equalprg</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stuffReadbuff</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"indent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>stuffReadbuff</name><argument_list>(<argument><expr><call><name>get_equalprg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>stuffReadbuff</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_FORMAT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fp</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stuffReadbuff</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p_fp</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stuffReadbuff</name><argument_list>(<argument><expr><name>p_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stuffReadbuff</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"fmt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>stuffReadbuff</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\n']"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>op_function</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier><name>oap</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_virtual_op</name> <init>= <expr><name>virtual_op</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>orig_start</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>orig_end</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_opfunc</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E774: 'operatorfunc' is empty"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>!=</operator> <name>MLINE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>block_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"block"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>MLINE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"line"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"char"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual_op</name> <operator>=</operator> <name>MAYBE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>call_func_retnr</name><argument_list>(<argument><expr><name>p_opfunc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual_op</name> <operator>=</operator> <name>save_virtual_op</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name>orig_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name>orig_end</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E775: Eval feature not available"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>get_op_vcol</name><parameter_list>(

<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>,

<parameter><decl><type><name>colnr_T</name></type> <name>redo_VIsual_vcol</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>initial</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>!=</operator> <name>Ctrl_V</name>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>initial</name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>block_mode</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mb_adjustpos</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>redo_VIsual_busy</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>initial</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <name>start</name> <operator>&gt;=</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name>start</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>=</operator> <name>start</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr>;</init>

<condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</condition>

<incr><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>redo_VIsual_busy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>+</operator> <name>redo_VIsual_vcol</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>do_pending_operator</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>old_col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gui_yank</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name> <init>= <expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>old_cursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>empty_region_error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>restart_edit_save</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>lbr_saved</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>redo_VIsual_mode</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>redo_VIsual_line_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>colnr_T</name></type> <name>redo_VIsual_vcol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>redo_VIsual_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>redo_VIsual_arg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>include_line_break</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>clip_star</name><operator>.</operator><name>available</name></name> <operator>||</operator> <name><name>clip_plus</name><operator>.</operator><name>available</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name>gui_yank</name>

<operator>&amp;&amp;</operator> <name>VIsual_active</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name>redo_VIsual_busy</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clip_auto_select</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>old_cursor</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>finish_op</name> <operator>||</operator> <name>VIsual_active</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>redo_yank</name> <init>= <expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_YANK</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>gui_yank</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VALID_VIRTCOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name> <operator>=</operator> <name>VIsual_active</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_force</name></name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MLINE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_force</name></name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>MLINE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>MCHAR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_force</name></name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <name>Ctrl_V</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_select</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>redo_yank</name> <operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_YANK</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>!</operator><name>VIsual_active</name> <operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>motion_force</name></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">':'</literal>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_COLON</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>!=</operator> <literal type="char">'D'</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_FOLD</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_FOLDOPEN</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_FOLDOPENREC</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_FOLDCLOSE</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_FOLDCLOSEREC</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_FOLDDEL</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_FOLDDELREC</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>prep_redo</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr></argument>,

<argument><expr><call><name>get_op_char</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_extra_op_char</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_force</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_REDO</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AppendToRedobuffLit</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>searchbuf</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AppendToRedobuff</name><argument_list>(<argument><expr><name>NL_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>repeat_cmdline</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ResetRedobuff</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>AppendToRedobuffLit</name><argument_list>(<argument><expr><name>repeat_cmdline</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AppendToRedobuff</name><argument_list>(<argument><expr><name>NL_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>repeat_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>redo_VIsual_busy</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+=</operator> <name>redo_VIsual_line_count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <name>redo_VIsual_mode</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>redo_VIsual_vcol</name> <operator>==</operator> <name>MAXCOL</name> <operator>||</operator> <name>VIsual_mode</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>redo_VIsual_line_count</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>validate_virtcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator>

<name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>+</operator> <name>redo_VIsual_vcol</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>redo_VIsual_vcol</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>=</operator> <name>redo_VIsual_count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>redo_VIsual_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>=</operator> <name>redo_VIsual_count</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gui_yank</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_start</name></name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_end</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_mode</name></name> <operator>=</operator> <name>VIsual_mode</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_visual_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_curswant</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual_mode_eval</name></name> <operator>=</operator> <name>VIsual_mode</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_select</name> <operator>&amp;&amp;</operator> <name>VIsual_mode</name> <operator>==</operator> <literal type="char">'V'</literal>

<operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_DELETE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>LT_POS</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>VIsual</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator>

<operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>VIsual</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>include_line_break</name> <operator>=</operator> <call><name>unadjust_for_sel</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LT_POS</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name>

<operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>MLINE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VALID_VIRTCOL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>MLINE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>check_pos</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual_op</name> <operator>=</operator> <call><name>virtual_active</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>||</operator> <name>redo_VIsual_busy</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>get_op_vcol</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>redo_VIsual_vcol</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>redo_VIsual_busy</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>gui_yank</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>resel_VIsual_mode</name> <operator>=</operator> <name>VIsual_mode</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>resel_VIsual_vcol</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>!=</operator> <name>Ctrl_V</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name></name><operator>)</operator></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name> <operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>!=</operator> <name>Ctrl_V</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>resel_VIsual_vcol</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name> <operator>-</operator> <name><name>oap</name><operator>-&gt;</operator><name>start_vcol</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>resel_VIsual_vcol</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end_vcol</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>resel_VIsual_line_count</name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>redo_yank</name> <operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_YANK</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_COLON</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_FOLD</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_FOLDOPEN</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_FOLDOPENREC</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_FOLDCLOSE</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_FOLDCLOSEREC</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_FOLDDEL</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_FOLDDELREC</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>motion_force</name></name> <operator>==</operator> <name>NUL</name></expr>

)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'n'</literal>

<operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'N'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prep_redo</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr></argument>,

<argument><expr><call><name>get_op_char</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_extra_op_char</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_force</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nchar</name> <init>= <expr><ternary><condition><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_REPLACE</name></expr> ?</condition><then> <expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr> </then><else>: <expr><name>NUL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nchar</name> <operator>==</operator> <name>REPLACE_CR_NCHAR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nchar</name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>nchar</name> <operator>==</operator> <name>REPLACE_NL_NCHAR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nchar</name> <operator>=</operator> <name>NL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prep_redo</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>,

<argument><expr><call><name>get_op_char</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_extra_op_char</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>nchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>redo_VIsual_busy</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>redo_VIsual_mode</name> <operator>=</operator> <name>resel_VIsual_mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name>redo_VIsual_vcol</name> <operator>=</operator> <name>resel_VIsual_vcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name>redo_VIsual_line_count</name> <operator>=</operator> <name>resel_VIsual_line_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>redo_VIsual_count</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>redo_VIsual_arg</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_force</name></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>MLINE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MLINE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>!=</operator> <name>Ctrl_V</name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>ml_get_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>include_line_break</name> <operator>||</operator> <operator>!</operator><name>virtual_op</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>!=</operator> <literal type="char">'o'</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>op_on_lines</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>redo_VIsual_busy</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gui_yank</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_dragging</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>may_clear_cmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_YANK</name>

<operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_COLON</name>

<operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_FUNCTION</name>

<operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_FILTER</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>motion_force</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>=</operator> <name>lbr_saved</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><call><name>ml_get_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>empty</name></name> <operator>=</operator> <operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>MCHAR</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name>

<operator>||</operator> <operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_YANK</name>

<operator>&amp;&amp;</operator> <call><name>gchar_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>EQUAL_POS</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>virtual_op</name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>coladd</name></name> <operator>!=</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>coladd</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>empty_region_error</name> <operator>=</operator> <operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>empty</name></name>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_EMPTYREGION</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>empty</name></name> <operator>||</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_FOLD</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>=</operator> <name>lbr_saved</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>MCHAR</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>==</operator> <name>FALSE</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>retval</name></name> <operator>&amp;</operator> <name>CA_NO_ADJ_OP_END</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name> <operator>||</operator> <operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'o'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>block_mode</name></name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end_adjusted</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>--</operator><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inindent</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MLINE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>end_adjusted</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>OP_LSHIFT</name></expr>:</case>

<case>case <expr><name>OP_RSHIFT</name></expr>:</case>

<expr_stmt><expr><call><name>op_shift</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>auto_format</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OP_JOIN_NS</name></expr>:</case>

<case>case <expr><name>OP_JOIN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator>

<name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_join</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>line_count</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_JOIN</name></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>auto_format</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>OP_DELETE</name></expr>:</case>

<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>empty_region_error</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_beep</name><argument_list>(<argument><expr><name>BO_OPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CancelRedo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>op_delete</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>MLINE</name> <operator>&amp;&amp;</operator> <call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_AUTO</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>auto_format</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>OP_YANK</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>empty_region_error</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gui_yank</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_beep</name><argument_list>(<argument><expr><name>BO_OPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CancelRedo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>=</operator> <name>lbr_saved</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>op_yank</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>!</operator><name>gui_yank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OP_CHANGE</name></expr>:</case>

<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>empty_region_error</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_beep</name><argument_list>(<argument><expr><name>BO_OPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CancelRedo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_im</name> <operator>||</operator> <operator>!</operator><name>KeyTyped</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>restart_edit_save</name> <operator>=</operator> <name>restart_edit</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>restart_edit_save</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>=</operator> <name>lbr_saved</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>finish_op</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>op_change</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>retval</name></name> <operator>|=</operator> <name>CA_COMMAND_BUSY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <name>restart_edit_save</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>OP_FILTER</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_FILTER</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AppendToRedobuff</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"!\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>bangredo</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<case>case <expr><name>OP_INDENT</name></expr>:</case>

<case>case <expr><name>OP_COLON</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_INDENT</name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>get_equalprg</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_lisp</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>op_reindent</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>get_lisp_indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>op_reindent</name><argument_list>(<argument><expr><name>oap</name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<argument><expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inde</name></name> <operator>!=</operator> <name>NUL</name></expr> ?</condition><then> <expr><name>get_expr_indent</name></expr> </then><else>:

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>get_c_indent</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>op_colon</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OP_TILDE</name></expr>:</case>

<case>case <expr><name>OP_UPPER</name></expr>:</case>

<case>case <expr><name>OP_LOWER</name></expr>:</case>

<case>case <expr><name>OP_ROT13</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>empty_region_error</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_beep</name><argument_list>(<argument><expr><name>BO_OPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CancelRedo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>op_tilde</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OP_FORMAT</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fex</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>op_formatexpr</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><operator>*</operator><name>p_fp</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fp</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>op_colon</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>op_format</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<break>break;</break>

<case>case <expr><name>OP_FORMAT2</name></expr>:</case>

<expr_stmt><expr><call><name>op_format</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>OP_FUNCTION</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>=</operator> <name>lbr_saved</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>op_function</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>OP_INSERT</name></expr>:</case>

<case>case <expr><name>OP_APPEND</name></expr>:</case>

<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>empty_region_error</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_beep</name><argument_list>(<argument><expr><name>BO_OPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CancelRedo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>restart_edit_save</name> <operator>=</operator> <name>restart_edit</name></expr>;</expr_stmt>

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>=</operator> <name>lbr_saved</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>op_insert</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>auto_format</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <name>restart_edit_save</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>retval</name></name> <operator>|=</operator> <name>CA_COMMAND_BUSY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>OP_REPLACE</name></expr>:</case>

<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>empty_region_error</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_beep</name><argument_list>(<argument><expr><name>BO_OPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CancelRedo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>=</operator> <name>lbr_saved</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>op_replace</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>OP_FOLD</name></expr>:</case>

<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>foldCreate</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OP_FOLDOPEN</name></expr>:</case>

<case>case <expr><name>OP_FOLDOPENREC</name></expr>:</case>

<case>case <expr><name>OP_FOLDCLOSE</name></expr>:</case>

<case>case <expr><name>OP_FOLDCLOSEREC</name></expr>:</case>

<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>opFoldRange</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_FOLDOPEN</name>

<operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_FOLDOPENREC</name></expr></argument>,

<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_FOLDOPENREC</name>

<operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_FOLDCLOSEREC</name></expr></argument>,

<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>OP_FOLDDEL</name></expr>:</case>

<case>case <expr><name>OP_FOLDDELREC</name></expr>:</case>

<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>deleteFold</name><argument_list>(<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_FOLDDELREC</name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>is_VIsual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>OP_NR_ADD</name></expr>:</case>

<case>case <expr><name>OP_NR_SUB</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>empty_region_error</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_beep</name><argument_list>(<argument><expr><name>BO_OPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CancelRedo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>=</operator> <name>lbr_saved</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>op_addsub</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name>redo_VIsual_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>virtual_op</name> <operator>=</operator> <name>MAYBE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gui_yank</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_sol</name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>==</operator> <name>MLINE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>end_adjusted</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_LSHIFT</name> <operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_RSHIFT</name>

<operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_DELETE</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>old_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>old_cursor</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>block_mode</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_force</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>=</operator> <name>lbr_saved</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

</unit>
