<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\insexpand.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_X_WANT_IDENT</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_X_NORMAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_X_NOT_DEFINED_YET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_X_SCROLL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_X_WHOLE_LINE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_X_FILES</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_X_TAGS</name></cpp:macro> <cpp:value>(5 + CTRL_X_WANT_IDENT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_X_PATH_PATTERNS</name></cpp:macro> <cpp:value>(6 + CTRL_X_WANT_IDENT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_X_PATH_DEFINES</name></cpp:macro> <cpp:value>(7 + CTRL_X_WANT_IDENT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_X_FINISHED</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_X_DICTIONARY</name></cpp:macro> <cpp:value>(9 + CTRL_X_WANT_IDENT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_X_THESAURUS</name></cpp:macro> <cpp:value>(10 + CTRL_X_WANT_IDENT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_X_CMDLINE</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_X_FUNCTION</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_X_OMNI</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_X_SPELL</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_X_LOCAL_MSG</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_X_EVAL</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_X_MSG</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ctrl_x_msgs[(i) &amp; ~CTRL_X_WANT_IDENT]</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ctrl_x_msgs</name><index>[]</index></name> <init>=

<expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">" Keyword completion (^N^P)"</literal></expr></argument>)</argument_list></call></expr>, 

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">" ^X mode (^]^D^E^F^I^K^L^N^O^Ps^U^V^Y)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>NULL</name></expr>, 

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">" Whole line completion (^L^N^P)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">" File name completion (^F^N^P)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">" Tag completion (^]^N^P)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">" Path pattern completion (^N^P)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">" Definition completion (^D^N^P)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>NULL</name></expr>, 

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">" Dictionary completion (^K^N^P)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">" Thesaurus completion (^T^N^P)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">" Command-line completion (^V^N^P)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">" User defined completion (^U^N^P)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">" Omni completion (^O^N^P)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">" Spelling suggestion (s^N^P)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">" Keyword Local completion (^N^P)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>NULL</name></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_COMPL_FUNC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ctrl_x_mode_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"keyword"</literal></expr>,

<expr><literal type="string">"ctrl_x"</literal></expr>,

<expr><literal type="string">"unknown"</literal></expr>, 

<expr><literal type="string">"whole_line"</literal></expr>,

<expr><literal type="string">"files"</literal></expr>,

<expr><literal type="string">"tags"</literal></expr>,

<expr><literal type="string">"path_patterns"</literal></expr>,

<expr><literal type="string">"path_defines"</literal></expr>,

<expr><literal type="string">"unknown"</literal></expr>, 

<expr><literal type="string">"dictionary"</literal></expr>,

<expr><literal type="string">"thesaurus"</literal></expr>,

<expr><literal type="string">"cmdline"</literal></expr>,

<expr><literal type="string">"function"</literal></expr>,

<expr><literal type="string">"omni"</literal></expr>,

<expr><literal type="string">"spell"</literal></expr>,

<expr><name>NULL</name></expr>, 

<expr><literal type="string">"eval"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPT_ABBR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPT_MENU</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPT_KIND</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPT_INFO</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPT_COUNT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<typedef>typedef <type><name><name>struct</name> <name>compl_S</name></name></type> <name>compl_T</name>;</typedef>

<struct>struct <name>compl_S</name>

<block>{

<decl_stmt><decl><type><name>compl_T</name> <modifier>*</modifier></type><name>cp_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>compl_T</name> <modifier>*</modifier></type><name>cp_prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cp_str</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>char_u</name> <argument_list>*<argument><expr><operator>(</operator><name><name>cp_text</name><index>[<expr><name>CPT_COUNT</name></expr>]</index></name><operator>)</operator></expr></argument>; 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>typval_T</name> <name>cp_user_data</name></expr></argument>;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><name>char_u</name> <operator>*</operator><name>cp_fname</name></expr></argument>; 

<argument><expr><name>int</name> <name>cp_flags</name></expr></argument>; 

<argument><expr><name>int</name> <name>cp_number</name></expr></argument>;</argument_list></call></expr></expr_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP_ORIGINAL_TEXT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP_FREE_FNAME</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP_CONT_S_IPOS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP_EQUAL</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP_ICASE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>e_hitend</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Hit end of paragraph"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_COMPL_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>e_complwin</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E839: Completion function changed window"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>e_compldel</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E840: Completion function deleted text"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>compl_T</name> <modifier>*</modifier></type><name>compl_first_match</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>compl_T</name> <modifier>*</modifier></type><name>compl_curr_match</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>compl_T</name> <modifier>*</modifier></type><name>compl_shown_match</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>compl_T</name> <modifier>*</modifier></type><name>compl_old_match</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>compl_enter_selects</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>compl_leader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>compl_get_longest</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>compl_no_insert</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>compl_no_select</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>compl_used_match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>compl_was_interrupted</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>compl_interrupted</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>compl_restarting</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>compl_started</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ctrl_x_mode</name> <init>= <expr><name>CTRL_X_NORMAL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>compl_matches</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>compl_pattern</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>compl_direction</name> <init>= <expr><name>FORWARD</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>compl_shows_dir</name> <init>= <expr><name>FORWARD</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>compl_pending</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>pos_T</name></type> <name>compl_startpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>colnr_T</name></type> <name>compl_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>compl_orig_text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>compl_cont_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>expand_T</name></type> <name>compl_xp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>compl_opt_refresh_always</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>compl_opt_suppress_empty</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ins_compl_add</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>cptext</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cdir</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adup</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ins_compl_longest_match</name><parameter_list>(<parameter><decl><type><name>compl_T</name> <modifier>*</modifier></type><name>match</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ins_compl_del_pum</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ins_compl_files</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thesaurus</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>regmatch</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>find_line_end</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ins_compl_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ins_compl_need_restart</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ins_compl_new_leader</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ins_compl_len</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ins_compl_restart</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ins_compl_set_original_text</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ins_compl_fixRedoBufForLeader</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr_arg</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_COMPL_FUNC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ins_compl_add_list</name><parameter_list>(<parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ins_compl_add_dict</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ins_compl_key2dir</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ins_compl_pum_key</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ins_compl_key2count</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>show_pum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>prev_w_wrow</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev_w_leftcol</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>quote_meta</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>spell_back_to_badword</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>spell_bad_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>ins_ctrl_x</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ctrl_x_mode</name> <operator>!=</operator> <name>CTRL_X_CMDLINE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_N_ADDS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_cont_status</name> <operator>|=</operator> <name>CONT_INTRPT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_cont_status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>CTRL_X_NOT_DEFINED_YET</name></expr>;</expr_stmt>

<expr_stmt><expr><name>edit_submode</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><call><name>CTRL_X_MSG</name><argument_list>(<argument><expr><name>ctrl_x_mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>edit_submode_pre</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ctrl_x_mode_none</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>ctrl_x_mode</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>ctrl_x_mode_normal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_NORMAL</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>ctrl_x_mode_scroll</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_SCROLL</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>ctrl_x_mode_whole_line</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_WHOLE_LINE</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>ctrl_x_mode_files</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_FILES</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>ctrl_x_mode_tags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_TAGS</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>ctrl_x_mode_path_patterns</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_PATH_PATTERNS</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>ctrl_x_mode_path_defines</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_PATH_DEFINES</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>ctrl_x_mode_dictionary</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_DICTIONARY</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>ctrl_x_mode_thesaurus</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_THESAURUS</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>ctrl_x_mode_cmdline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_CMDLINE</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>ctrl_x_mode_function</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_FUNCTION</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>ctrl_x_mode_omni</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_OMNI</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>ctrl_x_mode_spell</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_SPELL</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>ctrl_x_mode_line_or_eval</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_WHOLE_LINE</name> <operator>||</operator> <name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_EVAL</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type>

<name>ctrl_x_mode_not_default</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>ctrl_x_mode</name> <operator>!=</operator> <name>CTRL_X_NORMAL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ctrl_x_mode_not_defined_yet</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_NOT_DEFINED_YET</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>has_compl_option</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dict_opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>dict_opt</name></expr> ?</condition><then> <expr><operator>(</operator><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_dict</name></name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_dict</name> <operator>==</operator> <name>NUL</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_spell</name></name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tsr</name></name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_tsr</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr></else></ternary></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>CTRL_X_NORMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>edit_submode</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_attr</name><argument_list>(<argument><expr><ternary><condition><expr><name>dict_opt</name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'dictionary' option is empty"</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'thesaurus' option is empty"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>emsg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_beep</name><argument_list>(<argument><expr><name>BO_COMPL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_vim_var_nr</name><argument_list>(<argument><expr><name>VV_TESTING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ui_delay</name><argument_list>(<argument><expr><literal type="number">2004L</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>vim_is_ctrl_x_key</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_R</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ins_compl_pum_key</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>ctrl_x_mode</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <name>Ctrl_N</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_P</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_X</name><operator>)</operator></expr>;</return>

<case>case <expr><name>CTRL_X_NOT_DEFINED_YET</name></expr>:</case>

<return>return <expr><operator>(</operator> <name>c</name> <operator>==</operator> <name>Ctrl_X</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_Y</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_E</name>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_L</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_F</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_RSB</name>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_I</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_D</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_P</name>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_N</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_T</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_V</name>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_Q</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_U</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_O</name>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_S</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_K</name> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'s'</literal><operator>)</operator></expr>;</return>

<case>case <expr><name>CTRL_X_SCROLL</name></expr>:</case>

<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <name>Ctrl_Y</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_E</name><operator>)</operator></expr>;</return>

<case>case <expr><name>CTRL_X_WHOLE_LINE</name></expr>:</case>

<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <name>Ctrl_L</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_P</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_N</name><operator>)</operator></expr>;</return>

<case>case <expr><name>CTRL_X_FILES</name></expr>:</case>

<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <name>Ctrl_F</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_P</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_N</name><operator>)</operator></expr>;</return>

<case>case <expr><name>CTRL_X_DICTIONARY</name></expr>:</case>

<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <name>Ctrl_K</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_P</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_N</name><operator>)</operator></expr>;</return>

<case>case <expr><name>CTRL_X_THESAURUS</name></expr>:</case>

<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <name>Ctrl_T</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_P</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_N</name><operator>)</operator></expr>;</return>

<case>case <expr><name>CTRL_X_TAGS</name></expr>:</case>

<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <name>Ctrl_RSB</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_P</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_N</name><operator>)</operator></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CTRL_X_PATH_PATTERNS</name></expr>:</case>

<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <name>Ctrl_P</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_N</name><operator>)</operator></expr>;</return>

<case>case <expr><name>CTRL_X_PATH_DEFINES</name></expr>:</case>

<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <name>Ctrl_D</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_P</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_N</name><operator>)</operator></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>CTRL_X_CMDLINE</name></expr>:</case>

<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <name>Ctrl_V</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_Q</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_P</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_N</name>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_X</name><operator>)</operator></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_COMPL_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CTRL_X_FUNCTION</name></expr>:</case>

<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <name>Ctrl_U</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_P</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_N</name><operator>)</operator></expr>;</return>

<case>case <expr><name>CTRL_X_OMNI</name></expr>:</case>

<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <name>Ctrl_O</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_P</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_N</name><operator>)</operator></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>CTRL_X_SPELL</name></expr>:</case>

<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <name>Ctrl_S</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_P</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_N</name><operator>)</operator></expr>;</return>

<case>case <expr><name>CTRL_X_EVAL</name></expr>:</case>

<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <name>Ctrl_P</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_N</name><operator>)</operator></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"vim_is_ctrl_x_key()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ins_compl_accept_char</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ctrl_x_mode</name> <operator>&amp;</operator> <name>CTRL_X_WANT_IDENT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vim_isIDc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>ctrl_x_mode</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>CTRL_X_FILES</name></expr>:</case>

<return>return <expr><call><name>vim_isfilec</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_ispathsep</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CTRL_X_CMDLINE</name></expr>:</case>

<case>case <expr><name>CTRL_X_OMNI</name></expr>:</case>

<return>return <expr><call><name>vim_isprintc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CTRL_X_WHOLE_LINE</name></expr>:</case>

<return>return <expr><call><name>vim_isprintc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><call><name>vim_iswordc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ins_compl_add_infercase</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str_arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>icase</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>cont_s_ipos</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>str_arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>actual_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>actual_compl_length</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>min_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>wca</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>has_lower</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>was_letter</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_ic</name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inf</name></name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<expr_stmt><expr><name>actual_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>actual_len</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>actual_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>compl_orig_text</name></expr>;</expr_stmt>

<expr_stmt><expr><name>actual_compl_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>actual_compl_length</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>actual_compl_length</name> <operator>=</operator> <name>compl_length</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>min_len</name> <operator>=</operator> <ternary><condition><expr><name>actual_len</name> <operator>&lt;</operator> <name>actual_compl_length</name></expr>

?</condition><then> <expr><name>actual_len</name></expr> </then><else>: <expr><name>actual_compl_length</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>wca</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>actual_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wca</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>actual_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wca</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wca</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>compl_orig_text</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>min_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MB_ISLOWER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>has_lower</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MB_ISUPPER</name><argument_list>(<argument><expr><name><name>wca</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>actual_compl_length</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>actual_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wca</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>MB_TOLOWER</name><argument_list>(<argument><expr><name><name>wca</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_lower</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>compl_orig_text</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>min_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>was_letter</name> <operator>&amp;&amp;</operator> <call><name>MB_ISUPPER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>MB_ISLOWER</name><argument_list>(<argument><expr><name><name>wca</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>actual_compl_length</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>actual_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wca</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>MB_TOUPPER</name><argument_list>(<argument><expr><name><name>wca</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>was_letter</name> <operator>=</operator> <call><name>MB_ISLOWER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MB_ISUPPER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>compl_orig_text</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>min_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MB_ISLOWER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wca</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>MB_TOLOWER</name><argument_list>(<argument><expr><name><name>wca</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>MB_ISUPPER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wca</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>MB_TOUPPER</name><argument_list>(<argument><expr><name><name>wca</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>IObuff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>actual_len</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>IObuff</name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator> <operator>&lt;</operator> <name>IOSIZE</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name><name>wca</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>wca</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>wca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>IObuff</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cont_s_ipos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CP_CONT_S_IPOS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>icase</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CP_ICASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ins_compl_add</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ins_compl_add</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>cptext</name></decl></parameter>, 

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>user_data</name></type> <name>UNUSED</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>cdir</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags_arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>adup</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>compl_T</name> <modifier>*</modifier></type><name>match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>cdir</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>compl_direction</name></expr> </then><else>: <expr><name>cdir</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>flags_arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ui_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_first_match</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>adup</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>compl_first_match</name></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator><name><name>match</name><operator>-&gt;</operator><name>cp_flags</name></name> <operator>&amp;</operator> <name>CP_ORIGINAL_TEXT</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>match</name><operator>-&gt;</operator><name>cp_str</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>match</name><operator>-&gt;</operator><name>cp_str</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NOTDONE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name><name>match</name><operator>-&gt;</operator><name>cp_next</name></name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>match</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>match</name> <operator>!=</operator> <name>compl_first_match</name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ins_compl_del_pum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>compl_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>cp_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CP_ORIGINAL_TEXT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>cp_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>match</name><operator>-&gt;</operator><name>cp_str</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name>compl_curr_match</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>compl_curr_match</name><operator>-&gt;</operator><name>cp_fname</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name><name>compl_curr_match</name><operator>-&gt;</operator><name>cp_fname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>cp_fname</name></name> <operator>=</operator> <name><name>compl_curr_match</name><operator>-&gt;</operator><name>cp_fname</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>cp_fname</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CP_FREE_FNAME</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>cp_fname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>cp_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cptext</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CPT_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>cptext</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>cptext</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>cp_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>cptext</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>user_data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>cp_user_data</name></name> <operator>=</operator> <operator>*</operator><name>user_data</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>compl_first_match</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>cp_next</name></name> <operator>=</operator> <name><name>match</name><operator>-&gt;</operator><name>cp_prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>cp_next</name></name> <operator>=</operator> <name><name>compl_curr_match</name><operator>-&gt;</operator><name>cp_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>cp_prev</name></name> <operator>=</operator> <name>compl_curr_match</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>cp_next</name></name> <operator>=</operator> <name>compl_curr_match</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>cp_prev</name></name> <operator>=</operator> <name><name>compl_curr_match</name><operator>-&gt;</operator><name>cp_prev</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>cp_next</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>cp_next</name><operator>-&gt;</operator><name>cp_prev</name></name> <operator>=</operator> <name>match</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>cp_prev</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>cp_prev</name><operator>-&gt;</operator><name>cp_next</name></name> <operator>=</operator> <name>match</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>compl_first_match</name> <operator>=</operator> <name>match</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>compl_curr_match</name> <operator>=</operator> <name>match</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_get_longest</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CP_ORIGINAL_TEXT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_compl_longest_match</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ins_compl_equal</name><parameter_list>(<parameter><decl><type><name>compl_T</name> <modifier>*</modifier></type><name>match</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>cp_flags</name></name> <operator>&amp;</operator> <name>CP_EQUAL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>cp_flags</name></name> <operator>&amp;</operator> <name>CP_ICASE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name><name>match</name><operator>-&gt;</operator><name>cp_str</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>match</name><operator>-&gt;</operator><name>cp_str</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ins_compl_longest_match</name><parameter_list>(<parameter><decl><type><name>compl_T</name> <modifier>*</modifier></type><name>match</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>had_match</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_leader</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_leader</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>match</name><operator>-&gt;</operator><name>cp_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_leader</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>had_match</name> <operator>=</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name>compl_col</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_compl_delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_bytes</name><argument_list>(<argument><expr><name>compl_leader</name> <operator>+</operator> <call><name>ins_compl_len</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_redraw</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>had_match</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_compl_delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>compl_used_match</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>compl_leader</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>match</name><operator>-&gt;</operator><name>cp_str</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>mb_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>mb_ptr2char</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><operator>(</operator><name><name>match</name><operator>-&gt;</operator><name>cp_flags</name></name> <operator>&amp;</operator> <name>CP_ICASE</name><operator>)</operator></expr>

?</condition><then> <expr><operator>(</operator><call><name>MB_TOLOWER</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>MB_TOLOWER</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>c1</name> <operator>!=</operator> <name>c2</name><operator>)</operator></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>had_match</name> <operator>=</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name>compl_col</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_compl_delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_bytes</name><argument_list>(<argument><expr><name>compl_leader</name> <operator>+</operator> <call><name>ins_compl_len</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_redraw</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>had_match</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_compl_delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>compl_used_match</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ins_compl_add_matches</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>num_matches</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>matches</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>icase</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>add_r</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><name>compl_direction</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_matches</name> <operator>&amp;&amp;</operator> <name>add_r</name> <operator>!=</operator> <name>FAIL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>add_r</name> <operator>=</operator> <call><name>ins_compl_add</name><argument_list>(<argument><expr><name><name>matches</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>icase</name></expr> ?</condition><then> <expr><name>CP_ICASE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>FORWARD</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>FreeWild</name><argument_list>(<argument><expr><name>num_matches</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ins_compl_make_cyclic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>compl_T</name> <modifier>*</modifier></type><name>match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_first_match</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>compl_first_match</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>cp_next</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>match</name><operator>-&gt;</operator><name>cp_next</name></name> <operator>!=</operator> <name>compl_first_match</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name><name>match</name><operator>-&gt;</operator><name>cp_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>cp_next</name></name> <operator>=</operator> <name>compl_first_match</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>compl_first_match</name><operator>-&gt;</operator><name>cp_prev</name></name> <operator>=</operator> <name>match</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ins_compl_has_shown_match</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>compl_shown_match</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>compl_shown_match</name> <operator>!=</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_next</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ins_compl_long_shown_match</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_str</name></name></expr></argument>)</argument_list></call>

<operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name>compl_col</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>completeopt_was_set</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>compl_no_insert</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_no_select</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_cot</name></expr></argument>, <argument><expr><literal type="string">"noselect"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_no_select</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_cot</name></expr></argument>, <argument><expr><literal type="string">"noinsert"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_no_insert</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>pumitem_T</name> <modifier>*</modifier></type><name>compl_match_array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>compl_match_arraysize</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ins_compl_upd_pum</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_match_array</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cline_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pum_call_update_screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cline_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_compl_del_pum</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ins_compl_del_pum</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compl_match_array</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>pum_undisplay</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>compl_match_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>pum_wanted</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cot</name></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t_colors</name> <operator>&lt;</operator> <literal type="number">8</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>pum_enough_matches</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>compl_T</name> <modifier>*</modifier></type><name>compl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>compl</name> <operator>=</operator> <name>compl_first_match</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compl</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>compl</name><operator>-&gt;</operator><name>cp_flags</name></name> <operator>&amp;</operator> <name>CP_ORIGINAL_TEXT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>++</operator><name>i</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>compl</name> <operator>=</operator> <name><name>compl</name><operator>-&gt;</operator><name>cp_next</name></name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>compl</name> <operator>!=</operator> <name>compl_first_match</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_cot</name></expr></argument>, <argument><expr><literal type="string">"menuone"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>dict_T</name> <modifier>*</modifier></type>

<name>ins_compl_dict_alloc</name><parameter_list>(<parameter><decl><type><name>compl_T</name> <modifier>*</modifier></type><name>match</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><call><name>dict_alloc_lock</name><argument_list>(<argument><expr><name>VAR_FIXED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"word"</literal></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>cp_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"abbr"</literal></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>cp_text</name><index>[<expr><name>CPT_ABBR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"menu"</literal></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>cp_text</name><index>[<expr><name>CPT_MENU</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"kind"</literal></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>cp_text</name><index>[<expr><name>CPT_KIND</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>cp_text</name><index>[<expr><name>CPT_INFO</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>cp_user_data</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"user_data"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dict_add_tv</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"user_data"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>match</name><operator>-&gt;</operator><name>cp_user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>dict</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>trigger_complete_changed_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cur</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>v_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recursive</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>recursive</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v_event</name> <operator>=</operator> <call><name>get_vim_var_dict</name><argument_list>(<argument><expr><name>VV_EVENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>dict_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>ins_compl_dict_alloc</name><argument_list>(<argument><expr><name>compl_curr_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dict_add_dict</name><argument_list>(<argument><expr><name>v_event</name></expr></argument>, <argument><expr><literal type="string">"completed_item"</literal></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pum_set_event_info</name><argument_list>(<argument><expr><name>v_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_set_items_ro</name><argument_list>(<argument><expr><name>v_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>textlock</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_COMPLETECHANGED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>textlock</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_free_contents</name><argument_list>(<argument><expr><name>v_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v_event</name><operator>-&gt;</operator><name>dv_hashtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>ins_compl_show_pum</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>compl_T</name> <modifier>*</modifier></type><name>compl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>compl_T</name> <modifier>*</modifier></type><name>shown_compl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_find_shown_match</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shown_match_ok</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lead_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pum_wanted</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>pum_enough_matches</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"if exists('g:loaded_matchparen')|3match none|endif"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>pum_call_update_screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_match_array</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_match_arraysize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>compl</name> <operator>=</operator> <name>compl_first_match</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_leader</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lead_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>compl_leader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<do>do

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>compl</name><operator>-&gt;</operator><name>cp_flags</name></name> <operator>&amp;</operator> <name>CP_ORIGINAL_TEXT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>compl_leader</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <call><name>ins_compl_equal</name><argument_list>(<argument><expr><name>compl</name></expr></argument>, <argument><expr><name>compl_leader</name></expr></argument>, <argument><expr><name>lead_len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>compl_match_arraysize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>compl</name> <operator>=</operator> <name><name>compl</name><operator>-&gt;</operator><name>cp_next</name></name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>compl</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>compl</name> <operator>!=</operator> <name>compl_first_match</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>compl_match_arraysize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>compl_match_array</name> <operator>=</operator> <call><name>ALLOC_CLEAR_MULT</name><argument_list>(<argument><expr><name>pumitem_T</name></expr></argument>, <argument><expr><name>compl_match_arraysize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_match_array</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_flags</name></name> <operator>&amp;</operator> <name>CP_ORIGINAL_TEXT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>shown_match_ok</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>compl</name> <operator>=</operator> <name>compl_first_match</name></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>compl</name><operator>-&gt;</operator><name>cp_flags</name></name> <operator>&amp;</operator> <name>CP_ORIGINAL_TEXT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>compl_leader</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <call><name>ins_compl_equal</name><argument_list>(<argument><expr><name>compl</name></expr></argument>, <argument><expr><name>compl_leader</name></expr></argument>, <argument><expr><name>lead_len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shown_match_ok</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compl</name> <operator>==</operator> <name>compl_shown_match</name> <operator>||</operator> <name>did_find_shown_match</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_shown_match</name> <operator>=</operator> <name>compl</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_find_shown_match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>shown_match_ok</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>shown_compl</name> <operator>=</operator> <name>compl</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>compl</name><operator>-&gt;</operator><name>cp_text</name><index>[<expr><name>CPT_ABBR</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>compl_match_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pum_text</name> <operator>=</operator>

<name><name>compl</name><operator>-&gt;</operator><name>cp_text</name><index>[<expr><name>CPT_ABBR</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>compl_match_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pum_text</name> <operator>=</operator> <name><name>compl</name><operator>-&gt;</operator><name>cp_str</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>compl_match_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pum_kind</name> <operator>=</operator> <name><name>compl</name><operator>-&gt;</operator><name>cp_text</name><index>[<expr><name>CPT_KIND</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>compl_match_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pum_info</name> <operator>=</operator> <name><name>compl</name><operator>-&gt;</operator><name>cp_text</name><index>[<expr><name>CPT_INFO</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>compl</name><operator>-&gt;</operator><name>cp_text</name><index>[<expr><name>CPT_MENU</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>compl_match_array</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>pum_extra</name> <operator>=</operator>

<name><name>compl</name><operator>-&gt;</operator><name>cp_text</name><index>[<expr><name>CPT_MENU</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>compl_match_array</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>pum_extra</name> <operator>=</operator> <name><name>compl</name><operator>-&gt;</operator><name>cp_fname</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compl</name> <operator>==</operator> <name>compl_shown_match</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>did_find_shown_match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>compl</name><operator>-&gt;</operator><name>cp_flags</name></name> <operator>&amp;</operator> <name>CP_ORIGINAL_TEXT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>shown_match_ok</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shown_match_ok</name> <operator>&amp;&amp;</operator> <name>shown_compl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_shown_match</name> <operator>=</operator> <name>shown_compl</name></expr>;</expr_stmt>

<expr_stmt><expr><name>shown_match_ok</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>compl</name> <operator>=</operator> <name><name>compl</name><operator>-&gt;</operator><name>cp_next</name></name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>compl</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>compl</name> <operator>!=</operator> <name>compl_first_match</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shown_match_ok</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>compl_match_arraysize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>compl_match_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pum_text</name> <operator>==</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_str</name></name>

<operator>||</operator> <name><name>compl_match_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pum_text</name>

<operator>==</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_text</name><index>[<expr><name>CPT_ABBR</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_match_array</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dollar_vcol</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>compl_col</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pum_display</name><argument_list>(<argument><expr><name>compl_match_array</name></expr></argument>, <argument><expr><name>compl_match_arraysize</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>has_completechanged</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>trigger_complete_changed_event</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_FIRST</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_EXACT</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ins_compl_dictionaries</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dict_start</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>thesaurus</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name>dict_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_p_scs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><name>compl_direction</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dict</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>thesaurus</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_spell</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dict</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"spell"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>LSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>save_p_scs</name> <operator>=</operator> <name>p_scs</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_inf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_scs</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ctrl_x_mode_line_or_eval</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat_esc</name> <init>= <expr><call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pat_esc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>pat_esc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>pat_esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"^\\s*\\zs\\V%s"</literal></expr></argument>, <argument><expr><name>pat_esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>RE_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>pat_esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><ternary><condition><expr><name>p_magic</name></expr> ?</condition><then> <expr><name>RE_MAGIC</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <call><name>ignorecase</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>dict</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>compl_interrupted</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <name>DICT_EXACT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>files</name> <operator>=</operator> <operator>&amp;</operator><name>dict</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>LSIZE</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>thesaurus</name> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"spell"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'`'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <call><name>expand_wildcards</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>files</name></expr></argument>,

<argument><expr><name>EW_FILE</name><operator>|</operator><name>EW_SILENT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>pat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>pat</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>pat</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>spell_dump_compl</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>ins_compl_files</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>thesaurus</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>!=</operator> <name>DICT_EXACT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeWild</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<label><name>theend</name>:</label>

<expr_stmt><expr><name>p_scs</name> <operator>=</operator> <name>save_p_scs</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ins_compl_files</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>thesaurus</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>regmatch</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>add_r</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>compl_interrupted</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>!=</operator> <name>DICT_EXACT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Scanning dictionary: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>msg_trunc_attr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><name>got_int</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>compl_interrupted</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>LSIZE</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>vim_regexec</name><argument_list>(<argument><expr><name>regmatch</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>regmatch</name><operator>-&gt;</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ctrl_x_mode_line_or_eval</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>find_line_end</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>find_word_end</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>add_r</name> <operator>=</operator> <call><name>ins_compl_add_infercase</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>-&gt;</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name><name>regmatch</name><operator>-&gt;</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,

<argument><expr><name>p_ic</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>dir</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>thesaurus</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wstart</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>find_word_start</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <name>NL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wstart</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_iswordc</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></while></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>find_word_end</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wstart</name> <operator>!=</operator> <name><name>regmatch</name><operator>-&gt;</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>add_r</name> <operator>=</operator> <call><name>ins_compl_add_infercase</name><argument_list>(<argument><expr><name>wstart</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>wstart</name><operator>)</operator></expr></argument>,

<argument><expr><name>p_ic</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>dir</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>add_r</name> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dir</name> <operator>=</operator> <name>FORWARD</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>add_r</name> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_compl_check_keys</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>find_word_start</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <call><name>mb_get_class</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_iswordc</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>find_word_end</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>start_class</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>start_class</name> <operator>=</operator> <call><name>mb_get_class</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_class</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mb_get_class</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>start_class</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<while>while <condition>(<expr><call><name>vim_iswordc</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>find_line_end</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>s</name> <operator>&gt;</operator> <name>ptr</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>CAR</name> <operator>||</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ins_compl_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>compl_T</name> <modifier>*</modifier></type><name>match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>compl_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>compl_leader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_first_match</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ins_compl_del_pum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pum_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_curr_match</name> <operator>=</operator> <name>compl_first_match</name></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>compl_curr_match</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_curr_match</name> <operator>=</operator> <name><name>compl_curr_match</name><operator>-&gt;</operator><name>cp_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>match</name><operator>-&gt;</operator><name>cp_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>cp_flags</name></name> <operator>&amp;</operator> <name>CP_FREE_FNAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>match</name><operator>-&gt;</operator><name>cp_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CPT_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>match</name><operator>-&gt;</operator><name>cp_text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>match</name><operator>-&gt;</operator><name>cp_user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>compl_curr_match</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>compl_curr_match</name> <operator>!=</operator> <name>compl_first_match</name></expr>)</condition>;</do>

<expr_stmt><expr><name>compl_first_match</name> <operator>=</operator> <name>compl_curr_match</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_shown_match</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_old_match</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ins_compl_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>compl_cont_status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_started</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_matches</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>compl_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>compl_leader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>edit_submode_extra</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>compl_orig_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_enter_selects</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_vim_var_dict</name><argument_list>(<argument><expr><name>VV_COMPLETED_ITEM</name></expr></argument>, <argument><expr><call><name>dict_alloc_lock</name><argument_list>(<argument><expr><name>VAR_FIXED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ins_compl_active</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>compl_started</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ins_compl_used_match</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>compl_used_match</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ins_compl_init_get_longest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>compl_get_longest</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ins_compl_interrupted</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>compl_interrupted</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ins_compl_enter_selects</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>compl_enter_selects</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>colnr_T</name></type>

<name>ins_compl_col</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>compl_col</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ins_compl_bs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>line</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>compl_col</name> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>line</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>compl_col</name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>ctrl_x_mode</name> <operator>!=</operator> <name>CTRL_X_OMNI</name><operator>)</operator> <operator>||</operator> <name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_EVAL</name>

<operator>||</operator> <operator>(</operator><operator>!</operator><call><name>can_bs</name><argument_list>(<argument><expr><name>BS_START</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>line</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>compl_col</name>

<operator>-</operator> <name>compl_length</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>K_BS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&lt;=</operator> <name>compl_col</name> <operator>+</operator> <name>compl_length</name>

<operator>||</operator> <call><name>ins_compl_need_restart</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_compl_restart</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>compl_leader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_leader</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>compl_col</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>line</name><operator>)</operator> <operator>-</operator> <name>compl_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_leader</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ins_compl_new_leader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_shown_match</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_curr_match</name> <operator>=</operator> <name>compl_shown_match</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NUL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>K_BS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ins_compl_need_restart</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>compl_was_interrupted</name>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_FUNCTION</name> <operator>||</operator> <name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_OMNI</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>compl_opt_refresh_always</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ins_compl_new_leader</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ins_compl_del_pum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_compl_delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_bytes</name><argument_list>(<argument><expr><name>compl_leader</name> <operator>+</operator> <call><name>ins_compl_len</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_used_match</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_started</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_compl_set_original_text</name><argument_list>(<argument><expr><name>compl_leader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>spell_bad_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>pum_call_update_screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush_cursor</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>compl_restarting</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ins_complete</name><argument_list>(<argument><expr><name>Ctrl_N</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_cont_status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>compl_restarting</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>compl_enter_selects</name> <operator>=</operator> <operator>!</operator><name>compl_used_match</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_compl_show_pum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_match_array</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_enter_selects</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ins_compl_len</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>compl_col</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>off</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ins_compl_addleader</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stop_arrow</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>cc</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_char2len</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>cc</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_char_bytes</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_opt_refresh_always</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AppendToRedobuff</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ins_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_opt_refresh_always</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AppendCharToRedobuff</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ins_compl_need_restart</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_compl_restart</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compl_opt_refresh_always</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>compl_leader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_leader</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call> <operator>+</operator> <name>compl_col</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name>compl_col</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_leader</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_compl_new_leader</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ins_compl_restart</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ins_compl_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_started</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_matches</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_cont_status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_cont_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ins_compl_set_original_text</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>compl_first_match</name><operator>-&gt;</operator><name>cp_flags</name></name> <operator>&amp;</operator> <name>CP_ORIGINAL_TEXT</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>compl_first_match</name><operator>-&gt;</operator><name>cp_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>compl_first_match</name><operator>-&gt;</operator><name>cp_str</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>compl_first_match</name><operator>-&gt;</operator><name>cp_prev</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>compl_first_match</name><operator>-&gt;</operator><name>cp_prev</name><operator>-&gt;</operator><name>cp_flags</name></name> <operator>&amp;</operator> <name>CP_ORIGINAL_TEXT</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>compl_first_match</name><operator>-&gt;</operator><name>cp_prev</name><operator>-&gt;</operator><name>cp_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>compl_first_match</name><operator>-&gt;</operator><name>cp_prev</name><operator>-&gt;</operator><name>cp_str</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ins_compl_addfrommatch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>compl_col</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>compl_T</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_str</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>len</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_flags</name></name> <operator>&amp;</operator> <name>CP_ORIGINAL_TEXT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_next</name></name></expr>;</init> <condition><expr><name>cp</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name>cp</name> <operator>!=</operator> <name>compl_first_match</name></expr>;</condition> <incr><expr><name>cp</name> <operator>=</operator> <name><name>cp</name><operator>-&gt;</operator><name>cp_next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compl_leader</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <call><name>ins_compl_equal</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>compl_leader</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>compl_leader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>cp</name><operator>-&gt;</operator><name>cp_str</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_compl_addleader</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ins_compl_prep</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>want_cindent</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_mode</name> <init>= <expr><name>ctrl_x_mode</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>Ctrl_R</name> <operator>&amp;&amp;</operator> <call><name>vim_is_ctrl_x_key</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>edit_submode_extra</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SELECT</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MOUSEDOWN</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MOUSEUP</name>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MOUSELEFT</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MOUSERIGHT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>is_mouse_key</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_LEFTRELEASE</name>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_LEFTRELEASE_NM</name>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MIDDLERELEASE</name>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_RIGHTRELEASE</name>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_X1RELEASE</name>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_X2RELEASE</name>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_LEFTDRAG</name>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_MIDDLEDRAG</name>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_RIGHTDRAG</name>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_X1DRAG</name>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_X2DRAG</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>popup_visible</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>mouse_row</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name>mouse_col</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><call><name>mouse_find_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>FIND_POPUP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_NOT_DEFINED_YET</name>

<operator>||</operator> <operator>(</operator><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_NORMAL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>compl_started</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_get_longest</name> <operator>=</operator> <operator>(</operator><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_cot</name></expr></argument>, <argument><expr><literal type="string">"longest"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_used_match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_NOT_DEFINED_YET</name></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>Ctrl_E</name></expr>:</case>

<case>case <expr><name>Ctrl_Y</name></expr>:</case>

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>CTRL_X_SCROLL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>REPLACE_FLAG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>edit_submode</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">" (insert) Scroll (^E/^Y)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>edit_submode</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">" (replace) Scroll (^E/^Y)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>edit_submode_pre</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Ctrl_L</name></expr>:</case>

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>CTRL_X_WHOLE_LINE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Ctrl_F</name></expr>:</case>

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>CTRL_X_FILES</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Ctrl_K</name></expr>:</case>

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>CTRL_X_DICTIONARY</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Ctrl_R</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>Ctrl_T</name></expr>:</case>

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>CTRL_X_THESAURUS</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_COMPL_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>Ctrl_U</name></expr>:</case>

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>CTRL_X_FUNCTION</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Ctrl_O</name></expr>:</case>

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>CTRL_X_OMNI</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<case>case <expr><name>Ctrl_S</name></expr>:</case>

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>CTRL_X_SPELL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>++</operator><name>emsg_off</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>spell_back_to_badword</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>emsg_off</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>Ctrl_RSB</name></expr>:</case>

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>CTRL_X_TAGS</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>Ctrl_I</name></expr>:</case>

<case>case <expr><name>K_S_TAB</name></expr>:</case>

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>CTRL_X_PATH_PATTERNS</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Ctrl_D</name></expr>:</case>

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>CTRL_X_PATH_DEFINES</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>Ctrl_V</name></expr>:</case>

<case>case <expr><name>Ctrl_Q</name></expr>:</case>

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>CTRL_X_CMDLINE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>Ctrl_P</name></expr>:</case>

<case>case <expr><name>Ctrl_N</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_INTRPT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_cont_status</name> <operator>|=</operator> <name>CONT_LOCAL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>compl_cont_mode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_cont_status</name> <operator>&amp;=</operator> <operator>~</operator><name>CONT_LOCAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_X</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compl_cont_mode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_cont_status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_cont_mode</name> <operator>=</operator> <name>CTRL_X_NOT_DEFINED_YET</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>CTRL_X_NORMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>edit_submode</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>ctrl_x_mode</name> <operator>!=</operator> <name>CTRL_X_NORMAL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_is_ctrl_x_key</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_SCROLL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>CTRL_X_NORMAL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>CTRL_X_FINISHED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>edit_submode</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_started</name> <operator>||</operator> <name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_FINISHED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_NORMAL</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>Ctrl_N</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>Ctrl_P</name>

<operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>Ctrl_R</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ins_compl_pum_key</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_FINISHED</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compl_curr_match</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>compl_leader</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_E</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compl_curr_match</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>compl_used_match</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>Ctrl_E</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>compl_curr_match</name><operator>-&gt;</operator><name>cp_str</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ins_compl_fixRedoBufForLeader</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>want_cindent</name> <operator>=</operator> <operator>(</operator><call><name>get_can_cindent</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cindent_on</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>compl_cont_mode</name> <operator>==</operator> <name>CTRL_X_WHOLE_LINE</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>want_cindent</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>do_c_expr_indent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>want_cindent</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prev_col</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dec_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arrow_used</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ins_need_undo_get</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>Ctrl_E</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>insertchar</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_col</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>ml_get_curline</name><argument_list>()</argument_list></call><index>[<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>]</index> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>inc_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <name>Ctrl_Y</name> <operator>||</operator> <operator>(</operator><name>compl_enter_selects</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <name>CAR</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_KENTER</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>NL</name><operator>)</operator><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>pum_visible</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_E</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ins_compl_delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_leader</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_bytes</name><argument_list>(<argument><expr><name>compl_leader</name> <operator>+</operator> <call><name>ins_compl_len</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>compl_first_match</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_bytes</name><argument_list>(<argument><expr><name>compl_orig_text</name> <operator>+</operator> <call><name>ins_compl_len</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>auto_format</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>prev_mode</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_COMPLETEDONEPRE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_compl_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_started</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_matches</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shortmess</name><argument_list>(<argument><expr><name>SHM_COMPLETIONMENU</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_clr_cmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>CTRL_X_NORMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_enter_selects</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>edit_submode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>edit_submode</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_C</name> <operator>&amp;&amp;</operator> <name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>want_cindent</name> <operator>&amp;&amp;</operator> <call><name>in_cinkeys</name><argument_list>(<argument><expr><name>KEY_COMPLETE</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><call><name>inindent</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_c_expr_indent</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ins_apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_COMPLETEDONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_LOCAL_MSG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_COMPLETEDONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_is_ctrl_x_key</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_cont_status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_cont_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ins_compl_fixRedoBufForLeader</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr_arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>ptr_arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compl_leader</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>compl_leader</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return;</return></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_orig_text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>compl_orig_text</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <name><name>ptr</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>len</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AppendCharToRedobuff</name><argument_list>(<argument><expr><name>K_BS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AppendToRedobuffLit</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>buf_T</name> <modifier>*</modifier></type>

<name>ins_compl_next_buf</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>curbuf</name> <operator>||</operator> <name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>wp</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr> </then><else>: <expr><name>firstwin</name></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>curwin</name>

<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_scanned</name></name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<while>while <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>buf</name><operator>-&gt;</operator><name>b_next</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>buf</name><operator>-&gt;</operator><name>b_next</name></name></expr> </then><else>: <expr><name>firstbuf</name></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>curbuf</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><name>flag</name> <operator>==</operator> <literal type="char">'U'</literal></expr>

?</condition><then> <expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_bl</name></name></expr>

</then><else>: <expr><operator>(</operator><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_bl</name></name>

<operator>||</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>flag</name> <operator>==</operator> <literal type="char">'u'</literal><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator>

<operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_scanned</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while></block_content></block></else></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_COMPL_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>expand_by_function</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>matchlist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>matchdict</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>funcname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>curwin_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>curbuf_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_State</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>funcname</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>type</name> <operator>==</operator> <name>CTRL_X_FUNCTION</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cfu</name></name></expr> </then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ofu</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>funcname</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <ternary><condition><expr><name>base</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>base</name></expr> </then><else>: <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin_save</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf_save</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>call_vim_function</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>rettv</name><operator>.</operator><name>v_type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VAR_LIST</name></expr>:</case>

<expr_stmt><expr><name>matchlist</name> <operator>=</operator> <name><name>rettv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VAR_DICT</name></expr>:</case>

<expr_stmt><expr><name>matchdict</name> <operator>=</operator> <name><name>rettv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VAR_SPECIAL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>==</operator> <name>VVAL_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_opt_suppress_empty</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<default>default:</default>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curwin_save</name> <operator>!=</operator> <name>curwin</name> <operator>||</operator> <name>curbuf_save</name> <operator>!=</operator> <name>curbuf</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_complwin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EQUAL_POS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_compldel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>matchlist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_compl_add_list</name><argument_list>(<argument><expr><name>matchlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>matchdict</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_compl_add_dict</name><argument_list>(<argument><expr><name>matchdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>theend</name>:</label>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>save_State</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>matchdict</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name>matchdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>matchlist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_unref</name><argument_list>(<argument><expr><name>matchlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_COMPL_FUNC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ins_compl_add_tv</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>word</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dup</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>empty</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>char_u</name> <argument_list>*<argument><expr><operator>(</operator><name><name>cptext</name><index>[<expr><name>CPT_COUNT</name></expr>]</index></name><operator>)</operator></expr></argument>;

<argument><expr><name>typval_T</name> <name>user_data</name></expr></argument>;

<argument><expr><name><name>user_data</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr></argument>;

if <argument><expr><operator>(</operator><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_DICT</name> <operator>&amp;&amp;</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<block>{

<expr><name>word</name> <operator>=</operator> <call><name>dict_get_string</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"word"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;

<expr><name><name>cptext</name><index>[<expr><name>CPT_ABBR</name></expr>]</index></name> <operator>=</operator> <call><name>dict_get_string</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"abbr"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;

<expr><name><name>cptext</name><index>[<expr><name>CPT_MENU</name></expr>]</index></name> <operator>=</operator> <call><name>dict_get_string</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"menu"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;

<expr><name><name>cptext</name><index>[<expr><name>CPT_KIND</name></expr>]</index></name> <operator>=</operator> <call><name>dict_get_string</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"kind"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;

<expr><name><name>cptext</name><index>[<expr><name>CPT_INFO</name></expr>]</index></name> <operator>=</operator> <call><name>dict_get_string</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"info"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;

<expr><call><name>dict_get_tv</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"user_data"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>user_data</name></expr></argument>)</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><call><name>dict_get_string</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"icase"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"icase"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CP_ICASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></argument>

<if_stmt><if>if <condition>(<expr><call><name>dict_get_string</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"dup"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dup</name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"dup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></argument_list></call></expr></expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dict_get_string</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"empty"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>empty</name> <operator>=</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dict_get_string</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"equal"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>dict_get_number</name><argument_list>(<argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"equal"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CP_EQUAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<if_stmt><else>else

<block>{<block_content>

<expr_stmt><expr><name>word</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>cptext</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cptext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>word</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>empty</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>word</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ins_compl_add</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cptext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>user_data</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</return>

}

static <function><type><name>void</name></type>

<name>ins_compl_add_list</name><parameter_list>(<parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><name>compl_direction</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR_ALL_LIST_ITEMS</name><argument_list>(<argument>list</argument>, <argument>li</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ins_compl_add_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>FORWARD</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>did_emsg</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ins_compl_add_dict</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di_refresh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di_words</name></decl>;</decl_stmt>

<expr_stmt><expr><name>compl_opt_refresh_always</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>di_refresh</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"refresh"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>di_refresh</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>di_refresh</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>di_refresh</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"always"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_opt_refresh_always</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di_words</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"words"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>di_words</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>di_words</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_compl_add_list</name><argument_list>(<argument><expr><name><name>di_words</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_completion</name><parameter_list>(<parameter><decl><type><name>colnr_T</name></type> <name>startcol</name></decl></parameter>, <parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_w_wrow</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_w_leftcol</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>CP_ORIGINAL_TEXT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ctrl_x_mode</name> <operator>!=</operator> <name>CTRL_X_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_compl_prep</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ins_compl_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_compl_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_direction</name> <operator>=</operator> <name>FORWARD</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>startcol</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>startcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>compl_col</name> <operator>=</operator> <name>startcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_length</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>startcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_orig_text</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call> <operator>+</operator> <name>compl_col</name></expr></argument>, <argument><expr><name>compl_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_ic</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CP_ICASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_orig_text</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>ins_compl_add</name><argument_list>(<argument><expr><name>compl_orig_text</name></expr></argument>,

<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>CTRL_X_EVAL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_compl_add_list</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_matches</name> <operator>=</operator> <call><name>ins_compl_make_cyclic</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_started</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_used_match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_cont_status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_curr_match</name> <operator>=</operator> <name>compl_first_match</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_no_insert</name> <operator>||</operator> <name>compl_no_select</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ins_complete</name><argument_list>(<argument><expr><name>K_DOWN</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_no_select</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_complete</name><argument_list>(<argument><expr><name>K_UP</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_complete</name><argument_list>(<argument><expr><name>Ctrl_N</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>compl_enter_selects</name> <operator>=</operator> <name>compl_no_insert</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compl_interrupted</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_pum</name><argument_list>(<argument><expr><name>save_w_wrow</name></expr></argument>, <argument><expr><name>save_w_leftcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_complete</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>startcol</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E785: complete() can only be used in Insert mode"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>undo_allowed</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_LIST</name> <operator>||</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>startcol</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>startcol</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_completion</name><argument_list>(<argument><expr><name>startcol</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_complete_add</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>ins_compl_add_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_complete_check</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>saved</name> <init>= <expr><name>RedrawingDisabled</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>RedrawingDisabled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_compl_check_keys</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>ins_compl_interrupted</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>RedrawingDisabled</name> <operator>=</operator> <name>saved</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>ins_compl_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_NOT_DEFINED_YET</name> <operator>||</operator> <name>compl_started</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ctrl_x_mode_names</name><index>[<expr><name>ctrl_x_mode</name> <operator>&amp;</operator> <operator>~</operator><name>CTRL_X_WANT_IDENT</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>get_complete_info</name><parameter_list>(<parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>what_list</name></decl></parameter>, <parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>retdict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CI_WHAT_MODE</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CI_WHAT_PUM_VISIBLE</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CI_WHAT_ITEMS</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CI_WHAT_SELECTED</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CI_WHAT_INSERTED</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CI_WHAT_ALL</name></cpp:macro> <cpp:value>0xff</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>what_flag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>what_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>what_flag</name> <operator>=</operator> <name>CI_WHAT_ALL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>what_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name>what_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR_ALL_LIST_ITEMS</name><argument_list>(<argument>what_list</argument>, <argument>item</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>what</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>what_flag</name> <operator>|=</operator> <name>CI_WHAT_MODE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="string">"pum_visible"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>what_flag</name> <operator>|=</operator> <name>CI_WHAT_PUM_VISIBLE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="string">"items"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>what_flag</name> <operator>|=</operator> <name>CI_WHAT_ITEMS</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="string">"selected"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>what_flag</name> <operator>|=</operator> <name>CI_WHAT_SELECTED</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="string">"inserted"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>what_flag</name> <operator>|=</operator> <name>CI_WHAT_INSERTED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>what_flag</name> <operator>&amp;</operator> <name>CI_WHAT_MODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dict_add_string</name><argument_list>(<argument><expr><name>retdict</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>, <argument><expr><call><name>ins_compl_mode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>what_flag</name> <operator>&amp;</operator> <name>CI_WHAT_PUM_VISIBLE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dict_add_number</name><argument_list>(<argument><expr><name>retdict</name></expr></argument>, <argument><expr><literal type="string">"pum_visible"</literal></expr></argument>, <argument><expr><call><name>pum_visible</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>what_flag</name> <operator>&amp;</operator> <name>CI_WHAT_ITEMS</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>compl_T</name> <modifier>*</modifier></type><name>match</name></decl>;</decl_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <call><name>list_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dict_add_list</name><argument_list>(<argument><expr><name>retdict</name></expr></argument>, <argument><expr><literal type="string">"items"</literal></expr></argument>, <argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <name>compl_first_match</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>compl_first_match</name></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>match</name><operator>-&gt;</operator><name>cp_flags</name></name> <operator>&amp;</operator> <name>CP_ORIGINAL_TEXT</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>di</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>list_append_dict</name><argument_list>(<argument><expr><name>li</name></expr></argument>, <argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="string">"word"</literal></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>cp_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="string">"abbr"</literal></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>cp_text</name><index>[<expr><name>CPT_ABBR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="string">"menu"</literal></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>cp_text</name><index>[<expr><name>CPT_MENU</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="string">"kind"</literal></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>cp_text</name><index>[<expr><name>CPT_KIND</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>cp_text</name><index>[<expr><name>CPT_INFO</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>cp_user_data</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="string">"user_data"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dict_add_tv</name><argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><literal type="string">"user_data"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>match</name><operator>-&gt;</operator><name>cp_user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name><name>match</name><operator>-&gt;</operator><name>cp_next</name></name></expr>;</expr_stmt>

</block_content>}</block>

while <condition>(<expr><name>match</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>match</name> <operator>!=</operator> <name>compl_first_match</name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>what_flag</name> <operator>&amp;</operator> <name>CI_WHAT_SELECTED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dict_add_number</name><argument_list>(<argument><expr><name>retdict</name></expr></argument>, <argument><expr><literal type="string">"selected"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>compl_curr_match</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then>

<expr><name><name>compl_curr_match</name><operator>-&gt;</operator><name>cp_number</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_complete_info</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>what_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_dict_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>what_list</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_complete_info</name><argument_list>(<argument><expr><name>what_list</name></expr></argument>, <argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ins_compl_get_exp</name><parameter_list>(<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>ini</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>pos_T</name></type> <name>first_match_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>pos_T</name></type> <name>last_match_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>e_cpt</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>found_all</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>buf_T</name> <modifier>*</modifier></type><name>ins_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>matches</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_p_scs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_p_ws</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_p_ic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_matches</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found_new_match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name>ctrl_x_mode</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dict_f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>set_match_pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compl_started</name></expr>)</condition>

<block>{<block_content>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>ins_buf</argument>)</argument_list></macro>

<expr_stmt><expr><name><name>ins_buf</name><operator>-&gt;</operator><name>b_scanned</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>found_all</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ins_buf</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e_cpt</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_LOCAL</name><operator>)</operator></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"."</literal></expr> </then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cpt</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>last_match_pos</name> <operator>=</operator> <name>first_match_pos</name> <operator>=</operator> <operator>*</operator><name>ini</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>ins_buf</name> <operator>!=</operator> <name>curbuf</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>buf_valid</name><argument_list>(<argument><expr><name>ins_buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ins_buf</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>compl_old_match</name> <operator>=</operator> <name>compl_curr_match</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>pos</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>compl_direction</name> <operator>==</operator> <name>FORWARD</name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name>last_match_pos</name></expr> </then><else>: <expr><operator>&amp;</operator><name>first_match_pos</name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>found_new_match</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>set_match_pos</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_NORMAL</name>

<operator>||</operator> <call><name>ctrl_x_mode_line_or_eval</name><argument_list>()</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>compl_started</name> <operator>||</operator> <name>found_all</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>found_all</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>e_cpt</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <operator>*</operator><name>e_cpt</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>e_cpt</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>e_cpt</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_scanned</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ins_buf</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>first_match_pos</name> <operator>=</operator> <operator>*</operator><name>ini</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_NORMAL</name> <operator>&amp;&amp;</operator> <call><name>dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first_match_pos</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>first_match_pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>ins_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>first_match_pos</name><operator>.</operator><name>col</name></name> <operator>=</operator>

<operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>first_match_pos</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_match_pos</name> <operator>=</operator> <name>first_match_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>set_match_pos</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"buwU"</literal></expr></argument>, <argument><expr><operator>*</operator><name>e_cpt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>ins_buf</name> <operator>=</operator> <call><name>ins_compl_next_buf</name><argument_list>(<argument><expr><name>ins_buf</name></expr></argument>, <argument><expr><operator>*</operator><name>e_cpt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>curbuf</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ins_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>compl_started</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>first_match_pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>last_match_pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>first_match_pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>ins_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last_match_pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>found_all</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ins_buf</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>CTRL_X_DICTIONARY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dict</name> <operator>=</operator> <name><name>ins_buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dict_f</name> <operator>=</operator> <name>DICT_EXACT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Scanning: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>ins_buf</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><call><name>buf_spname</name><argument_list>(<argument><expr><name>ins_buf</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><ternary><condition><expr><name><name>ins_buf</name><operator>-&gt;</operator><name>b_sfname</name></name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><name><name>ins_buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr>

</then><else>: <expr><name><name>ins_buf</name><operator>-&gt;</operator><name>b_sfname</name></name></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>msg_trunc_attr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>e_cpt</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ctrl_x_mode_line_or_eval</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>e_cpt</name> <operator>==</operator> <literal type="char">'k'</literal> <operator>||</operator> <operator>*</operator><name>e_cpt</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>e_cpt</name> <operator>==</operator> <literal type="char">'k'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>CTRL_X_DICTIONARY</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>CTRL_X_THESAURUS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>e_cpt</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>e_cpt</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dict</name> <operator>=</operator> <name>e_cpt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dict_f</name> <operator>=</operator> <name>DICT_FIRST</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>e_cpt</name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>CTRL_X_PATH_PATTERNS</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>e_cpt</name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>CTRL_X_PATH_DEFINES</name></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>e_cpt</name> <operator>==</operator> <literal type="char">']'</literal> <operator>||</operator> <operator>*</operator><name>e_cpt</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>CTRL_X_TAGS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Scanning tags."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>msg_trunc_attr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e_cpt</name></expr></argument>, <argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>found_all</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_pattern</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CTRL_X_PATH_PATTERNS</name></expr>:</case>

<case>case <expr><name>CTRL_X_PATH_DEFINES</name></expr>:</case>

<expr_stmt><expr><call><name>find_pattern_in_path</name><argument_list>(<argument><expr><name>compl_pattern</name></expr></argument>, <argument><expr><name>compl_direction</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>compl_pattern</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>type</name> <operator>==</operator> <name>CTRL_X_PATH_DEFINES</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_SOL</name><operator>)</operator><operator>)</operator></expr>

?</condition><then> <expr><name>FIND_DEFINE</name></expr> </then><else>: <expr><name>FIND_ANY</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>ACTION_EXPAND</name></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>MAXLNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>CTRL_X_DICTIONARY</name></expr>:</case>

<case>case <expr><name>CTRL_X_THESAURUS</name></expr>:</case>

<expr_stmt><expr><call><name>ins_compl_dictionaries</name><argument_list>(

<argument><expr><ternary><condition><expr><name>dict</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>dict</name></expr>

</then><else>: <expr><operator>(</operator><ternary><condition><expr><name>type</name> <operator>==</operator> <name>CTRL_X_THESAURUS</name></expr>

?</condition><then> <expr><operator>(</operator><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tsr</name></name> <operator>==</operator> <name>NUL</name></expr>

?</condition><then> <expr><name>p_tsr</name></expr>

</then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tsr</name></name></expr></else></ternary><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_dict</name></name> <operator>==</operator> <name>NUL</name></expr>

?</condition><then> <expr><name>p_dict</name></expr>

</then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_dict</name></name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>,

<argument><expr><name>compl_pattern</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>dict</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>dict_f</name></expr>

</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>type</name> <operator>==</operator> <name>CTRL_X_THESAURUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dict</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CTRL_X_TAGS</name></expr>:</case>

<expr_stmt><expr><name>save_p_ic</name> <operator>=</operator> <name>p_ic</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ic</name> <operator>=</operator> <call><name>ignorecase</name><argument_list>(<argument><expr><name>compl_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g_tag_at_cursor</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_tags</name><argument_list>(<argument><expr><name>compl_pattern</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_matches</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>matches</name></expr></argument>,

<argument><expr><name>TAG_REGEXP</name> <operator>|</operator> <name>TAG_NAMES</name> <operator>|</operator> <name>TAG_NOIC</name> <operator>|</operator> <name>TAG_INS_COMP</name>

<operator>|</operator> <operator>(</operator><ternary><condition><expr><name>ctrl_x_mode</name> <operator>!=</operator> <name>CTRL_X_NORMAL</name></expr> ?</condition><then> <expr><name>TAG_VERBOSE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name>TAG_MANY</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <name>num_matches</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_compl_add_matches</name><argument_list>(<argument><expr><name>num_matches</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr><name>p_ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>g_tag_at_cursor</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ic</name> <operator>=</operator> <name>save_p_ic</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CTRL_X_FILES</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>expand_wildcards</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>compl_pattern</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_matches</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>matches</name></expr></argument>,

<argument><expr><name>EW_FILE</name><operator>|</operator><name>EW_DIR</name><operator>|</operator><name>EW_ADDSLASH</name><operator>|</operator><name>EW_SILENT</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>tilde_replace</name><argument_list>(<argument><expr><name>compl_pattern</name></expr></argument>, <argument><expr><name>num_matches</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_csl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_matches</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>matches</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_csl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_csl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'b'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ins_compl_add_matches</name><argument_list>(<argument><expr><name>num_matches</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr><name>p_fic</name> <operator>||</operator> <name>p_wic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CTRL_X_CMDLINE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>expand_cmdline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compl_xp</name></expr></argument>, <argument><expr><name>compl_pattern</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>compl_pattern</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>num_matches</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>matches</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EXPAND_OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_compl_add_matches</name><argument_list>(<argument><expr><name>num_matches</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_COMPL_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CTRL_X_FUNCTION</name></expr>:</case>

<case>case <expr><name>CTRL_X_OMNI</name></expr>:</case>

<expr_stmt><expr><call><name>expand_by_function</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>compl_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>CTRL_X_SPELL</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>num_matches</name> <operator>=</operator> <call><name>expand_spelling</name><argument_list>(<argument><expr><name><name>first_match_pos</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><name>compl_pattern</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>matches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_matches</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_compl_add_matches</name><argument_list>(<argument><expr><name>num_matches</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr><name>p_ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><name>save_p_scs</name> <operator>=</operator> <name>p_scs</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ins_buf</name><operator>-&gt;</operator><name>b_p_inf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_scs</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>save_p_ws</name> <operator>=</operator> <name>p_ws</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ins_buf</name> <operator>!=</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_ws</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>e_cpt</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_ws</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cont_s_ipos</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>msg_silent</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>ctrl_x_mode_line_or_eval</name><argument_list>()</argument_list></call>

<operator>||</operator> <operator>(</operator><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_SOL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>found_new_match</name> <operator>=</operator> <call><name>search_for_exact_line</name><argument_list>(<argument><expr><name>ins_buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>,

<argument><expr><name>compl_direction</name></expr></argument>, <argument><expr><name>compl_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>found_new_match</name> <operator>=</operator> <call><name>searchit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ins_buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>compl_direction</name></expr></argument>,

<argument><expr><name>compl_pattern</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>SEARCH_KEEP</name> <operator>+</operator> <name>SEARCH_NFMSG</name></expr></argument>,

<argument><expr><name>RE_LAST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>--</operator><name>msg_silent</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compl_started</name> <operator>||</operator> <name>set_match_pos</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_started</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>first_match_pos</name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_match_pos</name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>set_match_pos</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>first_match_pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>last_match_pos</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name><name>first_match_pos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name><name>last_match_pos</name><operator>.</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>found_new_match</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>found_new_match</name> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ins_buf</name> <operator>==</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>found_all</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_ADDING</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>ins_buf</name> <operator>==</operator> <name>curbuf</name>

<operator>&amp;&amp;</operator> <name><name>ini</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name><name>ini</name><operator>-&gt;</operator><name>col</name></name> <operator>==</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>ins_buf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ctrl_x_mode_line_or_eval</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_ADDING</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;=</operator> <name><name>ins_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>ins_buf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_paste</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tmp_ptr</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_ADDING</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tmp_ptr</name> <operator>+=</operator> <name>compl_length</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_iswordp</name><argument_list>(<argument><expr><name>tmp_ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp_ptr</name> <operator>=</operator> <call><name>find_word_start</name><argument_list>(<argument><expr><name>tmp_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp_ptr</name> <operator>=</operator> <call><name>find_word_end</name><argument_list>(<argument><expr><name>tmp_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>tmp_ptr</name> <operator>-</operator> <name>ptr</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_ADDING</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <name>compl_length</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>ins_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>ins_buf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_ptr</name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_ptr</name> <operator>=</operator> <call><name>find_word_start</name><argument_list>(<argument><expr><name>tmp_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_ptr</name> <operator>=</operator> <call><name>find_word_end</name><argument_list>(<argument><expr><name>tmp_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp_ptr</name> <operator>&gt;</operator> <name>ptr</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">')'</literal> <operator>&amp;&amp;</operator> <name><name>IObuff</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>TAB</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>IObuff</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_js</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>IObuff</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal>

<operator>||</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_JOINSP</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>IObuff</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal>

<operator>||</operator> <name><name>IObuff</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'!'</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp_ptr</name> <operator>-</operator> <name>ptr</name> <operator>&gt;=</operator> <name>IOSIZE</name> <operator>-</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tmp_ptr</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>IOSIZE</name> <operator>-</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name>IObuff</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>tmp_ptr</name> <operator>-</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>tmp_ptr</name> <operator>-</operator> <name>ptr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cont_s_ipos</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>IObuff</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>compl_length</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ins_compl_add_infercase</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>p_ic</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>ins_buf</name> <operator>==</operator> <name>curbuf</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>ins_buf</name><operator>-&gt;</operator><name>b_sfname</name></name></expr></else></ternary></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cont_s_ipos</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NOTDONE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>found_new_match</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_scs</name> <operator>=</operator> <name>save_p_scs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ws</name> <operator>=</operator> <name>save_p_ws</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>compl_curr_match</name> <operator>!=</operator> <name>compl_old_match</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>found_new_match</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ctrl_x_mode</name> <operator>!=</operator> <name>CTRL_X_NORMAL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ctrl_x_mode_line_or_eval</name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator> <name>found_new_match</name> <operator>!=</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_compl_check_keys</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ctrl_x_mode</name> <operator>!=</operator> <name>CTRL_X_NORMAL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ctrl_x_mode_line_or_eval</name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator> <name>compl_interrupted</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>compl_started</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>type</name> <operator>==</operator> <name>CTRL_X_PATH_PATTERNS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ins_buf</name><operator>-&gt;</operator><name>b_scanned</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>compl_started</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>compl_started</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_NORMAL</name> <operator>||</operator> <call><name>ctrl_x_mode_line_or_eval</name><argument_list>()</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>*</operator><name>e_cpt</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>found_new_match</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>found_new_match</name> <operator>==</operator> <name>FAIL</name> <operator>||</operator> <operator>(</operator><name>ctrl_x_mode</name> <operator>!=</operator> <name>CTRL_X_NORMAL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ctrl_x_mode_line_or_eval</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>ins_compl_make_cyclic</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_old_match</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_curr_match</name> <operator>=</operator> <ternary><condition><expr><name>compl_direction</name> <operator>==</operator> <name>FORWARD</name></expr> ?</condition><then> <expr><name><name>compl_old_match</name><operator>-&gt;</operator><name>cp_next</name></name></expr>

</then><else>: <expr><name><name>compl_old_match</name><operator>-&gt;</operator><name>cp_prev</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_curr_match</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_curr_match</name> <operator>=</operator> <name>compl_old_match</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ins_compl_delete</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>compl_col</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_ADDING</name></expr> ?</condition><then> <expr><name>compl_length</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name>col</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>stop_arrow</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>backspace_until_column</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>changed_cline_bef_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_vim_var_dict</name><argument_list>(<argument><expr><name>VV_COMPLETED_ITEM</name></expr></argument>, <argument><expr><call><name>dict_alloc_lock</name><argument_list>(<argument><expr><name>VAR_FIXED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ins_compl_insert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>in_compl_func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ins_bytes</name><argument_list>(<argument><expr><name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_str</name></name> <operator>+</operator> <call><name>ins_compl_len</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_flags</name></name> <operator>&amp;</operator> <name>CP_ORIGINAL_TEXT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_used_match</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_used_match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><call><name>ins_compl_dict_alloc</name><argument_list>(<argument><expr><name>compl_shown_match</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_vim_var_dict</name><argument_list>(<argument><expr><name>VV_COMPLETED_ITEM</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_compl_func</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_curr_match</name> <operator>=</operator> <name>compl_shown_match</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ins_compl_next</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>allow_get_expansion</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>insert_match</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>in_compl_func</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_matches</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name> <init>= <expr><name>count</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>compl_T</name> <modifier>*</modifier></type><name>found_compl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found_end</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>started</name> <init>= <expr><name>compl_started</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_shown_match</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_leader</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_flags</name></name> <operator>&amp;</operator> <name>CP_ORIGINAL_TEXT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>ins_compl_equal</name><argument_list>(<argument><expr><name>compl_shown_match</name></expr></argument>,

<argument><expr><name>compl_leader</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>compl_leader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_next</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_next</name></name> <operator>!=</operator> <name>compl_first_match</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_shown_match</name> <operator>=</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_next</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>compl_shows_dir</name> <operator>==</operator> <name>BACKWARD</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ins_compl_equal</name><argument_list>(<argument><expr><name>compl_shown_match</name></expr></argument>,

<argument><expr><name>compl_leader</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>compl_leader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_next</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_next</name></name> <operator>==</operator> <name>compl_first_match</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>ins_compl_equal</name><argument_list>(<argument><expr><name>compl_shown_match</name></expr></argument>,

<argument><expr><name>compl_leader</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>compl_leader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_prev</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_prev</name></name> <operator>!=</operator> <name>compl_first_match</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_shown_match</name> <operator>=</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_prev</name></name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>allow_get_expansion</name> <operator>&amp;&amp;</operator> <name>insert_match</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>compl_get_longest</name> <operator>||</operator> <name>compl_restarting</name><operator>)</operator> <operator>||</operator> <name>compl_used_match</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_compl_delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>advance</name> <operator>=</operator> <name>count</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>allow_get_expansion</name> <operator>||</operator> <operator>!</operator><name>compl_get_longest</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_restarting</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>advance</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_restarting</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>--</operator><name>todo</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compl_shows_dir</name> <operator>==</operator> <name>FORWARD</name> <operator>&amp;&amp;</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_shown_match</name> <operator>=</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>found_end</name> <operator>=</operator> <operator>(</operator><name>compl_first_match</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_next</name></name> <operator>==</operator> <name>compl_first_match</name>

<operator>||</operator> <name>compl_shown_match</name> <operator>==</operator> <name>compl_first_match</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>compl_shows_dir</name> <operator>==</operator> <name>BACKWARD</name>

<operator>&amp;&amp;</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_prev</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>found_end</name> <operator>=</operator> <operator>(</operator><name>compl_shown_match</name> <operator>==</operator> <name>compl_first_match</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_shown_match</name> <operator>=</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>found_end</name> <operator>|=</operator> <operator>(</operator><name>compl_shown_match</name> <operator>==</operator> <name>compl_first_match</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allow_get_expansion</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>advance</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compl_shows_dir</name> <operator>==</operator> <name>BACKWARD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_pending</name> <operator>-=</operator> <name>todo</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_pending</name> <operator>+=</operator> <name>todo</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compl_no_select</name> <operator>&amp;&amp;</operator> <name>advance</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compl_shows_dir</name> <operator>==</operator> <name>BACKWARD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>compl_pending</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>compl_pending</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num_matches</name> <operator>=</operator> <call><name>ins_compl_get_exp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compl_startpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>compl_pending</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>compl_direction</name> <operator>==</operator> <name>compl_shows_dir</name>

<operator>&amp;&amp;</operator> <name>advance</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compl_pending</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_shown_match</name> <operator>=</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>compl_pending</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_pending</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_prev</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_shown_match</name> <operator>=</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>compl_pending</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>found_end</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_flags</name></name> <operator>&amp;</operator> <name>CP_ORIGINAL_TEXT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>compl_leader</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ins_compl_equal</name><argument_list>(<argument><expr><name>compl_shown_match</name></expr></argument>,

<argument><expr><name>compl_leader</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>compl_leader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>todo</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>found_compl</name> <operator>=</operator> <name>compl_shown_match</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>found_end</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>found_compl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_shown_match</name> <operator>=</operator> <name>found_compl</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>compl_no_insert</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>started</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ins_bytes</name><argument_list>(<argument><expr><name>compl_orig_text</name> <operator>+</operator> <call><name>ins_compl_len</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_used_match</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>insert_match</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compl_get_longest</name> <operator>||</operator> <name>compl_used_match</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_compl_insert</name><argument_list>(<argument><expr><name>in_compl_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_bytes</name><argument_list>(<argument><expr><name>compl_leader</name> <operator>+</operator> <call><name>ins_compl_len</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_used_match</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allow_get_expansion</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ins_compl_upd_pum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pum_enough_matches</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pum_call_update_screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ins_compl_show_pum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush_cursor</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ins_compl_delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_no_insert</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>started</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_enter_selects</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_enter_selects</name> <operator>=</operator> <operator>!</operator><name>insert_match</name> <operator>&amp;&amp;</operator> <name>compl_match_array</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_fname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lead</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"match in file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>space</name> <init>= <expr><name>sc_col</name> <operator>-</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>lead</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>space</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>e</name> <operator>=</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_fname</name></name></expr>;</init> <condition><expr><operator>*</operator><name>e</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>space</name> <operator>-=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>space</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>space</name> <operator>+=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><literal type="string">"%s %s%s"</literal></expr></argument>, <argument><expr><name>lead</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>s</name> <operator>&gt;</operator> <name><name>compl_shown_match</name><operator>-&gt;</operator><name>cp_fname</name></name></expr> ?</condition><then> <expr><literal type="string">"&lt;"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>num_matches</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ins_compl_check_keys</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>frequency</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_compl_func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_compl_func</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>using_script</name><argument_list>()</argument_list></call> <operator>||</operator> <name>ex_normal_busy</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>count</name> <operator>&lt;</operator> <name>frequency</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vpeekc_any</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_is_ctrl_x_key</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>Ctrl_X</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>Ctrl_R</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>safe_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>compl_shows_dir</name> <operator>=</operator> <call><name>ins_compl_key2dir</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ins_compl_next</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><call><name>ins_compl_key2count</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>c</name> <operator>!=</operator> <name>K_UP</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>K_DOWN</name></expr></argument>, <argument><expr><name>in_compl_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>safe_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>K_IGNORE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>Ctrl_R</name> <operator>&amp;&amp;</operator> <name>KeyTyped</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_interrupted</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_pending</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>compl_no_insert</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name> <init>= <expr><ternary><condition><expr><name>compl_pending</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>compl_pending</name></expr> </then><else>: <expr><operator>-</operator><name>compl_pending</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>compl_pending</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ins_compl_next</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>todo</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>in_compl_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ins_compl_key2dir</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_P</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_L</name>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_PAGEUP</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_KPAGEUP</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_S_UP</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_UP</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>BACKWARD</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FORWARD</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ins_compl_pum_key</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>pum_visible</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <name>K_PAGEUP</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_KPAGEUP</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_S_UP</name>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_PAGEDOWN</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_KPAGEDOWN</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_S_DOWN</name>

<operator>||</operator> <name>c</name> <operator>==</operator> <name>K_UP</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_DOWN</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ins_compl_key2count</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ins_compl_pum_key</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>K_UP</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>K_DOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>pum_get_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>h</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><name>h</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ins_compl_use_match</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>K_UP</name></expr>:</case>

<case>case <expr><name>K_DOWN</name></expr>:</case>

<case>case <expr><name>K_PAGEDOWN</name></expr>:</case>

<case>case <expr><name>K_KPAGEDOWN</name></expr>:</case>

<case>case <expr><name>K_S_DOWN</name></expr>:</case>

<case>case <expr><name>K_PAGEUP</name></expr>:</case>

<case>case <expr><name>K_KPAGEUP</name></expr>:</case>

<case>case <expr><name>K_S_UP</name></expr>:</case>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ins_complete</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enable_pum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>startcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>curs_col</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_w_wrow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_w_leftcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>insert_match</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_COMPL_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>save_did_ai</name> <init>= <expr><name>did_ai</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>CP_ORIGINAL_TEXT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>compl_direction</name> <operator>=</operator> <call><name>ins_compl_key2dir</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>insert_match</name> <operator>=</operator> <call><name>ins_compl_use_match</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compl_started</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>did_ai</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SMARTINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>did_si</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>can_si</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>can_si_back</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>stop_arrow</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curs_col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_pending</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_INTRPT</name><operator>)</operator> <operator>==</operator> <name>CONT_INTRPT</name>

<operator>&amp;&amp;</operator> <name>compl_cont_mode</name> <operator>==</operator> <name>ctrl_x_mode</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_cont_status</name> <operator>&amp;=</operator> <operator>~</operator><name>CONT_INTRPT</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_NORMAL</name>

<operator>||</operator> <name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_PATH_PATTERNS</name>

<operator>||</operator> <name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_PATH_DEFINES</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>compl_startpos</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_col</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>getwhitecols</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>compl_startpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>compl_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>compl_startpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_cont_status</name> <operator>&amp;=</operator> <operator>~</operator><name>CONT_SOL</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_S_IPOS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_cont_status</name> <operator>|=</operator> <name>CONT_SOL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>compl_startpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><call><name>skipwhite</name><argument_list>(

<argument><expr><name>line</name> <operator>+</operator> <name>compl_length</name>

<operator>+</operator> <name><name>compl_startpos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>compl_col</name> <operator>=</operator> <name><name>compl_startpos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>compl_length</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>compl_col</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_SPACE</name></cpp:macro> <cpp:value>75</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>compl_length</name> <operator>&gt;</operator> <operator>(</operator><name>IOSIZE</name> <operator>-</operator> <name>MIN_SPACE</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_cont_status</name> <operator>&amp;=</operator> <operator>~</operator><name>CONT_SOL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_length</name> <operator>=</operator> <operator>(</operator><name>IOSIZE</name> <operator>-</operator> <name>MIN_SPACE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name>compl_length</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>compl_cont_status</name> <operator>|=</operator> <name>CONT_ADDING</name> <operator>|</operator> <name>CONT_N_ADDS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_length</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_cont_status</name> <operator>&amp;=</operator> <name>CONT_LOCAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>ctrl_x_mode_line_or_eval</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_cont_status</name> <operator>=</operator> <name>CONT_ADDING</name> <operator>|</operator> <name>CONT_N_ADDS</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_cont_status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_cont_status</name> <operator>&amp;=</operator> <name>CONT_LOCAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_ADDING</name><operator>)</operator></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>compl_cont_mode</name> <operator>=</operator> <name>ctrl_x_mode</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ctrl_x_mode</name> <operator>!=</operator> <name>CTRL_X_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_cont_status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>compl_cont_status</name> <operator>|=</operator> <name>CONT_N_ADDS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_startpos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>startcol</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>curs_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_NORMAL</name> <operator>||</operator> <operator>(</operator><name>ctrl_x_mode</name> <operator>&amp;</operator> <name>CTRL_X_WANT_IDENT</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_SOL</name><operator>)</operator>

<operator>||</operator> <name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_PATH_DEFINES</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_ADDING</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><operator>--</operator><name>startcol</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>vim_isIDc</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>startcol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><name>compl_col</name> <operator>+=</operator> <operator>++</operator><name>startcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_length</name> <operator>=</operator> <name>curs_col</name> <operator>-</operator> <name>startcol</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_ic</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_pattern</name> <operator>=</operator> <call><name>str_foldcase</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>compl_col</name></expr></argument>,

<argument><expr><name>compl_length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_pattern</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>compl_col</name></expr></argument>,

<argument><expr><name>compl_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_pattern</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_ADDING</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\&lt;"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>compl_pattern</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>quote_meta</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>compl_col</name></expr></argument>,

<argument><expr><name>compl_length</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_pattern</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_iswordp</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>compl_col</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><name>compl_col</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_iswordp</name><argument_list>(<argument><expr><call><name>mb_prevptr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>compl_col</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>compl_pattern</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>quote_meta</name><argument_list>(<argument><expr><name>compl_pattern</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>line</name> <operator>+</operator> <name>compl_col</name></expr></argument>, <argument><expr><name>compl_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>--</operator><name>startcol</name> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>!</operator><call><name>vim_iswordp</name><argument_list>(<argument><expr><call><name>mb_prevptr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>startcol</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_pattern</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\&lt;\\k\\k"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_pattern</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>compl_col</name> <operator>+=</operator> <name>curs_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>base_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>head_off</name></decl>;</decl_stmt>

<expr_stmt><expr><name>startcol</name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>startcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base_class</name> <operator>=</operator> <call><name>mb_get_class</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>startcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>--</operator><name>startcol</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>head_off</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>startcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>base_class</name> <operator>!=</operator> <call><name>mb_get_class</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>startcol</name>

<operator>-</operator> <name>head_off</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>startcol</name> <operator>-=</operator> <name>head_off</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<while>while <condition>(<expr><operator>--</operator><name>startcol</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>startcol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while></block_content></block></else></if_stmt>

<expr_stmt><expr><name>compl_col</name> <operator>+=</operator> <operator>++</operator><name>startcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_length</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>curs_col</name> <operator>-</operator> <name>startcol</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_length</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_pattern</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_pattern</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>compl_pattern</name></expr></argument>, <argument><expr><literal type="string">"\\&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>quote_meta</name><argument_list>(<argument><expr><name>compl_pattern</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>compl_col</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>compl_pattern</name></expr></argument>, <argument><expr><literal type="string">"\\k"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>compl_pattern</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>quote_meta</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>compl_col</name></expr></argument>,

<argument><expr><name>compl_length</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_pattern</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>compl_pattern</name></expr></argument>, <argument><expr><literal type="string">"\\&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>quote_meta</name><argument_list>(<argument><expr><name>compl_pattern</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>compl_col</name></expr></argument>,

<argument><expr><name>compl_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>ctrl_x_mode_line_or_eval</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_col</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>getwhitecols</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_length</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>curs_col</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>compl_col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>compl_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_ic</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_pattern</name> <operator>=</operator> <call><name>str_foldcase</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>compl_col</name></expr></argument>, <argument><expr><name>compl_length</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_pattern</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>compl_col</name></expr></argument>, <argument><expr><name>compl_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_pattern</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_FILES</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>startcol</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>line</name> <operator>+</operator> <name>startcol</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>line</name> <operator>&amp;&amp;</operator> <call><name>vim_isfilec</name><argument_list>(<argument><expr><call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>line</name> <operator>&amp;&amp;</operator> <call><name>vim_isfilec</name><argument_list>(<argument><expr><call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>startcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>startcol</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>line</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>compl_col</name> <operator>+=</operator> <name>startcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_length</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>curs_col</name> <operator>-</operator> <name>startcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_pattern</name> <operator>=</operator> <call><name>addstar</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>compl_col</name></expr></argument>, <argument><expr><name>compl_length</name></expr></argument>,

<argument><expr><name>EXPAND_FILES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_pattern</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_CMDLINE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_pattern</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>curs_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_pattern</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_cmd_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compl_xp</name></expr></argument>, <argument><expr><name>compl_pattern</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>compl_pattern</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>curs_col</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>compl_xp</name><operator>.</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_UNSUCCESSFUL</name>

<operator>||</operator> <name><name>compl_xp</name><operator>.</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_NOTHING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_col</name> <operator>=</operator> <name>curs_col</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>compl_xp</name><operator>.</operator><name>xp_pattern</name></name> <operator>-</operator> <name>compl_pattern</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>compl_length</name> <operator>=</operator> <name>curs_col</name> <operator>-</operator> <name>compl_col</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_FUNCTION</name> <operator>||</operator> <name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_OMNI</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_COMPL_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>typval_T</name></type> <name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>funcname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>curwin_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>curbuf_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_State</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>funcname</name> <operator>=</operator> <ternary><condition><expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_FUNCTION</name></expr>

?</condition><then> <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_cfu</name></name></expr> </then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ofu</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>funcname</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_FUNCTION</name></expr>

?</condition><then> <expr><literal type="string">"completefunc"</literal></expr> </then><else>: <expr><literal type="string">"omnifunc"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_ai</name> <operator>=</operator> <name>save_did_ai</name></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin_save</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf_save</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>call_func_retnr</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>save_State</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curwin_save</name> <operator>!=</operator> <name>curwin</name> <operator>||</operator> <name>curbuf_save</name> <operator>!=</operator> <name>curbuf</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_complwin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EQUAL_POS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_compldel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ctrl_x_mode</name> <operator>=</operator> <name>CTRL_X_NORMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>edit_submode</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shortmess</name><argument_list>(<argument><expr><name>SHM_COMPLETIONMENU</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_clr_cmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>compl_opt_refresh_always</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_opt_suppress_empty</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>curs_col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>compl_col</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_col</name> <operator>&gt;</operator> <name>curs_col</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_col</name> <operator>=</operator> <name>curs_col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_length</name> <operator>=</operator> <name>curs_col</name> <operator>-</operator> <name>compl_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_pattern</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>compl_col</name></expr></argument>, <argument><expr><name>compl_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_pattern</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_SPELL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>spell_bad_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_col</name> <operator>=</operator> <name>curs_col</name> <operator>-</operator> <name>spell_bad_len</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_col</name> <operator>=</operator> <call><name>spell_word_start</name><argument_list>(<argument><expr><name>startcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_col</name> <operator>&gt;=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>startcol</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>compl_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_col</name> <operator>=</operator> <name>curs_col</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>spell_expand_check_cap</name><argument_list>(<argument><expr><name>compl_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_length</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>curs_col</name> <operator>-</operator> <name>compl_col</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_pattern</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>compl_col</name></expr></argument>, <argument><expr><name>compl_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_pattern</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"ins_complete()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_ADDING</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>edit_submode_pre</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">" Adding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ctrl_x_mode_line_or_eval</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_com</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_com</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>compl_startpos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>compl_startpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>compl_col</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_eol</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_com</name></name> <operator>=</operator> <name>old</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>edit_submode_pre</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>compl_startpos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>compl_col</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_LOCAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>edit_submode</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name><name>ctrl_x_msgs</name><index>[<expr><name>CTRL_X_LOCAL_MSG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>edit_submode</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><call><name>CTRL_X_MSG</name><argument_list>(<argument><expr><name>ctrl_x_mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ins_compl_fixRedoBufForLeader</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>compl_orig_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_orig_text</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>compl_col</name></expr></argument>, <argument><expr><name>compl_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_ic</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CP_ICASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_orig_text</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>ins_compl_add</name><argument_list>(<argument><expr><name>compl_orig_text</name></expr></argument>,

<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>compl_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>compl_orig_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>edit_submode_extra</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"-- Searching..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>edit_submode_highl</name> <operator>=</operator> <name>HLF_COUNT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>edit_submode_extra</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>insert_match</name> <operator>&amp;&amp;</operator> <call><name>stop_arrow</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>compl_shown_match</name> <operator>=</operator> <name>compl_curr_match</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_shows_dir</name> <operator>=</operator> <name>compl_direction</name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_w_wrow</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_w_leftcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>ins_compl_next</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><call><name>ins_compl_key2count</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>insert_match</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ins_compl_upd_pum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>compl_matches</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>compl_curr_match</name> <operator>=</operator> <name>compl_shown_match</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_direction</name> <operator>=</operator> <name>compl_shows_dir</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>global_busy</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_first_match</name> <operator>==</operator> <name><name>compl_first_match</name><operator>-&gt;</operator><name>cp_next</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>edit_submode_extra</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_ADDING</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>compl_length</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name>e_hitend</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name>e_patnotf</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>edit_submode_highl</name> <operator>=</operator> <name>HLF_E</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>compl_length</name> <operator>&gt;</operator> <literal type="number">1</literal>

<operator>||</operator> <operator>(</operator><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_ADDING</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>ctrl_x_mode</name> <operator>!=</operator> <name>CTRL_X_NORMAL</name>

<operator>&amp;&amp;</operator> <name>ctrl_x_mode</name> <operator>!=</operator> <name>CTRL_X_PATH_PATTERNS</name>

<operator>&amp;&amp;</operator> <name>ctrl_x_mode</name> <operator>!=</operator> <name>CTRL_X_PATH_DEFINES</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_cont_status</name> <operator>&amp;=</operator> <operator>~</operator><name>CONT_N_ADDS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>compl_curr_match</name><operator>-&gt;</operator><name>cp_flags</name></name> <operator>&amp;</operator> <name>CP_CONT_S_IPOS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_cont_status</name> <operator>|=</operator> <name>CONT_S_IPOS</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>compl_cont_status</name> <operator>&amp;=</operator> <operator>~</operator><name>CONT_S_IPOS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>edit_submode_extra</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>compl_curr_match</name><operator>-&gt;</operator><name>cp_flags</name></name> <operator>&amp;</operator> <name>CP_ORIGINAL_TEXT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>edit_submode_extra</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Back at original"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>edit_submode_highl</name> <operator>=</operator> <name>HLF_W</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_S_IPOS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>edit_submode_extra</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Word from other line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>edit_submode_highl</name> <operator>=</operator> <name>HLF_COUNT</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>compl_curr_match</name><operator>-&gt;</operator><name>cp_next</name></name> <operator>==</operator> <name><name>compl_curr_match</name><operator>-&gt;</operator><name>cp_prev</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>edit_submode_extra</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The only match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>edit_submode_highl</name> <operator>=</operator> <name>HLF_COUNT</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>compl_curr_match</name><operator>-&gt;</operator><name>cp_number</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>number</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>compl_T</name> <modifier>*</modifier></type><name>match</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_direction</name> <operator>==</operator> <name>FORWARD</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>match</name> <operator>=</operator> <name><name>compl_curr_match</name><operator>-&gt;</operator><name>cp_prev</name></name></expr>;</init> <condition><expr><name>match</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name>match</name> <operator>!=</operator> <name>compl_first_match</name></expr>;</condition>

<incr><expr><name>match</name> <operator>=</operator> <name><name>match</name><operator>-&gt;</operator><name>cp_prev</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>cp_number</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>number</name> <operator>=</operator> <name><name>match</name><operator>-&gt;</operator><name>cp_number</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>match</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>match</name> <operator>=</operator> <name><name>match</name><operator>-&gt;</operator><name>cp_next</name></name></expr>;</init>

<condition><expr><name>match</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>match</name><operator>-&gt;</operator><name>cp_number</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition>

<incr><expr><name>match</name> <operator>=</operator> <name><name>match</name><operator>-&gt;</operator><name>cp_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>cp_number</name></name> <operator>=</operator> <operator>++</operator><name>number</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<for>for <control>(<init><expr><name>match</name> <operator>=</operator> <name><name>compl_curr_match</name><operator>-&gt;</operator><name>cp_next</name></name></expr>;</init> <condition><expr><name>match</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name>match</name> <operator>!=</operator> <name>compl_first_match</name></expr>;</condition>

<incr><expr><name>match</name> <operator>=</operator> <name><name>match</name><operator>-&gt;</operator><name>cp_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>cp_number</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>number</name> <operator>=</operator> <name><name>match</name><operator>-&gt;</operator><name>cp_number</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>match</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>match</name> <operator>=</operator> <name><name>match</name><operator>-&gt;</operator><name>cp_prev</name></name></expr>;</init> <condition><expr><name>match</name>

<operator>&amp;&amp;</operator> <name><name>match</name><operator>-&gt;</operator><name>cp_number</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition>

<incr><expr><name>match</name> <operator>=</operator> <name><name>match</name><operator>-&gt;</operator><name>cp_prev</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>cp_number</name></name> <operator>=</operator> <operator>++</operator><name>number</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>compl_curr_match</name><operator>-&gt;</operator><name>cp_number</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>match_ref</name><index>[<expr><literal type="number">81</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>compl_matches</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>match_ref</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>match_ref</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"match %d of %d"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>compl_curr_match</name><operator>-&gt;</operator><name>cp_number</name></name></expr></argument>, <argument><expr><name>compl_matches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>match_ref</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>match_ref</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"match %d"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>compl_curr_match</name><operator>-&gt;</operator><name>cp_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>edit_submode_extra</name> <operator>=</operator> <name>match_ref</name></expr>;</expr_stmt>

<expr_stmt><expr><name>edit_submode_highl</name> <operator>=</operator> <name>HLF_R</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dollar_vcol</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>curs_columns</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compl_opt_suppress_empty</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shortmess</name><argument_list>(<argument><expr><name>SHM_COMPLETIONMENU</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>edit_submode_extra</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_smd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_attr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>edit_submode_extra</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>edit_submode_highl</name> <operator>&lt;</operator> <name>HLF_COUNT</name></expr>

?</condition><then> <expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>edit_submode_highl</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_clr_cmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enable_pum</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>compl_interrupted</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_pum</name><argument_list>(<argument><expr><name>save_w_wrow</name></expr></argument>, <argument><expr><name>save_w_leftcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>compl_was_interrupted</name> <operator>=</operator> <name>compl_interrupted</name></expr>;</expr_stmt>

<expr_stmt><expr><name>compl_interrupted</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>show_pum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>prev_w_wrow</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev_w_leftcol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>RedrawingDisabled</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>RedrawingDisabled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_w_wrow</name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>||</operator> <name>prev_w_leftcol</name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_compl_del_pum</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ins_compl_show_pum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>RedrawingDisabled</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>

<name>quote_meta</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<for>for <control>( <init>;</init> <condition><expr><operator>--</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>src</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>src</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'.'</literal></expr>:</case>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<case>case <expr><literal type="char">'['</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_DICTIONARY</name>

<operator>||</operator> <name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_THESAURUS</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'~'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_magic</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_DICTIONARY</name>

<operator>||</operator> <name>ctrl_x_mode</name> <operator>==</operator> <name>CTRL_X_THESAURUS</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'^'</literal></expr>:</case> 

<case>case <expr><literal type="char">'$'</literal></expr>:</case>

<expr_stmt><expr><name>m</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>mb_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mb_len</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;=</operator> <name>mb_len</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mb_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>src</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>m</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>free_insexpand_stuff</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>compl_orig_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>spell_back_to_badword</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>tpos</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>spell_bad_len</name> <operator>=</operator> <call><name>spell_move_to</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>BACKWARD</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <name><name>tpos</name><operator>.</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>start_arrow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
