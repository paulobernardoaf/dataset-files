<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\hashtab.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HT_DEBUG</name></cpp:macro></cpp:define> 

static long hash_count_lookup = 0; 

static long hash_count_perturb = 0; 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERTURB_SHIFT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>hash_may_resize</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minitems</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

hashtab_T *

hash_create(void)

{

hashtab_T *ht;

ht = ALLOC_ONE(hashtab_T);

if (ht != NULL)

hash_init(ht);

return ht;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>hash_init</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hashtab_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_smallarray</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>ht_mask</name></name> <operator>=</operator> <name>HT_INIT_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>hash_clear</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name> <operator>!=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_smallarray</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>hash_clear_all</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>todo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name> <operator>-</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>hash_clear</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>hashitem_T</name> <modifier>*</modifier></type>

<name>hash_find</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>hash_lookup</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>hash_hash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>hashitem_T</name> <modifier>*</modifier></type>

<name>hash_lookup</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>hash_T</name></type> <name>hash</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hash_T</name></type> <name>perturb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>freeitem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>idx</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HT_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>++</operator><name>hash_count_lookup</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>hash</name> <operator>&amp;</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_mask</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <operator>&amp;</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_array</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>hi</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name> <operator>==</operator> <name>HI_KEY_REMOVED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>freeitem</name> <operator>=</operator> <name>hi</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>hi</name><operator>-&gt;</operator><name>hi_hash</name></name> <operator>==</operator> <name>hash</name> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>hi</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>freeitem</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>perturb</name> <operator>=</operator> <name>hash</name></expr>;</init> <condition>;</condition> <incr><expr><name>perturb</name> <operator>&gt;&gt;=</operator> <name>PERTURB_SHIFT</name></expr></incr>)</control>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HT_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>++</operator><name>hash_count_perturb</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name>idx</name> <operator>&lt;&lt;</operator> <literal type="number">2U</literal><operator>)</operator> <operator>+</operator> <name>idx</name> <operator>+</operator> <name>perturb</name> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <operator>&amp;</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_array</name><index>[<expr><name>idx</name> <operator>&amp;</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_mask</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>freeitem</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>hi</name></expr> </then><else>: <expr><name>freeitem</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hi</name><operator>-&gt;</operator><name>hi_hash</name></name> <operator>==</operator> <name>hash</name>

<operator>&amp;&amp;</operator> <name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name> <operator>!=</operator> <name>HI_KEY_REMOVED</name>

<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>hi</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name> <operator>==</operator> <name>HI_KEY_REMOVED</name> <operator>&amp;&amp;</operator> <name>freeitem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>freeitem</name> <operator>=</operator> <name>hi</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>hash_debug_results</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HT_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\r\n\r\n\r\n\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Number of hashtable lookups: %ld\r\n"</literal></expr></argument>, <argument><expr><name>hash_count_lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Number of perturb loops: %ld\r\n"</literal></expr></argument>, <argument><expr><name>hash_count_perturb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Percentage of perturb loops: %ld%%\r\n"</literal></expr></argument>,

<argument><expr><name>hash_count_perturb</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>hash_count_lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>hash_add</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hash_T</name></type> <name>hash</name> <init>= <expr><call><name>hash_hash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>hash_lookup</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"hash_add()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>hash_add_item</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>hash_add_item</name><parameter_list>(

<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>,

<parameter><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><name>hash_T</name></type> <name>hash</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>ht_error</name></name> <operator>&amp;&amp;</operator> <call><name>hash_may_resize</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_filled</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>

<return>return <expr><call><name>hash_may_resize</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

void

hash_set(hashitem_T *hi, char_u *key)

{

hi-&gt;hi_key = key;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>hash_remove</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name> <operator>=</operator> <name>HI_KEY_REMOVED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hash_may_resize</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>hash_lock</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_locked</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>hash_lock_size</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hash_may_resize</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_locked</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>hash_unlock</name><parameter_list>(<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_locked</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hash_may_resize</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>hash_may_resize</name><parameter_list>(

<parameter><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>minitems</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>hashitem_T</name></type> <name><name>temparray</name><index>[<expr><name>HT_INIT_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>oldarray</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newarray</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>olditem</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newitem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>newi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>oldsize</name></decl>, <decl><type ref="prev"/><name>newsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>minsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>newmask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hash_T</name></type> <name>perturb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>ht_locked</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HT_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name> <operator>&gt;</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_filled</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><literal type="string">"hash_may_resize(): more used than filled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>ht_filled</name></name> <operator>&gt;=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_mask</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><literal type="string">"hash_may_resize(): table completely filled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>minitems</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>ht_filled</name></name> <operator>&lt;</operator> <name>HT_INIT_SIZE</name> <operator>-</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name> <operator>==</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_smallarray</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>oldsize</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_mask</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>ht_filled</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>&lt;</operator> <name>oldsize</name> <operator>*</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name> <operator>&gt;</operator> <name>oldsize</name> <operator>/</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>minsize</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>minsize</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long_u</name><operator>)</operator><name>minitems</name> <operator>&lt;</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>minitems</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>minsize</name> <operator>=</operator> <operator>(</operator><name>minitems</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>newsize</name> <operator>=</operator> <name>HT_INIT_SIZE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>newsize</name> <operator>&lt;</operator> <name>minsize</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>newsize</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>newsize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt> 

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>newsize</name> <operator>==</operator> <name>HT_INIT_SIZE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>newarray</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_smallarray</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name> <operator>==</operator> <name>newarray</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>temparray</name></expr></argument>, <argument><expr><name>newarray</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temparray</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldarray</name> <operator>=</operator> <name>temparray</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>oldarray</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>newarray</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>hashitem_T</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newarray</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>ht_filled</name></name> <operator>&lt;</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_mask</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>ht_error</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>oldarray</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>newarray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>hashitem_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>newsize</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newmask</name> <operator>=</operator> <name>newsize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>olditem</name> <operator>=</operator> <name>oldarray</name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>olditem</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>olditem</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>newi</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>olditem</name><operator>-&gt;</operator><name>hi_hash</name></name> <operator>&amp;</operator> <name>newmask</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>newitem</name> <operator>=</operator> <operator>&amp;</operator><name><name>newarray</name><index>[<expr><name>newi</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>newitem</name><operator>-&gt;</operator><name>hi_key</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>perturb</name> <operator>=</operator> <name><name>olditem</name><operator>-&gt;</operator><name>hi_hash</name></name></expr>;</init> <condition>;</condition> <incr><expr><name>perturb</name> <operator>&gt;&gt;=</operator> <name>PERTURB_SHIFT</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>newi</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name>newi</name> <operator>&lt;&lt;</operator> <literal type="number">2U</literal><operator>)</operator> <operator>+</operator> <name>newi</name> <operator>+</operator> <name>perturb</name> <operator>+</operator> <literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>newitem</name> <operator>=</operator> <operator>&amp;</operator><name><name>newarray</name><index>[<expr><name>newi</name> <operator>&amp;</operator> <name>newmask</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>newitem</name><operator>-&gt;</operator><name>hi_key</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>newitem</name> <operator>=</operator> <operator>*</operator><name>olditem</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name> <operator>!=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_smallarray</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>ht_array</name></name> <operator>=</operator> <name>newarray</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>ht_mask</name></name> <operator>=</operator> <name>newmask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>ht_filled</name></name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>ht_error</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>hash_T</name></type>

<name>hash_hash</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hash_T</name></type> <name>hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hash</name> <operator>=</operator> <operator>*</operator><name>key</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>hash_T</name><operator>)</operator><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>key</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <name>hash</name> <operator>*</operator> <literal type="number">101</literal> <operator>+</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>hash</name></expr>;</return>

</block_content>}</block></function>

</unit>
