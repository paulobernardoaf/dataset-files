<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\ex_cmds.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>linelen</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>has_tab</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>do_filter</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>line1</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>line2</name></decl></parameter>, <parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_out</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>not_writing</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>check_readonly</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>forceit</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>delbuf_msg</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>help_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>prepare_help_buffer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>

<name>do_ascii</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier><name>eap</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf2</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf3</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIGRAPHS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dig</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name><name>cc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ci</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utfc_ptr2char</name><argument_list>(<argument><expr><call><name>ml_get_cursor</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><literal type="string">"NUL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_mbyte</name> <operator>||</operator> <operator>(</operator><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0x100</literal><operator>)</operator> <operator>||</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>CAR</name> <operator>&amp;&amp;</operator> <call><name>get_fileformat</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOL_MAC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cval</name> <operator>=</operator> <name>NL</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cval</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_isprintc_strict</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">' '</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'~'</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>transchar_nonprint</name><argument_list>(<argument><expr><name>buf3</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" &lt;%s&gt;"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" &lt;M-%s&gt;"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>transchar</name><argument_list>(<argument><expr><name>c</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>buf2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIGRAPHS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dig</name> <operator>=</operator> <call><name>get_digraph_for_char</name><argument_list>(<argument><expr><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dig</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&lt;%s&gt;%s%s %d, Hex %02x, Oct %03o, Digr %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>transchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>cval</name></expr></argument>, <argument><expr><name>cval</name></expr></argument>, <argument><expr><name>cval</name></expr></argument>, <argument><expr><name>dig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&lt;%s&gt;%s%s %d, Hex %02x, Octal %03o"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>transchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>cval</name></expr></argument>, <argument><expr><name>cval</name></expr></argument>, <argument><expr><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>cc</name><index>[<expr><name>ci</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal> <operator>||</operator> <operator>(</operator><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>IObuff</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIGRAPHS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dig</name> <operator>=</operator> <call><name>get_digraph_for_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dig</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>IOSIZE</name> <operator>-</operator> <name>len</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&gt; %d, Hex %04x, Oct %o, Digr %s"</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&gt; %d, Hex %08x, Oct %o, Digr %s"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>dig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>IOSIZE</name> <operator>-</operator> <name>len</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&gt; %d, Hex %04x, Octal %o"</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&gt; %d, Hex %08x, Octal %o"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ci</name> <operator>==</operator> <name>MAX_MCO</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>cc</name><index>[<expr><name>ci</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_align</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>save_curpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>indent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_indent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_tab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_right</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>=</operator> <name>CMD_left</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_left</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>=</operator> <name>CMD_right</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>save_curpos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_left</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>indent</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_tw</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_wm</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_wm</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</init>

<condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</condition> <incr><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_left</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>new_indent</name> <operator>=</operator> <name>indent</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>has_tab</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>linelen</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_right</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>has_tab</name></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>get_indent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_center</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_indent</name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>-</operator> <name>len</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>new_indent</name> <operator>=</operator> <name>width</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>has_tab</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name>new_indent</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>set_indent</name><argument_list>(<argument><expr><name>new_indent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>linelen</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>width</name></expr>)</condition>

<block>{<block_content>

<do>do<block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>set_indent</name><argument_list>(<argument><expr><operator>++</operator><name>new_indent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>

while <condition>(<expr><call><name>linelen</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>width</name></expr>)</condition>;</do>

<expr_stmt><expr><operator>--</operator><name>new_indent</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>new_indent</name></expr>;</expr_stmt>

</block_content>}</block></while></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_indent</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_indent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>set_indent</name><argument_list>(<argument><expr><name>new_indent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>save_curpos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>linelen</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>has_tab</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>last</name> <operator>=</operator> <name>first</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</init>

<condition><expr><name>last</name> <operator>&gt;</operator> <name>first</name> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>last</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>--</operator><name>last</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>save</name> <operator>=</operator> <operator>*</operator><name>last</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>linetabsize</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>has_tab</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>*</operator><name>has_tab</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>TAB</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>sortbuf1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>sortbuf2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sort_ic</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sort_nr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sort_rx</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sort_flt</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sort_abort</name></decl>;</decl_stmt> 

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt> 

<union>union <block>{

<struct>struct

<block>{

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>start_col_nr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>end_col_nr</name></decl>;</decl_stmt> 

}</block> <decl><name>line</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>value</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>is_number</name></decl>;</decl_stmt> 

}</block> <decl><name>num</name></decl>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>float_T</name></type> <name>value_flt</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block> <decl><name>st_u</name></decl>;</union>

}</block></struct></type> <name>sorti_T</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>sort_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>sort_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sorti_T</name></type> <name>l1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>sorti_T</name> <operator>*</operator><operator>)</operator><name>s1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sorti_T</name></type> <name>l2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>sorti_T</name> <operator>*</operator><operator>)</operator><name>s2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sort_abort</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fast_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sort_abort</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sort_nr</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>l1</name><operator>.</operator><name>st_u</name><operator>.</operator><name>num</name><operator>.</operator><name>is_number</name></name> <operator>!=</operator> <name><name>l2</name><operator>.</operator><name>st_u</name><operator>.</operator><name>num</name><operator>.</operator><name>is_number</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>l1</name><operator>.</operator><name>st_u</name><operator>.</operator><name>num</name><operator>.</operator><name>is_number</name></name> <operator>-</operator> <name><name>l2</name><operator>.</operator><name>st_u</name><operator>.</operator><name>num</name><operator>.</operator><name>is_number</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <ternary><condition><expr><name><name>l1</name><operator>.</operator><name>st_u</name><operator>.</operator><name>num</name><operator>.</operator><name>value</name></name> <operator>==</operator> <name><name>l2</name><operator>.</operator><name>st_u</name><operator>.</operator><name>num</name><operator>.</operator><name>value</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr>

</then><else>: <expr><ternary><condition><expr><name><name>l1</name><operator>.</operator><name>st_u</name><operator>.</operator><name>num</name><operator>.</operator><name>value</name></name> <operator>&gt;</operator> <name><name>l2</name><operator>.</operator><name>st_u</name><operator>.</operator><name>num</name><operator>.</operator><name>value</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>sort_flt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <ternary><condition><expr><name><name>l1</name><operator>.</operator><name>st_u</name><operator>.</operator><name>value_flt</name></name> <operator>==</operator> <name><name>l2</name><operator>.</operator><name>st_u</name><operator>.</operator><name>value_flt</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr>

</then><else>: <expr><ternary><condition><expr><name><name>l1</name><operator>.</operator><name>st_u</name><operator>.</operator><name>value_flt</name></name> <operator>&gt;</operator> <name><name>l2</name><operator>.</operator><name>st_u</name><operator>.</operator><name>value_flt</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name>sortbuf1</name></expr></argument>, <argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>l1</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>l1</name><operator>.</operator><name>st_u</name><operator>.</operator><name>line</name><operator>.</operator><name>start_col_nr</name></name></expr></argument>,

<argument><expr><name><name>l1</name><operator>.</operator><name>st_u</name><operator>.</operator><name>line</name><operator>.</operator><name>end_col_nr</name></name> <operator>-</operator> <name><name>l1</name><operator>.</operator><name>st_u</name><operator>.</operator><name>line</name><operator>.</operator><name>start_col_nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sortbuf1</name><index>[<expr><name><name>l1</name><operator>.</operator><name>st_u</name><operator>.</operator><name>line</name><operator>.</operator><name>end_col_nr</name></name> <operator>-</operator> <name><name>l1</name><operator>.</operator><name>st_u</name><operator>.</operator><name>line</name><operator>.</operator><name>start_col_nr</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name>sortbuf2</name></expr></argument>, <argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>l2</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>l2</name><operator>.</operator><name>st_u</name><operator>.</operator><name>line</name><operator>.</operator><name>start_col_nr</name></name></expr></argument>,

<argument><expr><name><name>l2</name><operator>.</operator><name>st_u</name><operator>.</operator><name>line</name><operator>.</operator><name>end_col_nr</name></name> <operator>-</operator> <name><name>l2</name><operator>.</operator><name>st_u</name><operator>.</operator><name>line</name><operator>.</operator><name>start_col_nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sortbuf2</name><index>[<expr><name><name>l2</name><operator>.</operator><name>st_u</name><operator>.</operator><name>line</name><operator>.</operator><name>end_col_nr</name></name> <operator>-</operator> <name><name>l2</name><operator>.</operator><name>st_u</name><operator>.</operator><name>line</name><operator>.</operator><name>start_col_nr</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <ternary><condition><expr><name>sort_ic</name></expr> ?</condition><then> <expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>sortbuf1</name></expr></argument>, <argument><expr><name>sortbuf2</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>sortbuf1</name></expr></argument>, <argument><expr><name>sortbuf2</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>l1</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <name><name>l2</name><operator>.</operator><name>lnum</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_sort</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>regmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>maxlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sorti_T</name> <modifier>*</modifier></type><name>nrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>c</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>unique</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>deleted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>start_col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>end_col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sort_what</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>format_found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>change_occurred</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sortbuf1</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sortbuf2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nrs</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>sorti_T</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nrs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>sortend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sort_abort</name> <operator>=</operator> <name>sort_ic</name> <operator>=</operator> <name>sort_rx</name> <operator>=</operator> <name>sort_nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>sort_flt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sort_ic</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sort_rx</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>sort_nr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>format_found</name></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'f'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>sort_flt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>format_found</name></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>sort_what</name> <operator>=</operator> <name>STR2NR_BIN</name> <operator>+</operator> <name>STR2NR_FORCE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>format_found</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'o'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>sort_what</name> <operator>=</operator> <name>STR2NR_OCT</name> <operator>+</operator> <name>STR2NR_FORCE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>format_found</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>sort_what</name> <operator>=</operator> <name>STR2NR_HEX</name> <operator>+</operator> <name>STR2NR_FORCE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>format_found</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>unique</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>check_nextcmd</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skip_regexp</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <operator>*</operator><name>p</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invalpat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>sortend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>last_search_pat</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noprevre</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>sortend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><call><name>last_search_pat</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>RE_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>RE_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>sortend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <name>p_ic</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>sortend</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>format_found</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>sortend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sort_nr</name> <operator>+=</operator> <name>sort_what</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>maxlen</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end_col</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>vim_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sort_rx</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>start_col</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>end_col</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name><name>regmatch</name><operator>.</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>start_col</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name><name>regmatch</name><operator>.</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else

if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sort_nr</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>sort_flt</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>end_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s2</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>s2</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>start_col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sort_nr</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sort_what</name> <operator>&amp;</operator> <name>STR2NR_HEX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skiptohex</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>sort_what</name> <operator>&amp;</operator> <name>STR2NR_BIN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skiptobin</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skiptodigit</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <name>p</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>nrs</name><index>[<expr><name>lnum</name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>]</index></name><operator>.</operator><name><name>st_u</name><operator>.</operator><name>num</name><operator>.</operator><name>is_number</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nrs</name><index>[<expr><name>lnum</name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>]</index></name><operator>.</operator><name><name>st_u</name><operator>.</operator><name>num</name><operator>.</operator><name>value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>nrs</name><index>[<expr><name>lnum</name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>]</index></name><operator>.</operator><name><name>st_u</name><operator>.</operator><name>num</name><operator>.</operator><name>is_number</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_str2nr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sort_what</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>nrs</name><index>[<expr><name>lnum</name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>]</index></name><operator>.</operator><name><name>st_u</name><operator>.</operator><name>num</name><operator>.</operator><name>value</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nrs</name><index>[<expr><name>lnum</name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>]</index></name><operator>.</operator><name><name>st_u</name><operator>.</operator><name>value_flt</name></name> <operator>=</operator> <operator>-</operator><name>DBL_MAX</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nrs</name><index>[<expr><name>lnum</name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>]</index></name><operator>.</operator><name><name>st_u</name><operator>.</operator><name>value_flt</name></name> <operator>=</operator>

<call><name>strtod</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>s2</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>nrs</name><index>[<expr><name>lnum</name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>]</index></name><operator>.</operator><name><name>st_u</name><operator>.</operator><name>line</name><operator>.</operator><name>start_col_nr</name></name> <operator>=</operator> <name>start_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nrs</name><index>[<expr><name>lnum</name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>]</index></name><operator>.</operator><name><name>st_u</name><operator>.</operator><name>line</name><operator>.</operator><name>end_col_nr</name></name> <operator>=</operator> <name>end_col</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>nrs</name><index>[<expr><name>lnum</name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fast_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>sortend</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sortbuf1</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>maxlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sortbuf1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>sortend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sortbuf2</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>maxlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sortbuf2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>sortend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>nrs</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sorti_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sort_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sort_abort</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>sortend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>get_lnum</name> <init>= <expr><name><name>nrs</name><index>[<expr><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr> ?</condition><then> <expr><name>count</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr>]</index></name><operator>.</operator><name>lnum</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>get_lnum</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>linenr_T</name><operator>)</operator><name>count</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>change_occurred</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>get_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>unique</name> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><ternary><condition><expr><name>sort_ic</name></expr> ?</condition><then> <expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sortbuf1</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sortbuf1</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>sortbuf1</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name><operator>++</operator></expr></argument>, <argument><expr><name>sortbuf1</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fast_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>sortend</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>deleted</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>count</name> <operator>-</operator> <operator>(</operator><name>lnum</name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>deleted</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mark_adjust</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>-</operator> <name>deleted</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>MAXLNUM</name></expr></argument>, <argument><expr><operator>-</operator><name>deleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msgmore</name><argument_list>(<argument><expr><operator>-</operator><name>deleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>deleted</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mark_adjust</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr></argument>, <argument><expr><name>MAXLNUM</name></expr></argument>, <argument><expr><operator>-</operator><name>deleted</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>change_occurred</name> <operator>||</operator> <name>deleted</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><name>deleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>sortend</name>:</label>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>nrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>sortbuf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>sortbuf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_interr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>do_move</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>line1</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>line2</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>dest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>extra</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>num_lines</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>last_line</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>&gt;=</operator> <name>line1</name> <operator>&amp;&amp;</operator> <name>dest</name> <operator>&lt;</operator> <name>line2</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E134: Cannot move a range of lines into itself"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>==</operator> <name>line1</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name>dest</name> <operator>==</operator> <name>line2</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>&gt;=</operator> <name>line1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>dest</name> <operator>+</operator> <operator>(</operator><name>line2</name> <operator>-</operator> <name>line1</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num_lines</name> <operator>=</operator> <name>line2</name> <operator>-</operator> <name>line1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dest</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>extra</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>l</name> <operator>=</operator> <name>line1</name></expr>;</init> <condition><expr><name>l</name> <operator>&lt;=</operator> <name>line2</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>l</name> <operator>+</operator> <name>extra</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>l</name> <operator>-</operator> <name>line1</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>&lt;</operator> <name>line1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>extra</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>last_line</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mark_adjust_nofold</name><argument_list>(<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><name>last_line</name> <operator>-</operator> <name>line2</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>&gt;=</operator> <name>line2</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mark_adjust_nofold</name><argument_list>(<argument><expr><name>line2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>-</operator><name>num_lines</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>win</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldMoveRange</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>win</name><operator>-&gt;</operator><name>w_folds</name></name></expr></argument>, <argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>dest</name> <operator>-</operator> <name>num_lines</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>mark_adjust_nofold</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>line1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>num_lines</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>win</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldMoveRange</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>win</name><operator>-&gt;</operator><name>w_folds</name></name></expr></argument>, <argument><expr><name>dest</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>line1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>line2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>dest</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>dest</name> <operator>+</operator> <name>num_lines</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mark_adjust_nofold</name><argument_list>(<argument><expr><name>last_line</name> <operator>-</operator> <name>num_lines</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>last_line</name></expr></argument>,

<argument><expr><operator>-</operator><operator>(</operator><name>last_line</name> <operator>-</operator> <name>dest</name> <operator>-</operator> <name>extra</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><name>line1</name> <operator>+</operator> <name>extra</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>line2</name> <operator>+</operator> <name>extra</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>line1</name></expr>;</init> <condition><expr><name>l</name> <operator>&lt;=</operator> <name>line2</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><name>line1</name> <operator>+</operator> <name>extra</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>global_busy</name> <operator>&amp;&amp;</operator> <name>num_lines</name> <operator>&gt;</operator> <name>p_report</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>NGETTEXT</name><argument_list>(<argument><expr><literal type="string">"%ld line moved"</literal></expr></argument>, <argument><expr><literal type="string">"%ld lines moved"</literal></expr></argument>, <argument><expr><name>num_lines</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>num_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>&gt;=</operator> <name>line1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>dest</name> <operator>+</operator> <operator>(</operator><name>line2</name> <operator>-</operator> <name>line1</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line1</name> <operator>&lt;</operator> <name>dest</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>num_lines</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_line</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>&gt;</operator> <name>last_line</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <name>last_line</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name>line1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>line1</name> <operator>+</operator> <name>num_lines</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_copy</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>line1</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>line2</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>line2</name> <operator>-</operator> <name>line1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>n</name> <operator>+</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>line1</name> <operator>&lt;=</operator> <name>line2</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>line1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line1</name> <operator>==</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>line1</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>line1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name>line1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>line1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name>line2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>line2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>appended_lines_mark</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msgmore</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>prevcmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>free_prev_shellcmd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>prevcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>do_bang</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>addr_count</name></decl></parameter>,

<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>do_in</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>do_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>line1</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>line2</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newcmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>free_newcmd</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ins_prevcmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>trailarg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scroll_save</name> <init>= <expr><name>msg_scroll</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_restricted</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>addr_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>autowrite_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>scroll_save</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ins_prevcmd</name> <operator>=</operator> <name>forceit</name></expr>;</expr_stmt>

<expr_stmt><expr><name>trailarg</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>trailarg</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newcmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>newcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ins_prevcmd</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prevcmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noprev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>newcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>prevcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>newcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newcmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>newcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ins_prevcmd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>prevcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>t</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>trailarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>newcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newcmd</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>trailarg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>newcmd</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>trailarg</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>trailarg</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ins_prevcmd</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block> while <condition>(<expr><name>trailarg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>prevcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prevcmd</name> <operator>=</operator> <name>newcmd</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bangredo</name></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><name>prevcmd</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"%#"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AppendToRedobuffLit</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AppendToRedobuffLit</name><argument_list>(<argument><expr><name>prevcmd</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>AppendToRedobuff</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bangredo</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_shq</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>newcmd</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>prevcmd</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p_shq</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newcmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>newcmd</name></expr></argument>, <argument><expr><name>p_shq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>newcmd</name></expr></argument>, <argument><expr><name>prevcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>newcmd</name></expr></argument>, <argument><expr><name>p_shq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>free_newcmd</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>addr_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name>newcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>msg_row</name></expr></argument>, <argument><expr><name>msg_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_shell</name><argument_list>(<argument><expr><name>newcmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><call><name>do_filter</name><argument_list>(<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><name>eap</name></expr></argument>, <argument><expr><name>newcmd</name></expr></argument>, <argument><expr><name>do_in</name></expr></argument>, <argument><expr><name>do_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_SHELLFILTERPOST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>free_newcmd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>newcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>do_filter</name><parameter_list>(

<parameter><decl><type><name>linenr_T</name></type> <name>line1</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>line2</name></decl></parameter>,

<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>do_in</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>do_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>itmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>otmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>linecount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>read_linecount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>cursor_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>old_curbuf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shell_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>orig_start</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>orig_end</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_lockmarks</name> <init>= <expr><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FILTERPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>stmp</name> <init>= <expr><name>p_stmp</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor_save</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>linecount</name> <operator>=</operator> <name>line2</name> <operator>-</operator> <name>line1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>line1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_line_abv_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invalidate_botline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_out</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>shell_flags</name> <operator>|=</operator> <name>SHELL_DOOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FILTERPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>stmp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_in</name> <operator>&amp;&amp;</operator> <name>do_out</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>stmp</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>shell_flags</name> <operator>|=</operator> <name>SHELL_READ</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>line2</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>do_in</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>do_out</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>stmp</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>shell_flags</name> <operator>|=</operator> <name>SHELL_WRITE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>line1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>line2</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>do_in</name> <operator>&amp;&amp;</operator> <name>do_out</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>stmp</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>shell_flags</name> <operator>|=</operator> <name>SHELL_READ</name><operator>|</operator><name>SHELL_WRITE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>line1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>line2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>line2</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><operator>(</operator><name>do_in</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>itmp</name> <operator>=</operator> <call><name>vim_tempname</name><argument_list>(<argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>do_out</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>otmp</name> <operator>=</operator> <call><name>vim_tempname</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>filterend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>no_wait_return</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>itmp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>buf_write</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>itmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><name>eap</name></expr></argument>,

<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>--</operator><name>no_wait_return</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notcreate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>itmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<goto>goto <name>filterend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curbuf</name> <operator>!=</operator> <name>old_curbuf</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>filterend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_out</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cmd_buf</name> <operator>=</operator> <call><name>make_filter_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>itmp</name></expr></argument>, <argument><expr><name>otmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd_buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>filterend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cursor_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_out</name> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>p_srr</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>do_in</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redraw_later_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_out</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>line2</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>line2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cmd_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>read_linecount</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>call_shell</name><argument_list>(<argument><expr><name>cmd_buf</name></expr></argument>, <argument><expr><name>SHELL_FILTER</name> <operator>|</operator> <name>SHELL_COOKED</name> <operator>|</operator> <name>shell_flags</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>redraw_later_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_return</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cmd_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_check_timestamps</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>need_check_timestamps</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_out</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>otmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>readfile</name><argument_list>(<argument><expr><name>otmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>MAXLNUM</name></expr></argument>,

<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>READ_FILTER</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notread</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>otmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curbuf</name> <operator>!=</operator> <name>old_curbuf</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>filterend</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>read_linecount</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>read_linecount</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shell_flags</name> <operator>&amp;</operator> <name>SHELL_READ</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>line2</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>appended_lines_mark</name><argument_list>(<argument><expr><name>line2</name></expr></argument>, <argument><expr><name>read_linecount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_in</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cmdmod</name><operator>.</operator><name>keepmarks</name></name> <operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_REMMARK</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>read_linecount</name> <operator>&gt;=</operator> <name>linecount</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mark_adjust</name><argument_list>(<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><name>linecount</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>mark_adjust</name><argument_list>(<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line1</name> <operator>+</operator> <name>read_linecount</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>linecount</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mark_adjust</name><argument_list>(<argument><expr><name>line1</name> <operator>+</operator> <name>read_linecount</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><name>MAXLNUM</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>line1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>del_lines</name><argument_list>(<argument><expr><name>linecount</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name> <operator>-=</operator> <name>linecount</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>-=</operator> <name>linecount</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>write_lnum_adjust</name><argument_list>(<argument><expr><operator>-</operator><name>linecount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>foldUpdate</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>linecount</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>--</operator><name>no_wait_return</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>linecount</name> <operator>&gt;</operator> <name>p_report</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>do_in</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>msg_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%ld lines filtered"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>linecount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>msg</name><argument_list>(<argument><expr><name>msg_buf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>msg_scroll</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_keep_msg</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>msg_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msgmore</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>linecount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<label><name>error</name>:</label>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>cursor_save</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>no_wait_return</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_return</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<label><name>filterend</name>:</label>

<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name> <operator>=</operator> <name>save_lockmarks</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curbuf</name> <operator>!=</operator> <name>old_curbuf</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>no_wait_return</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E135: *Filter* Autocommands must not change current buffer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name>orig_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name>orig_end</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>itmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_remove</name><argument_list>(<argument><expr><name>itmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>otmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_remove</name><argument_list>(<argument><expr><name>otmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>itmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>otmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>do_shell</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>save_nwr</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>winstart</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keep_termcap</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>check_restricted</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>keep_termcap</name> <operator>=</operator> <name>winstart</name> <operator>=</operator> <operator>(</operator><call><name>STRNICMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"start "</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_TERMINAL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>keep_termcap</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>autocmd_busy</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keep_termcap</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>stoptermcap</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>winstart</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>p_warn</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>autocmd_busy</name> <operator>&amp;&amp;</operator> <name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><call><name>bufIsChangedNotTerm</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keep_termcap</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>starttermcap</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"[No write since last change]\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keep_termcap</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stoptermcap</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>swapping_screen</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>msg_row</name></expr></argument>, <argument><expr><name>msg_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cursor_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>call_shell</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>SHELL_COOKED</name> <operator>|</operator> <name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_check_timestamps</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>need_check_timestamps</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>swapping_screen</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>autocmd_busy</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redraw_later_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><name>keep_termcap</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>need_wait_return</name><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redraw_later_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>save_nwr</name> <operator>=</operator> <name>no_wait_return</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>swapping_screen</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>no_wait_return</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>wait_return</name><argument_list>(<argument><expr><ternary><condition><expr><name>term_console</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>wait_return</name><argument_list>(<argument><expr><name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>no_wait_return</name> <operator>=</operator> <name>save_nwr</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keep_termcap</name></expr>)</condition><block type="pseudo"><block_content> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>starttermcap</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>skip_redraw</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redraw_later_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>term_console</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><call><name>IF_EB</name><argument_list>(<argument><expr><literal type="string">"\033[0 q"</literal></expr></argument>, <argument><expr><name>ESC_STR</name> <literal type="string">"[0 q"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>got_int</name> <operator>&amp;&amp;</operator> <name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redraw_later_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>display_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_SHELLCMDPOST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>find_pipe</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inquote</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>cmd</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inquote</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>inquote</name> <operator>=</operator> <operator>!</operator><name>inquote</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>rem_backslash</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>make_filter_cmd</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>itmp</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>otmp</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>len</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>is_fish_shell</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>shell_name</name> <init>= <expr><call><name>get_isolated_shell_name</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>is_fish_shell</name> <operator>=</operator> <operator>(</operator><call><name>fnamecmp</name><argument_list>(<argument><expr><name>shell_name</name></expr></argument>, <argument><expr><literal type="string">"fish"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>shell_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_fish_shell</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>long_u</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">13</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>long_u</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>itmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>long_u</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>itmp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>otmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>long_u</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>otmp</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>long_u</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p_srr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>itmp</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>otmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_fish_shell</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"begin; %s; end"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"(%s)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>itmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" &lt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>itmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sxe</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_sxq</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>itmp</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>otmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"(%s)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>itmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" &lt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>itmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>itmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_shq</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_pipe</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" &lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>itmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_shq</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_pipe</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>otmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>append_redir</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>p_srr</name></expr></argument>, <argument><expr><name>otmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>append_redir</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>opt</name></expr>;</init> <condition><expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>end</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>end</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>buflen</name> <operator>-</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>buf</name><operator>)</operator><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>opt</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>end</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>buflen</name> <operator>-</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>buf</name><operator>)</operator><operator>)</operator></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><literal type="string">" %s %s"</literal></expr></argument>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<argument><expr><literal type="string">" %s%s"</literal></expr></argument>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>opt</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>do_fixdel</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier><name>eap</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_termcode</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"kb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_termcode</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"kD"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>DEL</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>CTRL_H_STR</name></expr> </then><else>: <expr><name>DEL_STR</name></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>print_line_no_prefix</name><parameter_list>(

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>use_number</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>numbuf</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>||</operator> <name>use_number</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>numbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"%*ld "</literal></expr></argument>, <argument><expr><call><name>number_width</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><name>numbuf</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_N</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_prt_line</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>print_line</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_number</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_silent</name> <init>= <expr><name>silent_mode</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>message_filtered</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>silent_mode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>info_message</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>print_line_no_prefix</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>use_number</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>save_silent</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cursor_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>silent_mode</name> <operator>=</operator> <name>save_silent</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>info_message</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>rename_buffer</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_fname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sfname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xfname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFFILEPRE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sfname</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_sfname</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>xfname</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_sfname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setfname</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>new_fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_sfname</name></name> <operator>=</operator> <name>sfname</name></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>|=</operator> <name>BF_NOTEDITED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xfname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>xfname</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_new</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>xfname</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>keepalt</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_alt_fnum</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>sfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFFILEPOST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>DO_AUTOCHDIR</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_file</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>!=</operator> <name>NUL</name>

<operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rename_buffer</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>redraw_tabline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>!</operator><call><name>shortmess</name><argument_list>(<argument><expr><name>SHM_FILEINFO</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fileinfo</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_update</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>curbufIsChanged</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_write</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_write</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_saveas</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>usefilter</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>do_bang</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>eap</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_write</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>do_write</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>other</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ffname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FAIL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>free_fname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>browse_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>alt_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>name_was_missing</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>not_writing</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ffname</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cmdmod</name><operator>.</operator><name>browse</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>exiting</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>browse_file</name> <operator>=</operator> <call><name>do_browse</name><argument_list>(<argument><expr><name>BROWSE_SAVE</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Save As"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ffname</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>browse_file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ffname</name> <operator>=</operator> <name>browse_file</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ffname</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_saveas</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_argreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>other</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <name>ffname</name></expr>;</expr_stmt>

<expr_stmt><expr><name>free_fname</name> <operator>=</operator> <call><name>fix_fname</name><argument_list>(<argument><expr><name>ffname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>free_fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ffname</name> <operator>=</operator> <name>free_fname</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>other</name> <operator>=</operator> <call><name>otherfile</name><argument_list>(<argument><expr><name>ffname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>other</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_ALTWRITE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_saveas</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>alt_buf</name> <operator>=</operator> <call><name>setaltfname</name><argument_list>(<argument><expr><name>ffname</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>alt_buf</name> <operator>=</operator> <call><name>buflist_findname</name><argument_list>(<argument><expr><name>ffname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alt_buf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>alt_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_bufloaded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>other</name> <operator>&amp;&amp;</operator> <operator>(</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<call><name>bt_dontwrite_msg</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>||</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<call><name>check_fname</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name> <operator>||</operator> <call><name>check_readonly</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>other</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ffname</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>!=</operator> <literal type="number">1</literal>

<operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>!=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>append</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><name>p_wa</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CON_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>p_confirm</name> <operator>||</operator> <name><name>cmdmod</name><operator>.</operator><name>confirm</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_dialog_yesno</name><argument_list>(<argument><expr><name>VIM_QUESTION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Write partial file?"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VIM_YES</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E140: Use ! to write partial buffer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_overwrite</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>ffname</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_saveas</name> <operator>&amp;&amp;</operator> <name>alt_buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>was_curbuf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFFILEPRE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFFILEPRE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>alt_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>curbuf</name> <operator>!=</operator> <name>was_curbuf</name> <operator>||</operator> <call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>curbuf</name> <operator>!=</operator> <name>was_curbuf</name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <name><name>alt_buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alt_buf</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <name><name>alt_buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alt_buf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <name><name>alt_buf</name><operator>-&gt;</operator><name>b_sfname</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alt_buf</name><operator>-&gt;</operator><name>b_sfname</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_sfname</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_sfname</name></name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_name_changed</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFFILEPOST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFFILEPOST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>alt_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>alt_buf</name><operator>-&gt;</operator><name>b_p_bl</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>alt_buf</name><operator>-&gt;</operator><name>b_p_bl</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFADD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>alt_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>curbuf</name> <operator>!=</operator> <name>was_curbuf</name> <operator>||</operator> <call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>curbuf</name> <operator>!=</operator> <name>was_curbuf</name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ft</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>au_has_group</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"filetypedetect"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_doautocmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"filetypedetect BufRead"</literal></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>do_modelines</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_sfname</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name_was_missing</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>==</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>buf_write</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>ffname</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr></argument>,

<argument><expr><name>eap</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>append</name></name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_saveas</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ro</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw_tabline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_saveas</name> <operator>||</operator> <name>name_was_missing</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>DO_AUTOCHDIR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>theend</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>browse_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>free_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>check_overwrite</name><parameter_list>(

<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>,

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ffname</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>other</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>other</name>

<operator>||</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>&amp;</operator> <name>BF_NOTEDITED</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>&amp;</operator> <name>BF_NEW</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_OVERNEW</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>&amp;</operator> <name>BF_READERR</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name>p_wa</name>

<operator>&amp;&amp;</operator> <call><name>vim_fexists</name><argument_list>(<argument><expr><name>ffname</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>append</name></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>mch_isdir</name><argument_list>(<argument><expr><name>ffname</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_isadir2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ffname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CON_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>p_confirm</name> <operator>||</operator> <name><name>cmdmod</name><operator>.</operator><name>confirm</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buff</name><index>[<expr><name>DIALOG_MSG_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dialog_msg</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Overwrite existing file \"%s\"?"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_dialog_yesno</name><argument_list>(<argument><expr><name>VIM_QUESTION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VIM_YES</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_exists</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>other</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>emsg_silent</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>swapname</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_dir</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_dir</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>swapname</name> <operator>=</operator> <call><name>makeswapname</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>ffname</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vim_fexists</name><argument_list>(<argument><expr><name>swapname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CON_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>p_confirm</name> <operator>||</operator> <name><name>cmdmod</name><operator>.</operator><name>confirm</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buff</name><index>[<expr><name>DIALOG_MSG_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dialog_msg</name><argument_list>(<argument><expr><name>buff</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Swap file \"%s\" exists, overwrite anyway?"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>swapname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_dialog_yesno</name><argument_list>(<argument><expr><name>VIM_QUESTION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>

<operator>!=</operator> <name>VIM_YES</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>swapname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E768: Swap file exists: %s (:silent! overrides)"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>swapname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>swapname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>swapname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_wnext</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>do_write</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_argfile</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>do_wqall</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_forceit</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_xall</name> <operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_wqall</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>exiting</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>exiting</name> <operator>&amp;&amp;</operator> <call><name>term_job_running</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_term</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>no_write_message_nobang</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>error</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><call><name>bufIsChanged</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>bt_dontwrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>not_writing</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>error</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cmdmod</name><operator>.</operator><name>browse</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>browse_save_fname</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E141: No file name for buffer %ld"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>error</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>check_readonly</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>check_overwrite</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>,

<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>error</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>bufref_T</name></type> <name>bufref</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>buf_write_all</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>error</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>firstbuf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name> <operator>=</operator> <name>save_forceit</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>exiting</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>getout</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>not_exiting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>not_writing</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_write</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E142: File not written: Writing is disabled by 'write' option"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>check_readonly</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>forceit</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stat_T</name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>forceit</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ro</name></name>

<operator>||</operator> <operator>(</operator><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>check_file_readonly</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CON_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p_confirm</name> <operator>||</operator> <name><name>cmdmod</name><operator>.</operator><name>confirm</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buff</name><index>[<expr><name>DIALOG_MSG_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ro</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dialog_msg</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'readonly' option is set for \"%s\".\nDo you wish to write anyway?"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dialog_msg</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"File permissions of \"%s\" are read-only.\nIt may still be possible to write it.\nDo you wish to try?"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_dialog_yesno</name><argument_list>(<argument><expr><name>VIM_QUESTION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>VIM_YES</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>forceit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ro</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_readonly</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E505: \"%s\" is read-only (add ! to override)"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>getfile</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>fnum</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ffname_arg</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sfname_arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>setpm</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ffname</name> <init>= <expr><name>ffname_arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sfname</name> <init>= <expr><name>sfname_arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>other</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>free_me</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>text_locked</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GETFILE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>curbuf_locked</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GETFILE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fnum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fname_expand</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ffname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>other</name> <operator>=</operator> <call><name>otherfile</name><argument_list>(<argument><expr><name>ffname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>free_me</name> <operator>=</operator> <name>ffname</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>other</name> <operator>=</operator> <operator>(</operator><name>fnum</name> <operator>!=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>other</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>no_wait_return</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>other</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>forceit</name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>buf_hide</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>curbufIsChanged</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>autowrite</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>forceit</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CON_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>p_confirm</name> <operator>&amp;&amp;</operator> <name>p_write</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dialog_changed</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>curbufIsChanged</name><argument_list>()</argument_list></call></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>other</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>no_wait_return</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>no_write_message</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>GETFILE_NOT_WRITTEN</name></expr>;</expr_stmt> 

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>other</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>no_wait_return</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>setpm</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>other</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>check_cursor_lnum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_SOL</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>GETFILE_SAME_FILE</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>do_ecmd</name><argument_list>(<argument><expr><name>fnum</name></expr></argument>, <argument><expr><name>ffname</name></expr></argument>, <argument><expr><name>sfname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><call><name>buf_hide</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ECMD_HIDE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>forceit</name></expr> ?</condition><then> <expr><name>ECMD_FORCEIT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>GETFILE_OPEN_OTHER</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>GETFILE_ERROR</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<label><name>theend</name>:</label>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>free_me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>do_ecmd</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>fnum</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ffname</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sfname</name></decl></parameter>,

<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>, 

<parameter><decl><type><name>linenr_T</name></type> <name>newlnum</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>oldwin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>other_file</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>oldbuf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>auto_buf</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>did_set_swapcommand</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bufref_T</name></type> <name>bufref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bufref_T</name></type> <name>old_curbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>free_fname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>browse_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FAIL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>orig_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>topline</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>newcol</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>solcol</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>command</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>did_get_winopts</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>readfile_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_inc_redrawing_disabled</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>so_ptr</name> <init>= <expr><ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_so</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_so</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name>p_so</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eap</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>command</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>do_ecmd_cmd</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_curbuf</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fnum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fnum</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>other_file</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cmdmod</name><operator>.</operator><name>browse</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>exiting</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<call><name>au_has_group</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"FileExplorer"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ffname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>mch_isdir</name><argument_list>(<argument><expr><name>ffname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ffname</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"."</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>browse_file</name> <operator>=</operator> <call><name>do_browse</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Edit File"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ffname</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>browse_file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ffname</name> <operator>=</operator> <name>browse_file</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>sfname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sfname</name> <operator>=</operator> <name>ffname</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FNAME_CASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>sfname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fname_case</name><argument_list>(<argument><expr><name>sfname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ECMD_ADDBUF</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ffname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>ffname</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ffname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>other_file</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>ffname</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>other_file</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ffname</name> <operator>==</operator> <name>NUL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>ffname</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sfname</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>free_fname</name> <operator>=</operator> <call><name>fix_fname</name><argument_list>(<argument><expr><name>ffname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>free_fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ffname</name> <operator>=</operator> <name>free_fname</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>other_file</name> <operator>=</operator> <call><name>otherfile</name><argument_list>(<argument><expr><name>ffname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>(</operator><operator>!</operator><name>other_file</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ECMD_OLDBUF</name><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>ECMD_HIDE</name> <operator>|</operator> <name>ECMD_ADDBUF</name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>check_changed</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>p_awa</name></expr> ?</condition><then> <expr><name>CCGD_AW</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>|</operator> <operator>(</operator><ternary><condition><expr><name>other_file</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>CCGD_MULTWIN</name></expr></else></ternary><operator>)</operator>

<operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ECMD_FORCEIT</name><operator>)</operator></expr> ?</condition><then> <expr><name>CCGD_FORCEIT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>|</operator> <operator>(</operator><ternary><condition><expr><name>eap</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>CCGD_EXCMD</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fnum</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>other_file</name> <operator>&amp;&amp;</operator> <name>ffname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setaltfname</name><argument_list>(<argument><expr><name>ffname</name></expr></argument>, <argument><expr><name>sfname</name></expr></argument>, <argument><expr><ternary><condition><expr><name>newlnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>newlnum</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reset_VIsual</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>command</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>newlnum</name> <operator>&gt;</operator> <operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>*</operator><call><name>get_vim_var_str</name><argument_list>(<argument><expr><name>VV_SWAPCOMMAND</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>command</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>command</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">":%s\r"</literal></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%ldG"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>newlnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_SWAPCOMMAND</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_set_swapcommand</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>other_file</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ECMD_ADDBUF</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>keepalt</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_alt_fnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>oldwin</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>buflist_altfpos</name><argument_list>(<argument><expr><name>oldwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_findnr</name><argument_list>(<argument><expr><name>fnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ECMD_ADDBUF</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>tlnum</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>command</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tlnum</name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tlnum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tlnum</name> <operator>=</operator> <literal type="number">1L</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>buflist_new</name><argument_list>(<argument><expr><name>ffname</name></expr></argument>, <argument><expr><name>sfname</name></expr></argument>, <argument><expr><name>tlnum</name></expr></argument>, <argument><expr><name>BLN_LISTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_new</name><argument_list>(<argument><expr><name>ffname</name></expr></argument>, <argument><expr><name>sfname</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>,

<argument><expr><name>BLN_CURBUF</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ECMD_SET_HELP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>BLN_LISTED</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>oldwin</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>oldwin</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_curbuf</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>oldbuf</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>oldbuf</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>buf_check_timestamp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>curbuf</name> <operator>!=</operator> <name><name>old_curbuf</name><operator>.</operator><name>br_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oldbuf</name> <operator>&amp;&amp;</operator> <name>newlnum</name> <operator>==</operator> <name>ECMD_LASTL</name><operator>)</operator> <operator>||</operator> <name>newlnum</name> <operator>==</operator> <name>ECMD_LAST</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>buflist_findfpos</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newlnum</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>solcol</name> <operator>=</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>curbuf</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>au_new_curbuf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFLEAVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>au_new_curbuf</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>delbuf_msg</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>auto_buf</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>the_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>the_curwin</name><operator>-&gt;</operator><name>w_closing</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>buf</name><operator>-&gt;</operator><name>b_locked</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curbuf</name> <operator>==</operator> <name><name>old_curbuf</name><operator>.</operator><name>br_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>buf_copy_options</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BCO_ENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>u_sync</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_buffer</name><argument_list>(<argument><expr><name>oldwin</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ECMD_HIDE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>DOBUF_UNLOAD</name></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>the_curwin</name><operator>-&gt;</operator><name>w_closing</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>buf</name><operator>-&gt;</operator><name>b_locked</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>aborting</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>au_new_curbuf</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>delbuf_msg</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>auto_buf</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_s</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_s</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_nwindows</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oldbuf</name> <operator>&amp;&amp;</operator> <name>eap</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>set_file_options</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_forced_fenc</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>get_winopts</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>did_get_winopts</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>au_new_curbuf</name><operator>.</operator><name>br_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>au_new_curbuf</name><operator>.</operator><name>br_buf_free_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_pcmark</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_pcmark</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ECMD_ADDBUF</name><operator>)</operator> <operator>||</operator> <call><name>check_fname</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>oldbuf</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ECMD_OLDBUF</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>RedrawingDisabled</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_inc_redrawing_disabled</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ECMD_SET_HELP</name><operator>)</operator> <operator>||</operator> <name>keep_help_flag</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>prepare_help_buffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_help</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_buflisted</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>did_filetype</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>other_file</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>oldbuf</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>set_last_cursor</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>newlnum</name> <operator>==</operator> <name>ECMD_LAST</name> <operator>||</operator> <name>newlnum</name> <operator>==</operator> <name>ECMD_LASTL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>newlnum</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>solcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>new_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_ur</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>&lt;=</operator> <name>p_ur</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>u_sync</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_savecommon</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>u_unchanged</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_freeall</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>BFA_KEEP_UNDO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>readfile_flags</name> <operator>=</operator> <name>READ_KEEP_UNDO</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>buf_freeall</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufref</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>delbuf_msg</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>buf_clear_file</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_arg_idx</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>auto_buf</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>curwin_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>win</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>DO_AUTOCHDIR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>orig_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>topline</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oldbuf</name></expr>)</condition> 

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>|=</operator> <name>BF_NO_SEA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>swap_exists_action</name> <operator>=</operator> <name>SEA_DIALOG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>|=</operator> <name>BF_CHECK_RO</name></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>should_abort</name><argument_list>(<argument><expr><call><name>open_buffer</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>eap</name></expr></argument>, <argument><expr><name>readfile_flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>open_buffer</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>eap</name></expr></argument>, <argument><expr><name>readfile_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BF_NO_SEA</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>swap_exists_action</name> <operator>==</operator> <name>SEA_QUIT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>handle_swap_exists</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>do_modelines</name><argument_list>(<argument><expr><name>OPT_WINONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds_retval</name><argument_list>(<argument><expr><name>EVENT_BUFENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds_retval</name><argument_list>(<argument><expr><name>EVENT_BUFWINENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>check_arg_idx</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EQUAL_POS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>orig_pos</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>orig_pos</name><operator>.</operator><name>lnum</name></name>

<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>text</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>newlnum</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>newcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>==</operator> <name>topline</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>topline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>changed_line_abv_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>maketitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_pvw</name></name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>popup_set_title</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>diff_buf_add</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_invalidate</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>did_get_winopts</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_spell</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spl</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>did_set_spelllang</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>command</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>newcol</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>newlnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>newcol</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>newlnum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>newlnum</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor_lnum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>solcol</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_sol</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>solcol</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_SOL</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>exmode_active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>check_lnums</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>oldbuf</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>auto_buf</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>msg_scroll_save</name> <init>= <expr><name>msg_scroll</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>shortmess</name><argument_list>(<argument><expr><name>SHM_OVERALL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>exiting</name> <operator>&amp;&amp;</operator> <name>p_verbose</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg_scroll</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>check_for_delay</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>msg_scroll_save</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_scrolled_ign</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shortmess</name><argument_list>(<argument><expr><name>SHM_FILEINFO</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fileinfo</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>msg_scrolled_ign</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VIMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_last_used</name></name> <operator>=</operator> <call><name>vim_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>command</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_cmdline</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DOCMD_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_KEYMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_kmap_state</name></name> <operator>&amp;</operator> <name>KEYMAP_INIT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>keymap_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>--</operator><name>RedrawingDisabled</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_inc_redrawing_disabled</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip_redraw</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>*</operator><name>so_ptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>topline</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>command</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>so_ptr</name> <operator>=</operator> <literal type="number">9999</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_scbind_pos</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>so_ptr</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_im</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>need_start_insertmode</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_AUTOCHDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_acd</name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>curdir</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>filedir</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>filedir</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name>MAXPATHL</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><call><name>gettail_sep</name><argument_list>(<argument><expr><name>filedir</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_dirname</name><argument_list>(<argument><expr><name>curdir</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name>

<operator>&amp;&amp;</operator> <call><name>vim_fnamecmp</name><argument_list>(<argument><expr><name>curdir</name></expr></argument>, <argument><expr><name>filedir</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_autochdir</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ECMD_SET_HELP</name><operator>)</operator> <operator>!=</operator> <name>ECMD_SET_HELP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>netbeans_file_opened</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>theend</name>:</label>

<if_stmt><if>if <condition>(<expr><name>did_inc_redrawing_disabled</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>RedrawingDisabled</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>did_set_swapcommand</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_SWAPCOMMAND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>browse_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>free_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>delbuf_msg</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E143: Autocommands unexpectedly deleted new buffer %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name>name</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr> </then><else>: <expr><name>name</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>au_new_curbuf</name><operator>.</operator><name>br_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>au_new_curbuf</name><operator>.</operator><name>br_buf_free_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>append_indent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<function><type><name>void</name></type>

<name>ex_append</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>theline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_undo</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>indent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>empty</name> <init>= <expr><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ai</name></name> <operator>=</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ai</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>!=</operator> <name>CMD_change</name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ai</name></name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>append_indent</name> <operator>=</operator> <call><name>get_indent_lnum</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>!=</operator> <name>CMD_append</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>empty</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>INSERT</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>==</operator> <name>B_IMODE_LMAP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>State</name> <operator>|=</operator> <name>LANGMAP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ai</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>append_indent</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>indent</name> <operator>=</operator> <name>append_indent</name></expr>;</expr_stmt>

<expr_stmt><expr><name>append_indent</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>indent</name> <operator>=</operator> <call><name>get_indent_lnum</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ex_keep_indent</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>getline</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name></expr></argument>, <argument><expr><name>NL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>theline</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_State</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>CMDLINE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>theline</name> <operator>=</operator> <call><name><name>eap</name><operator>-&gt;</operator><name>getline</name></name><argument_list>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<argument><expr><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>cstack</name><operator>-&gt;</operator><name>cs_looplevel</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>:

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>NUL</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>cookie</name></name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>save_State</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>lines_left</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>theline</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ex_keep_indent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>append_indent</name> <operator>=</operator> <name>indent</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>theline</name></expr>;</init> <condition><expr><name>indent</name> <operator>&gt;</operator> <name>vcol</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>vcol</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>TAB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <literal type="number">8</literal> <operator>-</operator> <name>vcol</name> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>did_undo</name> <operator>&amp;&amp;</operator> <call><name>u_save</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>empty</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>theline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>theline</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>did_undo</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>theline</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>appended_lines_mark</name><argument_list>(<argument><expr><name>lnum</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>empty</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>theline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>lnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>empty</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><literal type="number">2L</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>empty</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ai</name></name> <operator>=</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ai</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name><operator>)</operator></expr> ?</condition><then>

<expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>!=</operator> <name>CMD_append</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>&lt;</operator> <name>lnum</name><operator>)</operator></expr>

?</condition><then> <expr><name>lnum</name></expr> </then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor_lnum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_SOL</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>ex_no_reprint</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_change</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>&gt;=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name>

<operator>&amp;&amp;</operator> <call><name>u_save</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr> ?</condition><then> <expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ai</name></name></expr> </then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ai</name></name></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>append_indent</name> <operator>=</operator> <call><name>get_indent_lnum</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</init> <condition><expr><name>lnum</name> <operator>&gt;=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</condition> <incr><expr><operator>--</operator><name>lnum</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>check_cursor_lnum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>deleted_lines_mark</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>-</operator> <name>lnum</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ex_append</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_z</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>bigness</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>kind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>minus</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>curs</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bigness</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>ONE_WINDOW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bigness</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>bigness</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_scr</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bigness</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bigness</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>kind</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>kind</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>*</operator><name>kind</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><name>kind</name> <operator>==</operator> <literal type="char">'='</literal>

<operator>||</operator> <operator>*</operator><name>kind</name> <operator>==</operator> <literal type="char">'^'</literal> <operator>||</operator> <operator>*</operator><name>kind</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>x</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>*</operator><name>x</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>x</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>x</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>x</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E144: non-numeric argument to :z"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>bigness</name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bigness</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>||</operator> <name>bigness</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bigness</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_window</name> <operator>=</operator> <name>bigness</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>kind</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bigness</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>kind</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>*</operator><name>kind</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>kind</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>x</name> <operator>==</operator> <operator>*</operator><name>kind</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>kind</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>lnum</name> <operator>-</operator> <name>bigness</name> <operator>*</operator> <operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>x</name> <operator>-</operator> <name>kind</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>start</name> <operator>+</operator> <name>bigness</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curs</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'='</literal></expr>:</case>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>lnum</name> <operator>-</operator> <operator>(</operator><name>bigness</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <operator>(</operator><name>bigness</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curs</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>minus</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'^'</literal></expr>:</case>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>lnum</name> <operator>-</operator> <name>bigness</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>lnum</name> <operator>-</operator> <name>bigness</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curs</name> <operator>=</operator> <name>lnum</name> <operator>-</operator> <name>bigness</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'.'</literal></expr>:</case>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>lnum</name> <operator>-</operator> <operator>(</operator><name>bigness</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <operator>(</operator><name>bigness</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curs</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>kind</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name>bigness</name> <operator>*</operator> <operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name>x</name> <operator>-</operator> <name>kind</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>start</name> <operator>+</operator> <name>bigness</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curs</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>curs</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curs</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>curs</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>minus</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>lnum</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>Columns</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>print_line</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EXFLAG_NR</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EXFLAG_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>minus</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>lnum</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>Columns</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name>curs</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>curs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ex_no_reprint</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>check_restricted</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>restricted</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E145: Shell commands and some functionality not allowed in rvim"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>check_secure</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>secure</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>secure</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_curdir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SANDBOX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>sandbox</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_sandbox</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>old_sub</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>global_need_beginline</name></decl>;</decl_stmt> 

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>do_all</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>do_ask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>do_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>do_error</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>do_print</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>do_list</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>do_number</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>do_ic</name></decl>;</decl_stmt> 

}</block></struct></type> <name>subflags_T</name>;</typedef>

<function><type><name>void</name></type>

<name>do_sub</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>subflags_T</name></type> <name>subflags</name> <init>= <expr><block>{<expr><name>FALSE</name></expr>, <expr><name>FALSE</name></expr>, <expr><name>FALSE</name></expr>, <expr><name>TRUE</name></expr>, <expr><name>FALSE</name></expr>,

<expr><name>FALSE</name></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>subflags_T</name></type> <name>subflags_save</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>save_do_all</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>save_do_ask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sub</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>delimiter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sublen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_quit</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_match</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>which_pat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_State</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>first_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>last_line</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>old_line_count</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>line2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>nmatch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sub_firstline</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>endcolumn</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pos_T</name></type> <name>old_cursor</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_nsubs</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>save_ma</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>global_busy</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>sub_nsubs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sub_nlines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start_nsubs</name> <operator>=</operator> <name>sub_nsubs</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_tilde</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>which_pat</name> <operator>=</operator> <name>RE_LAST</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>which_pat</name> <operator>=</operator> <name>RE_SUBST</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>cmd</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"0123456789cegriIp|\""</literal></expr></argument>, <argument><expr><operator>*</operator><name>cmd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><operator>*</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E146: Regular expressions can't be delimited by letters"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>cmd</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"/?&amp;"</literal></expr></argument>, <argument><expr><operator>*</operator><name>cmd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_backslash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>!=</operator> <literal type="char">'&amp;'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>which_pat</name> <operator>=</operator> <name>RE_SEARCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>pat</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>delimiter</name> <operator>=</operator> <operator>*</operator><name>cmd</name><operator>++</operator></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>which_pat</name> <operator>=</operator> <name>RE_LAST</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>delimiter</name> <operator>=</operator> <operator>*</operator><name>cmd</name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>pat</name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>skip_regexp_ex</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>delimiter</name></expr></argument>, <argument><expr><name>p_magic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>delimiter</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>*</operator><name>cmd</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sub</name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt> 

<while>while <condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>delimiter</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cmd</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>++</operator><name>cmd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>sub</name></expr></argument>, <argument><expr><literal type="string">"%"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_SUBPERCENT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>old_sub</name> <operator>==</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nopresub</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sub</name> <operator>=</operator> <name>old_sub</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>old_sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_sub</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>old_sub</name> <operator>==</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nopresub</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>sub</name> <operator>=</operator> <name>old_sub</name></expr>;</expr_stmt>

<expr_stmt><expr><name>endcolumn</name> <operator>=</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>==</operator> <name>MAXCOL</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><literal type="string">"\\n"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>*</operator><name>sub</name> <operator>==</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>cmd</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>(</operator><name><name>cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'g'</literal> <operator>||</operator> <operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'l'</literal>

<operator>||</operator> <operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'p'</literal> <operator>||</operator> <operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'#'</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>joined_lines_count</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>EXFLAG_LIST</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>EXFLAG_NR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>EXFLAG_PRINT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>joined_lines_count</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>-</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>joined_lines_count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>joined_lines_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_join</name><argument_list>(<argument><expr><name>joined_lines_count</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sub_nsubs</name> <operator>=</operator> <name>joined_lines_count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sub_nlines</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_sub_msg</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ex_may_print</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>keeppatterns</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>save_re_pat</name><argument_list>(<argument><expr><name>RE_SUBST</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>p_magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_to_history</name><argument_list>(<argument><expr><name>HIST_SEARCH</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>cmd</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_ed</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_gd</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_all</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_all</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_ask</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_error</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_print</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_list</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_count</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_number</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_ic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>cmd</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_all</name></name> <operator>=</operator> <operator>!</operator><name><name>subflags</name><operator>.</operator><name>do_all</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_ask</name></name> <operator>=</operator> <operator>!</operator><name><name>subflags</name><operator>.</operator><name>do_ask</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_count</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_error</name></name> <operator>=</operator> <operator>!</operator><name><name>subflags</name><operator>.</operator><name>do_error</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>which_pat</name> <operator>=</operator> <name>RE_LAST</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_print</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_print</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_number</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_print</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_list</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_ic</name></name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_ic</name></name> <operator>=</operator> <literal type="char">'I'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>cmd</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>subflags</name><operator>.</operator><name>do_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_ask</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>save_do_all</name> <operator>=</operator> <name><name>subflags</name><operator>.</operator><name>do_all</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_do_ask</name> <operator>=</operator> <name><name>subflags</name><operator>.</operator><name>do_ask</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name> <operator>&amp;&amp;</operator> <name><name>subflags</name><operator>.</operator><name>do_error</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_zerocount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>+=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <call><name>check_nextcmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>subflags</name><operator>.</operator><name>do_count</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_modifiable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>search_regcomp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>RE_SUBST</name></expr></argument>, <argument><expr><name>which_pat</name></expr></argument>, <argument><expr><name>SEARCH_HIS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>subflags</name><operator>.</operator><name>do_error</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invcmd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>subflags</name><operator>.</operator><name>do_ic</name></name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rmm_ic</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>subflags</name><operator>.</operator><name>do_ic</name></name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rmm_ic</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sub_firstline</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>sub</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sub</name> <operator>=</operator> <call><name>regtilde</name><argument_list>(<argument><expr><name>sub</name></expr></argument>, <argument><expr><name>p_magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line2</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name>line2</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>got_quit</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator> <call><name>aborting</name><argument_list>()</argument_list></call>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>nmatch</name> <operator>=</operator> <call><name>vim_regexec_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nmatch</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>copycol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>matchcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>prev_matchcol</name> <init>= <expr><name>MAXCOL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new_start</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>new_start_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_sub</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lastone</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>copy_len</name></decl>, <decl><type ref="prev"/><name>needed_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>nmatch_tl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>do_again</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>skip_match</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>sub_firstlnum</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>apc_flags</name> <init>= <expr><name>APC_SAVE_FOR_UNDO</name> <operator>|</operator> <name>APC_SUBSTITUTE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>total_added</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>sub_firstlnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>copycol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>matchcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_match</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>got_match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>+=</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sub_firstlnum</name> <operator>+=</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nmatch</name> <operator>-=</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>sub_firstline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sub_firstline</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>sub_firstline</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>sub_firstlnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sub_firstline</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>new_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>outofmem</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>do_again</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>matchcol</name> <operator>==</operator> <name>prev_matchcol</name>

<operator>&amp;&amp;</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>matchcol</name> <operator>==</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sub_firstline</name><index>[<expr><name>matchcol</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>skip_match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matchcol</name> <operator>+=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>sub_firstline</name> <operator>+</operator> <name>matchcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>matchcol</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>matchcol</name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_matchcol</name> <operator>=</operator> <name>matchcol</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>subflags</name><operator>.</operator><name>do_count</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nmatch</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>matchcol</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>sub_firstline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nmatch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>skip_match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sub_nsubs</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>did_sub</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>sub</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>subflags</name><operator>.</operator><name>do_ask</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>typed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>save_State</name> <operator>=</operator> <name>State</name></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>CONFIRM</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_crb</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_check_cursorbind</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_UNDO</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>no_u_sync</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>subflags</name><operator>.</operator><name>do_ask</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>exmode_active</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>resp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>sc</name></decl>, <decl><type ref="prev"/><name>ec</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>print_line_no_prefix</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>,

<argument><expr><name><name>subflags</name><operator>.</operator><name>do_number</name></name></expr></argument>, <argument><expr><name><name>subflags</name><operator>.</operator><name>do_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>subflags</name><operator>.</operator><name>do_number</name></name> <operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_nu</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>numw</name> <init>= <expr><call><name>number_width</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sc</name> <operator>+=</operator> <name>numw</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ec</name> <operator>+=</operator> <name>numw</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>long</name><operator>)</operator><name>sc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>ec</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>resp</name> <operator>=</operator> <call><name>getexmodeline</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>resp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>typed</name> <operator>=</operator> <operator>*</operator><name>resp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>orig_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len_change</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>save_p_fen</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>RedrawingDisabled</name></expr>;</expr_stmt>

<expr_stmt><expr><name>RedrawingDisabled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_start</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>orig_line</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>orig_line</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_line</name> <init>= <expr><call><name>concat_str</name><argument_list>(<argument><expr><name>new_start</name></expr></argument>,

<argument><expr><name>sub_firstline</name> <operator>+</operator> <name>copycol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>orig_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>len_change</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>new_line</name></expr></argument>)</argument_list></call>

<operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>orig_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <name>len_change</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>new_line</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>search_match_lines</name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name>

<operator>-</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>search_match_endcol</name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name>

<operator>+</operator> <name>len_change</name></expr>;</expr_stmt>

<expr_stmt><expr><name>highlight_match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>highlight_match</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name> <operator>=</operator> <name>save_p_fen</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>msg_row</name> <operator>==</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>msg_starthere</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>msg_scroll</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>msg_no_more</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smsg_attr</name><argument_list>(<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_R</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"replace with %s (y/n/a/q/l/^E/^Y)?"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_no_more</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showruler</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>msg_row</name></expr></argument>, <argument><expr><name>msg_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>RedrawingDisabled</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ON_FLY_SCROLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dont_scroll</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>++</operator><name>no_mapping</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>++</operator><name>allow_keys</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>typed</name> <operator>=</operator> <call><name>plain_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>allow_keys</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gotocmdline</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>orig_line</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>orig_line</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>typed</name> <operator>==</operator> <literal type="char">'q'</literal> <operator>||</operator> <name>typed</name> <operator>==</operator> <name>ESC</name> <operator>||</operator> <name>typed</name> <operator>==</operator> <name>Ctrl_C</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>typed</name> <operator>==</operator> <name>intr_char</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name>got_quit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>typed</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>typed</name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>typed</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_all</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line2</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>typed</name> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_ask</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>typed</name> <operator>==</operator> <name>Ctrl_E</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>scrollup_clamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>typed</name> <operator>==</operator> <name>Ctrl_Y</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>scrolldown_clamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>save_State</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_UNDO</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>no_u_sync</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>typed</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nmatch</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>matchcol</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>sub_firstline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>skip_match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>got_quit</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>save_ma</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>subflags</name><operator>.</operator><name>do_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sandbox</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>subflags_save</name> <operator>=</operator> <name>subflags</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>sublen</name> <operator>=</operator> <call><name>vim_regsub_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>,

<argument><expr><name>sub_firstlnum</name> <operator>-</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr></argument>,

<argument><expr><name>sub</name></expr></argument>, <argument><expr><name>sub_firstline</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>p_magic</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>subflags</name> <operator>=</operator> <name>subflags_save</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aborting</name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>subflags</name><operator>.</operator><name>do_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>=</operator> <name>save_ma</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sandbox</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sandbox</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>nmatch</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>sub_firstlnum</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>nmatch</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>sub_firstlnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>skip_match</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nmatch</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>sub_firstline</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_has_textprop</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bytes_added</name> <init>= <expr><name>sublen</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name>

<operator>-</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>adjust_prop_columns</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>,

<argument><expr><name>total_added</name> <operator>+</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr></argument>,

<argument><expr><name>bytes_added</name></expr></argument>, <argument><expr><name>apc_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>apc_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>APC_SAVE_FOR_UNDO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>total_added</name> <operator>+=</operator> <name>bytes_added</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>sub_firstlnum</name> <operator>+</operator> <name>nmatch</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nmatch_tl</name> <operator>+=</operator> <name>nmatch</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>copy_len</name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>-</operator> <name>copycol</name></expr>;</expr_stmt>

<expr_stmt><expr><name>needed_len</name> <operator>=</operator> <name>copy_len</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call>

<operator>-</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name><operator>)</operator> <operator>+</operator> <name>sublen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_start</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>new_start_len</name> <operator>=</operator> <name>needed_len</name> <operator>+</operator> <literal type="number">50</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>new_start</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>new_start_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>outofmem</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>new_start</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_end</name> <operator>=</operator> <name>new_start</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>new_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>needed_len</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>needed_len</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>new_start_len</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>new_start_len</name> <operator>=</operator> <name>needed_len</name> <operator>+</operator> <literal type="number">50</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p1</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>new_start_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>new_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>outofmem</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>new_start</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>new_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_start</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_end</name> <operator>=</operator> <name>new_start</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>new_end</name></expr></argument>, <argument><expr><name>sub_firstline</name> <operator>+</operator> <name>copycol</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>copy_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_end</name> <operator>+=</operator> <name>copy_len</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vim_regsub_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>,

<argument><expr><name>sub_firstlnum</name> <operator>-</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr></argument>,

<argument><expr><name>sub</name></expr></argument>, <argument><expr><name>new_end</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>p_magic</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sub_nsubs</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>did_sub</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nmatch</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>sub_firstlnum</name> <operator>+=</operator> <name>nmatch</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>sub_firstline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sub_firstline</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>sub_firstlnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sub_firstlnum</name> <operator>&lt;=</operator> <name>line2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>do_again</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_all</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>copycol</name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>skip_match</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>sub_firstline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sub_firstline</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>copycol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>p1</name> <operator>=</operator> <name>new_end</name></expr>;</init> <condition><expr><operator>*</operator><name>p1</name></expr>;</condition> <incr><expr><operator>++</operator><name>p1</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>p1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_has_textprop</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>adjust_prop_columns</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>p1</name> <operator>-</operator> <name>new_start</name><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>apc_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>apc_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>APC_SAVE_FOR_UNDO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p1</name> <operator>==</operator> <name>CAR</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>u_inssub</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>plen</name> <init>= <expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>p1</name> <operator>-</operator> <name>new_start</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>new_start</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mark_adjust</name><argument_list>(<argument><expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>MAXLNUM</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>subflags</name><operator>.</operator><name>do_ask</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>appended_lines</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first_line</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>first_line</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_line</name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>adjust_props_for_split</name><argument_list>(<argument><expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>++</operator><name>sub_firstlnum</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>line2</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>new_start</name></expr></argument>, <argument><expr><name>p1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>new_start</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p1</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<label><name>skip</name>:</label>

<expr_stmt><expr><name>lastone</name> <operator>=</operator> <operator>(</operator><name>skip_match</name>

<operator>||</operator> <name>got_int</name>

<operator>||</operator> <name>got_quit</name>

<operator>||</operator> <name>lnum</name> <operator>&gt;</operator> <name>line2</name>

<operator>||</operator> <operator>!</operator><operator>(</operator><name><name>subflags</name><operator>.</operator><name>do_all</name></name> <operator>||</operator> <name>do_again</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>sub_firstline</name><index>[<expr><name>matchcol</name></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>nmatch</name> <operator>&lt;=</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>re_multiline</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nmatch</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lastone</name>

<operator>||</operator> <name>nmatch_tl</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><name>nmatch</name> <operator>=</operator> <call><name>vim_regexec_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>,

<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>sub_firstlnum</name></expr></argument>,

<argument><expr><name>matchcol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>new_start</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>new_start</name></expr></argument>, <argument><expr><name>sub_firstline</name> <operator>+</operator> <name>copycol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>matchcol</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>sub_firstline</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>matchcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_matchcol</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>sub_firstline</name></expr></argument>)</argument_list></call>

<operator>-</operator> <name>prev_matchcol</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_savesub</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>new_start</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nmatch_tl</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>lnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_savedel</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>nmatch_tl</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nmatch_tl</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>mark_adjust</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <name>nmatch_tl</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>MAXLNUM</name></expr></argument>, <argument><expr><operator>-</operator><name>nmatch_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>subflags</name><operator>.</operator><name>do_ask</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>deleted_lines</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>nmatch_tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line2</name> <operator>-=</operator> <name>nmatch_tl</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>nmatch_tl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>subflags</name><operator>.</operator><name>do_ask</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>changed_bytes</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first_line</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>first_line</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_line</name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sub_firstlnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>sub_firstline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>sub_firstline</name> <operator>=</operator> <name>new_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_start</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>matchcol</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>sub_firstline</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>matchcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_matchcol</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>sub_firstline</name></expr></argument>)</argument_list></call>

<operator>-</operator> <name>prev_matchcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name>copycol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nmatch</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>lastone</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nmatch</name> <operator>=</operator> <call><name>vim_regexec_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>,

<argument><expr><name>sub_firstlnum</name></expr></argument>, <argument><expr><name>matchcol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nmatch</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nmatch</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>-=</operator> <name><name>regmatch</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>did_sub</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>sub_nlines</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>new_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>sub_firstline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>first_line</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>old_line_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name>first_line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>last_line</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>outofmem</name>:</label>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>sub_firstline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>subflags</name><operator>.</operator><name>do_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>old_cursor</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sub_nsubs</name> <operator>&gt;</operator> <name>start_nsubs</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>line2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>global_busy</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>subflags</name><operator>.</operator><name>do_ask</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>endcolumn</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>MAXCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>do_sub_msg</name><argument_list>(<argument><expr><name><name>subflags</name><operator>.</operator><name>do_count</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>subflags</name><operator>.</operator><name>do_ask</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>global_need_beginline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>subflags</name><operator>.</operator><name>do_print</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>print_line</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><name><name>subflags</name><operator>.</operator><name>do_number</name></name></expr></argument>, <argument><expr><name><name>subflags</name><operator>.</operator><name>do_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>global_busy</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_interr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>got_match</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>subflags</name><operator>.</operator><name>do_error</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_patnotf2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get_search_pat</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>subflags</name><operator>.</operator><name>do_ask</name></name> <operator>&amp;&amp;</operator> <call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>changed_window_setting</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_all</name></name> <operator>=</operator> <name>save_do_all</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subflags</name><operator>.</operator><name>do_ask</name></name> <operator>=</operator> <name>save_do_ask</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>do_sub_msg</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>count_only</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>sub_nsubs</name> <operator>&gt;</operator> <name>p_report</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>KeyTyped</name> <operator>||</operator> <name>sub_nlines</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>p_report</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator>

<operator>||</operator> <name>count_only</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>messaging</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg_single</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg_plural</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>msg_buf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"(Interrupted) "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>msg_buf</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>msg_single</name> <operator>=</operator> <ternary><condition><expr><name>count_only</name></expr>

?</condition><then> <expr><call><name>NGETTEXT</name><argument_list>(<argument><expr><literal type="string">"%ld match on %ld line"</literal></expr></argument>,

<argument><expr><literal type="string">"%ld matches on %ld line"</literal></expr></argument>, <argument><expr><name>sub_nsubs</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>NGETTEXT</name><argument_list>(<argument><expr><literal type="string">"%ld substitution on %ld line"</literal></expr></argument>,

<argument><expr><literal type="string">"%ld substitutions on %ld line"</literal></expr></argument>, <argument><expr><name>sub_nsubs</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_plural</name> <operator>=</operator> <ternary><condition><expr><name>count_only</name></expr>

?</condition><then> <expr><call><name>NGETTEXT</name><argument_list>(<argument><expr><literal type="string">"%ld match on %ld lines"</literal></expr></argument>,

<argument><expr><literal type="string">"%ld matches on %ld lines"</literal></expr></argument>, <argument><expr><name>sub_nsubs</name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>NGETTEXT</name><argument_list>(<argument><expr><literal type="string">"%ld substitution on %ld lines"</literal></expr></argument>,

<argument><expr><literal type="string">"%ld substitutions on %ld lines"</literal></expr></argument>, <argument><expr><name>sub_nsubs</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf_add</name><argument_list>(<argument><expr><name>msg_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><call><name>NGETTEXT</name><argument_list>(<argument><expr><name>msg_single</name></expr></argument>, <argument><expr><name>msg_plural</name></expr></argument>, <argument><expr><name>sub_nlines</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>sub_nsubs</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>sub_nlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>msg</name><argument_list>(<argument><expr><name>msg_buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_keep_msg</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>msg_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_interr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>global_exe_one</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_cmdline</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"p"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DOCMD_NOWAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_cmdline</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DOCMD_NOWAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_global</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ndone</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name>delim</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>which_pat</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>global_busy</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>!=</operator> <literal type="number">1</literal>

<operator>||</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>!=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E147: Cannot do :global recursive with a range"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>cmd</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>which_pat</name> <operator>=</operator> <name>RE_LAST</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>cmd</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"/?&amp;"</literal></expr></argument>, <argument><expr><operator>*</operator><name>cmd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_backslash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>which_pat</name> <operator>=</operator> <name>RE_SUBST</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>which_pat</name> <operator>=</operator> <name>RE_SEARCH</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><operator>++</operator><name>cmd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cmd</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E148: Regular expression missing from global"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>delim</name> <operator>=</operator> <operator>*</operator><name>cmd</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>delim</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>cmd</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>pat</name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>skip_regexp_ex</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>, <argument><expr><name>p_magic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>delim</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>*</operator><name>cmd</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>search_regcomp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>RE_BOTH</name></expr></argument>, <argument><expr><name>which_pat</name></expr></argument>, <argument><expr><name>SEARCH_HIS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invcmd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>global_busy</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>vim_regexec_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name>match</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>type</name> <operator>==</operator> <literal type="char">'v'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>match</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>global_exe_one</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>vim_regexec_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name>match</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>type</name> <operator>==</operator> <literal type="char">'v'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>match</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ml_setmarked</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ndone</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_interr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>ndone</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Pattern found in every line: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Pattern not found: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>start_global_changes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>global_exe</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>end_global_changes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ml_clearmarked</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>global_exe</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>old_lcount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>old_buf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sub_nsubs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sub_nlines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>global_need_beginline</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>global_busy</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>old_lcount</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>got_int</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>lnum</name> <operator>=</operator> <call><name>ml_firstmarked</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>global_busy</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>global_exe_one</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>global_busy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>global_need_beginline</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>changed_line_abv_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>msg_scrolled</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>do_sub_msg</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>curbuf</name> <operator>==</operator> <name>old_buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msgmore</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>old_lcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VIMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>get_old_sub</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>old_sub</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>set_old_sub</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>old_sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_sub</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>free_old_sub</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>old_sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>prepare_tagpreview</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>undo_sync</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>use_previewpopup</name></decl></parameter>, 

<parameter><decl><type><name>use_popup_T</name></type> <name>use_popup</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_pvw</name></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>use_previewpopup</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_pvp</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>popup_find_preview_window</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>popup_set_wantpos_cursor</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_minwidth</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>use_popup</name> <operator>!=</operator> <name>USEPOPUP_NONE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>popup_find_info_window</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_popup</name> <operator>==</operator> <name>USEPOPUP_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>popup_show</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>popup_hide</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_pvw</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>undo_sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>use_previewpopup</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_pvp</name> <operator>!=</operator> <name>NUL</name><operator>)</operator>

<operator>||</operator> <name>use_popup</name> <operator>!=</operator> <name>USEPOPUP_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>popup_create_preview_window</name><argument_list>(<argument><expr><name>use_popup</name> <operator>!=</operator> <name>USEPOPUP_NONE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>win_split</name><argument_list>(<argument><expr><ternary><condition><expr><name>g_do_tagpreview</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>g_do_tagpreview</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_pvw</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wfh</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RESET_BINDING</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_diff</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>ex_help</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>helpfd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_matches</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>matches</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>empty_fnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alt_fnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lang</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>old_KeyTyped</name> <init>= <expr><name>KeyTyped</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>eap</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>arg</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr>;</init> <condition><expr><operator>*</operator><name>arg</name></expr>;</condition> <incr><expr><operator>++</operator><name>arg</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'\r'</literal>

<operator>||</operator> <operator>(</operator><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'|'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'|'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>arg</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>nextcmd</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_help</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E478: Don't panic!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>arg</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>arg</name> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>--</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>lang</name> <operator>=</operator> <call><name>check_help_lang</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"help.txt"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>find_help_tags</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_matches</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>matches</name></expr></argument>,

<argument><expr><name>eap</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>FAIL</name> <operator>&amp;&amp;</operator> <name>lang</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_matches</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>matches</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>matches</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal>

<operator>&amp;&amp;</operator> <call><name>STRICMP</name><argument_list>(<argument><expr><name><name>matches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>num_matches</name> <operator>||</operator> <name>n</name> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>lang</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E661: Sorry, no '%s' help for %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lang</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E149: Sorry, no help for %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeWild</name><argument_list>(<argument><expr><name>num_matches</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>matches</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeWild</name><argument_list>(<argument><expr><name>num_matches</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bt_help</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>cmdmod</name><operator>.</operator><name>tab</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cmdmod</name><operator>.</operator><name>tab</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><call><name>bt_help</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>helpfd</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_hf</name></expr></argument>, <argument><expr><name>READBIN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Sorry, help file \"%s\" not found"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p_hf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>erret</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>helpfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>WSP_HELP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmdmod</name><operator>.</operator><name>split</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>!=</operator> <name>Columns</name>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>&lt;</operator> <literal type="number">80</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>|=</operator> <name>WSP_TOP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>win_split</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>erret</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&lt;</operator> <name>p_hh</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>win_setheight</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>p_hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>alt_fnum</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_ecmd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ECMD_LASTL</name></expr></argument>,

<argument><expr><name>ECMD_HIDE</name> <operator>+</operator> <name>ECMD_SET_HELP</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>keepalt</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_alt_fnum</name></name> <operator>=</operator> <name>alt_fnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>empty_fnum</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_im</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>KeyTyped</name> <operator>=</operator> <name>old_KeyTyped</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_tag</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>DT_HELP</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>empty_fnum</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name> <operator>!=</operator> <name>empty_fnum</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_findnr</name><argument_list>(<argument><expr><name>empty_fnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wipe_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alt_fnum</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_alt_fnum</name></name> <operator>==</operator> <name>empty_fnum</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>keepalt</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_alt_fnum</name></name> <operator>=</operator> <name>alt_fnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>erret</name>:</label>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_helpclose</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier><name>eap</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>win</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bt_help</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>win_close</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>check_help_lang</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal> <operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>arg</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 

<return>return <expr><name>arg</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>help_heuristic</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>matched_string</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>wrong_case</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_letters</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num_letters</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>matched_string</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_letters</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><name><name>matched_string</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><name><name>matched_string</name><index>[<expr><name>offset</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">10000</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>*=</operator> <literal type="number">200</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wrong_case</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">5000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>matched_string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <name><name>matched_string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">100</literal> <operator>*</operator> <name>num_letters</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>matched_string</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>offset</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>help_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>s1</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>s1</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>s2</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>s2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cmp</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>s1</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>s2</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>find_help_tags</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_matches</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>matches</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>keep_lang</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>mtable</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"*"</literal></expr>, <expr><literal type="string">"g*"</literal></expr>, <expr><literal type="string">"[*"</literal></expr>, <expr><literal type="string">"]*"</literal></expr>, <expr><literal type="string">":*"</literal></expr>,

<expr><literal type="string">"/*"</literal></expr>, <expr><literal type="string">"/\\*"</literal></expr>, <expr><literal type="string">"\"*"</literal></expr>, <expr><literal type="string">"**"</literal></expr>,

<expr><literal type="string">"cpo-*"</literal></expr>, <expr><literal type="string">"/\\(\\)"</literal></expr>, <expr><literal type="string">"/\\%(\\)"</literal></expr>,

<expr><literal type="string">"?"</literal></expr>, <expr><literal type="string">":?"</literal></expr>, <expr><literal type="string">"?&lt;CR&gt;"</literal></expr>, <expr><literal type="string">"g?"</literal></expr>, <expr><literal type="string">"g?g?"</literal></expr>, <expr><literal type="string">"g??"</literal></expr>,

<expr><literal type="string">"-?"</literal></expr>, <expr><literal type="string">"q?"</literal></expr>, <expr><literal type="string">"v_g?"</literal></expr>,

<expr><literal type="string">"/\\?"</literal></expr>, <expr><literal type="string">"/\\z(\\)"</literal></expr>, <expr><literal type="string">"\\="</literal></expr>, <expr><literal type="string">":s\\="</literal></expr>,

<expr><literal type="string">"[count]"</literal></expr>, <expr><literal type="string">"[quotex]"</literal></expr>,

<expr><literal type="string">"[range]"</literal></expr>, <expr><literal type="string">":[range]"</literal></expr>,

<expr><literal type="string">"[pattern]"</literal></expr>, <expr><literal type="string">"\\|"</literal></expr>, <expr><literal type="string">"\\%$"</literal></expr>,

<expr><literal type="string">"s/\\~"</literal></expr>, <expr><literal type="string">"s/\\U"</literal></expr>, <expr><literal type="string">"s/\\L"</literal></expr>,

<expr><literal type="string">"s/\\1"</literal></expr>, <expr><literal type="string">"s/\\2"</literal></expr>, <expr><literal type="string">"s/\\3"</literal></expr>, <expr><literal type="string">"s/\\9"</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>rtable</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"star"</literal></expr>, <expr><literal type="string">"gstar"</literal></expr>, <expr><literal type="string">"[star"</literal></expr>, <expr><literal type="string">"]star"</literal></expr>, <expr><literal type="string">":star"</literal></expr>,

<expr><literal type="string">"/star"</literal></expr>, <expr><literal type="string">"/\\\\star"</literal></expr>, <expr><literal type="string">"quotestar"</literal></expr>, <expr><literal type="string">"starstar"</literal></expr>,

<expr><literal type="string">"cpo-star"</literal></expr>, <expr><literal type="string">"/\\\\(\\\\)"</literal></expr>, <expr><literal type="string">"/\\\\%(\\\\)"</literal></expr>,

<expr><literal type="string">"?"</literal></expr>, <expr><literal type="string">":?"</literal></expr>, <expr><literal type="string">"?&lt;CR&gt;"</literal></expr>, <expr><literal type="string">"g?"</literal></expr>, <expr><literal type="string">"g?g?"</literal></expr>, <expr><literal type="string">"g??"</literal></expr>,

<expr><literal type="string">"-?"</literal></expr>, <expr><literal type="string">"q?"</literal></expr>, <expr><literal type="string">"v_g?"</literal></expr>,

<expr><literal type="string">"/\\\\?"</literal></expr>, <expr><literal type="string">"/\\\\z(\\\\)"</literal></expr>, <expr><literal type="string">"\\\\="</literal></expr>, <expr><literal type="string">":s\\\\="</literal></expr>,

<expr><literal type="string">"\\[count]"</literal></expr>, <expr><literal type="string">"\\[quotex]"</literal></expr>,

<expr><literal type="string">"\\[range]"</literal></expr>, <expr><literal type="string">":\\[range]"</literal></expr>,

<expr><literal type="string">"\\[pattern]"</literal></expr>, <expr><literal type="string">"\\\\bar"</literal></expr>, <expr><literal type="string">"/\\\\%\\$"</literal></expr>,

<expr><literal type="string">"s/\\\\\\~"</literal></expr>, <expr><literal type="string">"s/\\\\U"</literal></expr>, <expr><literal type="string">"s/\\\\L"</literal></expr>,

<expr><literal type="string">"s/\\\\1"</literal></expr>, <expr><literal type="string">"s/\\\\2"</literal></expr>, <expr><literal type="string">"s/\\\\3"</literal></expr>, <expr><literal type="string">"s/\\\\9"</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>expr_table</name><index>[]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><literal type="string">"!=?"</literal></expr>, <expr><literal type="string">"!~?"</literal></expr>, <expr><literal type="string">"&lt;=?"</literal></expr>, <expr><literal type="string">"&lt;?"</literal></expr>, <expr><literal type="string">"==?"</literal></expr>, <expr><literal type="string">"=~?"</literal></expr>,

<expr><literal type="string">"&gt;=?"</literal></expr>, <expr><literal type="string">"&gt;?"</literal></expr>, <expr><literal type="string">"is?"</literal></expr>, <expr><literal type="string">"isnot?"</literal></expr>}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>IObuff</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"expr-"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>expr_table</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name><name>expr_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>si</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>di</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><name>si</name></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><index>[<expr><name>di</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><name>di</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>arg</name><index>[<expr><name>si</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><name>si</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>si</name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>mtable</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>mtable</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>rtable</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"%_z@"</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"/\\\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>d</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>d</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"\\$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal>

<operator>||</operator> <operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>-</operator> <name>IObuff</name> <operator>&gt;</operator> <name>IOSIZE</name> <operator>-</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'|'</literal></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'"'</literal></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"quote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'*'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'?'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'$'</literal></expr>:</case>

<case>case <expr><literal type="char">'.'</literal></expr>:</case>

<case>case <expr><literal type="char">'~'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>&lt;</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'^'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"?@[\\]^"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <name>IObuff</name> <operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"CTRL-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>&lt;</operator> <literal type="char">' '</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <call><name>CtrlChar</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name> <operator>+</operator> <literal type="char">'@'</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>d</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<continue>continue;</continue>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal>

<operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name>s</name> <operator>==</operator> <name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"CTRL-\\_"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"CTRL-\\\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'{'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator><literal type="char">'['</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>&amp;&amp;</operator> <name>s</name> <operator>&gt;</operator> <name>arg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'}'</literal> <operator>&amp;&amp;</operator> <name>s</name> <operator>&gt;</operator> <name>arg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>IObuff</name> <operator>==</operator> <literal type="char">'`'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <name>IObuff</name> <operator>+</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'`'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>IObuff</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&gt;</operator> <name>IObuff</name> <operator>+</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'`'</literal> <operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>IObuff</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&gt;</operator> <name>IObuff</name> <operator>+</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'`'</literal>

<operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>IObuff</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>matches</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>num_matches</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>TAG_HELP</name> <operator>|</operator> <name>TAG_REGEXP</name> <operator>|</operator> <name>TAG_NAMES</name> <operator>|</operator> <name>TAG_VERBOSE</name> <operator>|</operator> <name>TAG_NO_TAGFUNC</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keep_lang</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>TAG_KEEP_LANG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_tags</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>num_matches</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>MAXCOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name>

<operator>&amp;&amp;</operator> <operator>*</operator><name>num_matches</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>matches</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>*</operator><name>num_matches</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>help_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>num_matches</name> <operator>&gt;</operator> <name>TAG_MANY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>matches</name><operator>)</operator><index>[<expr><operator>--</operator><operator>*</operator><name>num_matches</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>prepare_help_buffer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_help</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"buftype"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"help"</literal></expr></argument>, <argument><expr><name>OPT_FREE</name><operator>|</operator><name>OPT_LOCAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>p</name> <operator>=</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"65-255,^*,^|,^\""</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"!-~,^*,^|,^\",192-255"</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_isk</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"isk"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>OPT_FREE</name><operator>|</operator><name>OPT_LOCAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_buf_options</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>buf_init_chartab</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"fdm"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"manual"</literal></expr></argument>,

<argument><expr><name>OPT_FREE</name><operator>|</operator><name>OPT_LOCAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bin</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rnu</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>RESET_BINDING</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_arab</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_diff</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_spell</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>set_buflisted</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>fix_help_buffer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_example</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mustfree</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ft</name></name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>curbuf_lock</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ft"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"help"</literal></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>curbuf_lock</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syntax_present</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>in_example</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>in_example</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_example</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>in_example</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>gettail</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fnamecmp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"help.txt"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><call><name>fnamencmp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"help."</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>fname</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>fname</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>fname</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'x'</literal>

<operator>&amp;&amp;</operator> <name><name>fname</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>line</name></expr></argument>, <argument><expr><literal type="string">"*local-additions*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_rtp</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mustfree</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rt</name> <operator>=</operator> <call><name>vim_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"VIMRUNTIME"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mustfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>

<call><name>fullpathcmp</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FPC_SAME</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fcount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>fnames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimconv_T</name></type> <name>vc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><literal type="string">"doc/*.??[tx]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><literal type="string">"doc/*.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>gen_expand_wildcards</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>NameBuff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fcount</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>fnames</name></expr></argument>, <argument><expr><name>EW_FILE</name><operator>|</operator><name>EW_SILENT</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name>

<operator>&amp;&amp;</operator> <name>fcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i1</name></decl>, <decl><type ref="prev"/><name>i2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>f1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>t1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>e1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e2</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i1</name> <operator>&lt;</operator> <name>fcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i1</name></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><expr><name>i2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i2</name> <operator>&lt;</operator> <name>fcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i2</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i1</name> <operator>==</operator> <name>i2</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fnames</name><index>[<expr><name>i1</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>fnames</name><index>[<expr><name>i2</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <name><name>fnames</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>f2</name> <operator>=</operator> <name><name>fnames</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>gettail</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>gettail</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e1</name> <operator>=</operator> <call><name>vim_strrchr</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e2</name> <operator>=</operator> <call><name>vim_strrchr</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>e2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fnamecmp</name><argument_list>(<argument><expr><name>e1</name></expr></argument>, <argument><expr><literal type="string">".txt"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>e1</name></expr></argument>, <argument><expr><name>fname</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>fnames</name><index>[<expr><name>i1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>-</operator> <name>f1</name> <operator>!=</operator> <name>e2</name> <operator>-</operator> <name>f2</name>

<operator>||</operator> <call><name>fnamencmp</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>, <argument><expr><name>e1</name> <operator>-</operator> <name>f1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fnamecmp</name><argument_list>(<argument><expr><name>e1</name></expr></argument>, <argument><expr><literal type="string">".txt"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>e2</name></expr></argument>, <argument><expr><name>fname</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>fnames</name><index>[<expr><name>i1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>fi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fi</name> <operator>&lt;</operator> <name>fcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>fi</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fnames</name><index>[<expr><name>fi</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>fnames</name><index>[<expr><name>fi</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_fgets</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>IObuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>s</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>IObuff</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>this_utf</name> <init>= <expr><name>MAYBE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>this_utf</name> <operator>!=</operator> <name>FALSE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>this_utf</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>this_utf</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>vc</name><operator>.</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vc</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator>

<ternary><condition><expr><name>this_utf</name> <operator>==</operator> <name>TRUE</name></expr> ?</condition><then> <expr><literal type="string">"utf-8"</literal></expr>

</then><else>: <expr><literal type="string">"latin1"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vc</name><operator>.</operator><name>vc_type</name></name> <operator>==</operator> <name>CONV_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>IObuff</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vc</name></expr></argument>, <argument><expr><name>IObuff</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>IObuff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>!=</operator> <name>IObuff</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>lnum</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FreeWild</name><argument_list>(<argument><expr><name>fcount</name></expr></argument>, <argument><expr><name>fnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mustfree</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<break>break;</break>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_exusage</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier><name>eap</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"help ex-cmd-index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_viusage</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier><name>eap</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"help normal-index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>helptags_one</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tagfname</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>add_help_tags</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>ignore_writeerr</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd_tags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filecount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dirlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>utf8</name> <init>= <expr><name>MAYBE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>this_utf8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>firstline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mix</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>dirlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><literal type="string">"/**/*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gen_expand_wildcards</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>NameBuff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filecount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>files</name></expr></argument>,

<argument><expr><name>EW_FILE</name><operator>|</operator><name>EW_SILENT</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>

<operator>||</operator> <name>filecount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E151: No match: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>tagfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd_tags</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NameBuff</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd_tags</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ignore_writeerr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E152: Cannot open %s for writing"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FreeWild</name><argument_list>(<argument><expr><name>filecount</name></expr></argument>, <argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>add_help_tags</name> <operator>||</operator> <call><name>fullpathcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"$VIMRUNTIME/doc"</literal></expr></argument>,

<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FPC_SAME</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><literal type="number">18</literal> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>tagfname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"help-tags\t%s\t1\n"</literal></expr></argument>, <argument><expr><name>tagfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>fi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fi</name> <operator>&lt;</operator> <name>filecount</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><operator>++</operator><name>fi</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>files</name><index>[<expr><name>fi</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E153: Unable to open %s for reading"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>fi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <name><name>files</name><index>[<expr><name>fi</name></expr>]</index></name> <operator>+</operator> <name>dirlen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>firstline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>vim_fgets</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>firstline</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>this_utf8</name> <operator>=</operator> <name>MAYBE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>IObuff</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>this_utf8</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>this_utf8</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>this_utf8</name> <operator>==</operator> <name>MAYBE</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>this_utf8</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>utf8</name> <operator>==</operator> <name>MAYBE</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>utf8</name> <operator>=</operator> <name>this_utf8</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>utf8</name> <operator>!=</operator> <name>this_utf8</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E670: Mix of help file encodings within a language: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>fi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mix</name> <operator>=</operator> <operator>!</operator><name>got_int</name></expr>;</expr_stmt>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>firstline</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><name>p1</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>vim_strbyte</name><argument_list>(<argument><expr><name>p1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>p2</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>p2</name> <operator>&gt;</operator> <name>p1</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> 

<block>{<block_content>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>p1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>p2</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>p2</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>p1</name> <operator>==</operator> <name>IObuff</name> <operator>||</operator> <name><name>p1</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name><name>p1</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" \t\n\r"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>p1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>p2</name> <operator>-</operator> <name>p1</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"%s\t%s"</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FreeWild</name><argument_list>(<argument><expr><name>filecount</name></expr></argument>, <argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sort_strings</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p1</name> <operator>==</operator> <operator>*</operator><name>p2</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p2</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E154: Duplicate tag \"%s\" in file %s/%s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>p2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>p1</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>p2</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>utf8</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd_tags</name></expr></argument>, <argument><expr><literal type="string">"!_TAG_FILE_ENCODING\tutf-8\t//\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"help-tags\t"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>fd_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd_tags</name></expr></argument>, <argument><expr><literal type="string">"%s\t/*"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p1</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><operator>*</operator><name>p1</name> <operator>!=</operator> <literal type="char">'\t'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p1</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p1</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>p1</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>fd_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>*</operator><name>p1</name></expr></argument>, <argument><expr><name>fd_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd_tags</name></expr></argument>, <argument><expr><literal type="string">"*\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mix</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>do_helptags</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add_help_tags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ignore_writeerr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>lang</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>ext</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>fname</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filecount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><literal type="string">"**"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gen_expand_wildcards</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>NameBuff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filecount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>files</name></expr></argument>,

<argument><expr><name>EW_FILE</name><operator>|</operator><name>EW_SILENT</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>

<operator>||</operator> <name>filecount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E151: No match: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filecount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">".txt"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>lang</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'e'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lang</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal>

<operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>lang</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lang</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <name><name>lang</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <name><name>lang</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"tags-xx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fname</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fname</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fname</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <name><name>fname</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fname</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">".txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">".xxx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>fname</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ext</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>fname</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>helptags_one</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>add_help_tags</name></expr></argument>, <argument><expr><name>ignore_writeerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeWild</name><argument_list>(<argument><expr><name>filecount</name></expr></argument>, <argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>helptags_one</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".txt"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"tags"</literal></expr></argument>, <argument><expr><name>add_help_tags</name></expr></argument>,

<argument><expr><name>ignore_writeerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>helptags_cb</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>do_helptags</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>cookie</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_helptags</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>expand_T</name></type> <name>xpc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dirname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>add_help_tags</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"++t"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>add_help_tags</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>do_in_path</name><argument_list>(<argument><expr><name>p_rtp</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"doc"</literal></expr></argument>, <argument><expr><name>DIP_ALL</name> <operator>+</operator> <name>DIP_DIR</name></expr></argument>,

<argument><expr><name>helptags_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>add_help_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ExpandInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_DIRECTORIES</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <call><name>ExpandOne</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>WILD_LIST_NOTFOUND</name><operator>|</operator><name>WILD_SILENT</name></expr></argument>, <argument><expr><name>WILD_EXPAND_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dirname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>mch_isdir</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E150: Not a directory: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_helptags</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>add_help_tags</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_smile</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier><name>eap</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>code</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"\34 \4o\14$\4ox\30 \2o\30$\1ox\25 \2o\36$\1o\11 \1o\1$\3 \2$\1 \1o\1$x\5 \1o\1 \1$\1 \2o\10 \1o\44$\1o\7 \2$\1 \2$\1 \2$\1o\1$x\2 \2o\1 \1$\1 \1$\1 \1\"\1$\6 \1o\11$\4 \15$\4 \11$\1o\7 \3$\1o\2$\1o\1$x\2 \1\"\6$\1o\1$\5 \1o\11$\6 \13$\6 \12$\1o\4 \10$x\4 \7$\4 \13$\6 \13$\6 \27$x\4 \27$\4 \15$\4 \16$\2 \3\"\3$x\5 \1\"\3$\4\"\61$\5 \1\"\3$x\6 \3$\3 \1o\62$\5 \1\"\3$\1ox\5 \1o\2$\1\"\3 \63$\7 \3$\1ox\5 \3$\4 \55$\1\"\1 \1\"\6$"</literal></expr>,

<expr><literal type="string">"\5o\4$\1ox\4 \1o\3$\4o\5$\2 \45$\3 \1o\21$x\4 \10$\1\"\4$\3 \42$\5 \4$\10\"x\3 \4\"\7 \4$\4 \1\"\34$\1\"\6 \1o\3$x\16 \1\"\3$\1o\5 \3\"\22$\1\"\2$\1\"\11 \3$x\20 \3$\1o\12 \1\"\2$\2\"\6$\4\"\13 \1o\3$x\21 \4$\1o\40 \1o\3$\1\"x\22 \1\"\4$\1o\6 \1o\6$\1o\1\"\4$\1o\10 \1o\4$x\24 \1\"\5$\2o\5 \2\"\4$\1o\5$\1o\3 \1o\4$\2\"x\27 \2\"\5$\4o\2 \1\"\3$\1o\11$\3\"x\32 \2\"\7$\2o\1 \12$x\42 \4\"\13$x\46 \14$x\47 \12$\1\"x\50 \1\"\3$\4\"x"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>code</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>n</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'o'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar_attr</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for></block_content></block></else></if_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_drop</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>split</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_arglist</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARGCOUNT</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmdmod</name><operator>.</operator><name>tab</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ex_all</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_findnr</name><argument_list>(<argument><expr><name><name>ARGLIST</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ae_fnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>goto_tabpage_win</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_arg_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>buf_hide</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>emsg_off</name></expr>;</expr_stmt>

<expr_stmt><expr><name>split</name> <operator>=</operator> <call><name>check_changed</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>CCGD_AW</name> <operator>|</operator> <name>CCGD_EXCMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>emsg_off</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>split</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>=</operator> <name>CMD_sfirst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>=</operator> <name>CMD_first</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ex_rewind</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>skip_vimgrep_pat</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_isIDc</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skiptowhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skip_regexp</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'g'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'j'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>VGR_GLOBAL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>VGR_NOJUMP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>ex_oldfiles</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier><name>eap</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>get_vim_var_list</name><argument_list>(<argument><expr><name>VV_OLDFILES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"No old files"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>li</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</init> <condition><expr><name>li</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>nr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>message_filtered</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ui_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cmdmod</name><operator>.</operator><name>browse</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>quit_more</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>prompt_for_number</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_starthere</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>list_find_str</name><argument_list>(<argument><expr><call><name>get_vim_var_list</name><argument_list>(<argument><expr><name>VV_OLDFILES</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>nr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>expand_env_save</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>=</operator> <name>CMD_edit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>browse</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_exedit</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
