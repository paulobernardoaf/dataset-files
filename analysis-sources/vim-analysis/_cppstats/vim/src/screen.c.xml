<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\screen.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>screen_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>screen_char_2</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>screenclear2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lineclear</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>lineinvalid</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>win_do_lines</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mayclear</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>del</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clear_attr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>win_rest_invalid</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>msg_pos_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>recording_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>screen_char_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>conceal_cursor_line</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_cocu</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_real_state</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>VISUAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>NORMAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></else></if_stmt>

<return>return <expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cocu</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>conceal_check_cursor_line</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>conceal_cursor_line</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>need_cursor_line_redraw</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curs_columns</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>get_wcr_attr</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>wcr_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_wcr</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wcr_attr</name> <operator>=</operator> <call><name>syn_name2attr</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wcr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>WIN_IS_POPUP</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_popup_flags</name></name> <operator>&amp;</operator> <name>POPF_INFO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wcr_attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_PSI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>wcr_attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_PNI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>wcr_attr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>screen_fill_end</name><parameter_list>(

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>c1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>c2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>endrow</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nn</name> <init>= <expr><name>off</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nn</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nn</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>row</name></expr></argument>, <argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>endrow</name></expr></argument>,

<argument><expr><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>nn</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>off</name></expr></argument>,

<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>row</name></expr></argument>, <argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>endrow</name></expr></argument>,

<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name>nn</name></expr></argument>,

<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>nn</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>win_draw_end</name><parameter_list>(

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>c1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>c2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>draw_margin</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>endrow</name></decl></parameter>,

<parameter><decl><type><name>hlf_T</name></type> <name>hl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>hl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wcr_attr</name> <init>= <expr><call><name>get_wcr_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>wcr_attr</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>draw_margin</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>fdc</name> <init>= <expr><call><name>compute_foldcolumn</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fdc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>screen_fill_end</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>fdc</name></expr></argument>,

<argument><expr><name>row</name></expr></argument>, <argument><expr><name>endrow</name></expr></argument>, <argument><expr><call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>wcr_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_FC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>signcolumn_on</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>screen_fill_end</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><name>row</name></expr></argument>, <argument><expr><name>endrow</name></expr></argument>, <argument><expr><call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>wcr_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_SC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_NUMCOL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>screen_fill_end</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>number_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>row</name></expr></argument>, <argument><expr><name>endrow</name></expr></argument>, <argument><expr><call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>wcr_attr</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_N</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>row</name></expr></argument>, <argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>endrow</name></expr></argument>,

<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>, <argument><expr><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>n</name></expr></argument>,

<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>row</name></expr></argument>, <argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>endrow</name></expr></argument>,

<argument><expr><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>n</name></expr></argument>, <argument><expr><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>n</name></expr></argument>,

<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>row</name></expr></argument>, <argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>endrow</name></expr></argument>,

<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>set_empty_rows</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>compute_foldcolumn</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fdc</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wmw</name> <init>= <expr><ternary><condition><expr><name>wp</name> <operator>==</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name>p_wmw</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>p_wmw</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wwidth</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fdc</name> <operator>&gt;</operator> <name>wwidth</name> <operator>-</operator> <operator>(</operator><name>col</name> <operator>+</operator> <name>wmw</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fdc</name> <operator>=</operator> <name>wwidth</name> <operator>-</operator> <operator>(</operator><name>col</name> <operator>+</operator> <name>wmw</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>fdc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>fill_foldcolumn</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>closed</name></decl></parameter>, 

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>empty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fdc</name> <init>= <expr><call><name>compute_foldcolumn</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>fdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>win_foldinfo</name><operator>.</operator><name>fi_level</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>empty</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>fdc</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>first_level</name> <operator>=</operator> <name>level</name> <operator>-</operator> <name>fdc</name> <operator>-</operator> <name>closed</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>empty</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first_level</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>first_level</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <name>empty</name> <operator>&lt;</operator> <name>fdc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>win_foldinfo</name><operator>.</operator><name>fi_lnum</name></name> <operator>==</operator> <name>lnum</name>

<operator>&amp;&amp;</operator> <name>first_level</name> <operator>+</operator> <name>i</name> <operator>&gt;=</operator> <name><name>win_foldinfo</name><operator>.</operator><name>fi_low_level</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>first_level</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>first_level</name> <operator>+</operator> <name>i</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>first_level</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>first_level</name> <operator>+</operator> <name>i</name> <operator>==</operator> <name>level</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>closed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><ternary><condition><expr><name>i</name> <operator>&gt;=</operator> <name>fdc</name></expr> ?</condition><then> <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr>]</index></name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>int</name></type>

<name>comp_char_differs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>off_from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off_to</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Screen_mco</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>off_from</name></expr>]</index></name> <operator>!=</operator> <name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>off_to</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>off_from</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>char_needs_redraw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>off_from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off_to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>ScreenLines</name><index>[<expr><name>off_from</name></expr>]</index></name> <operator>!=</operator> <name><name>ScreenLines</name><index>[<expr><name>off_to</name></expr>]</index></name>

<operator>||</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off_from</name></expr>]</index></name> <operator>!=</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off_to</name></expr>]</index></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name><name>ScreenLines</name><index>[<expr><name>off_from</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off_from</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x8e</literal></expr>

?</condition><then> <expr><name><name>ScreenLines2</name><index>[<expr><name>off_from</name></expr>]</index></name> <operator>!=</operator> <name><name>ScreenLines2</name><index>[<expr><name>off_to</name></expr>]</index></name></expr>

</then><else>: <expr><operator>(</operator><name>cols</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off_from</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name>

<operator>!=</operator> <name><name>ScreenLines</name><index>[<expr><name>off_to</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></else></ternary><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>enc_utf8</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ScreenLinesUC</name><index>[<expr><name>off_from</name></expr>]</index></name> <operator>!=</operator> <name><name>ScreenLinesUC</name><index>[<expr><name>off_to</name></expr>]</index></name>

<operator>||</operator> <operator>(</operator><name><name>ScreenLinesUC</name><index>[<expr><name>off_from</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>comp_char_differs</name><argument_list>(<argument><expr><name>off_from</name></expr></argument>, <argument><expr><name>off_to</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><call>(<modifier>*</modifier><name>mb_off2cells</name>)<argument_list>(<argument><expr><name>off_from</name></expr></argument>, <argument><expr><name>off_from</name> <operator>+</operator> <name>cols</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off_from</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name>

<operator>!=</operator> <name><name>ScreenLines</name><index>[<expr><name>off_to</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>screen_get_current_line_off</name><parameter_list>()</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>current_ScreenLine</name> <operator>-</operator> <name>ScreenLines</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>

<name>blocked_by_popup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>popup_visible</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name>row</name> <operator>*</operator> <name>screen_Columns</name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>

<return>return <expr><name><name>popup_mask</name><index>[<expr><name>off</name></expr>]</index></name> <operator>&gt;</operator> <name>screen_zindex</name> <operator>||</operator> <name><name>popup_transparent</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>reset_screen_attr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>screen_attr</name> <operator>=</operator> <name>HL_ALL</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>screen_attr</name> <operator>=</operator> <name>HL_BOLD</name> <operator>|</operator> <name>HL_UNDERLINE</name> <operator>|</operator> <name>HL_INVERSE</name> <operator>|</operator> <name>HL_STRIKETHROUGH</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>screen_line</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>coloff</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>endcol</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>clear_width</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>flags</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>off_from</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>off_to</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>max_off_from</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>max_off_to</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>redraw_this</name> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<init>= <expr><name>TRUE</name></expr></init></decl> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>redraw_next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>clear_next</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>char_cells</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAR_CELLS</name></cpp:macro> <cpp:value>char_cells</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <name>Rows</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>endcol</name> <operator>&gt;</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>endcol</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>clip_may_clear_selection</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>off_from</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>current_ScreenLine</name> <operator>-</operator> <name>ScreenLines</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>off_to</name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>coloff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_off_from</name> <operator>=</operator> <name>off_from</name> <operator>+</operator> <name>screen_Columns</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_off_to</name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>screen_Columns</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SLF_RIGHTLEFT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>clear_width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name>col</name> <operator>&lt;=</operator> <name>endcol</name> <operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal>

<operator>&amp;&amp;</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>enc_utf8</name> <operator>||</operator> <name><name>ScreenLinesUC</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>off_to</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;=</operator> <name>endcol</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>coloff</name></expr></argument>,

<argument><expr><name>endcol</name> <operator>+</operator> <name>coloff</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>endcol</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>off_to</name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>col</name> <operator>+</operator> <name>coloff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off_from</name> <operator>+=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>endcol</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>clear_width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>clear_width</name></expr> </then><else>: <expr><operator>-</operator><name>clear_width</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>coloff</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off_to</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off_to</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>screen_char</name><argument_list>(<argument><expr><name>off_to</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>coloff</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>redraw_next</name> <operator>=</operator> <call><name>char_needs_redraw</name><argument_list>(<argument><expr><name>off_from</name></expr></argument>, <argument><expr><name>off_to</name></expr></argument>, <argument><expr><name>endcol</name> <operator>-</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>col</name> <operator>&lt;</operator> <name>endcol</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>col</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>endcol</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>char_cells</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_off2cells</name>)<argument_list>(<argument><expr><name>off_from</name></expr></argument>, <argument><expr><name>max_off_from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>char_cells</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>redraw_this</name> <operator>=</operator> <name>redraw_next</name></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw_next</name> <operator>=</operator> <name>force</name> <operator>||</operator> <call><name>char_needs_redraw</name><argument_list>(<argument><expr><name>off_from</name> <operator>+</operator> <name>CHAR_CELLS</name></expr></argument>,

<argument><expr><name>off_to</name> <operator>+</operator> <name>CHAR_CELLS</name></expr></argument>, <argument><expr><name>endcol</name> <operator>-</operator> <name>col</name> <operator>-</operator> <name>CHAR_CELLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>redraw_next</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>hl</name> <operator>=</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off_to</name> <operator>+</operator> <name>CHAR_CELLS</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hl</name> <operator>&gt;</operator> <name>HL_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hl</name> <operator>=</operator> <call><name>syn_attr2attr</name><argument_list>(<argument><expr><name>hl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hl</name> <operator>&amp;</operator> <name>HL_BOLD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>redraw_this</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>blocked_by_popup</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>coloff</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>redraw_this</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>redraw_this</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>p_wiv</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name>force</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>&amp;&amp;</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off_from</name></expr>]</index></name> <operator>!=</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off_to</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>coloff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_CE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>force</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>redraw_next</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>+</operator> <name>coloff</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off_to</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>screen_attr</name> <operator>=</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off_to</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>term_windgoto</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>coloff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>screen_stop_highlight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>screen_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>char_cells</name> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name>col</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>endcol</name>

<operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_off2cells</name>)<argument_list>(<argument><expr><name>off_to</name></expr></argument>, <argument><expr><name>max_off_to</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off_to</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw_next</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>char_cells</name> <operator>==</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <name>col</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>endcol</name>

<operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_off2cells</name>)<argument_list>(<argument><expr><name>off_to</name></expr></argument>, <argument><expr><name>max_off_to</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_off2cells</name>)<argument_list>(<argument><expr><name>off_to</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>max_off_to</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off_to</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw_next</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ScreenLines2</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>=</operator> <name><name>ScreenLines2</name><index>[<expr><name>off_from</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>+</operator> <name>char_cells</name> <operator>==</operator> <name>endcol</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>char_cells</name> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_off2cells</name>)<argument_list>(<argument><expr><name>off_to</name></expr></argument>, <argument><expr><name>max_off_to</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>char_cells</name> <operator>==</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_off2cells</name>)<argument_list>(<argument><expr><name>off_to</name></expr></argument>, <argument><expr><name>max_off_to</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_off2cells</name>)<argument_list>(<argument><expr><name>off_to</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>max_off_to</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>clear_next</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>=</operator> <name><name>ScreenLines</name><index>[<expr><name>off_from</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>=</operator> <name><name>ScreenLinesUC</name><index>[<expr><name>off_from</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ScreenLinesUC</name><index>[<expr><name>off_from</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Screen_mco</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>off_to</name></expr>]</index></name> <operator>=</operator> <name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>off_from</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>char_cells</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off_to</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ScreenLines</name><index>[<expr><name>off_from</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>term_is_xterm</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name>hl</name> <operator>=</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off_to</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hl</name> <operator>&gt;</operator> <name>HL_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hl</name> <operator>=</operator> <call><name>syn_attr2attr</name><argument_list>(<argument><expr><name>hl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hl</name> <operator>&amp;</operator> <name>HL_BOLD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>redraw_next</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>=</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off_from</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>char_cells</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off_to</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off_from</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>char_cells</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_char_2</name><argument_list>(<argument><expr><name>off_to</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>coloff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_char</name><argument_list>(<argument><expr><name>off_to</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>coloff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name>p_wiv</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>&amp;&amp;</operator> <name>col</name> <operator>+</operator> <name>coloff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ScreenAttrs</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>==</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off_to</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>screen_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>screen_attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_stop_highlight</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>off_to</name> <operator>+=</operator> <name>CHAR_CELLS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off_from</name> <operator>+=</operator> <name>CHAR_CELLS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>CHAR_CELLS</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>clear_next</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>screen_char</name><argument_list>(<argument><expr><name>off_to</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>coloff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>clear_width</name> <operator>&gt;</operator> <literal type="number">0</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SLF_RIGHTLEFT</name><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>startCol</name> <init>= <expr><name>col</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name>col</name> <operator>&lt;</operator> <name>clear_width</name> <operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal>

<operator>&amp;&amp;</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>enc_utf8</name> <operator>||</operator> <name><name>ScreenLinesUC</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>off_to</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <name>clear_width</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>col</name> <operator>&gt;</operator> <name>startCol</name> <operator>||</operator> <operator>!</operator><name>redraw_this</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>hl</name> <operator>=</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off_to</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hl</name> <operator>&gt;</operator> <name>HL_ALL</name> <operator>||</operator> <operator>(</operator><name>hl</name> <operator>&amp;</operator> <name>HL_BOLD</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prev_cells</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_cells</name> <operator>=</operator> <ternary><condition><expr><name><name>ScreenLines</name><index>[<expr><name>off_to</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>off</name> <init>= <expr><name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>max_off</name> <init>= <expr><name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>screen_Columns</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>off</name> <operator>&lt;</operator> <name>off_to</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>prev_cells</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_off2cells</name>)<argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>max_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>prev_cells</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>prev_cells</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_char_2</name><argument_list>(<argument><expr><name>off_to</name> <operator>-</operator> <name>prev_cells</name></expr></argument>, <argument><expr><name>row</name></expr></argument>,

<argument><expr><name>col</name> <operator>+</operator> <name>coloff</name> <operator>-</operator> <name>prev_cells</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_char</name><argument_list>(<argument><expr><name>off_to</name> <operator>-</operator> <name>prev_cells</name></expr></argument>, <argument><expr><name>row</name></expr></argument>,

<argument><expr><name>col</name> <operator>+</operator> <name>coloff</name> <operator>-</operator> <name>prev_cells</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>coloff</name></expr></argument>, <argument><expr><name>clear_width</name> <operator>+</operator> <name>coloff</name></expr></argument>,

<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>off_to</name> <operator>+=</operator> <name>clear_width</name> <operator>-</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>clear_width</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>clear_width</name> <operator>&gt;</operator> <literal type="number">0</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SLF_POPUP</name><operator>)</operator></expr> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>coloff</name> <operator>+</operator> <name>col</name> <operator>&lt;</operator> <name>Columns</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>blocked_by_popup</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>coloff</name></expr></argument>)</argument_list></call></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fillchar_vsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ScreenLines</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>!=</operator> <operator>(</operator><name>schar_T</name><operator>)</operator><name>c</name>

<operator>||</operator> <operator>(</operator><name>enc_utf8</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ScreenLinesUC</name><index>[<expr><name>off_to</name></expr>]</index></name>

<operator>!=</operator> <operator>(</operator><ternary><condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr> ?</condition><then> <expr><name>c</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator>

<operator>||</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>!=</operator> <name>hl</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>=</operator> <name>hl</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenLinesC</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>off_to</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>screen_char</name><argument_list>(<argument><expr><name>off_to</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>coloff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>LineWraps</name><index>[<expr><name>row</name></expr>]</index></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>rl_mirror</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p1</name> <operator>=</operator> <name>str</name></expr><operator>,</operator> <expr><name>p2</name> <operator>=</operator> <name>str</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>p1</name> <operator>&lt;</operator> <name>p2</name></expr>;</condition> <incr><expr><operator>++</operator><name>p1</name></expr><operator>,</operator> <expr><operator>--</operator><name>p2</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>p1</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <operator>*</operator><name>p2</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>draw_vsep_win</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_vsep_width</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fillchar_vsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>row</name></expr></argument>, <argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr></argument>,

<argument><expr><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>hl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>skip_status_match_char</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>status_match_len</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>emenu</name> <init>= <expr><operator>(</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_MENUS</name>

<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_MENUNAMES</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>emenu</name> <operator>&amp;&amp;</operator> <call><name>menu_is_separator</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>skip_status_match_char</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>skip_status_match_char</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>rem_backslash</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>!=</operator> <name>EXPAND_HELP</name><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_MENUS</name>

<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_MENUNAMES</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_shell</name></name> <operator>&amp;&amp;</operator> <call><name>csh_like_shell</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>win_redr_status_matches</name><parameter_list>(

<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_matches</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>matches</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>match</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>showtail</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_MATCH</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(showtail ? sm_gettail(matches[m]) : matches[m])</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>clen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fillchar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>highlight</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>selstart</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>selstart_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>selend</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>first_match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>add_left</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>emenu</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>matches</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>Columns</name> <operator>*</operator> <name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>Columns</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>highlight</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>status_match_len</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><call><name>L_MATCH</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>first_match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>match</name> <operator>&lt;</operator> <name>first_match</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>first_match</name> <operator>=</operator> <name>match</name></expr>;</expr_stmt>

<expr_stmt><expr><name>add_left</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>first_match</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>match</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>clen</name> <operator>+=</operator> <call><name>status_match_len</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><call><name>L_MATCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>first_match</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>clen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name>clen</name> <operator>&gt;</operator> <name>Columns</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>first_match</name> <operator>=</operator> <name>match</name></expr>;</expr_stmt>

<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>match</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_matches</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>clen</name> <operator>+=</operator> <call><name>status_match_len</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><call><name>L_MATCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name>clen</name> <operator>&gt;=</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>num_matches</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>add_left</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>add_left</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name>first_match</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>clen</name> <operator>+=</operator> <call><name>status_match_len</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><call><name>L_MATCH</name><argument_list>(<argument><expr><name>first_match</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name>clen</name> <operator>&gt;=</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>first_match</name></expr>;</expr_stmt>

</block_content>}</block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fillchar</name> <operator>=</operator> <call><name>fillchar_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first_match</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"&lt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>clen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>first_match</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>clen</name> <operator>+</operator> <call><name>status_match_len</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><call><name>L_MATCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;</operator> <name>Columns</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>match</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>selstart</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>selstart_col</name> <operator>=</operator> <name>clen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>L_MATCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>emenu</name> <operator>=</operator> <operator>(</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_MENUS</name>

<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_MENUNAMES</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>emenu</name> <operator>&amp;&amp;</operator> <call><name>menu_is_separator</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><call><name>transchar</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>clen</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>skip_status_match_char</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>clen</name> <operator>+=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>l</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><call><name>transchar_byte</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>match</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>selend</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>len</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>len</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>clen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>==</operator> <name>num_matches</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>num_matches</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>len</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>clen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name>cmdline_row</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wild_menu_showing</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msg_scrolled</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cmdline_row</name> <operator>==</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>screen_del_lines</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Rows</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>msg_scrolled</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>cmdline_row</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>row</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>wild_menu_showing</name> <operator>=</operator> <name>WM_SCROLLED</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lastwin</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>save_p_ls</name> <operator>=</operator> <name>p_ls</name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_p_wmh</name> <operator>=</operator> <name>p_wmh</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ls</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_wmh</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>last_status</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wild_menu_showing</name> <operator>=</operator> <name>WM_SHOWN</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>screen_puts</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>selstart</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>highlight</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>selend</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>screen_puts</name><argument_list>(<argument><expr><name>selstart</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>selstart_col</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_WM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>clen</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>, <argument><expr><name>fillchar</name></expr></argument>, <argument><expr><name>fillchar</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>win_redraw_last_status</name><argument_list>(<argument><expr><name>topframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>stl_connected</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_frame</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_COL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>get_keymap_str</name><parameter_list>(

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>!=</operator> <name>B_IMODE_LMAP</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>old_curbuf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>old_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"b:keymap_name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>++</operator><name>emsg_skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name> <operator>=</operator> <call><name>eval_to_string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>emsg_skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>old_curbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>old_curwin</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_KEYMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_kmap_state</name></name> <operator>&amp;</operator> <name>KEYMAP_LOADED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_keymap</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"lang"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fmt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block>

<return>return <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>win_redr_custom</name><parameter_list>(

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>draw_ruler</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>entered</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curattr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxwidth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fillchar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>stl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stl_hlrec</name></name></type> <name><name>hltab</name><index>[<expr><name>STL_MAX_ITEM</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stl_hlrec</name></name></type> <name><name>tabtab</name><index>[<expr><name>STL_MAX_ITEM</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_sandbox</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>ewp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p_crb_save</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>entered</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>entered</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>stl</name> <operator>=</operator> <name>p_tal</name></expr>;</expr_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fillchar</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_TPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxwidth</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>use_sandbox</name> <operator>=</operator> <call><name>was_set_insecurely</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"tabline"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fillchar</name> <operator>=</operator> <call><name>fillchar_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxwidth</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>draw_ruler</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>stl</name> <operator>=</operator> <name>p_ruf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>stl</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>stl</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>stl</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>stl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>stl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>stl</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>stl</name><operator>++</operator> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>stl</name> <operator>=</operator> <name>p_ruf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>ru_col</name> <operator>-</operator> <operator>(</operator><name>Columns</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>maxwidth</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>maxwidth</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>fillchar</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>use_sandbox</name> <operator>=</operator> <call><name>was_set_insecurely</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"rulerformat"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_stl</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>stl</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_stl</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>stl</name> <operator>=</operator> <name>p_stl</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>use_sandbox</name> <operator>=</operator> <call><name>was_set_insecurely</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"statusline"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_stl</name></name> <operator>==</operator> <name>NUL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>OPT_LOCAL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>maxwidth</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ewp</name> <operator>=</operator> <ternary><condition><expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>curwin</name></expr> </then><else>: <expr><name>wp</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>p_crb_save</name> <operator>=</operator> <name><name>ewp</name><operator>-&gt;</operator><name>w_p_crb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ewp</name><operator>-&gt;</operator><name>w_p_crb</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>stl</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>stl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>build_stl_str_hl</name><argument_list>(<argument><expr><name>ewp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>stl</name></expr></argument>, <argument><expr><name>use_sandbox</name></expr></argument>,

<argument><expr><name>fillchar</name></expr></argument>, <argument><expr><name>maxwidth</name></expr></argument>, <argument><expr><name>hltab</name></expr></argument>, <argument><expr><name>tabtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>stl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ewp</name><operator>-&gt;</operator><name>w_p_crb</name></name> <operator>=</operator> <name>p_crb_save</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>transstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>width</name> <operator>&lt;</operator> <name>maxwidth</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name>fillchar</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>width</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curattr</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hltab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>hltab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>-</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>screen_puts_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>curattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <call><name>vim_strnsize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>hltab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hltab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>userhl</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curattr</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>hltab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>userhl</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curattr</name> <operator>=</operator> <call><name>syn_id2attr</name><argument_list>(<argument><expr><operator>-</operator><name><name>hltab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>userhl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>wp</name> <operator>!=</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <call><name>bt_terminal</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curattr</name> <operator>=</operator> <name><name>highlight_stltermnc</name><index>[<expr><name><name>hltab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>userhl</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>bt_terminal</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curattr</name> <operator>=</operator> <name><name>highlight_stlterm</name><index>[<expr><name><name>hltab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>userhl</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>wp</name> <operator>!=</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curattr</name> <operator>=</operator> <name><name>highlight_stlnc</name><index>[<expr><name><name>hltab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>userhl</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>curattr</name> <operator>=</operator> <name><name>highlight_user</name><index>[<expr><name><name>hltab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>userhl</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>screen_puts</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>curattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fillchar</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tabtab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>vim_strnsize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>tabtab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>-</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>col</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>TabPageIdxs</name><index>[<expr><name>col</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fillchar</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>tabtab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fillchar</name> <operator>=</operator> <name><name>tabtab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>userhl</name></expr>;</expr_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name>col</name> <operator>&lt;</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>TabPageIdxs</name><index>[<expr><name>col</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fillchar</name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<label><name>theend</name>:</label>

<expr_stmt><expr><name>entered</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type>

<name>screen_putchar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>screen_puts</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>screen_getbytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>attrp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>off</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ScreenLines</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <name>screen_Rows</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name>screen_Columns</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>attrp</name> <operator>=</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><call><name>utfc_char2bytes</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x8e</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ScreenLines2</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>enc_dbcs</name> <operator>&amp;&amp;</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>screen_comp_differs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>u8cc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Screen_mco</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <operator>(</operator><name>u8char_T</name><operator>)</operator><name><name>u8cc</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>u8cc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>screen_puts</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>screen_puts_len</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>screen_puts_len</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>textlen</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>text</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>textlen</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>max_off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mbyte_blen</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mbyte_cells</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>u8c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>u8cc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>clear_next_cell</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>prev_c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pc</name></decl>, <decl><type ref="prev"/><name>nc</name></decl>, <decl><type ref="prev"/><name>nc1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>pcc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>force_redraw_this</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>force_redraw_next</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_redraw</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ScreenLines</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>row</name> <operator>&gt;=</operator> <name>screen_Rows</name> <operator>||</operator> <name>row</name> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name>screen_Columns</name> <operator>||</operator> <name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name>screen_Columns</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>&amp;&amp;</operator> <call><name>mb_fix_col</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>col</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenLinesC</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>off</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>screen_char</name><argument_list>(<argument><expr><name>off</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>force_redraw_next</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>max_off</name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>screen_Columns</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>col</name> <operator>&lt;</operator> <name>screen_Columns</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>text</name><operator>)</operator> <operator>&lt;</operator> <name>len</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mbyte_blen</name> <operator>=</operator> <call><name>utfc_ptr2len_len</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>text</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>-</operator> <name>ptr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>mbyte_blen</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="number">0x8e</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mbyte_cells</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mbyte_cells</name> <operator>=</operator> <name>mbyte_blen</name></expr>;</expr_stmt></block_content></block></if>

<else>else 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>u8c</name> <operator>=</operator> <call><name>utfc_ptr2char_len</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>u8cc</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>text</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>-</operator> <name>ptr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>u8c</name> <operator>=</operator> <call><name>utfc_ptr2char</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>u8cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>mbyte_cells</name> <operator>=</operator> <call><name>utf_char2cells</name><argument_list>(<argument><expr><name>u8c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_arshape</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_tbidi</name> <operator>&amp;&amp;</operator> <call><name>ARABIC_CHAR</name><argument_list>(<argument><expr><name>u8c</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>text</name><operator>)</operator> <operator>+</operator> <name>mbyte_blen</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>nc</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nc1</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>utfc_ptr2char_len</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>mbyte_blen</name></expr></argument>, <argument><expr><name>pcc</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>text</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>-</operator> <name>ptr</name> <operator>-</operator> <name>mbyte_blen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nc1</name> <operator>=</operator> <name><name>pcc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pc</name> <operator>=</operator> <name>prev_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_c</name> <operator>=</operator> <name>u8c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>u8c</name> <operator>=</operator> <call><name>arabic_shape</name><argument_list>(<argument><expr><name>u8c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>nc1</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_c</name> <operator>=</operator> <name>u8c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>+</operator> <name>mbyte_cells</name> <operator>&gt;</operator> <name>screen_Columns</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mbyte_cells</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>force_redraw_this</name> <operator>=</operator> <name>force_redraw_next</name></expr>;</expr_stmt>

<expr_stmt><expr><name>force_redraw_next</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>need_redraw</name> <operator>=</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <name>c</name>

<operator>||</operator> <operator>(</operator><name>mbyte_cells</name> <operator>==</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>(</operator><ternary><condition><expr><name>enc_dbcs</name></expr> ?</condition><then> <expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name>

<operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="number">0x8e</literal>

<operator>&amp;&amp;</operator> <name><name>ScreenLines2</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>enc_utf8</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator>

<operator>(</operator><name>u8char_T</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>u8c</name></expr></else></ternary><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>screen_comp_differs</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>u8cc</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator>

<operator>||</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <name>attr</name>

<operator>||</operator> <name>exmode_active</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>need_redraw</name> <operator>||</operator> <name>force_redraw_this</name><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>blocked_by_popup</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>need_redraw</name> <operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>(</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name><name>gui</name><operator>.</operator><name>in_use</name></name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>term_is_xterm</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>HL_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>syn_attr2attr</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <name>HL_BOLD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>force_redraw_next</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>clear_next_cell</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>clear_next_cell</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>has_mbyte</name>

<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>ptr</name><index>[<expr><name>mbyte_blen</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>

</then><else>: <expr><name>ptr</name> <operator>+</operator> <name>mbyte_blen</name> <operator>&gt;=</operator> <name>text</name> <operator>+</operator> <name>len</name></expr></else></ternary><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>mbyte_cells</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_off2cells</name>)<argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>max_off</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>mbyte_cells</name> <operator>==</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_off2cells</name>)<argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>max_off</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_off2cells</name>)<argument_list>(<argument><expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>max_off</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>clear_next_cell</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>mbyte_cells</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_off2cells</name>)<argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>max_off</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>mbyte_cells</name> <operator>==</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_off2cells</name>)<argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>max_off</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_off2cells</name>)<argument_list>(<argument><expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>max_off</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>+</operator> <name>mbyte_blen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>u8c</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Screen_mco</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name><name>u8cc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>u8cc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mbyte_cells</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>screen_char</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>mbyte_cells</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>screen_char_2</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="number">0x8e</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ScreenLines2</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>screen_char</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_char</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>mbyte_cells</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>mbyte_cells</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>mbyte_blen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clear_next_cell</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>force_redraw_next</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name>screen_Columns</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>dbcs_off2cells</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>max_off</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_char_2</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_char</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>start_search_hl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_hls</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>no_hlsearch</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>last_pat_prog</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>screen_search_hl</name><operator>.</operator><name>rm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>screen_search_hl</name><operator>.</operator><name>attr</name></name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>profile_setlimit</name><argument_list>(<argument><expr><name>p_rdt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>screen_search_hl</name><operator>.</operator><name>tm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>end_search_hl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>screen_search_hl</name><operator>.</operator><name>rm</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>screen_search_hl</name><operator>.</operator><name>rm</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>screen_search_hl</name><operator>.</operator><name>rm</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>screen_start_highlight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>attrentry_T</name> <modifier>*</modifier></type><name>aep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>screen_attr</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>full_screen</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>termcap_active</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>IF_EB</name><argument_list>(<argument><expr><literal type="string">"\033|%dh"</literal></expr></argument>, <argument><expr><name>ESC_STR</name> <literal type="string">"|%dh"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&gt;</operator> <name>HL_ALL</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>IS_CTERM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>aep</name> <operator>=</operator> <call><name>syn_cterm_attr2entry</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>aep</name> <operator>=</operator> <call><name>syn_term_attr2entry</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>aep</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_attr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>use_vtp</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>guicolor_T</name></type> <name>defguifg</name></decl>, <decl><type ref="prev"/><name>defguibg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>defctermfg</name></decl>, <decl><type ref="prev"/><name>defctermbg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_default_console_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name>defctermfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defctermbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defguifg</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>defguibg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_tgc</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>aep</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>COLOR_INVALID</name><argument_list>(<argument><expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>term_fg_rgb_color</name><argument_list>(<argument><expr><name>defguifg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>aep</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>COLOR_INVALID</name><argument_list>(<argument><expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>term_bg_rgb_color</name><argument_list>(<argument><expr><name>defguibg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>t_colors</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>aep</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_color</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>term_fg_color</name><argument_list>(<argument><expr><name>defctermfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>aep</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_color</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>term_bg_color</name><argument_list>(<argument><expr><name>defctermbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_BOLD</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_MD</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_MD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>aep</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>cterm_normal_fg_bold</name> <operator>&amp;&amp;</operator> <operator>(</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><name>p_tgc</name> <operator>&amp;&amp;</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name> <operator>!=</operator> <name>CTERMCOLOR</name></expr>

?</condition><then> <expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>

</then><else>:

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>t_colors</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_color</name></name></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_ME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_STANDOUT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_SO</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_SO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_UNDERCURL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_UCS</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_UCS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_UNDERLINE</name><operator>)</operator> 

<operator>||</operator> <operator>(</operator><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_UNDERCURL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_UCS</name> <operator>==</operator> <name>NUL</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>*</operator><name>T_US</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_US</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_ITALIC</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_CZH</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_CZH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_INVERSE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_MR</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_MR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>HL_STRIKETHROUGH</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_STS</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_STS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>aep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_tgc</name> <operator>&amp;&amp;</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name> <operator>!=</operator> <name>CTERMCOLOR</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>term_fg_rgb_color</name><argument_list>(<argument><expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><name>t_colors</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_color</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>term_fg_color</name><argument_list>(<argument><expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_color</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_tgc</name> <operator>&amp;&amp;</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name> <operator>!=</operator> <name>CTERMCOLOR</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>term_bg_rgb_color</name><argument_list>(<argument><expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><name>t_colors</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_color</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>term_bg_color</name><argument_list>(<argument><expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_color</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IS_CTERM</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>start</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>screen_stop_highlight</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>do_ME</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>screen_attr</name> <operator>!=</operator> <literal type="number">0</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>termcap_active</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>IF_EB</name><argument_list>(<argument><expr><literal type="string">"\033|%dH"</literal></expr></argument>, <argument><expr><name>ESC_STR</name> <literal type="string">"|%dH"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>screen_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OUT_STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>screen_attr</name> <operator>&gt;</operator> <name>HL_ALL</name></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>attrentry_T</name> <modifier>*</modifier></type><name>aep</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>IS_CTERM</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>aep</name> <operator>=</operator> <call><name>syn_cterm_attr2entry</name><argument_list>(<argument><expr><name>screen_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>aep</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><name>p_tgc</name> <operator>&amp;&amp;</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name> <operator>!=</operator> <name>CTERMCOLOR</name></expr>

?</condition><then> <expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_rgb</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>

</then><else>:

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>fg_color</name></name></expr></else></ternary><operator>)</operator> <operator>||</operator> <operator>(</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><name>p_tgc</name> <operator>&amp;&amp;</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name> <operator>!=</operator> <name>CTERMCOLOR</name></expr>

?</condition><then> <expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_rgb</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>

</then><else>:

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>cterm</name><operator>.</operator><name>bg_color</name></name></expr></else></ternary><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>do_ME</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>aep</name> <operator>=</operator> <call><name>syn_term_attr2entry</name><argument_list>(<argument><expr><name>screen_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>aep</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>stop</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>stop</name></name></expr></argument>, <argument><expr><name>T_ME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>do_ME</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name><name>aep</name><operator>-&gt;</operator><name>ae_u</name><operator>.</operator><name>term</name><operator>.</operator><name>stop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>aep</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>screen_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>screen_attr</name> <operator>=</operator> <name><name>aep</name><operator>-&gt;</operator><name>ae_attr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>screen_attr</name> <operator>&amp;</operator> <name>HL_STANDOUT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>T_SE</name></expr></argument>, <argument><expr><name>T_ME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>do_ME</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>screen_attr</name> <operator>&amp;</operator> <name>HL_UNDERCURL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_UCE</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>T_UCE</name></expr></argument>, <argument><expr><name>T_ME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>do_ME</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_UCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>screen_attr</name> <operator>&amp;</operator> <name>HL_UNDERLINE</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>screen_attr</name> <operator>&amp;</operator> <name>HL_UNDERCURL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_UCE</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>T_UE</name></expr></argument>, <argument><expr><name>T_ME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>do_ME</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_UE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>screen_attr</name> <operator>&amp;</operator> <name>HL_ITALIC</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>T_CZR</name></expr></argument>, <argument><expr><name>T_ME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>do_ME</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_CZR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>screen_attr</name> <operator>&amp;</operator> <name>HL_STRIKETHROUGH</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>T_STE</name></expr></argument>, <argument><expr><name>T_ME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>do_ME</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_STE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_ME</name> <operator>||</operator> <operator>(</operator><name>screen_attr</name> <operator>&amp;</operator> <operator>(</operator><name>HL_BOLD</name> <operator>|</operator> <name>HL_INVERSE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_ME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_tgc</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cterm_normal_fg_gui_color</name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>term_fg_rgb_color</name><argument_list>(<argument><expr><name>cterm_normal_fg_gui_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cterm_normal_bg_gui_color</name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>term_bg_rgb_color</name><argument_list>(<argument><expr><name>cterm_normal_bg_gui_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t_colors</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cterm_normal_fg_color</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>term_fg_color</name><argument_list>(<argument><expr><name>cterm_normal_fg_color</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cterm_normal_bg_color</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>term_bg_color</name><argument_list>(<argument><expr><name>cterm_normal_bg_color</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cterm_normal_fg_bold</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_MD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>screen_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>reset_cterm_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>IS_CTERM</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>p_tgc</name></expr> ?</condition><then> <expr><operator>(</operator><name>cterm_normal_fg_gui_color</name> <operator>!=</operator> <name>INVALCOLOR</name>

<operator>||</operator> <name>cterm_normal_bg_gui_color</name> <operator>!=</operator> <name>INVALCOLOR</name><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><name>cterm_normal_fg_color</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>cterm_normal_bg_color</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>cterm_normal_fg_color</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>cterm_normal_bg_color</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_OP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>screen_attr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cterm_normal_fg_bold</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_ME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>screen_attr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>screen_char</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <name>screen_Rows</name> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name>screen_Columns</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pum_under_menu</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>screen_zindex</name> <operator>&lt;=</operator> <name>POPUPMENU_ZINDEX</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>blocked_by_popup</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_XN</name> <operator>==</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <name>row</name> <operator>==</operator> <name>screen_Rows</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>==</operator> <name>screen_Columns</name> <operator>-</operator> <literal type="number">1</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name>cmdmsg_rl</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sattr_T</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>screen_char_attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <name>screen_char_attr</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>screen_attr</name> <operator>!=</operator> <name>attr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_stop_highlight</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>screen_attr</name> <operator>!=</operator> <name>attr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_start_highlight</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>utf_ambiguous_width</name><argument_list>(<argument><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_ambw</name> <operator>==</operator> <literal type="char">'d'</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>term_windgoto</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>screen_cur_col</name> <operator>=</operator> <literal type="number">9999</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>utf_char2cells</name><argument_list>(<argument><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>screen_cur_col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>utfc_char2bytes</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>out_flush_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_char</name><argument_list>(<argument><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x8e</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_char</name><argument_list>(<argument><expr><name><name>ScreenLines2</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>screen_cur_col</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>screen_char_2</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>screen_Rows</name> <operator>*</operator> <name>screen_Columns</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>screen_Rows</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <name>screen_Columns</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sattr_T</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>screen_char</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_char</name><argument_list>(<argument><expr><name><name>ScreenLines</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>screen_cur_col</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>screen_draw_rectangle</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>invert</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_off</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ScreenLines</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>invert</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>screen_char_attr</name> <operator>=</operator> <name>HL_INVERSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <name>row</name></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name>row</name> <operator>+</operator> <name>height</name></expr>;</condition> <incr><expr><operator>++</operator><name>r</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_off</name> <operator>=</operator> <name>off</name> <operator>+</operator> <name>screen_Columns</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>col</name></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>col</name> <operator>+</operator> <name>width</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>dbcs_off2cells</name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <name>c</name></expr></argument>, <argument><expr><name>max_off</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>screen_char_2</name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <name>c</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>c</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>screen_char</name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <name>c</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>utf_off2cells</name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <name>c</name></expr></argument>, <argument><expr><name>max_off</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>screen_char_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>redraw_block</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>clip_may_clear_selection</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>screen_draw_rectangle</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>row</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>space_to_screenline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>screen_fill</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>start_row</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>end_row</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>start_col</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>end_col</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>c1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>c2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_delete</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>norm_term</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>force_next</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>end_row</name> <operator>&gt;</operator> <name>screen_Rows</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>end_row</name> <operator>=</operator> <name>screen_Rows</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end_col</name> <operator>&gt;</operator> <name>screen_Columns</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>end_col</name> <operator>=</operator> <name>screen_Columns</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ScreenLines</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>start_row</name> <operator>&gt;=</operator> <name>end_row</name>

<operator>||</operator> <name>start_col</name> <operator>&gt;=</operator> <name>end_col</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>norm_term</name> <operator>=</operator> <operator>(</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>!</operator><name>IS_CTERM</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <name>start_row</name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>end_row</name></expr>;</condition> <incr><expr><operator>++</operator><name>row</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>start_col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>mb_fix_col</name><argument_list>(<argument><expr><name>start_col</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>start_col</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_puts_len</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>start_col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end_col</name> <operator>&lt;</operator> <name>screen_Columns</name> <operator>&amp;&amp;</operator> <call><name>mb_fix_col</name><argument_list>(<argument><expr><name>end_col</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>end_col</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_puts_len</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>end_col</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>did_delete</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="char">' '</literal>

<operator>&amp;&amp;</operator> <name>end_col</name> <operator>==</operator> <name>Columns</name>

<operator>&amp;&amp;</operator> <call><name>can_clear</name><argument_list>(<argument><expr><name>T_CE</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name>attr</name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><name>norm_term</name>

<operator>&amp;&amp;</operator> <name>attr</name> <operator>&lt;=</operator> <name>HL_ALL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>attr</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>HL_BOLD</name> <operator>|</operator> <name>HL_ITALIC</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>start_col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end_off</name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>end_col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name>off</name> <operator>&lt;</operator> <name>end_off</name> <operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal>

<operator>&amp;&amp;</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>off</name></expr>;</expr_stmt></block_content></block></while></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<while>while <condition>(<expr><name>off</name> <operator>&lt;</operator> <name>end_off</name> <operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal>

<operator>&amp;&amp;</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>off</name></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;</operator> <name>end_off</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>off</name> <operator>-</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>screen_stop_highlight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>term_windgoto</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_CE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>end_col</name> <operator>-</operator> <name>col</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>col</name><operator>--</operator></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>space_to_screenline</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>off</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>did_delete</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>start_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <name>start_col</name></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>end_col</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <name>c</name>

<operator>||</operator> <operator>(</operator><name>enc_utf8</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name>

<operator>!=</operator> <operator>(</operator><ternary><condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr> ?</condition><then> <expr><name>c</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator>

<operator>||</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <name>attr</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator> <name>force_next</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>blocked_by_popup</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>term_is_xterm</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>&gt;</operator> <name>HL_ALL</name>

<operator>||</operator> <name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>&amp;</operator> <name>HL_BOLD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>force_next</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>force_next</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ScreenLinesC</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_delete</name> <operator>||</operator> <name>c</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_char</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>==</operator> <name>start_col</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>did_delete</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>end_col</name> <operator>==</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>LineWraps</name><index>[<expr><name>row</name></expr>]</index></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_col</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>end_col</name> <operator>==</operator> <name>Columns</name>

<operator>&amp;&amp;</operator> <name>c1</name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>start_col</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mode_displayed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>check_for_delay</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>check_msg_scroll</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>emsg_on_display</name> <operator>||</operator> <operator>(</operator><name>check_msg_scroll</name> <operator>&amp;&amp;</operator> <name>msg_scroll</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name>did_wait_return</name>

<operator>&amp;&amp;</operator> <name>emsg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_delay</name><argument_list>(<argument><expr><literal type="number">1006L</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>emsg_on_display</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>check_msg_scroll</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>clear_TabPageIdxs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>scol</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>scol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>scol</name> <operator>&lt;</operator> <name>Columns</name></expr>;</condition> <incr><expr><operator>++</operator><name>scol</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>TabPageIdxs</name><index>[<expr><name>scol</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>screen_valid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doclear</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>screenalloc</name><argument_list>(<argument><expr><name>doclear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><operator>(</operator><name>ScreenLines</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>screenalloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>doclear</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>new_row</name></decl>, <decl><type ref="prev"/><name>old_row</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>old_Rows</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>outofmem</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>schar_T</name> <modifier>*</modifier></type><name>new_ScreenLines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u8char_T</name> <modifier>*</modifier></type><name>new_ScreenLinesUC</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u8char_T</name> <modifier>*</modifier></type><name><name>new_ScreenLinesC</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>schar_T</name> <modifier>*</modifier></type><name>new_ScreenLines2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sattr_T</name> <modifier>*</modifier></type><name>new_ScreenAttrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>new_LineOffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_LineWraps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>new_TabPageIdxs</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>new_popup_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>new_popup_mask_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_popup_transparent</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>entered</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>done_outofmem_msg</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>retry_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>retry</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ScreenLines</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name>Rows</name> <operator>==</operator> <name>screen_Rows</name>

<operator>&amp;&amp;</operator> <name>Columns</name> <operator>==</operator> <name>screen_Columns</name>

<operator>&amp;&amp;</operator> <name>enc_utf8</name> <operator>==</operator> <operator>(</operator><name>ScreenLinesUC</name> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>ScreenLines2</name> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>p_mco</name> <operator>==</operator> <name>Screen_mco</name><operator>)</operator>

<operator>||</operator> <name>Rows</name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name>Columns</name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>full_screen</name> <operator>&amp;&amp;</operator> <name>ScreenLines</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>entered</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>entered</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>RedrawingDisabled</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_new_shellsize</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_lock_screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>comp_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>win_free_lsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>aucmd_win</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>win_free_lsize</name><argument_list>(<argument><expr><name>aucmd_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>FOR_ALL_POPUPWINS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>win_free_lsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR_ALL_TABPAGES</name><argument_list>(<argument>tp</argument>)</argument_list></macro>

<macro><name>FOR_ALL_POPUPWINS_IN_TAB</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>win_free_lsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>new_ScreenLines</name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>schar_T</name></expr></argument>, <argument><expr><operator>(</operator><name>Rows</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>new_ScreenLinesC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u8char_T</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_MCO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>new_ScreenLinesUC</name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>u8char_T</name></expr></argument>, <argument><expr><operator>(</operator><name>Rows</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>p_mco</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>new_ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>LALLOC_CLEAR_MULT</name><argument_list>(<argument><expr><name>u8char_T</name></expr></argument>,

<argument><expr><operator>(</operator><name>Rows</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_ScreenLines2</name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>schar_T</name></expr></argument>, <argument><expr><operator>(</operator><name>Rows</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_ScreenAttrs</name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>sattr_T</name></expr></argument>, <argument><expr><operator>(</operator><name>Rows</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_LineOffset</name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>Rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_LineWraps</name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>char_u</name></expr></argument>, <argument><expr><name>Rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_TabPageIdxs</name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>short</name></expr></argument>, <argument><expr><name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>new_popup_mask</name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>short</name></expr></argument>, <argument><expr><name>Rows</name> <operator>*</operator> <name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_popup_mask_next</name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>short</name></expr></argument>, <argument><expr><name>Rows</name> <operator>*</operator> <name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_popup_transparent</name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>Rows</name> <operator>*</operator> <name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>win_alloc_lines</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>outofmem</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<goto>goto <name>give_up</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>aucmd_win</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>aucmd_win</name><operator>-&gt;</operator><name>w_lines</name></name> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>win_alloc_lines</name><argument_list>(<argument><expr><name>aucmd_win</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>outofmem</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>FOR_ALL_POPUPWINS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><call><name>win_alloc_lines</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>outofmem</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<goto>goto <name>give_up</name>;</goto>

</block_content>}</block></if></if_stmt>

<macro><name>FOR_ALL_TABPAGES</name><argument_list>(<argument>tp</argument>)</argument_list></macro>

<macro><name>FOR_ALL_POPUPWINS_IN_TAB</name><argument_list>(<argument>tp</argument>, <argument>wp</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><call><name>win_alloc_lines</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>outofmem</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<goto>goto <name>give_up</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>give_up</name>:</label>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>p_mco</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>new_ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>new_ScreenLines</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>(</operator><name>enc_utf8</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>new_ScreenLinesUC</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>i</name> <operator>!=</operator> <name>p_mco</name><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <name>new_ScreenLines2</name> <operator>==</operator> <name>NULL</name><operator>)</operator>

<operator>||</operator> <name>new_ScreenAttrs</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>new_LineOffset</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>new_LineWraps</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>new_TabPageIdxs</name> <operator>==</operator> <name>NULL</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>new_popup_mask</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>new_popup_mask_next</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>new_popup_transparent</name> <operator>==</operator> <name>NULL</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>||</operator> <name>outofmem</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ScreenLines</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name>done_outofmem_msg</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>do_outofmem_msg</name><argument_list>(<argument><expr><operator>(</operator><name>long_u</name><operator>)</operator><operator>(</operator><operator>(</operator><name>Rows</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>Columns</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>done_outofmem_msg</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>new_ScreenLines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>new_ScreenLinesUC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>p_mco</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>new_ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>new_ScreenLines2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>new_ScreenAttrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>new_LineOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>new_LineWraps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>new_TabPageIdxs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>new_popup_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>new_popup_mask_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>new_popup_transparent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>done_outofmem_msg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>new_row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>new_row</name> <operator>&lt;</operator> <name>Rows</name></expr>;</condition> <incr><expr><operator>++</operator><name>new_row</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>new_LineOffset</name><index>[<expr><name>new_row</name></expr>]</index></name> <operator>=</operator> <name>new_row</name> <operator>*</operator> <name>Columns</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_LineWraps</name><index>[<expr><name>new_row</name></expr>]</index></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>doclear</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vim_memset</name><argument_list>(<argument><expr><name>new_ScreenLines</name> <operator>+</operator> <name>new_row</name> <operator>*</operator> <name>Columns</name></expr></argument>,

<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>Columns</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>schar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vim_memset</name><argument_list>(<argument><expr><name>new_ScreenLinesUC</name> <operator>+</operator> <name>new_row</name> <operator>*</operator> <name>Columns</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>Columns</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u8char_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>p_mco</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vim_memset</name><argument_list>(<argument><expr><name><name>new_ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index></name>

<operator>+</operator> <name>new_row</name> <operator>*</operator> <name>Columns</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>Columns</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u8char_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vim_memset</name><argument_list>(<argument><expr><name>new_ScreenLines2</name> <operator>+</operator> <name>new_row</name> <operator>*</operator> <name>Columns</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>Columns</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>schar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vim_memset</name><argument_list>(<argument><expr><name>new_ScreenAttrs</name> <operator>+</operator> <name>new_row</name> <operator>*</operator> <name>Columns</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>Columns</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sattr_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_row</name> <operator>=</operator> <name>new_row</name> <operator>+</operator> <operator>(</operator><name>screen_Rows</name> <operator>-</operator> <name>Rows</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_row</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ScreenLines</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>screen_Columns</name> <operator>&lt;</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>screen_Columns</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>ScreenLinesUC</name> <operator>==</operator> <name>NULL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>p_mco</name> <operator>==</operator> <name>Screen_mco</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>new_ScreenLines</name> <operator>+</operator> <name><name>new_LineOffset</name><index>[<expr><name>new_row</name></expr>]</index></name></expr></argument>,

<argument><expr><name>ScreenLines</name> <operator>+</operator> <name><name>LineOffset</name><index>[<expr><name>old_row</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>schar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>ScreenLinesUC</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name>p_mco</name> <operator>==</operator> <name>Screen_mco</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>new_ScreenLinesUC</name> <operator>+</operator> <name><name>new_LineOffset</name><index>[<expr><name>new_row</name></expr>]</index></name></expr></argument>,

<argument><expr><name>ScreenLinesUC</name> <operator>+</operator> <name><name>LineOffset</name><index>[<expr><name>old_row</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u8char_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>p_mco</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>new_ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index></name>

<operator>+</operator> <name><name>new_LineOffset</name><index>[<expr><name>new_row</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>LineOffset</name><index>[<expr><name>old_row</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u8char_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name> <operator>&amp;&amp;</operator> <name>ScreenLines2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>new_ScreenLines2</name> <operator>+</operator> <name><name>new_LineOffset</name><index>[<expr><name>new_row</name></expr>]</index></name></expr></argument>,

<argument><expr><name>ScreenLines2</name> <operator>+</operator> <name><name>LineOffset</name><index>[<expr><name>old_row</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>schar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>new_ScreenAttrs</name> <operator>+</operator> <name><name>new_LineOffset</name><index>[<expr><name>new_row</name></expr>]</index></name></expr></argument>,

<argument><expr><name>ScreenAttrs</name> <operator>+</operator> <name><name>LineOffset</name><index>[<expr><name>old_row</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sattr_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>current_ScreenLine</name> <operator>=</operator> <name>new_ScreenLines</name> <operator>+</operator> <name>Rows</name> <operator>*</operator> <name>Columns</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>new_popup_mask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Rows</name> <operator>*</operator> <name>Columns</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>new_popup_transparent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Rows</name> <operator>*</operator> <name>Columns</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free_screenlines</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ScreenLines</name> <operator>=</operator> <name>new_ScreenLines</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ScreenLinesUC</name> <operator>=</operator> <name>new_ScreenLinesUC</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>p_mco</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>new_ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>Screen_mco</name> <operator>=</operator> <name>p_mco</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ScreenLines2</name> <operator>=</operator> <name>new_ScreenLines2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ScreenAttrs</name> <operator>=</operator> <name>new_ScreenAttrs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>LineOffset</name> <operator>=</operator> <name>new_LineOffset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>LineWraps</name> <operator>=</operator> <name>new_LineWraps</name></expr>;</expr_stmt>

<expr_stmt><expr><name>TabPageIdxs</name> <operator>=</operator> <name>new_TabPageIdxs</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>popup_mask</name> <operator>=</operator> <name>new_popup_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>popup_mask_next</name> <operator>=</operator> <name>new_popup_mask_next</name></expr>;</expr_stmt>

<expr_stmt><expr><name>popup_transparent</name> <operator>=</operator> <name>new_popup_transparent</name></expr>;</expr_stmt>

<expr_stmt><expr><name>popup_mask_refresh</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>old_Rows</name> <operator>=</operator> <name>screen_Rows</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>screen_Rows</name> <operator>=</operator> <name>Rows</name></expr>;</expr_stmt>

<expr_stmt><expr><name>screen_Columns</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>

<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name>CLEAR</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>doclear</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screenclear2</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name>

<operator>&amp;&amp;</operator> <name>ScreenLines</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name>old_Rows</name> <operator>!=</operator> <name>Rows</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_redraw_block</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_row</name> <operator>&gt;=</operator> <name>Rows</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>Rows</name> <operator>&gt;</operator> <name>old_Rows</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>msg_row</name> <operator>+=</operator> <name>Rows</name> <operator>-</operator> <name>old_Rows</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>msg_col</name> <operator>&gt;=</operator> <name>Columns</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>clear_TabPageIdxs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_unlock_screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>entered</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>RedrawingDisabled</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>starting</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>++</operator><name>retry_count</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_VIMRESIZED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>retry</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>free_screenlines</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>ScreenLinesUC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Screen_mco</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>ScreenLines2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>ScreenLines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>ScreenAttrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>LineOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>LineWraps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>TabPageIdxs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>popup_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>popup_mask_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>popup_transparent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>screenclear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>check_for_delay</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>screenalloc</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>screenclear2</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>screenclear2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>starting</name> <operator>==</operator> <name>NO_SCREEN</name> <operator>||</operator> <name>ScreenLines</name> <operator>==</operator> <name>NULL</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>starting</name></name><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>screen_attr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>screen_stop_highlight</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>clip_scroll_selection</name><argument_list>(<argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Rows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>lineclear</name><argument_list>(<argument><expr><name><name>LineOffset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>LineWraps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>can_clear</name><argument_list>(<argument><expr><name>T_CL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_CL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mode_displayed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Rows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lineinvalid</name><argument_list>(<argument><expr><name><name>LineOffset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>screen_cleared</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>win_rest_invalid</name><argument_list>(<argument><expr><name>firstwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw_tabline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>must_redraw</name> <operator>==</operator> <name>CLEAR</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name>NOT_VALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>compute_cmdrow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>cmdline_row</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>msg_scrolled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>msg_didany</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>lineclear</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vim_memset</name><argument_list>(<argument><expr><name>ScreenLines</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>width</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>schar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vim_memset</name><argument_list>(<argument><expr><name>ScreenLinesUC</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>width</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u8char_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vim_memset</name><argument_list>(<argument><expr><name>ScreenAttrs</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>width</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sattr_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>lineinvalid</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vim_memset</name><argument_list>(<argument><expr><name>ScreenAttrs</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>width</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sattr_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>linecopy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>off_to</name> <init>= <expr><name><name>LineOffset</name><index>[<expr><name>to</name></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>off_from</name> <init>= <expr><name><name>LineOffset</name><index>[<expr><name>from</name></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>ScreenLines</name> <operator>+</operator> <name>off_to</name></expr></argument>, <argument><expr><name>ScreenLines</name> <operator>+</operator> <name>off_from</name></expr></argument>,

<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>schar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>ScreenLinesUC</name> <operator>+</operator> <name>off_to</name></expr></argument>, <argument><expr><name>ScreenLinesUC</name> <operator>+</operator> <name>off_from</name></expr></argument>,

<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u8char_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>p_mco</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>off_to</name></expr></argument>, <argument><expr><name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>off_from</name></expr></argument>,

<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u8char_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>ScreenLines2</name> <operator>+</operator> <name>off_to</name></expr></argument>, <argument><expr><name>ScreenLines2</name> <operator>+</operator> <name>off_from</name></expr></argument>,

<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>schar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>ScreenAttrs</name> <operator>+</operator> <name>off_to</name></expr></argument>, <argument><expr><name>ScreenAttrs</name> <operator>+</operator> <name>off_from</name></expr></argument>,

<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sattr_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>can_clear</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>t_colors</name> <operator>&lt;=</operator> <literal type="number">1</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>gui</name><operator>.</operator><name>in_use</name></name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><name>p_tgc</name> <operator>&amp;&amp;</operator> <name>cterm_normal_bg_gui_color</name> <operator>==</operator> <name>INVALCOLOR</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>p_tgc</name> <operator>&amp;&amp;</operator> <name>cterm_normal_bg_color</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>||</operator> <name>cterm_normal_bg_color</name> <operator>==</operator> <literal type="number">0</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>||</operator> <operator>*</operator><name>T_UT</name> <operator>!=</operator> <name>NUL</name><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>p</name> <operator>==</operator> <name>T_CE</name> <operator>&amp;&amp;</operator> <name>popup_visible</name><operator>)</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>screen_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>screen_cur_row</name> <operator>=</operator> <name>screen_cur_col</name> <operator>=</operator> <literal type="number">9999</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>windgoto</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sattr_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plan</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wouldbe_col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>noinvcurs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>bs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>goto_cost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GOTO_COST</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIGHL_COST</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLAN_LE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLAN_CR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLAN_NL</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLAN_WRITE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>ScreenLines</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>!=</operator> <name>screen_cur_col</name> <operator>||</operator> <name>row</name> <operator>!=</operator> <name>screen_cur_row</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <name>screen_Rows</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name>screen_Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name>screen_Columns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>screen_Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>screen_attr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_MS</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>noinvcurs</name> <operator>=</operator> <name>HIGHL_COST</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>noinvcurs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>goto_cost</name> <operator>=</operator> <name>GOTO_COST</name> <operator>+</operator> <name>noinvcurs</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <name>screen_cur_row</name> <operator>&amp;&amp;</operator> <name>screen_cur_col</name> <operator>&lt;</operator> <name>Columns</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>attr</name> <operator>=</operator> <name>screen_attr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>screen_cur_row</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name>screen_cur_col</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_LE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <name>T_LE</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <name>T_BC</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cost</name> <operator>=</operator> <operator>(</operator><name>screen_cur_col</name> <operator>-</operator> <name>col</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cost</name> <operator>=</operator> <literal type="number">999</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>cost</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>plan</name> <operator>=</operator> <name>PLAN_CR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wouldbe_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cost</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>plan</name> <operator>=</operator> <name>PLAN_LE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wouldbe_col</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>noinvcurs</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name>noinvcurs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>row</name> <operator>&gt;</operator> <name>screen_cur_row</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>plan</name> <operator>=</operator> <name>PLAN_NL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wouldbe_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cost</name> <operator>=</operator> <operator>(</operator><name>row</name> <operator>-</operator> <name>screen_cur_row</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>noinvcurs</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name>noinvcurs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>plan</name> <operator>=</operator> <name>PLAN_WRITE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wouldbe_col</name> <operator>=</operator> <name>screen_cur_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>col</name> <operator>-</operator> <name>wouldbe_col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cost</name> <argument_list type="generic">&lt; <argument><expr><name>goto_cost</name> <operator>&amp;&amp;</operator> <name>i</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>ScreenAttrs</name> <operator>+</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>wouldbe_col</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>==</operator> <name>attr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>--</operator><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name>noinvcurs</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cost</name> <operator>=</operator> <literal type="number">999</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>wouldbe_col</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>col</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ScreenLinesUC</name><index>[<expr><name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cost</name> <operator>=</operator> <literal type="number">999</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cost</name> <operator>&lt;</operator> <name>goto_cost</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>plan</name> <operator>==</operator> <name>PLAN_LE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>noinvcurs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_stop_highlight</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>screen_cur_col</name> <operator>&gt;</operator> <name>col</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>screen_cur_col</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>plan</name> <operator>==</operator> <name>PLAN_CR</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>noinvcurs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_stop_highlight</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>out_char</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>screen_cur_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>plan</name> <operator>==</operator> <name>PLAN_NL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>noinvcurs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_stop_highlight</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>screen_cur_row</name> <operator>&lt;</operator> <name>row</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_char</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>screen_cur_row</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>screen_cur_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>col</name> <operator>-</operator> <name>screen_cur_col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>T_ND</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>T_ND</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_char</name><argument_list>(<argument><expr><operator>*</operator><name>T_ND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>screen_cur_col</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ScreenAttrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <name>screen_attr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_stop_highlight</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>out_flush_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_char</name><argument_list>(<argument><expr><name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_dbcs</name> <operator>==</operator> <name>DBCS_JPNU</name>

<operator>&amp;&amp;</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x8e</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_char</name><argument_list>(<argument><expr><name><name>ScreenLines2</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>off</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cost</name> <operator>=</operator> <literal type="number">999</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cost</name> <operator>&gt;=</operator> <name>goto_cost</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>noinvcurs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_stop_highlight</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>screen_cur_row</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>col</name> <operator>&gt;</operator> <name>screen_cur_col</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>*</operator><name>T_CRI</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>term_cursor_right</name><argument_list>(<argument><expr><name>col</name> <operator>-</operator> <name>screen_cur_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>term_windgoto</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>screen_cur_row</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name>screen_cur_col</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>setcursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>setcursor_mayforce</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>setcursor_mayforce</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>force</name> <operator>||</operator> <call><name>redrawing</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name></expr></argument>,

<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <operator>(</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name>

<operator>-</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>has_mbyte</name>

<operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_ptr2cells</name>)<argument_list>(<argument><expr><call><name>ml_get_cursor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <call><name>vim_isprintc</name><argument_list>(<argument><expr><call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr> </then><else>:

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>win_ins_lines</name><parameter_list>(

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>line_count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>invalid</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mayclear</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>did_delete</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nextrow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lastrow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>invalid</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line_count</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <name>row</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>line_count</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <name>row</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>win_do_lines</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>line_count</name></expr></argument>, <argument><expr><name>mayclear</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>MAYBE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>did_delete</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>screen_del_lines</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <name>line_count</name></expr></argument>,

<argument><expr><name>line_count</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Rows</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>did_delete</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_delete</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nextrow</name> <operator>=</operator> <call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lastrow</name> <operator>=</operator> <name>nextrow</name> <operator>+</operator> <name>line_count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lastrow</name> <operator>&gt;</operator> <name>Rows</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lastrow</name> <operator>=</operator> <name>Rows</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><name>nextrow</name> <operator>-</operator> <name>line_count</name></expr></argument>, <argument><expr><name>lastrow</name> <operator>-</operator> <name>line_count</name></expr></argument>,

<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>screen_ins_lines</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>row</name></expr></argument>, <argument><expr><name>line_count</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>did_delete</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_rest_invalid</name><argument_list>(<argument><expr><call><name>W_NEXT</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>win_del_lines</name><parameter_list>(

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>line_count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>invalid</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mayclear</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>clear_attr</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>invalid</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line_count</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <name>row</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>line_count</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <name>row</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>win_do_lines</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>line_count</name></expr></argument>, <argument><expr><name>mayclear</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>clear_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>MAYBE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>screen_del_lines</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>row</name></expr></argument>, <argument><expr><name>line_count</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Rows</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>clear_attr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>||</operator> <name>cmdline_row</name> <operator>&lt;</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>screen_ins_lines</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <name>line_count</name></expr></argument>,

<argument><expr><name>line_count</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Rows</name></expr></argument>, <argument><expr><name>clear_attr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_rest_invalid</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>win_do_lines</name><parameter_list>(

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>line_count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mayclear</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>del</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>clear_attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>redrawing</name><argument_list>()</argument_list></call> <operator>||</operator> <name>line_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>no_win_do_lines_ins</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>del</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mayclear</name> <operator>&amp;&amp;</operator> <name>Rows</name> <operator>-</operator> <name>line_count</name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>==</operator> <name>Columns</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_win_do_lines_ins</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screenclear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>popup_visible</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>+</operator> <name>line_count</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>row</name></expr></argument>, <argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr></argument>,

<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_win_do_lines_ins</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scroll_region</name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>!=</operator> <name>Columns</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>scroll_region</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>==</operator> <name>Columns</name> <operator>||</operator> <operator>*</operator><name>T_CSV</name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>scroll_region_set</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>del</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>screen_del_lines</name><argument_list>(<argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>line_count</name></expr></argument>,

<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <name>row</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>clear_attr</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>screen_ins_lines</name><argument_list>(<argument><expr><call><name>W_WINROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>line_count</name></expr></argument>,

<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <name>row</name></expr></argument>, <argument><expr><name>clear_attr</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scroll_region</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>==</operator> <name>Columns</name> <operator>||</operator> <operator>*</operator><name>T_CSV</name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>scroll_region_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>p_tf</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>MAYBE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>win_rest_invalid</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_T_CAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_T_CDL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_T_AL</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_T_CE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_T_DL</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_T_SR</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_NL</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_T_CD</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_REDRAW</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<function><type><name>int</name></type>

<name>screen_ins_lines</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>line_count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>clear_attr</name></decl></parameter>,

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cursor_row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cursor_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result_empty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>can_ce</name> <init>= <expr><call><name>can_clear</name><argument_list>(<argument><expr><name>T_CE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>screen_valid</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call>

<operator>||</operator> <name>line_count</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>line_count</name> <operator>&gt;</operator> <name>p_ttyscroll</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><name><name>clip_star</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>SELECT_CLEARED</name>

<operator>&amp;&amp;</operator> <name>redrawing_for_callback</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>popup_visible</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result_empty</name> <operator>=</operator> <operator>(</operator><name>row</name> <operator>+</operator> <name>line_count</name> <operator>&gt;=</operator> <name>end</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>!=</operator> <name>Columns</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_CSV</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>USE_REDRAW</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>can_clear</name><argument_list>(<argument><expr><name>T_CD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>result_empty</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>USE_T_CD</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>T_CAL</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>line_count</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>*</operator><name>T_AL</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>USE_T_CAL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>T_CDL</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>result_empty</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>line_count</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>can_ce</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>USE_T_CDL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>T_AL</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>USE_T_AL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>can_ce</name> <operator>&amp;&amp;</operator> <name>result_empty</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>USE_T_CE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>T_DL</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>result_empty</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>USE_T_DL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>T_SR</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>row</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>T_DA</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name>can_ce</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>USE_T_SR</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>USE_T_CD</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>USE_T_CDL</name> <operator>||</operator>

<name>type</name> <operator>==</operator> <name>USE_T_CE</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>USE_T_DL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>screen_del_lines</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>line_count</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_DB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_del_lines</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>line_count</name></expr></argument>, <argument><expr><name>line_count</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>+</operator> <name>row</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>!=</operator> <name>Columns</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clip_clear_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clip_scroll_selection</name><argument_list>(<argument><expr><operator>-</operator><name>line_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_lock_screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_dont_update_cursor</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <name>off</name> <operator>&lt;=</operator> <name><name>gui</name><operator>.</operator><name>cursor_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_CSV</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_CCS</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cursor_col</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_CCS</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>cursor_row</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cursor_row</name> <operator>=</operator> <name>row</name> <operator>+</operator> <name>off</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>row</name> <operator>+=</operator> <name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>+=</operator> <name>off</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>line_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>!=</operator> <name>Columns</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>j</name> <operator>-=</operator> <name>line_count</name><operator>)</operator> <operator>&gt;=</operator> <name>row</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>linecopy</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <name>line_count</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>line_count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>can_clear</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lineclear</name><argument_list>(<argument><expr><name><name>LineOffset</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>,

<argument><expr><name>clear_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lineinvalid</name><argument_list>(<argument><expr><name><name>LineOffset</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>LineWraps</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>j</name> <operator>-=</operator> <name>line_count</name><operator>)</operator> <operator>&gt;=</operator> <name>row</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>LineOffset</name><index>[<expr><name>j</name> <operator>+</operator> <name>line_count</name></expr>]</index></name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>LineWraps</name><index>[<expr><name>j</name> <operator>+</operator> <name>line_count</name></expr>]</index></name> <operator>=</operator> <name><name>LineWraps</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>LineOffset</name><index>[<expr><name>j</name> <operator>+</operator> <name>line_count</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>LineWraps</name><index>[<expr><name>j</name> <operator>+</operator> <name>line_count</name></expr>]</index></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>can_clear</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lineclear</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>, <argument><expr><name>clear_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lineinvalid</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_unlock_screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>screen_stop_highlight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>cursor_row</name></expr></argument>, <argument><expr><name>cursor_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clear_attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_start_highlight</name><argument_list>(<argument><expr><name>clear_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>USE_REDRAW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redraw_block</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>USE_T_CAL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>term_append_lines</name><argument_list>(<argument><expr><name>line_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>line_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>USE_T_AL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <name>cursor_row</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>cursor_row</name></expr></argument>, <argument><expr><name>cursor_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_AL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_SR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>USE_T_SR</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_DA</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>line_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>cursor_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_CE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_can_update_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>screen_del_lines</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>line_count</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>clear_attr</name></decl></parameter>, 

<parameter><decl><type><name>win_T</name> <modifier>*</modifier><name>wp</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cursor_row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cursor_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cursor_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result_empty</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>can_delete</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>screen_valid</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>line_count</name> <operator>&lt;=</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>force</name> <operator>&amp;&amp;</operator> <name>line_count</name> <operator>&gt;</operator> <name>p_ttyscroll</name><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><name><name>clip_star</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>SELECT_CLEARED</name>

<operator>&amp;&amp;</operator> <name>redrawing_for_callback</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result_empty</name> <operator>=</operator> <name>row</name> <operator>+</operator> <name>line_count</name> <operator>&gt;=</operator> <name>end</name></expr>;</expr_stmt>

<expr_stmt><expr><name>can_delete</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>T_DB</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>can_clear</name><argument_list>(<argument><expr><name>T_CE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>!=</operator> <name>Columns</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_CSV</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>USE_REDRAW</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>can_clear</name><argument_list>(<argument><expr><name>T_CD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>result_empty</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>USE_T_CD</name></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BEOS__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BEOS_DR8</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>row</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>T_DB</name> <operator>==</operator> <name>empty_option</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>line_count</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>*</operator><name>T_CDL</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if type="elseif">else if <condition>(<expr><name>row</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>line_count</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>*</operator><name>T_CDL</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>USE_NL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>T_CDL</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>line_count</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>can_delete</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>USE_T_CDL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>can_clear</name><argument_list>(<argument><expr><name>T_CE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>result_empty</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>wp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>==</operator> <name>Columns</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>USE_T_CE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>T_DL</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>can_delete</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>USE_T_DL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>T_CDL</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>can_delete</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>USE_T_CDL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></else></if_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>+</operator> <name>row</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>!=</operator> <name>Columns</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clip_clear_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clip_scroll_selection</name><argument_list>(<argument><expr><name>line_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_dont_update_cursor</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>&gt;=</operator> <name>row</name> <operator>+</operator> <name>off</name>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>&lt;</operator> <name>end</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_CSV</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>T_CCS</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cursor_col</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_CCS</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>cursor_row</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor_end</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>cursor_row</name> <operator>=</operator> <name>row</name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor_end</name> <operator>=</operator> <name>end</name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>row</name> <operator>+=</operator> <name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>+=</operator> <name>off</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>line_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>!=</operator> <name>Columns</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>row</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>j</name> <operator>+=</operator> <name>line_count</name><operator>)</operator> <operator>&lt;=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>linecopy</name><argument_list>(<argument><expr><name>j</name> <operator>-</operator> <name>line_count</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>j</name> <operator>-=</operator> <name>line_count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>can_clear</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lineclear</name><argument_list>(<argument><expr><name><name>LineOffset</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>,

<argument><expr><name>clear_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lineinvalid</name><argument_list>(<argument><expr><name><name>LineOffset</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>LineWraps</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>row</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>j</name> <operator>+=</operator> <name>line_count</name><operator>)</operator> <operator>&lt;=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>LineOffset</name><index>[<expr><name>j</name> <operator>-</operator> <name>line_count</name></expr>]</index></name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>LineWraps</name><index>[<expr><name>j</name> <operator>-</operator> <name>line_count</name></expr>]</index></name> <operator>=</operator> <name><name>LineWraps</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>LineOffset</name><index>[<expr><name>j</name> <operator>-</operator> <name>line_count</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>LineWraps</name><index>[<expr><name>j</name> <operator>-</operator> <name>line_count</name></expr>]</index></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>can_clear</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lineclear</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>, <argument><expr><name>clear_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lineinvalid</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_unlock_screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>screen_attr</name> <operator>!=</operator> <name>clear_attr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_stop_highlight</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>clear_attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_start_highlight</name><argument_list>(<argument><expr><name>clear_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>USE_REDRAW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redraw_block</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>USE_T_CD</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>cursor_row</name></expr></argument>, <argument><expr><name>cursor_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_CD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>USE_T_CDL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>cursor_row</name></expr></argument>, <argument><expr><name>cursor_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>term_delete_lines</name><argument_list>(<argument><expr><name>line_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>USE_NL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>cursor_end</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>cursor_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>line_count</name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_char</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>line_count</name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>USE_T_DL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>cursor_row</name></expr></argument>, <argument><expr><name>cursor_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_DL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>cursor_row</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>cursor_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_CE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>T_DB</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>USE_T_DL</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>USE_T_CDL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>line_count</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>windgoto</name><argument_list>(<argument><expr><name>cursor_end</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>cursor_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>T_CE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>screen_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_can_update_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>skip_showmode</name><parameter_list>()</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>global_busy</name>

<operator>||</operator> <name>msg_silent</name> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>!</operator><call><name>redrawing</name><argument_list>()</argument_list></call>

<operator>||</operator> <operator>(</operator><call><name>char_avail</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>KeyTyped</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>redraw_mode</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>showmode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>need_clear</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nwr_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sub_attr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>do_mode</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>p_smd</name> <operator>&amp;&amp;</operator> <name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator>

<operator>||</operator> <name>restart_edit</name> <operator>!=</operator> <name>NUL</name>

<operator>||</operator> <name>VIsual_active</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_mode</name> <operator>||</operator> <name>reg_recording</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>skip_showmode</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>nwr_save</name> <operator>=</operator> <name>need_wait_return</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_for_delay</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_clear</name> <operator>=</operator> <name>clear_cmdline</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clear_cmdline</name> <operator>&amp;&amp;</operator> <name>cmdline_row</name> <operator>&lt;</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_clr_cmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>msg_pos_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cursor_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_CM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>do_mode</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"--"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><macro><name>preedit_get_status</name><argument_list>()</argument_list></macro>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<call><name>im_get_status</name><argument_list>()</argument_list></call></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">" IM"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">" XIM"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>edit_submode</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>shortmess</name><argument_list>(<argument><expr><name>SHM_COMPLETIONMENU</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>Rows</name> <operator>-</operator> <name>msg_row</name><operator>)</operator> <operator>*</operator> <name>Columns</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>edit_submode_extra</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>edit_submode_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>edit_submode_pre</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>edit_submode_pre</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>-</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>edit_submode</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>edit_submode_pre</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>edit_submode_pre</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>edit_submode</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>edit_submode_extra</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>edit_submode_highl</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>HLF_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sub_attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>edit_submode_highl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sub_attr</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>edit_submode_extra</name></expr></argument>, <argument><expr><name>sub_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>VREPLACE_FLAG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" VREPLACE"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>REPLACE_FLAG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" REPLACE"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_ri</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" REVERSE"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" INSERT"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>restart_edit</name> <operator>==</operator> <literal type="char">'I'</literal> <operator>||</operator> <name>restart_edit</name> <operator>==</operator> <literal type="char">'A'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" (insert)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>restart_edit</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" (replace)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>restart_edit</name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" (vreplace)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_hkmap</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" Hebrew"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_KEYMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>LANGMAP</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_arab</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" Arabic"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><call><name>get_keymap_str</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" (%s)"</literal></expr></argument>,

<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NameBuff</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>p_paste</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" (paste)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><operator>(</operator><ternary><condition><expr><name>VIsual_select</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>+</operator> <operator>(</operator><name>VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal>

<operator>+</operator> <operator>(</operator><name>VIsual_mode</name> <operator>==</operator> <literal type="char">'V'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">" VISUAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">" VISUAL LINE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">" VISUAL BLOCK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">" SELECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">" SELECT LINE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">" SELECT BLOCK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">" --"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>need_clear</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reg_recording</name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>edit_submode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>recording_mode</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_clear</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mode_displayed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_clear</name> <operator>||</operator> <name>clear_cmdline</name> <operator>||</operator> <name>redraw_mode</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>length</name> <operator>=</operator> <name>msg_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>nwr_save</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>clear_cmdline</name> <operator>&amp;&amp;</operator> <name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_clr_cmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>redraw_mode</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_pos_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_showcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>redrawing</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>lastwin</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>win_redr_ruler</name><argument_list>(<argument><expr><name>lastwin</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw_mode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>length</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>msg_pos_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>unshowmode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>redrawing</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><name>force</name> <operator>&amp;&amp;</operator> <call><name>char_avail</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>KeyTyped</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>clearmode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_msg_row</name> <init>= <expr><name>msg_row</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_msg_col</name> <init>= <expr><name>msg_col</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_pos_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg_recording</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>recording_mode</name><argument_list>(<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_CM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>save_msg_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>save_msg_row</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>recording_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"recording"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shortmess</name><argument_list>(<argument><expr><name>SHM_RECORDING</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" @%c"</literal></expr></argument>, <argument><expr><name>reg_recording</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>draw_tabline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tabcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tabwidth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>cwp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wincount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modified</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>attr_sel</name> <init>= <expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_TPS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>attr_nosel</name> <init>= <expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_TP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>attr_fill</name> <init>= <expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_TPF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>room</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_sep_chars</name> <init>= <expr><operator>(</operator><name>t_colors</name> <operator>&lt;</operator> <literal type="number">8</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name>p_tgc</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ScreenLines</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>redraw_tabline</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>gui_use_tabline</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_update_tabline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>tabline_height</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>clear_TabPageIdxs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_tal</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>saved_did_emsg</name> <init>= <expr><name>did_emsg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_redr_custom</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>did_emsg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"tabline"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><name>SID_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>|=</operator> <name>saved_did_emsg</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>FOR_ALL_TABPAGES</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call>

<operator>++</operator><name>tabcount</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tabwidth</name> <operator>=</operator> <operator>(</operator><name>Columns</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>tabcount</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>tabcount</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tabwidth</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tabwidth</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <name>attr_nosel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tabcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</init> <condition><expr><name>tp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name>Columns</name> <operator>-</operator> <literal type="number">4</literal></expr>;</condition>

<incr><expr><name>tp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>scol</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tp_topframe</name></name> <operator>==</operator> <name>topframe</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <name>attr_sel</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sep_chars</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_putchar</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>col</name><operator>++</operator></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tp_topframe</name></name> <operator>!=</operator> <name>topframe</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <name>attr_nosel</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>screen_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>col</name><operator>++</operator></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>curtab</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cwp</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>cwp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_curwin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_firstwin</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>modified</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>wincount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>wincount</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>bufIsChanged</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modified</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>modified</name> <operator>||</operator> <name>wincount</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wincount</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>wincount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>+</operator> <name>len</name> <operator>&gt;=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>screen_puts_len</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<argument><expr><macro><name>hl_combine_attr</name><argument_list>(<argument>attr</argument>, <argument>HL_ATTR(HLF_T)</argument>)</argument_list></macro>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>attr</name></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modified</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>screen_puts_len</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"+"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>col</name><operator>++</operator></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>screen_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>col</name><operator>++</operator></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>room</name> <operator>=</operator> <name>scol</name> <operator>-</operator> <name>col</name> <operator>+</operator> <name>tabwidth</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>room</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>get_trans_bufname</name><argument_list>(<argument><expr><name><name>cwp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shorten_dir</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NameBuff</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>room</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>room</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name> <operator>-</operator> <name>room</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>room</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>Columns</name> <operator>-</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>screen_puts_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>screen_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>col</name><operator>++</operator></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>tabcount</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>scol</name> <operator>&lt;</operator> <name>col</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>TabPageIdxs</name><index>[<expr><name>scol</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>tabcount</name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>use_sep_chars</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>screen_fill</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>attr_fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>first_tabpage</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>screen_putchar</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>attr_nosel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TabPageIdxs</name><index>[<expr><name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">999</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>redraw_tabline</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>get_trans_bufname</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>buf_spname</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><call><name>buf_spname</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATHL</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>home_replace</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>trans_characters</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>fillchar_status</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fill</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>bt_terminal</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>curwin</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_ST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fill</name> <operator>=</operator> <name>fill_stl</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_STNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fill</name> <operator>=</operator> <name>fill_stlnc</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><name>wp</name> <operator>==</operator> <name>curwin</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fill</name> <operator>=</operator> <name>fill_stl</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_SNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fill</name> <operator>=</operator> <name>fill_stlnc</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>attr</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_S</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_SNC</name></expr></argument>)</argument_list></call>

<operator>||</operator> <name>wp</name> <operator>!=</operator> <name>curwin</name> <operator>||</operator> <name>ONE_WINDOW</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>fill_stl</name> <operator>!=</operator> <name>fill_stlnc</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>fill</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>curwin</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="char">'^'</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="char">'='</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>fillchar_vsep</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>attr</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>fill_vert</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="char">'|'</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>fill_vert</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>redrawing</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>disable_redraw_for_testing</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><operator>(</operator><operator>!</operator><name>RedrawingDisabled</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>ignore_redraw_flag_for_testing</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>p_lz</name> <operator>&amp;&amp;</operator> <call><name>char_avail</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>KeyTyped</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>do_redraw</name><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>messaging</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>!</operator><operator>(</operator><name>p_lz</name> <operator>&amp;&amp;</operator> <call><name>char_avail</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>KeyTyped</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COL_RULER</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define> 

<function><type><name>void</name></type>

<name>comp_col</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>last_has_status</name> <init>= <expr><operator>(</operator><name>p_ls</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><name>p_ls</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>ONE_WINDOW</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sc_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ru_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_ru</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ru_col</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>ru_wid</name></expr> ?</condition><then> <expr><name>ru_wid</name></expr> </then><else>: <expr><name>COL_RULER</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>ru_col</name> <operator>=</operator> <name>COL_RULER</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>last_has_status</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sc_col</name> <operator>=</operator> <name>ru_col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_sc</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>sc_col</name> <operator>+=</operator> <name>SHOWCMD_COLS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_ru</name> <operator>||</operator> <name>last_has_status</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>++</operator><name>sc_col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sc_col</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <name>sc_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ru_col</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <name>ru_col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sc_col</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>sc_col</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ru_col</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ru_col</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>sc_col</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ru_col</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_ECHOSPACE</name></expr></argument>, <argument><expr><name>sc_col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>number_width</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_nrwidth_line_count</name></name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_nuw_cached</name></name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_nuw</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>w_nrwidth_width</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_nrwidth_line_count</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_nuw</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_nuw</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>get_first_valid_sign</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_scl</name></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_scl</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'u'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_nrwidth_width</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_nuw_cached</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_nuw</name></name></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>screen_screencol</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>screen_cur_col</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>screen_screenrow</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>screen_cur_row</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>set_chars_option</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>varp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>charstab</name>

<block>{

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>charstab</name></name></type> <name><name>filltab</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><operator>&amp;</operator><name>fill_stl</name></expr>, <expr><literal type="string">"stl"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>&amp;</operator><name>fill_stlnc</name></expr>, <expr><literal type="string">"stlnc"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>&amp;</operator><name>fill_vert</name></expr>, <expr><literal type="string">"vert"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>&amp;</operator><name>fill_fold</name></expr>, <expr><literal type="string">"fold"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>&amp;</operator><name>fill_diff</name></expr>, <expr><literal type="string">"diff"</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>charstab</name></name></type> <name><name>lcstab</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><operator>&amp;</operator><name>lcs_eol</name></expr>, <expr><literal type="string">"eol"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>&amp;</operator><name>lcs_ext</name></expr>, <expr><literal type="string">"extends"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>&amp;</operator><name>lcs_nbsp</name></expr>, <expr><literal type="string">"nbsp"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>&amp;</operator><name>lcs_prec</name></expr>, <expr><literal type="string">"precedes"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>&amp;</operator><name>lcs_space</name></expr>, <expr><literal type="string">"space"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>&amp;</operator><name>lcs_tab2</name></expr>, <expr><literal type="string">"tab"</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>&amp;</operator><name>lcs_trail</name></expr>, <expr><literal type="string">"trail"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><operator>&amp;</operator><name>lcs_conceal</name></expr>, <expr><literal type="string">"conceal"</literal></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="string">"conceal"</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>charstab</name></name> <modifier>*</modifier></type><name>tab</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_lcs</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <name>lcstab</name></expr>;</expr_stmt>

<expr_stmt><expr><name>entries</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lcstab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>charstab</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <name>filltab</name></expr>;</expr_stmt>

<expr_stmt><expr><name>entries</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>filltab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>charstab</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>round</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>round</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entries</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cp</name><operator>)</operator> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_lcs</name></expr> ?</condition><then> <expr><name>NUL</name></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>varp</name> <operator>==</operator> <operator>&amp;</operator><name>p_lcs</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lcs_tab1</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lcs_tab3</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fill_diff</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>varp</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entries</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal>

<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>c3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mb_char2cells</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cp</name> <operator>==</operator> <operator>&amp;</operator><name>lcs_tab2</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mb_char2cells</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c3</name> <operator>=</operator> <call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mb_char2cells</name><argument_list>(<argument><expr><name>c3</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>round</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cp</name> <operator>==</operator> <operator>&amp;</operator><name>lcs_tab2</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lcs_tab1</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lcs_tab2</name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lcs_tab3</name> <operator>=</operator> <name>c3</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cp</name><operator>)</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>entries</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>e_invarg</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></function>

</unit>
