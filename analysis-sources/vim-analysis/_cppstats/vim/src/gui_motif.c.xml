<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\gui_motif.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/Form.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/RowColumn.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/PushB.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/Text.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/TextF.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/Separator.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/Label.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/CascadeB.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/ScrollBar.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/MenuShell.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/DrawingA.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name> <operator>&gt;=</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/RepType.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/Frame.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/LabelG.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/ToggleBG.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/SeparatoG.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/XmP.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/keysym.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xatom.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/StringDefs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Intrinsic.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X11_XPM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xpm.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/xpm.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XM_XPMP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/XpmP.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XM_NOTEBOOK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/Notebook.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gui_xmebw.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XPM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../pixmaps/alert.xpm"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../pixmaps/error.xpm"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../pixmaps/generic.xpm"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../pixmaps/info.xpm"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../pixmaps/quest.xpm"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOTIF_POPUP</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>Widget</name></type> <name>vimShell</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Widget</name></type> <name>vimForm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Widget</name></type> <name>textAreaForm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>textArea</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>Widget</name></type> <name>toolBarFrame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Widget</name></type> <name>toolBar</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>Widget</name></type> <name>tabLine</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Widget</name></type> <name>tabLine_menu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>showing_tabline</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOOTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>Widget</name></type> <name>footer</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name> <operator>&gt;=</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tearoff_val</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>XmTEAR_OFF_ENABLED</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>Widget</name></type> <name>menuBar</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOOTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>toolbarbutton_enter_cb</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Boolean</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>toolbarbutton_leave_cb</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Boolean</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>reset_focus</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_motif_menu_colors</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_motif_scroll_colors</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name> <operator>&gt;=</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_TAG</name></cpp:macro> <cpp:value>XmFONTLIST_DEFAULT_TAG</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_TAG</name></cpp:macro> <cpp:value>XmSTRING_DEFAULT_CHARSET</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>scroll_cb</name><parameter_list>(<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type> <name>client_data</name></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type> <name>call_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dragging</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sb</name> <operator>=</operator> <call><name>gui_find_scrollbar</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>client_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>XmScrollBarCallbackStruct</name> <operator>*</operator><operator>)</operator><name>call_data</name><operator>)</operator><operator>-&gt;</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dragging</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>XmScrollBarCallbackStruct</name> <operator>*</operator><operator>)</operator><name>call_data</name><operator>)</operator><operator>-&gt;</operator><name>reason</name> <operator>==</operator>

<operator>(</operator><name>int</name><operator>)</operator><name>XmCR_DRAG</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_drag_scrollbar</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>dragging</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>tabline_cb</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>client_data</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name></type> <name>call_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XmNotebookCallbackStruct</name> <modifier>*</modifier></type><name>nptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nptr</name> <operator>=</operator> <operator>(</operator><name>XmNotebookCallbackStruct</name> <operator>*</operator><operator>)</operator><name>call_data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nptr</name><operator>-&gt;</operator><name>reason</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>XmCR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>send_tabline_event</name><argument_list>(<argument><expr><name><name>nptr</name><operator>-&gt;</operator><name>page_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>tabline_button_cb</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>client_data</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>call_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cmd</name></decl>, <decl><type ref="prev"/><name>tab_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>XmNuserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>tabLine_menu</name></expr></argument>, <argument><expr><name>XmNuserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tab_idx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>send_tabline_menu_event</name><argument_list>(<argument><expr><name>tab_idx</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>motif_tabline_timer_cb</name> <parameter_list>(

<parameter><decl><type><name>XtPointer</name></type> <name>timed_out</name></decl></parameter>,

<parameter><decl><type><name>XtIntervalId</name> <modifier>*</modifier><name>interval_id</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>timed_out</name><operator>)</operator> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>tabline_scroller_clicked</name><parameter_list>(

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>scroller_name</name></decl></parameter>,

<parameter><decl><type><name>XButtonPressedEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Widget</name></type> <name>tab_scroll_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Position</name></type> <name>pos_x</name></decl>, <decl><type ref="prev"/><name>pos_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tab_scroll_w</name> <operator>=</operator> <call><name>XtNameToWidget</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>, <argument><expr><name>scroller_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tab_scroll_w</name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>tab_scroll_w</name></expr></argument>, <argument><expr><name>XmNx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos_x</name></expr></argument>, <argument><expr><name>XmNy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos_y</name></expr></argument>, <argument><expr><name>XmNwidth</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><name>XmNheight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos_x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;=</operator> <name>pos_x</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;=</operator> <name>pos_x</name> <operator>+</operator> <name>width</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;=</operator> <name>pos_y</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;=</operator> <name>pos_y</name> <operator>+</operator> <name>height</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>tabline_menu_cb</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>closure</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,

<parameter><decl><type><name>Boolean</name> <modifier>*</modifier><name>continue_dispatch</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Widget</name></type> <name>tab_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XButtonPressedEvent</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tab_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WidgetList</name></type> <name>children</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Cardinal</name></type> <name>numChildren</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtIntervalId</name></type> <name>timer</name> <init>= <expr><operator>(</operator><name>XtIntervalId</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>timed_out</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>event</name> <operator>=</operator> <operator>(</operator><name>XButtonPressedEvent</name> <operator>*</operator><operator>)</operator><name>e</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>button</name></name> <operator>==</operator> <name>Button1</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>tabline_scroller_clicked</name><argument_list>(<argument><expr><literal type="string">"MajorTabScrollerNext"</literal></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>tabline_scroller_clicked</name><argument_list>(<argument><expr><literal type="string">"MajorTabScrollerPrevious"</literal></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timed_out</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtRemoveTimeOut</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timed_out</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>send_tabline_menu_event</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TABLINE_MENU_NEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>XtAppAddTimeOut</name><argument_list>(<argument><expr><name>app_context</name></expr></argument>, <argument><expr><operator>(</operator><name>long_u</name><operator>)</operator><name>p_mouset</name></expr></argument>,

<argument><expr><name>motif_tabline_timer_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timed_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timed_out</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>button</name></name> <operator>!=</operator> <name>Button3</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hold_gui_events</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>subwindow</name></name> <operator>!=</operator> <name>None</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tab_w</name> <operator>=</operator> <call><name>XtWindowToWidget</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>subwindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tab_w</name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>XmIsPushButton</name><argument_list>(<argument><expr><name>tab_w</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>tab_w</name></expr></argument>, <argument><expr><name>XmNpageNumber</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tab_idx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>tabLine_menu</name></expr></argument>, <argument><expr><name>XmNuserData</name></expr></argument>, <argument><expr><name>tab_idx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>tabLine_menu</name></expr></argument>, <argument><expr><name>XmNchildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>children</name></expr></argument>, <argument><expr><name>XmNnumChildren</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>numChildren</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChildren</name><argument_list>(<argument><expr><name>children</name></expr></argument>, <argument><expr><name>numChildren</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmMenuPosition</name><argument_list>(<argument><expr><name>tabLine_menu</name></expr></argument>, <argument><expr><operator>(</operator><name>XButtonPressedEvent</name> <operator>*</operator><operator>)</operator><name>e</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>tabLine_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>tabline_balloon_cb</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>state</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>beval</name><operator>-&gt;</operator><name>target</name></name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name>XmNpageNumber</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>find_tabpage</name><argument_list>(<argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>get_tabline_label</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_post_balloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/XmP.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/LabelP.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtExposeProc</name></type> <name>old_label_expose</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>label_expose</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>_w</name></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>_event</name></decl></parameter>, <parameter><decl><type><name>Region</name></type> <name>_region</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GC</name></type> <name>insensitiveGC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XmLabelWidget</name></type> <name>lw</name> <init>= <expr><operator>(</operator><name>XmLabelWidget</name><operator>)</operator><name>_w</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>label_type</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>XmSTRING</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>_w</name></expr></argument>, <argument><expr><name>XmNlabelType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>label_type</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XtIsSensitive</name><argument_list>(<argument><expr><name>_w</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>label_type</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>XmSTRING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>old_label_expose</name>)<argument_list>(<argument><expr><name>_w</name></expr></argument>, <argument><expr><name>_event</name></expr></argument>, <argument><expr><name>_region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>XGCValues</name></type> <name>values</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XtGCMask</name></type> <name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XtGCMask</name></type> <name>dynamic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XFontStruct</name> <modifier>*</modifier></type><name>fs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_XmFontListGetDefaultFont</name><argument_list>(<argument><expr><name><name>lw</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>insensitiveGC</name> <operator>=</operator> <name><name>lw</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>insensitive_GC</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>GCForeground</name> <operator>|</operator> <name>GCBackground</name> <operator>|</operator> <name>GCGraphicsExposures</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dynamic</name> <operator>=</operator> <name>GCClipMask</name> <operator>|</operator> <name>GCClipXOrigin</name> <operator>|</operator> <name>GCClipYOrigin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><operator>.</operator><name>graphics_exposures</name></name> <operator>=</operator> <name>False</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>GCFont</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><operator>.</operator><name>font</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>fid</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lw</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>top_shadow_pixmap</name></name> <operator>!=</operator> <name>None</name>

<operator>&amp;&amp;</operator> <name><name>lw</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>top_shadow_pixmap</name></name> <operator>!=</operator> <name>XmUNSPECIFIED_PIXMAP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>GCFillStyle</name> <operator>|</operator> <name>GCTile</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><operator>.</operator><name>fill_style</name></name> <operator>=</operator> <name>FillTiled</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><operator>.</operator><name>tile</name></name> <operator>=</operator> <name><name>lw</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>top_shadow_pixmap</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lw</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>TextRect</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lw</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>TextRect</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lw</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>_acc_text</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>lw</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>acc_TextRect</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lw</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>acc_TextRect</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>values</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <name><name>lw</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>top_shadow_color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><operator>.</operator><name>background</name></name> <operator>=</operator> <name><name>lw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>background_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lw</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>insensitive_GC</name></name> <operator>=</operator> <call><name>XtAllocateGC</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator><name>lw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>values</name></expr></argument>, <argument><expr><name>dynamic</name></expr></argument>, <argument><expr><operator>(</operator><name>XtGCMask</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>old_label_expose</name>)<argument_list>(<argument><expr><name>_w</name></expr></argument>, <argument><expr><name>_event</name></expr></argument>, <argument><expr><name>_region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtReleaseGC</name><argument_list>(<argument><expr><name>_w</name></expr></argument>, <argument><expr><name><name>lw</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>insensitive_GC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lw</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>TextRect</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lw</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>TextRect</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lw</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>_acc_text</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>lw</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>acc_TextRect</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lw</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>acc_TextRect</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>values</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <name><name>lw</name><operator>-&gt;</operator><name>primitive</name><operator>.</operator><name>bottom_shadow_color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><operator>.</operator><name>background</name></name> <operator>=</operator> <name><name>lw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>background_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lw</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>insensitive_GC</name></name> <operator>=</operator> <call><name>XtAllocateGC</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>lw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>values</name></expr></argument>, <argument><expr><name>dynamic</name></expr></argument>, <argument><expr><operator>(</operator><name>XtGCMask</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>old_label_expose</name>)<argument_list>(<argument><expr><name>_w</name></expr></argument>, <argument><expr><name>_event</name></expr></argument>, <argument><expr><name>_region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtReleaseGC</name><argument_list>(<argument><expr><name>_w</name></expr></argument>, <argument><expr><name><name>lw</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>insensitive_GC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lw</name><operator>-&gt;</operator><name>label</name><operator>.</operator><name>insensitive_GC</name></name> <operator>=</operator> <name>insensitiveGC</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_x11_create_widgets</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>Widget</name></type> <name>button</name></decl>, <decl><type ref="prev"/><name>scroller</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XmString</name></type> <name>xms</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>old_label_expose</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>old_label_expose</name> <operator>=</operator> <name><name>xmLabelWidgetClass</name><operator>-&gt;</operator><name>core_class</name><operator>.</operator><name>expose</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xmLabelWidgetClass</name><operator>-&gt;</operator><name>core_class</name><operator>.</operator><name>expose</name></name> <operator>=</operator> <name>label_expose</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>border_offset</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>border_width</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name> <operator>&gt;=</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><call><name>XmRepTypeInstallTearOffModelConverter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>XmNdeleteResponse</name></expr></argument>, <argument><expr><name>XmDO_NOTHING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vimForm</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"vimForm"</literal></expr></argument>,

<argument><expr><name>xmFormWidgetClass</name></expr></argument>, <argument><expr><name>vimShell</name></expr></argument>,

<argument><expr><name>XmNborderWidth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNhighlightThickness</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNshadowThickness</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNmarginWidth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNmarginHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNresizePolicy</name></expr></argument>, <argument><expr><name>XmRESIZE_ANY</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_colors</name><argument_list>(<argument><expr><name>vimForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>al</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ac</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name> <operator>&gt;=</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>al</name><index>[<expr><name>ac</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNtearOffModel</name></expr></argument>, <argument><expr><name>tearoff_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ac</name><operator>++</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>al</name><index>[<expr><name>ac</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ac</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>al</name><index>[<expr><name>ac</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ac</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>al</name><index>[<expr><name>ac</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ac</name><operator>++</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>al</name><index>[<expr><name>ac</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNrightOffset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ac</name><operator>++</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>al</name><index>[<expr><name>ac</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNmarginHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ac</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>menuBar</name> <operator>=</operator> <call><name>XmCreateMenuBar</name><argument_list>(<argument><expr><name>vimForm</name></expr></argument>, <argument><expr><literal type="string">"menuBar"</literal></expr></argument>, <argument><expr><name>al</name></expr></argument>, <argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>,

<argument><expr><name>XmNbackground</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>menu_def_bg_pixel</name></name></expr></argument>,

<argument><expr><name>XmNforeground</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>menu_def_fg_pixel</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_colors</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>toolBarFrame</name> <operator>=</operator> <call><name>XtVaCreateWidget</name><argument_list>(<argument><expr><literal type="string">"toolBarFrame"</literal></expr></argument>,

<argument><expr><name>xmFrameWidgetClass</name></expr></argument>, <argument><expr><name>vimForm</name></expr></argument>,

<argument><expr><name>XmNshadowThickness</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNmarginHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNmarginWidth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_colors</name><argument_list>(<argument><expr><name>toolBarFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>toolBar</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"toolBar"</literal></expr></argument>,

<argument><expr><name>xmRowColumnWidgetClass</name></expr></argument>, <argument><expr><name>toolBarFrame</name></expr></argument>,

<argument><expr><name>XmNchildType</name></expr></argument>, <argument><expr><name>XmFRAME_WORKAREA_CHILD</name></expr></argument>,

<argument><expr><name>XmNrowColumnType</name></expr></argument>, <argument><expr><name>XmWORK_AREA</name></expr></argument>,

<argument><expr><name>XmNorientation</name></expr></argument>, <argument><expr><name>XmHORIZONTAL</name></expr></argument>,

<argument><expr><name>XmNtraversalOn</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><name>XmNisHomogeneous</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><name>XmNpacking</name></expr></argument>, <argument><expr><name>XmPACK_TIGHT</name></expr></argument>,

<argument><expr><name>XmNspacing</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNshadowThickness</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNhighlightThickness</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNmarginHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNmarginWidth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNadjustLast</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_colors</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbindingType</name></expr></argument>, <argument><expr><name>XmNONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNorientation</name></expr></argument>, <argument><expr><name>XmVERTICAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbackPageSize</name></expr></argument>, <argument><expr><name>XmNONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbackPageNumber</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbackPagePlacement</name></expr></argument>, <argument><expr><name>XmTOP_RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNmajorTabSpacing</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNshadowThickness</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tabLine</name> <operator>=</operator> <call><name>XmCreateNotebook</name><argument_list>(<argument><expr><name>vimForm</name></expr></argument>, <argument><expr><literal type="string">"Vim tabline"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>, <argument><expr><name>XmNpageChangedCallback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtCallbackProc</name><operator>)</operator><name>tabline_cb</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>, <argument><expr><name>ButtonPressMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtEventHandler</name><operator>)</operator><name>tabline_menu_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>tabline_height</name></name> <operator>=</operator> <name>TABLINE_HEIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>scroller</name> <operator>=</operator> <call><name>XtNameToWidget</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>, <argument><expr><literal type="string">"MinorTabScrollerNext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>scroller</name></expr></argument>, <argument><expr><name>XmNwidth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XmNresizable</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><name>XmNtraversalOn</name></expr></argument>, <argument><expr><name>False</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scroller</name> <operator>=</operator> <call><name>XtNameToWidget</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>, <argument><expr><literal type="string">"MinorTabScrollerPrevious"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>scroller</name></expr></argument>, <argument><expr><name>XmNwidth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XmNresizable</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><name>XmNtraversalOn</name></expr></argument>, <argument><expr><name>False</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tabLine_menu</name> <operator>=</operator> <call><name>XmCreatePopupMenu</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>, <argument><expr><literal type="string">"tabline popup"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNuserData</name></expr></argument>, <argument><expr><name>TABLINE_MENU_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>xms</name> <operator>=</operator> <call><name>XmStringCreate</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"Close tab"</literal></expr></argument>, <argument><expr><name>STRING_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>xms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>button</name> <operator>=</operator> <call><name>XmCreatePushButton</name><argument_list>(<argument><expr><name>tabLine_menu</name></expr></argument>, <argument><expr><literal type="string">"Close"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name>button</name></expr></argument>, <argument><expr><name>XmNactivateCallback</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtCallbackProc</name><operator>)</operator><name>tabline_button_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>xms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNuserData</name></expr></argument>, <argument><expr><name>TABLINE_MENU_NEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>xms</name> <operator>=</operator> <call><name>XmStringCreate</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"New Tab"</literal></expr></argument>, <argument><expr><name>STRING_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>xms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>button</name> <operator>=</operator> <call><name>XmCreatePushButton</name><argument_list>(<argument><expr><name>tabLine_menu</name></expr></argument>, <argument><expr><literal type="string">"New Tab"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name>button</name></expr></argument>, <argument><expr><name>XmNactivateCallback</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtCallbackProc</name><operator>)</operator><name>tabline_button_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>xms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNuserData</name></expr></argument>, <argument><expr><name>TABLINE_MENU_OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>xms</name> <operator>=</operator> <call><name>XmStringCreate</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"Open tab..."</literal></expr></argument>, <argument><expr><name>STRING_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>xms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>button</name> <operator>=</operator> <call><name>XmCreatePushButton</name><argument_list>(<argument><expr><name>tabLine_menu</name></expr></argument>, <argument><expr><literal type="string">"Open tab..."</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name>button</name></expr></argument>, <argument><expr><name>XmNactivateCallback</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtCallbackProc</name><operator>)</operator><name>tabline_button_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>xms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>textAreaForm</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"textAreaForm"</literal></expr></argument>,

<argument><expr><name>xmFormWidgetClass</name></expr></argument>, <argument><expr><name>vimForm</name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNmarginWidth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNmarginHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNresizePolicy</name></expr></argument>, <argument><expr><name>XmRESIZE_ANY</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_scroll_colors</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>textArea</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"textArea"</literal></expr></argument>,

<argument><expr><name>xmDrawingAreaWidgetClass</name></expr></argument>, <argument><expr><name>textAreaForm</name></expr></argument>,

<argument><expr><name>XmNforeground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr></argument>,

<argument><expr><name>XmNbackground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNborderWidth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNhighlightThickness</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNshadowThickness</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOOTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>footer</name> <operator>=</operator> <call><name>XtVaCreateWidget</name><argument_list>(<argument><expr><literal type="string">"footer"</literal></expr></argument>,

<argument><expr><name>xmLabelGadgetClass</name></expr></argument>, <argument><expr><name>vimForm</name></expr></argument>,

<argument><expr><name>XmNalignment</name></expr></argument>, <argument><expr><name>XmALIGNMENT_BEGINNING</name></expr></argument>,

<argument><expr><name>XmNmarginHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNmarginWidth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNtraversalOn</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><name>XmNrecomputeSize</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_set_footer</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_x11_callbacks</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>, <argument><expr><name>vimForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>in_focus</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_x11_destroy_widgets</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>textArea</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>menuBar</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_text_area_pos</name><parameter_list>(

<parameter><decl><type><name>int</name> <name>x</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>y</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>h</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>reset_focus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_x11_set_back_color</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>textArea</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name> <operator>&gt;=</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><call><name>XmChangeColor</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>,

<argument><expr><name>XmNbackground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>manage_centered</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>dialog_child</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Widget</name></type> <name>shell</name> <init>= <expr><call><name>XtParent</name><argument_list>(<argument><expr><name>dialog_child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Window</name></type> <name>root</name></decl>, <decl><type ref="prev"/><name>child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>border_width</name></decl>, <decl><type ref="prev"/><name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>win_x</name></decl>, <decl><type ref="prev"/><name>win_y</name></decl>, <decl><type ref="prev"/><name>maxX</name></decl>, <decl><type ref="prev"/><name>maxY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Boolean</name></type> <name>mappedWhenManaged</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>shell</name></expr></argument>, <argument><expr><name>XmNmappedWhenManaged</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mappedWhenManaged</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>shell</name></expr></argument>, <argument><expr><name>XmNmappedWhenManaged</name></expr></argument>, <argument><expr><name>False</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>dialog_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XQueryPointer</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XGetGeometry</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win_y</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>border_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>border_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>border_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>-=</operator> <name>width</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>height</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>maxX</name> <operator>=</operator> <call><name>XtScreen</name><argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>width</name> <operator>-</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>maxY</name> <operator>=</operator> <call><name>XtScreen</name><argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>height</name> <operator>-</operator> <name>height</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>maxX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>maxX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>maxY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>maxY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>shell</name></expr></argument>, <argument><expr><name>XmNx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>XmNy</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtMapWidget</name><argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>shell</name></expr></argument>, <argument><expr><name>XmNmappedWhenManaged</name></expr></argument>, <argument><expr><name>mappedWhenManaged</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>XmFontList</name></type>

<name>gui_motif_create_fontlist</name><parameter_list>(<parameter><decl><type><name>XFontStruct</name> <modifier>*</modifier></type><name>font</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XmFontList</name></type> <name>font_list</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name> <operator>&lt;=</operator> <literal type="number">1001</literal><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><name>font_list</name> <operator>=</operator> <call><name>XmFontListCreate</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>STRING_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>XmFontListEntry</name></type> <name>font_list_entry</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font_list_entry</name> <operator>=</operator> <call><name>XmFontListEntryCreate</name><argument_list>(<argument><expr><name>STRING_TAG</name></expr></argument>, <argument><expr><name>XmFONT_IS_FONT</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>font_list</name> <operator>=</operator> <call><name>XmFontListAppendEntry</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>font_list_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmFontListEntryFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_list_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>font_list</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><name>XmVersion</name> <operator>&gt;</operator> <literal type="number">1001</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>XmFontList</name></type>

<name>gui_motif_fontset2fontlist</name><parameter_list>(<parameter><decl><type><name>XFontSet</name> <modifier>*</modifier></type><name>fontset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XmFontList</name></type> <name>font_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XmFontListEntry</name></type> <name>font_list_entry</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font_list_entry</name> <operator>=</operator> <call><name>XmFontListEntryCreate</name><argument_list>(<argument><expr><name>STRING_TAG</name></expr></argument>,

<argument><expr><name>XmFONT_IS_FONTSET</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>*</operator><name>fontset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>font_list</name> <operator>=</operator> <call><name>XmFontListAppendEntry</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>font_list_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmFontListEntryFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_list_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>font_list</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_motif_add_actext</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name> <operator>&gt;=</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>toggle_tearoff</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>wid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_mch_recurse_tearoffs</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>submenu_change</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>colors</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>do_set_mnemonics</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>menu_enabled</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>gui_mch_enable_menu</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>XtIsManaged</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name>menuBar</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>showing_tabline</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name>tabLine</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>showing_tabline</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name>menuBar</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name>tabLine</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name>menuBar</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>XtIsManaged</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>showing_tabline</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name>tabLine</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>showing_tabline</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name>tabLine</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_motif_set_mnemonics</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>menu_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>enable</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>do_set_mnemonics</name><argument_list>(<argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>do_set_mnemonics</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>menu</name> <operator>=</operator> <name>root_menu</name></expr>;</init> <condition><expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name>XmNmnemonic</name></expr></argument>, <argument><expr><ternary><condition><expr><name>enable</name></expr> ?</condition><then> <expr><name><name>menu</name><operator>-&gt;</operator><name>mnemonic</name></name></expr> </then><else>: <expr><name>NUL</name></expr></else></ternary></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_add_menu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XmString</name></type> <name>label</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>shell</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MOTIF_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>menu_is_popup</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name> <operator>&lt;=</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>mouse_model_popup</name><argument_list>()</argument_list></call></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_bg_pixel</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbackground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_bg_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_fg_pixel</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>XmNforeground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_fg_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <call><name>XmCreatePopupMenu</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>, <argument><expr><literal type="string">"contextMenu"</literal></expr></argument>,

<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>menu_is_menubar</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><name>parent</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>XmStringCreate</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>, <argument><expr><name>STRING_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>label</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>XtVaCreateWidget</name><argument_list>(<argument><expr><literal type="string">"subMenu"</literal></expr></argument>,

<argument><expr><name>xmCascadeButtonWidgetClass</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>parent</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>menuBar</name></expr> </then><else>: <expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></else></ternary></expr></argument>,

<argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>label</name></expr></argument>,

<argument><expr><name>XmNmnemonic</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_wak</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr> ?</condition><then> <expr><name>NUL</name></expr> </then><else>: <expr><name><name>menu</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></else></ternary></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name> <operator>&gt;=</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>

<argument><expr><name>XmNpositionIndex</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>parent</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name>tearoff_val</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>XmTEAR_OFF_ENABLED</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_colors</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_fontlist</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_motif_add_actext</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shell</name> <operator>=</operator> <call><name>XtVaCreateWidget</name><argument_list>(<argument><expr><literal type="string">"subMenuShell"</literal></expr></argument>,

<argument><expr><name>xmMenuShellWidgetClass</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name>XmNwidth</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>XmNheight</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_colors</name><argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <call><name>XtVaCreateWidget</name><argument_list>(<argument><expr><literal type="string">"rowColumnMenu"</literal></expr></argument>,

<argument><expr><name>xmRowColumnWidgetClass</name></expr></argument>, <argument><expr><name>shell</name></expr></argument>,

<argument><expr><name>XmNrowColumnType</name></expr></argument>, <argument><expr><name>XmMENU_PULLDOWN</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_colors</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name> <operator>&gt;=</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><call><name>toggle_tearoff</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name>XmNsubMenuId</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>priority</name></name> <operator>&gt;=</operator> <literal type="number">9999</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>,

<argument><expr><name>XmNmenuHelpWidget</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_compute_menu_height</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_motif_add_actext</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XmString</name></type> <name>label</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>actext</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>XmStringCreate</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>actext</name></name></expr></argument>, <argument><expr><name>STRING_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>label</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>XmNacceleratorText</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_toggle_tearoffs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name> <operator>&gt;=</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tearoff_val</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>XmTEAR_OFF_ENABLED</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>tearoff_val</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>XmTEAR_OFF_DISABLED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>toggle_tearoff</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_recurse_tearoffs</name><argument_list>(<argument><expr><name>root_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name> <operator>&gt;=</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>toggle_tearoff</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>wid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Widget</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>wid</name></expr></argument>, <argument><expr><name>XmNtearOffModel</name></expr></argument>, <argument><expr><name>tearoff_val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tearoff_val</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>XmTEAR_OFF_ENABLED</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>w</name> <operator>=</operator> <call><name>XmGetTearOffControl</name><argument_list>(<argument><expr><name>wid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_motif_menu_colors</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_mch_recurse_tearoffs</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>menu_is_popup</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>toggle_tearoff</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mch_recurse_tearoffs</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>gui_mch_text_area_extra_height</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Dimension</name></type> <name>shadowHeight</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>, <argument><expr><name>XmNshadowThickness</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shadowHeight</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>shadowHeight</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_compute_menu_height</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>id</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>Dimension</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>maxy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>margin</name></decl>, <decl><type ref="prev"/><name>shadow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Dimension</name></type> <name>height</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XmNheight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>mp</name> <operator>=</operator> <name>root_menu</name></expr>;</init> <condition><expr><name>mp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>menu_is_menubar</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>maxy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>mp</name> <operator>=</operator> <name>root_menu</name></expr>;</init> <condition><expr><name>mp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>menu_is_menubar</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>XmNy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>maxy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxy</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>,

<argument><expr><name>XmNmarginHeight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>margin</name></expr></argument>,

<argument><expr><name>XmNshadowThickness</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shadow</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_height</name></name> <operator>=</operator> <name>maxy</name> <operator>+</operator> <name>height</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>shadow</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>margin</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>shell_created</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>, <argument><expr><name>XmNheight</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_height</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gui_x11_pm.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>get_toolbar_pixmap</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>check_xpm</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XpmAttributes</name></type> <name>attrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Pixmap</name></type> <name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Pixmap</name></type> <name>map</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>attrs</name><operator>.</operator><name>valuemask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>XpmReadFileToPixmap</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>,

<argument><expr><call><name>RootWindow</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><call><name>DefaultScreen</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XpmFreeAttributes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>XpmSuccess</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type>

<name>get_toolbar_pixmap</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>xpm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>fname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>iconfile</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_find_iconfile</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>iconfile</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"xpm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>check_xpm</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>FAIL</name> <operator>&amp;&amp;</operator> <call><name>gui_find_bitmap</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"xpm"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>check_xpm</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>fname</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_strsave</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tb_blank_xpm</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>icon_builtin</name></name> <operator>||</operator> <call><name>gui_find_bitmap</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"xpm"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name>

<operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>built_in_pixmaps</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>built_in_pixmaps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>xpm</name> <operator>=</operator> <name><name>built_in_pixmaps</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>xpm</name> <operator>=</operator> <name>tb_blank_xpm</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>xpm</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>add_pixmap_args</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>Arg</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>xpm_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>xpm</name></name> <operator>=</operator> <call><name>get_toolbar_pixmap</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>menu</name><operator>-&gt;</operator><name>xpm_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>xpm</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNlabelType</name></expr></argument>, <argument><expr><name>XmSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>xpm_fname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNpixmapFile</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>xpm_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNpixmapData</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>xpm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNlabelLocation</name></expr></argument>, <argument><expr><name>XmBOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type>

<name>gui_mch_add_menu_item</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XmString</name></type> <name>label</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>mnemonic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name> <operator>&lt;=</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_child_of_popup</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>mouse_model_popup</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>menu_is_toolbar</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>WidgetClass</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XmString</name></type> <name>xms</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>wid</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wid</name> <operator>=</operator> <operator>(</operator><name>Dimension</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><operator>++</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>wid</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>xmSeparatorWidgetClass</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNwidth</name></expr></argument>, <argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNminWidth</name></expr></argument>, <argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNorientation</name></expr></argument>, <argument><expr><name>XmVERTICAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNseparatorType</name></expr></argument>, <argument><expr><name>XmSHADOW_ETCHED_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNhighlightThickness</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNhighlightOnEnter</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNmarginWidth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNmarginHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNtraversalOn</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>xms</name> <operator>=</operator> <call><name>XmStringCreate</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>, <argument><expr><name>STRING_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>xms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>add_pixmap_args</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>xmEnhancedButtonWidgetClass</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNpositionIndex</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>XtCreateManagedWidget</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>,

<argument><expr><name>type</name></expr></argument>, <argument><expr><name>toolBar</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>xmEnhancedButtonWidgetClass</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name>XmNactivateCallback</name></expr></argument>, <argument><expr><name>gui_x11_menu_cb</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOOTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>EnterWindowMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><name>toolbarbutton_enter_cb</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>LeaveWindowMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><name>toolbarbutton_leave_cb</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xms</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>xms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mch_menu_set_tip</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XtIsManaged</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_show_toolbar</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>toolbar_height</name></name> <operator>=</operator> <call><name>gui_mch_compute_toolbar_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>XtVaCreateWidget</name><argument_list>(<argument><expr><literal type="string">"subMenu"</literal></expr></argument>,

<argument><expr><name>xmSeparatorGadgetClass</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name> <operator>&gt;=</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>

<argument><expr><name>XmNpositionIndex</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>tearoff_val</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>XmTEAR_OFF_ENABLED</name></expr>

?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_colors</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>XmStringCreate</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>, <argument><expr><name>STRING_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>label</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>XtVaCreateWidget</name><argument_list>(<argument><expr><literal type="string">"subMenu"</literal></expr></argument>,

<argument><expr><name>xmPushButtonWidgetClass</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>,

<argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>label</name></expr></argument>,

<argument><expr><name>XmNmnemonic</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>mnemonic</name></name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name> <operator>&gt;=</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>

<argument><expr><name>XmNpositionIndex</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>tearoff_val</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>XmTEAR_OFF_ENABLED</name></expr>

?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_colors</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_fontlist</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>XmNactivateCallback</name></expr></argument>, <argument><expr><name>gui_x11_menu_cb</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_add_actext</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name> <operator>&lt;=</operator> <literal type="number">1002</literal><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_motif_update_mousemodel</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>menu</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_popup</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mouse_model_popup</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_add_menu</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_update_mousemodel</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>gui_motif_update_mousemodel</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_destroy_menu</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>menu_is_child_of_popup</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mouse_model_popup</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_add_menu_item</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_destroy_menu</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_new_menu_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>menuBar</name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_colors</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_motif_menu_colors</name><argument_list>(<argument><expr><name>toolBarFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_colors</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>submenu_change</name><argument_list>(<argument><expr><name>root_menu</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_new_menu_font</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>menuBar</name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>submenu_change</name><argument_list>(<argument><expr><name>root_menu</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>Dimension</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Position</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>, <argument><expr><name>XmNheight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>XtNwidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><name>XtNheight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_resize_shell</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>-</operator> <call><name>xim_get_status_area_height</name><argument_list>()</argument_list></call></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>RESIZE_VERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_new_shellsize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_new_tooltip_font</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>toolBar</name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <call><name>gui_find_menu</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ToolBar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>submenu_change</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_new_tooltip_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>toolbar</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>toolBar</name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>toolbar</name> <operator>=</operator> <call><name>gui_find_menu</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ToolBar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>toolbar</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>submenu_change</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>submenu_change</name><parameter_list>(

<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>colors</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>mp</name> <operator>=</operator> <name>menu</name></expr>;</init> <condition><expr><name>mp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>colors</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_motif_menu_colors</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>xpm</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>add_pixmap_args</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>tip</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>XmNbackground</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>tooltip_bg_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>XmNforeground</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>tooltip_fg_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>tip</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>gui_motif_menu_fontlist</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>tip</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>XmNfontList</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>XtArgVal</name><operator>)</operator><call><name>gui_motif_fontset2fontlist</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>tooltip_fontset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>tip</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name> <operator>&gt;=</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>colors</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_motif_menu_colors</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_motif_menu_fontlist</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>toggle_tearoff</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>submenu_change</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name>colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_destroy_menu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtDestroyWidget</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Widget</name></type> <name>parent</name></decl>;</decl_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>XtParent</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>toolBar</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>tip</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_destroy_beval_area</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>tip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>tip</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XtDestroyWidget</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>menuBar</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_compute_menu_height</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>parent</name> <operator>==</operator> <name>toolBar</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Cardinal</name></type> <name>num_children</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>, <argument><expr><name>XmNnumChildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_children</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_children</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_show_toolbar</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>toolbar_height</name></name> <operator>=</operator> <call><name>gui_mch_compute_toolbar_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_show_popupmenu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier><name>menu</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MOTIF_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XmMenuPosition</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>, <argument><expr><call><name>gui_x11_get_last_mouse_event</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type>

<name>gui_mch_def_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_fg_pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>menu_def_fg_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_bg_pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>menu_def_bg_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_fg_pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>scroll_def_fg_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>scroll_def_bg_pixel</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>tooltip_fg_pixel</name></name> <operator>=</operator>

<call><name>gui_get_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>rsrc_tooltip_fg_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>tooltip_bg_pixel</name></name> <operator>=</operator>

<call><name>gui_get_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>rsrc_tooltip_bg_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_scrollbar_thumb</name><parameter_list>(

<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>val</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name>XmNvalue</name></expr></argument>, <argument><expr><name>val</name></expr></argument>,

<argument><expr><name>XmNsliderSize</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,

<argument><expr><name>XmNpageIncrement</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>size</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>size</name> <operator>-</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name>XmNmaximum</name></expr></argument>, <argument><expr><name>max</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, 

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_scrollbar_pos</name><parameter_list>(

<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SBAR_LEFT</name> <operator>||</operator> <name><name>sb</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SBAR_RIGHT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>h</name> <operator>-=</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name>XmNtopOffset</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name>XmNbottomOffset</name></expr></argument>, <argument><expr><operator>-</operator><name>y</name> <operator>-</operator> <name>h</name></expr></argument>,

<argument><expr><name>XmNwidth</name></expr></argument>, <argument><expr><name>w</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name>XmNtopOffset</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><name>x</name></expr></argument>,

<argument><expr><name>XmNrightOffset</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name></expr>

?</condition><then> <expr><name><name>gui</name><operator>.</operator><name>scrollbar_width</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>XmNheight</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_enable_scrollbar</name><parameter_list>(<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>SBAR_LEFT</name></expr>:</case>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scrollbar_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SBAR_RIGHT</name></expr>:</case>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNrightOffset</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scrollbar_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SBAR_BOTTOM</name></expr>:</case>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbottomOffset</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scrollbar_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name><name>sb</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>SBAR_LEFT</name></expr>:</case>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SBAR_RIGHT</name></expr>:</case>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNrightOffset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SBAR_BOTTOM</name></expr>:</case>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbottomOffset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_create_scrollbar</name><parameter_list>(

<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>orient</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNminimum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNorientation</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>orient</name> <operator>==</operator> <name>SBAR_VERT</name><operator>)</operator></expr> ?</condition><then> <expr><name>XmVERTICAL</name></expr> </then><else>: <expr><name>XmHORIZONTAL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>SBAR_LEFT</name></expr>:</case>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_OPPOSITE_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SBAR_RIGHT</name></expr>:</case>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_OPPOSITE_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SBAR_BOTTOM</name></expr>:</case>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>XtCreateWidget</name><argument_list>(<argument><expr><literal type="string">"scrollBar"</literal></expr></argument>,

<argument><expr><name>xmScrollBarWidgetClass</name></expr></argument>, <argument><expr><name>textAreaForm</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>scroll_def_bg_pixel</name></name> <operator>==</operator> <operator>(</operator><name>guicolor_T</name><operator>)</operator><literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>scroll_def_fg_pixel</name></name> <operator>==</operator> <operator>(</operator><name>guicolor_T</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name>XmNbackground</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>scroll_def_bg_pixel</name></name></expr></argument>,

<argument><expr><name>XmNforeground</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>scroll_def_fg_pixel</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_set_scrollbar_colors</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>XmNvalueChangedCallback</name></expr></argument>,

<argument><expr><name>scroll_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name><name>sb</name><operator>-&gt;</operator><name>ident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>XmNdragCallback</name></expr></argument>,

<argument><expr><name>scroll_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name><name>sb</name><operator>-&gt;</operator><name>ident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>KeyPressMask</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>gui_x11_key_hit_cb</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_destroy_scrollbar</name><parameter_list>(<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtDestroyWidget</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_scrollbar_colors</name><parameter_list>(<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name><operator>&gt;=</operator><literal type="number">1002</literal><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><call><name>XmChangeColor</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name>XmNtroughColor</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>scroll_fg_pixel</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name>XmNforeground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_fg_pixel</name></name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name><operator>&lt;</operator><literal type="number">1002</literal><operator>)</operator></expr></cpp:if>

<argument><expr><name>XmNbackground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_fg_pixel</name></name></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>==</operator> <operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>bottom_sbar</name></name> <operator>&amp;&amp;</operator> <name>textAreaForm</name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_motif_scroll_colors</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>Window</name></type>

<name>gui_x11_get_wid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return<expr><operator>(</operator><call><name>XtWindow</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>do_mnemonic</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>keycode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WidgetList</name></type> <name>children</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numChildren</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Boolean</name></type> <name>isMenu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>KeySym</name></type> <name>mnemonic</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>mneString</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>userData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>rowColType</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XtIsComposite</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>XtClass</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>xmRowColumnWidgetClass</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>XmNrowColumnType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rowColType</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>isMenu</name> <operator>=</operator> <operator>(</operator><name>rowColType</name> <operator>!=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>XmWORK_AREA</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>isMenu</name> <operator>=</operator> <name>False</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isMenu</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>XmNchildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>children</name></expr></argument>, <argument><expr><name>XmNnumChildren</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>numChildren</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numChildren</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_mnemonic</name><argument_list>(<argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>keycode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>XmNmnemonic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mnemonic</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mnemonic</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>mneString</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mnemonic</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mneString</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XKeysymToKeycode</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>XStringToKeysym</name><argument_list>(<argument><expr><name>mneString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>keycode</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>XtClass</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>xmLabelWidgetClass</name>

<operator>||</operator> <call><name>XtClass</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>xmLabelGadgetClass</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>XmNuserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>userData</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>userData</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>XtIsWidget</name><argument_list>(<argument><expr><name>userData</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XmProcessTraversal</name><argument_list>(<argument><expr><name>userData</name></expr></argument>, <argument><expr><name>XmTRAVERSE_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>XKeyPressedEvent</name></type> <name>keyEvent</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XmProcessTraversal</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>XmTRAVERSE_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>keyEvent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XKeyPressedEvent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>keyEvent</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>KeyPress</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>keyEvent</name><operator>.</operator><name>serial</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>keyEvent</name><operator>.</operator><name>send_event</name></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>keyEvent</name><operator>.</operator><name>display</name></name> <operator>=</operator> <call><name>XtDisplay</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>keyEvent</name><operator>.</operator><name>window</name></name> <operator>=</operator> <call><name>XtWindow</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtCallActionProc</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"Activate"</literal></expr></argument>, <argument><expr><operator>(</operator><name>XEvent</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator> <name>keyEvent</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>mnemonic_event</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>XtPointer</name> <name>call_data</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>XKeyEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>do_mnemonic</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>keycode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>add_mnemonic_grabs</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>mneString</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WidgetList</name></type> <name>children</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numChildren</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Boolean</name></type> <name>isMenu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>KeySym</name></type> <name>mnemonic</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>rowColType</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XtIsComposite</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>XtClass</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>xmRowColumnWidgetClass</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>XmNrowColumnType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rowColType</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>isMenu</name> <operator>=</operator> <operator>(</operator><name>rowColType</name> <operator>!=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>XmWORK_AREA</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>isMenu</name> <operator>=</operator> <name>False</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isMenu</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>XmNchildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>children</name></expr></argument>, <argument><expr><name>XmNnumChildren</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>numChildren</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numChildren</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_mnemonic_grabs</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>XmNmnemonic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mnemonic</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mnemonic</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>mneString</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mnemonic</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mneString</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtGrabKey</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><call><name>XKeysymToKeycode</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>XStringToKeysym</name><argument_list>(<argument><expr><name>mneString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>Mod1Mask</name></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><name>GrabModeAsync</name></expr></argument>, <argument><expr><name>GrabModeAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>activate_dialog_mnemonics</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>dialog</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dialog</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>KeyPressMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtEventHandler</name><operator>)</operator> <name>mnemonic_event</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_mnemonic_grabs</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>suppress_dialog_mnemonics</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>dialog</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dialog</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtUngrabKey</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>AnyKey</name></expr></argument>, <argument><expr><name>Mod1Mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtRemoveEventHandler</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>KeyPressMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtEventHandler</name><operator>)</operator> <name>mnemonic_event</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_fontlist</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XmFontList</name></type> <name>fl</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>fontset</name></name> <operator>!=</operator> <name>NOFONTSET</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>fl</name> <operator>=</operator> <call><name>gui_motif_fontset2fontlist</name><argument_list>(<argument><expr><operator>(</operator><name>XFontSet</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>fontset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>XtIsManaged</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XmNfontList</name></expr></argument>, <argument><expr><name>fl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XmNfontList</name></expr></argument>, <argument><expr><name>fl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>XmFontListFree</name><argument_list>(<argument><expr><name>fl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name> <operator>!=</operator> <name>NOFONT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>fl</name> <operator>=</operator> <call><name>gui_motif_create_fontlist</name><argument_list>(<argument><expr><operator>(</operator><name>XFontStruct</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>XtIsManaged</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XmNfontList</name></expr></argument>, <argument><expr><name>fl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XmNfontList</name></expr></argument>, <argument><expr><name>fl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>XmFontListFree</name><argument_list>(<argument><expr><name>fl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/FileSB.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/XmStrDefs.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>dialog_callback_arg</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>args</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

}</block></struct></type> <name>dcbarg_T</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>Widget</name></type> <name>dialog_wgt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>browse_fname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XmStringCharSet</name></type> <name>charset</name> <init>= <expr><operator>(</operator><name>XmStringCharSet</name><operator>)</operator> <name>XmSTRING_DEFAULT_CHARSET</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DialogCancelCB</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DialogAcceptCB</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_predefined_label</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>new_label</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XmString</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>KeySym</name></type> <name>mnemonic</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>XtNameToWidget</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>new_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>next</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><operator>*</operator><name>next</name></expr>;</condition> <incr><expr><operator>++</operator><name>next</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next</name> <operator>==</operator> <name>DLG_HOTKEY_CHAR</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>next</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mnemonic</name> <operator>=</operator> <name><name>next</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreate</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>STRING_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>w</name></expr></argument>,

<argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>str</name></expr></argument>,

<argument><expr><name>XmNmnemonic</name></expr></argument>, <argument><expr><name>mnemonic</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_fontlist</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_predefined_fontlist</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Widget</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>XtNameToWidget</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_fontlist</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>gui_mch_browse</name><parameter_list>(

<parameter><decl><type><name>int</name> <name>saving</name></type> <name>UNUSED</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dflt</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>ext</name></type> <name>UNUSED</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>initdir</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>dirbuf</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>dfltbuf</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dialog_wgt</name> <operator>=</operator> <call><name>XmCreateFileSelectionDialog</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><literal type="string">"browseDialog"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>initdir</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>initdir</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_dirname</name><argument_list>(<argument><expr><name>dirbuf</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>initdir</name> <operator>=</operator> <name>dirbuf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dflt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dflt</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>initdir</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>dflt</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>MAXPATHL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>dfltbuf</name></expr></argument>, <argument><expr><name>initdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>dfltbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>dfltbuf</name></expr></argument>, <argument><expr><name>dflt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dflt</name> <operator>=</operator> <name>dfltbuf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pattern</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>filter</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">';'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pattern</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tofree</name> <operator>=</operator> <name>pattern</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pattern</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pattern</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>,

<argument><expr><name>XtVaTypedArg</name></expr></argument>,

<argument><expr><name>XmNdirectory</name></expr></argument>, <argument><expr><name>XmRString</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>initdir</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>initdir</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>XtVaTypedArg</name></expr></argument>,

<argument><expr><name>XmNdirSpec</name></expr></argument>, <argument><expr><name>XmRString</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dflt</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>dflt</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>XtVaTypedArg</name></expr></argument>,

<argument><expr><name>XmNpattern</name></expr></argument>, <argument><expr><name>XmRString</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pattern</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>XtVaTypedArg</name></expr></argument>,

<argument><expr><name>XmNdialogTitle</name></expr></argument>, <argument><expr><name>XmRString</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>title</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_predefined_label</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>, <argument><expr><literal type="string">"Apply"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&amp;Filter"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_predefined_label</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>, <argument><expr><literal type="string">"Cancel"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&amp;Cancel"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_predefined_label</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>, <argument><expr><literal type="string">"Dir"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Directories"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_predefined_label</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>, <argument><expr><literal type="string">"FilterLabel"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Filter"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_predefined_label</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>, <argument><expr><literal type="string">"Help"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&amp;Help"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_predefined_label</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>, <argument><expr><literal type="string">"Items"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Files"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_predefined_label</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&amp;OK"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_predefined_label</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>, <argument><expr><literal type="string">"Selection"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Selection"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_predefined_fontlist</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>, <argument><expr><literal type="string">"DirListSW.DirList"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_predefined_fontlist</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>, <argument><expr><literal type="string">"ItemsListSW.ItemsList"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_colors</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>, <argument><expr><name>XmNtroughColor</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>, <argument><expr><name>XmNokCallback</name></expr></argument>, <argument><expr><name>DialogAcceptCB</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>, <argument><expr><name>XmNcancelCallback</name></expr></argument>, <argument><expr><name>DialogCancelCB</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><call><name>XmFileSelectionBoxGetChild</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>XmDIALOG_HELP_BUTTON</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>manage_centered</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>activate_dialog_mnemonics</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><call><name>XtAppProcessEvent</name><argument_list>(<argument><expr><call><name>XtWidgetToApplicationContext</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>XtInputMask</name><operator>)</operator><name>XtIMAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><call><name>XtIsManaged</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><call><name>suppress_dialog_mnemonics</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtDestroyWidget</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>browse_fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>browse_fname</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>DialogCancelCB</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>, 

<parameter><decl><type><name>XtPointer</name> <name>client_data</name></type> <name>UNUSED</name></decl></parameter>, 

<parameter><decl><type><name>XtPointer</name> <name>call_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>browse_fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name>browse_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>browse_fname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>DialogAcceptCB</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>, 

<parameter><decl><type><name>XtPointer</name> <name>client_data</name></type> <name>UNUSED</name></decl></parameter>, 

<parameter><decl><type><name>XtPointer</name></type> <name>call_data</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>XmFileSelectionBoxCallbackStruct</name> <modifier>*</modifier></type><name>fcb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>browse_fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name>browse_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>browse_fname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fcb</name> <operator>=</operator> <operator>(</operator><name>XmFileSelectionBoxCallbackStruct</name> <operator>*</operator><operator>)</operator><name>call_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringGetLtoR</name><argument_list>(<argument><expr><name><name>fcb</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>charset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>browse_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name>dialog_wgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dialogStatus</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>keyhit_callback</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>client_data</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>Boolean</name> <modifier>*</modifier><name>cont</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>KeySym</name></type> <name>key_sym</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XLookupString</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>xkey</name></name><operator>)</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_sym</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <name>CAR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dialogStatus</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <name>ESC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dialogStatus</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key_sym</name> <operator>==</operator> <name>XK_Left</name> <operator>||</operator> <name>key_sym</name> <operator>==</operator> <name>XK_Right</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>xkey</name><operator>.</operator><name>state</name></name> <operator>&amp;</operator> <name>ShiftMask</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XmTextFieldClearSelection</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><call><name>XtLastTimestampProcessed</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>butproc</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name></type> <name>client_data</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>call_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>dialogStatus</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>client_data</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>Widget</name></type>

<name>create_pixmap_label</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>parent</name></decl></parameter>,

<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>ArgList</name></type> <name>args</name></decl></parameter>,

<parameter><decl><type><name>Cardinal</name></type> <name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Widget</name></type> <name>label</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>dsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Screen</name> <modifier>*</modifier></type><name>scr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Pixmap</name></type> <name>pixmap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XpmAttributes</name></type> <name>attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Boolean</name></type> <name>rs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XpmColorSymbol</name></type> <name><name>color</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"none"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"iconColor1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bottomShadowColor"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"topShadowColor"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"selectColor"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>XmCreateLabelGadget</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dsp</name> <operator>=</operator> <call><name>XtDisplayOfObject</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scr</name> <operator>=</operator> <call><name>XtScreenOfObject</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>XtIsSubclass</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>coreWidgetClass</name></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name>label</name></expr> </then><else>: <expr><call><name>XtParent</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

<argument><expr><name>XmNdepth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>depth</name></expr></argument>,

<argument><expr><name>XmNbackground</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pixel</name></expr></argument>,

<argument><expr><name>XmNforeground</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pixel</name></expr></argument>,

<argument><expr><name>XmNbottomShadowColor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pixel</name></expr></argument>,

<argument><expr><name>XmNtopShadowColor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>pixel</name></expr></argument>,

<argument><expr><name>XmNhighlight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>pixel</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>valuemask</name></name> <operator>=</operator> <name>XpmColorSymbols</name> <operator>|</operator> <name>XpmCloseness</name> <operator>|</operator> <name>XpmDepth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>colorsymbols</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>numsymbols</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>closeness</name></name> <operator>=</operator> <literal type="number">65535</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XpmCreatePixmapFromData</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>, <argument><expr><call><name>RootWindowOfScreen</name><argument_list>(<argument><expr><name>scr</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pixmap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>XmNrecomputeSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>XmNrecomputeSize</name></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>label</name></expr></argument>,

<argument><expr><name>XmNlabelType</name></expr></argument>, <argument><expr><name>XmPIXMAP</name></expr></argument>,

<argument><expr><name>XmNlabelPixmap</name></expr></argument>, <argument><expr><name>pixmap</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>XmNrecomputeSize</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>label</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>gui_mch_dialog</name><parameter_list>(

<parameter><decl><type><name>int</name> <name>type</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>button_names</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dfltbutton</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>textfield</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <name>ex_cmd</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XtAppContext</name></type> <name>app</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XmString</name></type> <name>label</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>butcount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>dialogform</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>form</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>dialogtextfield</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name> <modifier>*</modifier></type><name>buttons</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>sep_form</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Boolean</name></type> <name>vertical</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>separator</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>icon_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>dialogpixmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>title</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>title</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Vim dialog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mch_mousehide</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dialogform</name> <operator>=</operator> <call><name>XmCreateFormDialog</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"dialog"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vertical</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_VERTICAL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>XmStringCreateSimple</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>label</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>dialogform</name></expr></argument>,

<argument><expr><name>XmNdialogTitle</name></expr></argument>, <argument><expr><name>label</name></expr></argument>,

<argument><expr><name>XmNhorizontalSpacing</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNverticalSpacing</name></expr></argument>, <argument><expr><ternary><condition><expr><name>vertical</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buts</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>button_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buts</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>butcount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>buts</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>DLG_BUTTON_SEP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>butcount</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>buttons</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>Widget</name></expr></argument>, <argument><expr><name>butcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buttons</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sep_form</name> <operator>=</operator> <operator>(</operator><name>Widget</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buts</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>butcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>butcount</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>KeySym</name></type> <name>mnemonic</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>next</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><operator>*</operator><name>next</name></expr>;</condition> <incr><expr><operator>++</operator><name>next</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next</name> <operator>==</operator> <name>DLG_HOTKEY_CHAR</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>next</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mnemonic</name> <operator>=</operator> <name><name>next</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next</name> <operator>==</operator> <name>DLG_BUTTON_SEP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>next</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>XmStringCreate</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STRING_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>label</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buttons</name><index>[<expr><name>butcount</name></expr>]</index></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"button"</literal></expr></argument>,

<argument><expr><name>xmPushButtonWidgetClass</name></expr></argument>, <argument><expr><name>dialogform</name></expr></argument>,

<argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>label</name></expr></argument>,

<argument><expr><name>XmNmnemonic</name></expr></argument>, <argument><expr><name>mnemonic</name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNbottomOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNshowAsDefault</name></expr></argument>, <argument><expr><name>butcount</name> <operator>==</operator> <name>dfltbutton</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>XmNdefaultButtonShadowThickness</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_fontlist</name><argument_list>(<argument><expr><name><name>buttons</name><index>[<expr><name>butcount</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>butcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vertical</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>buttons</name><index>[<expr><name>butcount</name></expr>]</index></name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name><name>buttons</name><index>[<expr><name>butcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>buttons</name><index>[<expr><name>butcount</name></expr>]</index></name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNrightOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sep_form</name> <operator>=</operator> <call><name>XtVaCreateWidget</name><argument_list>(<argument><expr><literal type="string">"separatorForm"</literal></expr></argument>,

<argument><expr><name>xmFormWidgetClass</name></expr></argument>, <argument><expr><name>dialogform</name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNleftWidget</name></expr></argument>, <argument><expr><name><name>buttons</name><index>[<expr><name>butcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNrightWidget</name></expr></argument>, <argument><expr><name><name>buttons</name><index>[<expr><name>butcount</name></expr>]</index></name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNbottomOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>sep_form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>buttons</name><index>[<expr><name>butcount</name></expr>]</index></name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNleftWidget</name></expr></argument>, <argument><expr><name><name>buttons</name><index>[<expr><name>butcount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>vertical</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>buttons</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNrightOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sep_form</name> <operator>=</operator> <call><name>XtVaCreateWidget</name><argument_list>(<argument><expr><literal type="string">"separatorForm"</literal></expr></argument>,

<argument><expr><name>xmFormWidgetClass</name></expr></argument>, <argument><expr><name>dialogform</name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNrightWidget</name></expr></argument>, <argument><expr><name><name>buttons</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNbottomOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>sep_form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>buttons</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>buttons</name><index>[<expr><name>butcount</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNactivateCallback</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtCallbackProc</name><operator>)</operator><name>butproc</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>butcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>separator</name> <operator>=</operator> <operator>(</operator><name>Widget</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>butcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNorientation</name></expr></argument>, <argument><expr><name>XmHORIZONTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbottomWidget</name></expr></argument>, <argument><expr><name><name>buttons</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbottomOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>separator</name> <operator>=</operator> <call><name>XmCreateSeparatorGadget</name><argument_list>(<argument><expr><name>dialogform</name></expr></argument>, <argument><expr><literal type="string">"separator"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>textfield</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dialogtextfield</name> <operator>=</operator> <call><name>XtVaCreateWidget</name><argument_list>(<argument><expr><literal type="string">"textField"</literal></expr></argument>,

<argument><expr><name>xmTextFieldWidgetClass</name></expr></argument>, <argument><expr><name>dialogform</name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>butcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>dialogtextfield</name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNbottomWidget</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>dialogtextfield</name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>set_fontlist</name><argument_list>(<argument><expr><name>dialogtextfield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmTextFieldSetString</name><argument_list>(<argument><expr><name>dialogtextfield</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>textfield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>dialogtextfield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>dialogtextfield</name></expr></argument>, <argument><expr><name>KeyPressMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtEventHandler</name><operator>)</operator><name>keyhit_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>form</name> <operator>=</operator> <call><name>XtVaCreateWidget</name><argument_list>(<argument><expr><literal type="string">"separatorForm"</literal></expr></argument>,

<argument><expr><name>xmFormWidgetClass</name></expr></argument>, <argument><expr><name>dialogform</name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VIM_GENERIC</name></expr>:</case>

<expr_stmt><expr><name>icon_data</name> <operator>=</operator> <name>generic_xpm</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VIM_ERROR</name></expr>:</case>

<expr_stmt><expr><name>icon_data</name> <operator>=</operator> <name>error_xpm</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VIM_WARNING</name></expr>:</case>

<expr_stmt><expr><name>icon_data</name> <operator>=</operator> <name>alert_xpm</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VIM_INFO</name></expr>:</case>

<expr_stmt><expr><name>icon_data</name> <operator>=</operator> <name>info_xpm</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VIM_QUESTION</name></expr>:</case>

<expr_stmt><expr><name>icon_data</name> <operator>=</operator> <name>quest_xpm</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>icon_data</name> <operator>=</operator> <name>generic_xpm</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNtopOffset</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbottomOffset</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dialogpixmap</name> <operator>=</operator> <call><name>create_pixmap_label</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><literal type="string">"dialogPixmap"</literal></expr></argument>,

<argument><expr><name>icon_data</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>dialogpixmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>XmStringCreateLtoR</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>message</name></expr></argument>, <argument><expr><name>STRING_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>label</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"dialogMessage"</literal></expr></argument>,

<argument><expr><name>xmLabelGadgetClass</name></expr></argument>, <argument><expr><name>form</name></expr></argument>,

<argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>label</name></expr></argument>,

<argument><expr><name>XmNalignment</name></expr></argument>, <argument><expr><name>XmALIGNMENT_BEGINNING</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNtopOffset</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNleftWidget</name></expr></argument>, <argument><expr><name>dialogpixmap</name></expr></argument>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNrightOffset</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNbottomOffset</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_fontlist</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textfield</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>form</name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNbottomWidget</name></expr></argument>, <argument><expr><name>dialogtextfield</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>butcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>form</name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNbottomWidget</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>form</name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dfltbutton</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dfltbutton</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dfltbutton</name> <operator>&gt;</operator> <name>butcount</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dfltbutton</name> <operator>=</operator> <name>butcount</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>dialogform</name></expr></argument>,

<argument><expr><name>XmNdefaultButton</name></expr></argument>, <argument><expr><name><name>buttons</name><index>[<expr><name>dfltbutton</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textfield</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>dialogform</name></expr></argument>, <argument><expr><name>XmNinitialFocus</name></expr></argument>, <argument><expr><name>dialogtextfield</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>dialogform</name></expr></argument>, <argument><expr><name>XmNinitialFocus</name></expr></argument>, <argument><expr><name><name>buttons</name><index>[<expr><name>dfltbutton</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>manage_centered</name><argument_list>(<argument><expr><name>dialogform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>activate_dialog_mnemonics</name><argument_list>(<argument><expr><name>dialogform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textfield</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>textfield</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XmTextFieldSetSelection</name><argument_list>(<argument><expr><name>dialogtextfield</name></expr></argument>,

<argument><expr><operator>(</operator><name>XmTextPosition</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>XmTextPosition</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>textfield</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>XtLastTimestampProcessed</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmTextFieldSetCursorPosition</name><argument_list>(<argument><expr><name>dialogtextfield</name></expr></argument>,

<argument><expr><operator>(</operator><name>XmTextPosition</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>textfield</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>app</name> <operator>=</operator> <call><name>XtWidgetToApplicationContext</name><argument_list>(<argument><expr><name>dialogform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dialogStatus</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>XtAppProcessEvent</name><argument_list>(<argument><expr><name>app</name></expr></argument>, <argument><expr><operator>(</operator><name>XtInputMask</name><operator>)</operator><name>XtIMAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dialogStatus</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>XtIsManaged</name><argument_list>(<argument><expr><name>dialogform</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textfield</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>XmTextGetString</name><argument_list>(<argument><expr><name>dialogtextfield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dialogStatus</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>textfield</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>textfield</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>IOSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>suppress_dialog_mnemonics</name><argument_list>(<argument><expr><name>dialogform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtDestroyWidget</name><argument_list>(<argument><expr><name>dialogform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dialogStatus</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOOTER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>gui_mch_compute_footer_height</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Dimension</name></type> <name>height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Dimension</name></type> <name>top</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Dimension</name></type> <name>bottom</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Dimension</name></type> <name>shadow</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>footer</name></expr></argument>,

<argument><expr><name>XmNheight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>,

<argument><expr><name>XmNmarginTop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>,

<argument><expr><name>XmNmarginBottom</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bottom</name></expr></argument>,

<argument><expr><name>XmNshadowThickness</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shadow</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>height</name> <operator>+</operator> <name>top</name> <operator>+</operator> <name>bottom</name> <operator>+</operator> <operator>(</operator><name>shadow</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_enable_footer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>showit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>showit</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>footer_height</name></name> <operator>=</operator> <call><name>gui_mch_compute_footer_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>footer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>footer_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name>footer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>, <argument><expr><name>XmNbottomOffset</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>footer_height</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_footer</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XmString</name></type> <name>xms</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xms</name> <operator>=</operator> <call><name>XmStringCreate</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>STRING_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xms</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>footer</name></expr></argument>, <argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>xms</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>xms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_show_toolbar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>showit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Cardinal</name></type> <name>numChildren</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>toolBar</name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>, <argument><expr><name>XmNnumChildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numChildren</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>showit</name> <operator>&amp;&amp;</operator> <name>numChildren</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>WidgetList</name></type> <name>children</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>, <argument><expr><name>XmNchildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>children</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>action</name>)<parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>text</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p_toolbar</name></expr></argument>, <argument><expr><literal type="string">"tooltips"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>action</name> <operator>=</operator> <operator>&amp;</operator><name>gui_mch_enable_beval_area</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>action</name> <operator>=</operator> <operator>&amp;</operator><name>gui_mch_disable_beval_area</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p_toolbar</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p_toolbar</name></expr></argument>, <argument><expr><literal type="string">"icons"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>toolbar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>toolbar</name> <operator>=</operator> <name>root_menu</name></expr>;</init> <condition><expr><name>toolbar</name></expr>;</condition> <incr><expr><name>toolbar</name> <operator>=</operator> <name><name>toolbar</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_toolbar</name><argument_list>(<argument><expr><name><name>toolbar</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>toolbar</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name><name>toolbar</name><operator>-&gt;</operator><name>children</name></name></expr>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>tip</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>action</name>)<argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>tip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>cur</name><operator>-&gt;</operator><name>xpm</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNlabelType</name></expr></argument>, <argument><expr><name>XmSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>toolbar_height</name></name> <operator>=</operator> <call><name>gui_mch_compute_toolbar_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>showing_tabline</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name>tabLine</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XtIsManaged</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name>menuBar</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>toolbar_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XtIsManaged</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>showing_tabline</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name>menuBar</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name>tabLine</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name>menuBar</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>showing_tabline</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name>tabLine</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>RESIZE_VERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>reset_focus</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>textArea</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XmProcessTraversal</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>, <argument><expr><name>XmTRAVERSE_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_compute_toolbar_height</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Dimension</name></type> <name>borders</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Dimension</name></type> <name>whgt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>WidgetList</name></type> <name>children</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Cardinal</name></type> <name>numChildren</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>borders</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>toolBar</name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>toolBarFrame</name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content> 

<decl_stmt><decl><type><name>Dimension</name></type> <name>fst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>fmh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>tst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>tmh</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>toolBarFrame</name></expr></argument>,

<argument><expr><name>XmNshadowThickness</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fst</name></expr></argument>,

<argument><expr><name>XmNmarginHeight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmh</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>borders</name> <operator>+=</operator> <name>fst</name> <operator>+</operator> <name>fmh</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>,

<argument><expr><name>XmNshadowThickness</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tst</name></expr></argument>,

<argument><expr><name>XmNmarginHeight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmh</name></expr></argument>,

<argument><expr><name>XmNchildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>children</name></expr></argument>,

<argument><expr><name>XmNnumChildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numChildren</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>borders</name> <operator>+=</operator> <name>tst</name> <operator>+</operator> <name>tmh</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>numChildren</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>whgt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNheight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>whgt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&lt;</operator> <name>whgt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name>whgt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LESSTIF_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>height</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>height</name> <operator>+</operator> <operator>(</operator><name>borders</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>motif_get_toolbar_colors</name><parameter_list>(

<parameter><decl><type><name>Pixel</name> <modifier>*</modifier></type><name>bgp</name></decl></parameter>,

<parameter><decl><type><name>Pixel</name> <modifier>*</modifier></type><name>fgp</name></decl></parameter>,

<parameter><decl><type><name>Pixel</name> <modifier>*</modifier></type><name>bsp</name></decl></parameter>,

<parameter><decl><type><name>Pixel</name> <modifier>*</modifier></type><name>tsp</name></decl></parameter>,

<parameter><decl><type><name>Pixel</name> <modifier>*</modifier></type><name>hsp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>,

<argument><expr><name>XmNbackground</name></expr></argument>, <argument><expr><name>bgp</name></expr></argument>,

<argument><expr><name>XmNforeground</name></expr></argument>, <argument><expr><name>fgp</name></expr></argument>,

<argument><expr><name>XmNbottomShadowColor</name></expr></argument>, <argument><expr><name>bsp</name></expr></argument>,

<argument><expr><name>XmNtopShadowColor</name></expr></argument>, <argument><expr><name>tsp</name></expr></argument>,

<argument><expr><name>XmNhighlightColor</name></expr></argument>, <argument><expr><name>hsp</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOOTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>toolbarbutton_enter_cb</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name></type> <name>client_data</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier><name>event</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>Boolean</name> <modifier>*</modifier><name>cont</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><operator>(</operator><name>vimmenu_T</name> <operator>*</operator><operator>)</operator> <name>client_data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>MENU_INDEX_TIP</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_FOOTER</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_set_footer</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>MENU_INDEX_TIP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>toolbarbutton_leave_cb</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>client_data</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier><name>event</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>Boolean</name> <modifier>*</modifier><name>cont</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_set_footer</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_show_tabline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>showit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tabLine</name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>showit</name> <operator>!=</operator> <operator>!</operator><name>showing_tabline</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>showit</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><call><name>XtNameToWidget</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>, <argument><expr><literal type="string">"PageScroller"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><call><name>XtNameToWidget</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>, <argument><expr><literal type="string">"MinorTabScrollerNext"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><call><name>XtNameToWidget</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>,

<argument><expr><literal type="string">"MinorTabScrollerPrevious"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>XtIsManaged</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><call><name>XtIsManaged</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name>menuBar</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name>tabLine</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>XtIsManaged</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><call><name>XtIsManaged</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name>menuBar</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textAreaForm</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>showing_tabline</name> <operator>=</operator> <name>showit</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_showing_tabline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>tabLine</name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>showing_tabline</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_update_tabline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curtabidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>currentpage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>tab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XmNotebookPageInfo</name></type> <name>page_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XmNotebookPageStatus</name></type> <name>page_status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_page</name></decl>, <decl><type ref="prev"/><name>tab_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XmString</name></type> <name>label_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>label_cstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tabLine</name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</init> <condition><expr><name>tp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>tp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>nr</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>curtab</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curtabidx</name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>page_status</name> <operator>=</operator> <call><name>XmNotebookGetPageInfo</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>page_status</name> <operator>==</operator> <name>XmPAGE_INVALID</name>

<operator>||</operator> <name><name>page_info</name><operator>.</operator><name>major_tab_widget</name></name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNnotebookChildType</name></expr></argument>, <argument><expr><name>XmMAJOR_TAB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNtraversalOn</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNalignment</name></expr></argument>, <argument><expr><name>XmALIGNMENT_BEGINNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNhighlightThickness</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNshadowThickness</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <call><name>XmCreatePushButton</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>, <argument><expr><literal type="string">"-Empty-"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>beval</name> <operator>=</operator> <call><name>gui_mch_create_beval_area</name><argument_list>(<argument><expr><name>tab</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tabline_balloon_cb</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>tab</name></expr></argument>, <argument><expr><name>XmNuserData</name></expr></argument>, <argument><expr><name>beval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <name><name>page_info</name><operator>.</operator><name>major_tab_widget</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>tab</name></expr></argument>, <argument><expr><name>XmNpageNumber</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>tab</name></expr></argument>, <argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>label_str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XmStringGetLtoR</name><argument_list>(<argument><expr><name>label_str</name></expr></argument>, <argument><expr><name>XmSTRING_DEFAULT_CHARSET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>label_cstr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>get_tabline_label</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>label_cstr</name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>tab</name></expr></argument>, <argument><expr><name>XtVaTypedArg</name></expr></argument>, <argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>XmRString</name></expr></argument>,

<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name>label_cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tab_count</name> <operator>=</operator> <name>nr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>, <argument><expr><name>XmNlastPageNumber</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_page</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>nr</name> <operator>&lt;=</operator> <name>last_page</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>XmNotebookGetPageInfo</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page_info</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>XmPAGE_INVALID</name>

<operator>&amp;&amp;</operator> <name><name>page_info</name><operator>.</operator><name>page_number</name></name> <operator>==</operator> <name>nr</name>

<operator>&amp;&amp;</operator> <name><name>page_info</name><operator>.</operator><name>major_tab_widget</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name><name>page_info</name><operator>.</operator><name>major_tab_widget</name></name></expr></argument>, <argument><expr><name>XmNuserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>beval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>beval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_destroy_beval_area</name><argument_list>(<argument><expr><name>beval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name><name>page_info</name><operator>.</operator><name>major_tab_widget</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtDestroyWidget</name><argument_list>(<argument><expr><name><name>page_info</name><operator>.</operator><name>major_tab_widget</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>, <argument><expr><name>XmNlastPageNumber</name></expr></argument>, <argument><expr><name>tab_count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>, <argument><expr><name>XmNcurrentPageNumber</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>currentpage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>currentpage</name> <operator>!=</operator> <name>curtabidx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>, <argument><expr><name>XmNcurrentPageNumber</name></expr></argument>, <argument><expr><name>curtabidx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_curtab</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>currentpage</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tabLine</name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>, <argument><expr><name>XmNcurrentPageNumber</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>currentpage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>currentpage</name> <operator>!=</operator> <name>nr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>tabLine</name></expr></argument>, <argument><expr><name>XmNcurrentPageNumber</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_motif_menu_colors</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_bg_pixel</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name> <operator>&gt;=</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><call><name>XmChangeColor</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_bg_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XmNbackground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_bg_pixel</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_fg_pixel</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XmNforeground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_fg_pixel</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_motif_scroll_colors</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>XmVersion</name> <operator>&gt;=</operator> <literal type="number">1002</literal><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><call><name>XmChangeColor</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XmNbackground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>scroll_fg_pixel</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XmNforeground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_fg_pixel</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_motif_menu_fontlist</name><parameter_list>(<parameter><decl><type><name>Widget</name> <name>id</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_fontset</name></name> <operator>!=</operator> <name>NOFONTSET</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>XmFontList</name></type> <name>fl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fl</name> <operator>=</operator> <call><name>gui_motif_fontset2fontlist</name><argument_list>(<argument><expr><operator>(</operator><name>XFontSet</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>menu_fontset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>XtIsManaged</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XmNfontList</name></expr></argument>, <argument><expr><name>fl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XmNfontList</name></expr></argument>, <argument><expr><name>fl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>XmFontListFree</name><argument_list>(<argument><expr><name>fl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_font</name></name> <operator>!=</operator> <name>NOFONT</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>XmFontList</name></type> <name>fl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fl</name> <operator>=</operator> <call><name>gui_motif_create_fontlist</name><argument_list>(<argument><expr><operator>(</operator><name>XFontStruct</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>menu_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>XtIsManaged</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XmNfontList</name></expr></argument>, <argument><expr><name>fl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XmNfontList</name></expr></argument>, <argument><expr><name>fl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>XmFontListFree</name><argument_list>(<argument><expr><name>fl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>_SharedFindReplace</name>

<block>{

<decl_stmt><decl><type><name>Widget</name></type> <name>dialog</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Widget</name></type> <name>wword</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Widget</name></type> <name>mcase</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Widget</name></type> <name>up</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Widget</name></type> <name>down</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Widget</name></type> <name>what</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Widget</name></type> <name>with</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Widget</name></type> <name>find</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Widget</name></type> <name>replace</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Widget</name></type> <name>all</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Widget</name></type> <name>undo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Widget</name></type> <name>cancel</name></decl>;</decl_stmt>

}</block></struct></type> <name>SharedFindReplace</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>SharedFindReplace</name></type> <name>find_widgets</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>SharedFindReplace</name></type> <name>repl_widgets</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>find_replace_destroy_callback</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name></type> <name>client_data</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>call_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SharedFindReplace</name> <modifier>*</modifier></type><name>cd</name> <init>= <expr><operator>(</operator><name>SharedFindReplace</name> <operator>*</operator><operator>)</operator><name>client_data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>dialog</name></name> <operator>=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>find_replace_dismiss_callback</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name></type> <name>client_data</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>call_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SharedFindReplace</name> <modifier>*</modifier></type><name>cd</name> <init>= <expr><operator>(</operator><name>SharedFindReplace</name> <operator>*</operator><operator>)</operator><name>client_data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>entry_activate_callback</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name></type> <name>client_data</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>call_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XmProcessTraversal</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator><name>client_data</name></expr></argument>, <argument><expr><name>XmTRAVERSE_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>find_replace_callback</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name></type> <name>client_data</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>call_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long_u</name></type> <name>flags</name> <init>= <expr><operator>(</operator><name>long_u</name><operator>)</operator><name>client_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>find_text</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>repl_text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Boolean</name></type> <name>direction_down</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Boolean</name></type> <name>wword</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Boolean</name></type> <name>mcase</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SharedFindReplace</name> <modifier>*</modifier></type><name>sfr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <name>FRD_UNDO</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_cpo</name> <init>= <expr><name>p_cpo</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u_undo</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <name>save_cpo</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_update_screen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <name>FRD_FINDNEXT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>repl_text</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sfr</name> <operator>=</operator> <operator>&amp;</operator><name>find_widgets</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>repl_text</name> <operator>=</operator> <call><name>XmTextFieldGetString</name><argument_list>(<argument><expr><name><name>repl_widgets</name><operator>.</operator><name>with</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sfr</name> <operator>=</operator> <operator>&amp;</operator><name>repl_widgets</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>find_text</name> <operator>=</operator> <call><name>XmTextFieldGetString</name><argument_list>(<argument><expr><name><name>sfr</name><operator>-&gt;</operator><name>what</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name><name>sfr</name><operator>-&gt;</operator><name>down</name></name></expr></argument>, <argument><expr><name>XmNset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>direction_down</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name><name>sfr</name><operator>-&gt;</operator><name>wword</name></name></expr></argument>, <argument><expr><name>XmNset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wword</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name><name>sfr</name><operator>-&gt;</operator><name>mcase</name></name></expr></argument>, <argument><expr><name>XmNset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mcase</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wword</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FRD_WHOLE_WORD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mcase</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FRD_MATCH_CASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gui_do_findrepl</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>flags</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>find_text</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>repl_text</name></expr></argument>,

<argument><expr><name>direction_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>find_text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name>find_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>repl_text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name>repl_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>find_replace_keypress</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>SharedFindReplace</name> <modifier>*</modifier></type><name>frdp</name></decl></parameter>,

<parameter><decl><type><name>XKeyEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>KeySym</name></type> <name>keysym</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>frdp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>keysym</name> <operator>=</operator> <call><name>XLookupKeysym</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keysym</name> <operator>==</operator> <name>XK_Escape</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_label</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XmString</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>KeySym</name></type> <name>mnemonic</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>next</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><operator>*</operator><name>next</name></expr>;</condition> <incr><expr><operator>++</operator><name>next</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next</name> <operator>==</operator> <name>DLG_HOTKEY_CHAR</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>next</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mnemonic</name> <operator>=</operator> <name><name>next</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateSimple</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>w</name></expr></argument>,

<argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>str</name></expr></argument>,

<argument><expr><name>XmNmnemonic</name></expr></argument>, <argument><expr><name>mnemonic</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_fontlist</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>find_replace_dialog_create</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_replace</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SharedFindReplace</name> <modifier>*</modifier></type><name>frdp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>separator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>input_form</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>button_form</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>toggle_form</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XmString</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wword</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mcase</name> <init>= <expr><operator>!</operator><name>p_ic</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>widest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>entry_text</name></decl>;</decl_stmt>

<expr_stmt><expr><name>frdp</name> <operator>=</operator> <ternary><condition><expr><name>do_replace</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>repl_widgets</name></expr> </then><else>: <expr><operator>&amp;</operator><name>find_widgets</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>entry_text</name> <operator>=</operator> <call><name>get_find_dialog_text</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wword</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mcase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_motif_synch_fonts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XtIsManaged</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XMapRaised</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>XtPopup</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>XtGrabNone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmProcessTraversal</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>, <argument><expr><name>XmTRAVERSE_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>entry_text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XmTextFieldSetString</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>entry_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>entry_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>wword</name></name></expr></argument>, <argument><expr><name>XmNset</name></expr></argument>, <argument><expr><name>wword</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_replace</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateSimple</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"VIM - Search and Replace..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateSimple</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"VIM - Search..."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNautoUnmanage</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNnoResize</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNdialogTitle</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name> <operator>=</operator> <call><name>XmCreateFormDialog</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><literal type="string">"findReplaceDialog"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>, <argument><expr><name>XmNdestroyCallback</name></expr></argument>,

<argument><expr><name>find_replace_destroy_callback</name></expr></argument>, <argument><expr><name>frdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>button_form</name> <operator>=</operator> <call><name>XtVaCreateWidget</name><argument_list>(<argument><expr><literal type="string">"buttonForm"</literal></expr></argument>,

<argument><expr><name>xmFormWidgetClass</name></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNrightOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNtopOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNbottomOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>find</name></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"findButton"</literal></expr></argument>,

<argument><expr><name>xmPushButtonWidgetClass</name></expr></argument>, <argument><expr><name>button_form</name></expr></argument>,

<argument><expr><name>XmNsensitive</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_label</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>find</name></name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Find &amp;Next"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>find</name></name></expr></argument>, <argument><expr><name>XmNactivateCallback</name></expr></argument>,

<argument><expr><name>find_replace_callback</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>do_replace</name></expr> ?</condition><then> <expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>FRD_R_FINDNEXT</name></expr> </then><else>: <expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>FRD_FINDNEXT</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_replace</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>replace</name></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"replaceButton"</literal></expr></argument>,

<argument><expr><name>xmPushButtonWidgetClass</name></expr></argument>, <argument><expr><name>button_form</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>find</name></name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_label</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>replace</name></name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&amp;Replace"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>replace</name></name></expr></argument>, <argument><expr><name>XmNactivateCallback</name></expr></argument>,

<argument><expr><name>find_replace_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>FRD_REPLACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>all</name></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"replaceAllButton"</literal></expr></argument>,

<argument><expr><name>xmPushButtonWidgetClass</name></expr></argument>, <argument><expr><name>button_form</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>replace</name></name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_label</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>all</name></name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Replace &amp;All"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>all</name></name></expr></argument>, <argument><expr><name>XmNactivateCallback</name></expr></argument>,

<argument><expr><name>find_replace_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>FRD_REPLACEALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>undo</name></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"undoButton"</literal></expr></argument>,

<argument><expr><name>xmPushButtonWidgetClass</name></expr></argument>, <argument><expr><name>button_form</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>all</name></name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_label</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>undo</name></name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&amp;Undo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>undo</name></name></expr></argument>, <argument><expr><name>XmNactivateCallback</name></expr></argument>,

<argument><expr><name>find_replace_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>FRD_UNDO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>cancel</name></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"closeButton"</literal></expr></argument>,

<argument><expr><name>xmPushButtonWidgetClass</name></expr></argument>, <argument><expr><name>button_form</name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_label</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>cancel</name></name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&amp;Cancel"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>cancel</name></name></expr></argument>, <argument><expr><name>XmNactivateCallback</name></expr></argument>,

<argument><expr><name>find_replace_dismiss_callback</name></expr></argument>, <argument><expr><name>frdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_fontlist</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>cancel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>button_form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNorientation</name></expr></argument>, <argument><expr><name>XmVERTICAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNrightWidget</name></expr></argument>, <argument><expr><name>button_form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNrightOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>separator</name> <operator>=</operator> <call><name>XmCreateSeparatorGadget</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>, <argument><expr><literal type="string">"separator"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>input_form</name> <operator>=</operator> <call><name>XtVaCreateWidget</name><argument_list>(<argument><expr><literal type="string">"inputForm"</literal></expr></argument>,

<argument><expr><name>xmFormWidgetClass</name></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNrightWidget</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>,

<argument><expr><name>XmNrightOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNtopOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>Widget</name></type> <name>label_what</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>label_with</name> <init>= <expr><operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateSimple</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Find what:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>label_what</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"whatLabel"</literal></expr></argument>,

<argument><expr><name>xmLabelGadgetClass</name></expr></argument>, <argument><expr><name>input_form</name></expr></argument>,

<argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>str</name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNtopOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_fontlist</name><argument_list>(<argument><expr><name>label_what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"whatText"</literal></expr></argument>,

<argument><expr><name>xmTextFieldWidgetClass</name></expr></argument>, <argument><expr><name>input_form</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_replace</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>with</name></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"withText"</literal></expr></argument>,

<argument><expr><name>xmTextFieldWidgetClass</name></expr></argument>, <argument><expr><name>input_form</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>,

<argument><expr><name>XmNtopOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>with</name></name></expr></argument>, <argument><expr><name>XmNactivateCallback</name></expr></argument>,

<argument><expr><name>find_replace_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <name>FRD_R_FINDNEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateSimple</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Replace with:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>label_with</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"withLabel"</literal></expr></argument>,

<argument><expr><name>xmLabelGadgetClass</name></expr></argument>, <argument><expr><name>input_form</name></expr></argument>,

<argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>str</name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>,

<argument><expr><name>XmNtopOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_fontlist</name><argument_list>(<argument><expr><name>label_with</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>, <argument><expr><name>XmNactivateCallback</name></expr></argument>,

<argument><expr><name>entry_activate_callback</name></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>with</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>with</name></name></expr></argument>, <argument><expr><name>KeyPressMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtEventHandler</name><operator>)</operator><name>find_replace_keypress</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <name>frdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>, <argument><expr><name>XmNactivateCallback</name></expr></argument>,

<argument><expr><name>find_replace_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>FRD_FINDNEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>, <argument><expr><name>KeyPressMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtEventHandler</name><operator>)</operator><name>find_replace_keypress</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>frdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNwidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtGetValues</name><argument_list>(<argument><expr><name>label_what</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>widest</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_replace</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtGetValues</name><argument_list>(<argument><expr><name>label_with</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <name>widest</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>widest</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>, <argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><name>widest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_replace</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>with</name></name></expr></argument>, <argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><name>widest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>input_form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>Widget</name></type> <name>radio_box</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>XtVaCreateWidget</name><argument_list>(<argument><expr><literal type="string">"directionFrame"</literal></expr></argument>,

<argument><expr><name>xmFrameWidgetClass</name></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name>input_form</name></expr></argument>,

<argument><expr><name>XmNtopOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNbottomOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_OPPOSITE_WIDGET</name></expr></argument>,

<argument><expr><name>XmNrightWidget</name></expr></argument>, <argument><expr><name>input_form</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateSimple</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Direction"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"directionFrameLabel"</literal></expr></argument>,

<argument><expr><name>xmLabelGadgetClass</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>,

<argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>str</name></expr></argument>,

<argument><expr><name>XmNchildHorizontalAlignment</name></expr></argument>, <argument><expr><name>XmALIGNMENT_BEGINNING</name></expr></argument>,

<argument><expr><name>XmNchildType</name></expr></argument>, <argument><expr><name>XmFRAME_TITLE_CHILD</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_fontlist</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>radio_box</name> <operator>=</operator> <call><name>XmCreateRadioBox</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="string">"radioBox"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>ArgList</name><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateSimple</name><argument_list>( <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Up"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>up</name></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"upRadioButton"</literal></expr></argument>,

<argument><expr><name>xmToggleButtonGadgetClass</name></expr></argument>, <argument><expr><name>radio_box</name></expr></argument>,

<argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>str</name></expr></argument>,

<argument><expr><name>XmNset</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_fontlist</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>up</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateSimple</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Down"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>down</name></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"downRadioButton"</literal></expr></argument>,

<argument><expr><name>xmToggleButtonGadgetClass</name></expr></argument>, <argument><expr><name>radio_box</name></expr></argument>,

<argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>str</name></expr></argument>,

<argument><expr><name>XmNset</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_fontlist</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>down</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>radio_box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name>toggle_form</name> <operator>=</operator> <call><name>XtVaCreateWidget</name><argument_list>(<argument><expr><literal type="string">"toggleForm"</literal></expr></argument>,

<argument><expr><name>xmFormWidgetClass</name></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNrightWidget</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>,

<argument><expr><name>XmNrightOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name>input_form</name></expr></argument>,

<argument><expr><name>XmNtopOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNbottomOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateSimple</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Match whole word only"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>wword</name></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"wordToggle"</literal></expr></argument>,

<argument><expr><name>xmToggleButtonGadgetClass</name></expr></argument>, <argument><expr><name>toggle_form</name></expr></argument>,

<argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>str</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNtopOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNset</name></expr></argument>, <argument><expr><name>wword</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateSimple</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Match case"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frdp</name><operator>-&gt;</operator><name>mcase</name></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"caseToggle"</literal></expr></argument>,

<argument><expr><name>xmToggleButtonGadgetClass</name></expr></argument>, <argument><expr><name>toggle_form</name></expr></argument>,

<argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>str</name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>wword</name></name></expr></argument>,

<argument><expr><name>XmNtopOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNset</name></expr></argument>, <argument><expr><name>mcase</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_fontlist</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>wword</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_menu_fontlist</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>mcase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>toggle_form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>entry_text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XmTextFieldSetString</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>entry_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>entry_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_synch_fonts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>manage_centered</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>activate_dialog_mnemonics</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmProcessTraversal</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>, <argument><expr><name>XmTRAVERSE_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_find_dialog</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>find_replace_dialog_create</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_replace_dialog</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>find_replace_dialog_create</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_motif_synch_fonts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SharedFindReplace</name> <modifier>*</modifier></type><name>frdp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_replace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XFontStruct</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XmFontList</name></type> <name>font_list</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <operator>(</operator><name>XFontStruct</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>font_list</name> <operator>=</operator> <call><name>gui_motif_create_fontlist</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>do_replace</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>do_replace</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>do_replace</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>frdp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>do_replace</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>&amp;</operator><name>repl_widgets</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>&amp;</operator><name>find_widgets</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frdp</name><operator>-&gt;</operator><name>dialog</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>what</name></name></expr></argument>, <argument><expr><name>XmNfontList</name></expr></argument>, <argument><expr><name>font_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_replace</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>frdp</name><operator>-&gt;</operator><name>with</name></name></expr></argument>, <argument><expr><name>XmNfontList</name></expr></argument>, <argument><expr><name>font_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>XmFontListFree</name><argument_list>(<argument><expr><name>font_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
