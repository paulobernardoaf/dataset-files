<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\os_beos.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;kernel/OS.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_THREAD_FOR_INPUT_WITH_TIMEOUT</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sem_id</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>thread_id</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char_u</name></type> <name>charbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>signed</name> <name>char</name></type> <name>charcount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sem_id</name></type> <name>character_present</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sem_id</name></type> <name>character_wanted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>thread_id</name></type> <name>read_thread_id</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRY_ABORT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TRY_ABORT</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>mostly_ignore</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>long</name></type>

<name>read_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TRY_ABORT</name></expr></cpp:if>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>, <argument><expr><name>mostly_ignore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>acquire_sem</name><argument_list>(<argument><expr><name>character_wanted</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>B_NO_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>charcount</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>read_cmd_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>charbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>release_sem</name><argument_list>(<argument><expr><name>character_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>beos_cleanup_read_thread</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>character_present</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>delete_sem</name><argument_list>(<argument><expr><name>character_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>character_present</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>read_thread_id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>kill_thread</name><argument_list>(<argument><expr><name>read_thread_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>read_thread_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>beos_select</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>fd_set</name></name> <modifier>*</modifier></type><name>rbits</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>fd_set</name></name> <modifier>*</modifier></type><name>wbits</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>fd_set</name></name> <modifier>*</modifier></type><name>ebits</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bigtime_t</name></type> <name>tmo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nbits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snooze</name><argument_list>(<argument><expr><name><name>timeout</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1e6</literal> <operator>+</operator> <name><name>timeout</name><operator>-&gt;</operator><name>tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (FD_ISSET(0, rbits)) {

char cbuf[1];

int count;

struct termios told;

struct termios tnew;

tcgetattr(0, &amp;told);

tnew = told;

tnew.c_lflag &amp;= ~ICANON;

tnew.c_cc[VMIN] = 0;

tnew.c_cc[VTIME] = timeout-&gt;tv_sec * 10 + timeout-&gt;tv_usec / 100000;

tcsetattr(0, TCSANOW, &amp;tnew);

count = read(0, &amp;cbuf, sizeof(cbuf));

tcsetattr(0, TCSANOW, &amp;told);

if (count &gt; 0) {

add_to_input_buf(&amp;cbuf[0], count);

return 1;

}

return 0;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_THREAD_FOR_INPUT_WITH_TIMEOUT</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>read_cmd_fd</name></expr></argument>, <argument><expr><name>rbits</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>acquired</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>character_present</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>character_present</name> <operator>=</operator> <call><name>create_sem</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"vim character_present"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>character_wanted</name> <operator>=</operator> <call><name>create_sem</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"vim character_wanted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>read_thread_id</name> <operator>=</operator> <call><name>spawn_thread</name><argument_list>(<argument><expr><name>read_thread</name></expr></argument>, <argument><expr><literal type="string">"vim async read"</literal></expr></argument>,

<argument><expr><name>B_NORMAL_PRIORITY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>beos_cleanup_read_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>resume_thread</name><argument_list>(<argument><expr><name>read_thread_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>timeout</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmo</name> <operator>=</operator> <name><name>timeout</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1e6</literal> <operator>+</operator> <name><name>timeout</name><operator>-&gt;</operator><name>tv_usec</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmo</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tmo</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TRY_ABORT</name></expr></cpp:if>

<expr_stmt><expr><call><name>release_sem</name><argument_list>(<argument><expr><name>character_wanted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>timeout</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>acquired</name> <operator>=</operator> <call><name>acquire_sem_etc</name><argument_list>(<argument><expr><name>character_present</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>B_TIMEOUT</name></expr></argument>, <argument><expr><name>tmo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>acquired</name> <operator>=</operator> <call><name>acquire_sem</name><argument_list>(<argument><expr><name>character_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>acquired</name> <operator>==</operator> <name>B_NO_ERROR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>charcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>charbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TRY_ABORT</name></expr></cpp:if>

<expr_stmt><expr><call><name>release_sem</name><argument_list>(<argument><expr><name>character_wanted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TRY_ABORT</name></expr></cpp:if>

<expr_stmt><expr><call><name>release_sem</name><argument_list>(<argument><expr><name>character_wanted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TRY_ABORT</name></expr></cpp:if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name>read_thread_id</name></expr></argument>, <argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>acquired</name> <operator>==</operator> <name>B_TIMED_OUT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>acquire_sem</name><argument_list>(<argument><expr><name>character_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>charcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>charbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
