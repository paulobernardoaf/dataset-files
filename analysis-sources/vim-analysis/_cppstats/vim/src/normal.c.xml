<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\normal.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>VIsual_mode_orig</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>restart_VIsual_select</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_vcount_ca</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>set_prevcount</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>nv_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>unshift_special</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>del_from_showcmd</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_ignore</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_nop</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_error</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_help</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_addsub</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_page</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_zet</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_ver_scrollbar</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_hor_scrollbar</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_tabline</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_tabmenu</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_exmode</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_colon</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_ctrlg</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_ctrlh</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_clear</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_ctrlo</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_hat</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_Zet</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_ident</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_tagpop</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_scroll</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_right</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_left</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_up</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_down</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_end</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_dollar</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_search</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_next</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>normal_search</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>wrapped</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_csearch</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_brackets</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_percent</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_brace</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_mark</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_findpar</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_undo</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_kundo</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_Replace</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_replace</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_cursormark</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>v_visop</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_subst</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_abbrev</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_optrans</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_gomark</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_pcmark</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_regname</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_visual</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>n_start_visual_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_window</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_suspend</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_g_cmd</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_dot</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_redo</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_Undo</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_tilde</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_operator</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_op_var</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>optype</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_lineop</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_home</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_pipe</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_bck_word</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_wordcmd</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_beginline</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>adjust_cursor</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>adjust_for_sel</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_select</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_goto</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_normal</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_esc</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_edit</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>invoke_edit</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startln</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEXTOBJ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_object</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_record</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_at</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_halfpage</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_join</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_put</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_put_opt</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fix_indent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_open</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_nbcmd</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_drop</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nv_cursorhold</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>e_noident</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E349: No identifier under cursor"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>nv_func_T</name>)<parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_NCH</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_NCH_NOP</name></cpp:macro> <cpp:value>(0x02|NV_NCH)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_NCH_ALW</name></cpp:macro> <cpp:value>(0x04|NV_NCH)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_LANG</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_SS</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_SSS</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_STS</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_RL</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_KEEPREG</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_NCW</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define> 

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>nv_cmd</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>cmd_char</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>nv_func_T</name></type> <name>cmd_func</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short_u</name></type> <name>cmd_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name></type> <name>cmd_arg</name></decl>;</decl_stmt> 

}</block> <decl><name><name>nv_cmds</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><name>NUL</name></expr>, <expr><name>nv_error</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_A</name></expr>, <expr><name>nv_addsub</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_B</name></expr>, <expr><name>nv_page</name></expr>, <expr><name>NV_STS</name></expr>, <expr><name>BACKWARD</name></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_C</name></expr>, <expr><name>nv_esc</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TRUE</name></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_D</name></expr>, <expr><name>nv_halfpage</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_E</name></expr>, <expr><name>nv_scroll_line</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TRUE</name></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_F</name></expr>, <expr><name>nv_page</name></expr>, <expr><name>NV_STS</name></expr>, <expr><name>FORWARD</name></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_G</name></expr>, <expr><name>nv_ctrlg</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_H</name></expr>, <expr><name>nv_ctrlh</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_I</name></expr>, <expr><name>nv_pcmark</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>NL</name></expr>, <expr><name>nv_down</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_K</name></expr>, <expr><name>nv_error</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_L</name></expr>, <expr><name>nv_clear</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>CAR</name></expr>, <expr><name>nv_down</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TRUE</name></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_N</name></expr>, <expr><name>nv_down</name></expr>, <expr><name>NV_STS</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_O</name></expr>, <expr><name>nv_ctrlo</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_P</name></expr>, <expr><name>nv_up</name></expr>, <expr><name>NV_STS</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_Q</name></expr>, <expr><name>nv_visual</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_R</name></expr>, <expr><name>nv_redo</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_S</name></expr>, <expr><name>nv_ignore</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_T</name></expr>, <expr><name>nv_tagpop</name></expr>, <expr><name>NV_NCW</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_U</name></expr>, <expr><name>nv_halfpage</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_V</name></expr>, <expr><name>nv_visual</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'V'</literal></expr>, <expr><name>nv_visual</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'v'</literal></expr>, <expr><name>nv_visual</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_W</name></expr>, <expr><name>nv_window</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_X</name></expr>, <expr><name>nv_addsub</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_Y</name></expr>, <expr><name>nv_scroll_line</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_Z</name></expr>, <expr><name>nv_suspend</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>ESC</name></expr>, <expr><name>nv_esc</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_BSL</name></expr>, <expr><name>nv_normal</name></expr>, <expr><name>NV_NCH_ALW</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_RSB</name></expr>, <expr><name>nv_ident</name></expr>, <expr><name>NV_NCW</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl_HAT</name></expr>, <expr><name>nv_hat</name></expr>, <expr><name>NV_NCW</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>Ctrl__</name></expr>, <expr><name>nv_error</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">' '</literal></expr>, <expr><name>nv_right</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'!'</literal></expr>, <expr><name>nv_operator</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'"'</literal></expr>, <expr><name>nv_regname</name></expr>, <expr><name>NV_NCH_NOP</name><operator>|</operator><name>NV_KEEPREG</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'#'</literal></expr>, <expr><name>nv_ident</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'$'</literal></expr>, <expr><name>nv_dollar</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'%'</literal></expr>, <expr><name>nv_percent</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'&amp;'</literal></expr>, <expr><name>nv_optrans</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'\''</literal></expr>, <expr><name>nv_gomark</name></expr>, <expr><name>NV_NCH_ALW</name></expr>, <expr><name>TRUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'('</literal></expr>, <expr><name>nv_brace</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>BACKWARD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">')'</literal></expr>, <expr><name>nv_brace</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FORWARD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'*'</literal></expr>, <expr><name>nv_ident</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'+'</literal></expr>, <expr><name>nv_down</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TRUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">','</literal></expr>, <expr><name>nv_csearch</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TRUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'-'</literal></expr>, <expr><name>nv_up</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TRUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'.'</literal></expr>, <expr><name>nv_dot</name></expr>, <expr><name>NV_KEEPREG</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'/'</literal></expr>, <expr><name>nv_search</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'0'</literal></expr>, <expr><name>nv_beginline</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'1'</literal></expr>, <expr><name>nv_ignore</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'2'</literal></expr>, <expr><name>nv_ignore</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'3'</literal></expr>, <expr><name>nv_ignore</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'4'</literal></expr>, <expr><name>nv_ignore</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'5'</literal></expr>, <expr><name>nv_ignore</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'6'</literal></expr>, <expr><name>nv_ignore</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'7'</literal></expr>, <expr><name>nv_ignore</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'8'</literal></expr>, <expr><name>nv_ignore</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'9'</literal></expr>, <expr><name>nv_ignore</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">':'</literal></expr>, <expr><name>nv_colon</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">';'</literal></expr>, <expr><name>nv_csearch</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'&lt;'</literal></expr>, <expr><name>nv_operator</name></expr>, <expr><name>NV_RL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'='</literal></expr>, <expr><name>nv_operator</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'&gt;'</literal></expr>, <expr><name>nv_operator</name></expr>, <expr><name>NV_RL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'?'</literal></expr>, <expr><name>nv_search</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'@'</literal></expr>, <expr><name>nv_at</name></expr>, <expr><name>NV_NCH_NOP</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'A'</literal></expr>, <expr><name>nv_edit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'B'</literal></expr>, <expr><name>nv_bck_word</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'C'</literal></expr>, <expr><name>nv_abbrev</name></expr>, <expr><name>NV_KEEPREG</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'D'</literal></expr>, <expr><name>nv_abbrev</name></expr>, <expr><name>NV_KEEPREG</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'E'</literal></expr>, <expr><name>nv_wordcmd</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TRUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'F'</literal></expr>, <expr><name>nv_csearch</name></expr>, <expr><name>NV_NCH_ALW</name><operator>|</operator><name>NV_LANG</name></expr>, <expr><name>BACKWARD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'G'</literal></expr>, <expr><name>nv_goto</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TRUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'H'</literal></expr>, <expr><name>nv_scroll</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'I'</literal></expr>, <expr><name>nv_edit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'J'</literal></expr>, <expr><name>nv_join</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'K'</literal></expr>, <expr><name>nv_ident</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'L'</literal></expr>, <expr><name>nv_scroll</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'M'</literal></expr>, <expr><name>nv_scroll</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'N'</literal></expr>, <expr><name>nv_next</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SEARCH_REV</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'O'</literal></expr>, <expr><name>nv_open</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'P'</literal></expr>, <expr><name>nv_put</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'Q'</literal></expr>, <expr><name>nv_exmode</name></expr>, <expr><name>NV_NCW</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'R'</literal></expr>, <expr><name>nv_Replace</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'S'</literal></expr>, <expr><name>nv_subst</name></expr>, <expr><name>NV_KEEPREG</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'T'</literal></expr>, <expr><name>nv_csearch</name></expr>, <expr><name>NV_NCH_ALW</name><operator>|</operator><name>NV_LANG</name></expr>, <expr><name>BACKWARD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'U'</literal></expr>, <expr><name>nv_Undo</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'W'</literal></expr>, <expr><name>nv_wordcmd</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TRUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'X'</literal></expr>, <expr><name>nv_abbrev</name></expr>, <expr><name>NV_KEEPREG</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'Y'</literal></expr>, <expr><name>nv_abbrev</name></expr>, <expr><name>NV_KEEPREG</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'Z'</literal></expr>, <expr><name>nv_Zet</name></expr>, <expr><name>NV_NCH_NOP</name><operator>|</operator><name>NV_NCW</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'['</literal></expr>, <expr><name>nv_brackets</name></expr>, <expr><name>NV_NCH_ALW</name></expr>, <expr><name>BACKWARD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'\\'</literal></expr>, <expr><name>nv_error</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">']'</literal></expr>, <expr><name>nv_brackets</name></expr>, <expr><name>NV_NCH_ALW</name></expr>, <expr><name>FORWARD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'^'</literal></expr>, <expr><name>nv_beginline</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'_'</literal></expr>, <expr><name>nv_lineop</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'`'</literal></expr>, <expr><name>nv_gomark</name></expr>, <expr><name>NV_NCH_ALW</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'a'</literal></expr>, <expr><name>nv_edit</name></expr>, <expr><name>NV_NCH</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'b'</literal></expr>, <expr><name>nv_bck_word</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'c'</literal></expr>, <expr><name>nv_operator</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'d'</literal></expr>, <expr><name>nv_operator</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'e'</literal></expr>, <expr><name>nv_wordcmd</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'f'</literal></expr>, <expr><name>nv_csearch</name></expr>, <expr><name>NV_NCH_ALW</name><operator>|</operator><name>NV_LANG</name></expr>, <expr><name>FORWARD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'g'</literal></expr>, <expr><name>nv_g_cmd</name></expr>, <expr><name>NV_NCH_ALW</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'h'</literal></expr>, <expr><name>nv_left</name></expr>, <expr><name>NV_RL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'i'</literal></expr>, <expr><name>nv_edit</name></expr>, <expr><name>NV_NCH</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'j'</literal></expr>, <expr><name>nv_down</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'k'</literal></expr>, <expr><name>nv_up</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'l'</literal></expr>, <expr><name>nv_right</name></expr>, <expr><name>NV_RL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'m'</literal></expr>, <expr><name>nv_mark</name></expr>, <expr><name>NV_NCH_NOP</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'n'</literal></expr>, <expr><name>nv_next</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'o'</literal></expr>, <expr><name>nv_open</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'p'</literal></expr>, <expr><name>nv_put</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'q'</literal></expr>, <expr><name>nv_record</name></expr>, <expr><name>NV_NCH</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'r'</literal></expr>, <expr><name>nv_replace</name></expr>, <expr><name>NV_NCH_NOP</name><operator>|</operator><name>NV_LANG</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'s'</literal></expr>, <expr><name>nv_subst</name></expr>, <expr><name>NV_KEEPREG</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'t'</literal></expr>, <expr><name>nv_csearch</name></expr>, <expr><name>NV_NCH_ALW</name><operator>|</operator><name>NV_LANG</name></expr>, <expr><name>FORWARD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'u'</literal></expr>, <expr><name>nv_undo</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'w'</literal></expr>, <expr><name>nv_wordcmd</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'x'</literal></expr>, <expr><name>nv_abbrev</name></expr>, <expr><name>NV_KEEPREG</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'y'</literal></expr>, <expr><name>nv_operator</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'z'</literal></expr>, <expr><name>nv_zet</name></expr>, <expr><name>NV_NCH_ALW</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'{'</literal></expr>, <expr><name>nv_findpar</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>BACKWARD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'|'</literal></expr>, <expr><name>nv_pipe</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'}'</literal></expr>, <expr><name>nv_findpar</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FORWARD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="char">'~'</literal></expr>, <expr><name>nv_tilde</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>POUND</name></expr>, <expr><name>nv_ident</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_MOUSEUP</name></expr>, <expr><name>nv_mousescroll</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MSCR_UP</name></expr>}</block></expr>,

<expr><block>{<expr><name>K_MOUSEDOWN</name></expr>, <expr><name>nv_mousescroll</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MSCR_DOWN</name></expr>}</block></expr>,

<expr><block>{<expr><name>K_MOUSELEFT</name></expr>, <expr><name>nv_mousescroll</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MSCR_LEFT</name></expr>}</block></expr>,

<expr><block>{<expr><name>K_MOUSERIGHT</name></expr>, <expr><name>nv_mousescroll</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MSCR_RIGHT</name></expr>}</block></expr>,

<expr><block>{<expr><name>K_LEFTMOUSE</name></expr>, <expr><name>nv_mouse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_LEFTMOUSE_NM</name></expr>, <expr><name>nv_mouse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_LEFTDRAG</name></expr>, <expr><name>nv_mouse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_LEFTRELEASE</name></expr>, <expr><name>nv_mouse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_LEFTRELEASE_NM</name></expr>, <expr><name>nv_mouse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_MOUSEMOVE</name></expr>, <expr><name>nv_mouse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_MIDDLEMOUSE</name></expr>, <expr><name>nv_mouse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_MIDDLEDRAG</name></expr>, <expr><name>nv_mouse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_MIDDLERELEASE</name></expr>, <expr><name>nv_mouse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_RIGHTMOUSE</name></expr>, <expr><name>nv_mouse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_RIGHTDRAG</name></expr>, <expr><name>nv_mouse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_RIGHTRELEASE</name></expr>, <expr><name>nv_mouse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_X1MOUSE</name></expr>, <expr><name>nv_mouse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_X1DRAG</name></expr>, <expr><name>nv_mouse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_X1RELEASE</name></expr>, <expr><name>nv_mouse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_X2MOUSE</name></expr>, <expr><name>nv_mouse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_X2DRAG</name></expr>, <expr><name>nv_mouse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_X2RELEASE</name></expr>, <expr><name>nv_mouse</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_IGNORE</name></expr>, <expr><name>nv_ignore</name></expr>, <expr><name>NV_KEEPREG</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_NOP</name></expr>, <expr><name>nv_nop</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_INS</name></expr>, <expr><name>nv_edit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_KINS</name></expr>, <expr><name>nv_edit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_BS</name></expr>, <expr><name>nv_ctrlh</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_UP</name></expr>, <expr><name>nv_up</name></expr>, <expr><name>NV_SSS</name><operator>|</operator><name>NV_STS</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_UP</name></expr>, <expr><name>nv_page</name></expr>, <expr><name>NV_SS</name></expr>, <expr><name>BACKWARD</name></expr>}</block></expr>,

<expr><block>{<expr><name>K_DOWN</name></expr>, <expr><name>nv_down</name></expr>, <expr><name>NV_SSS</name><operator>|</operator><name>NV_STS</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_DOWN</name></expr>, <expr><name>nv_page</name></expr>, <expr><name>NV_SS</name></expr>, <expr><name>FORWARD</name></expr>}</block></expr>,

<expr><block>{<expr><name>K_LEFT</name></expr>, <expr><name>nv_left</name></expr>, <expr><name>NV_SSS</name><operator>|</operator><name>NV_STS</name><operator>|</operator><name>NV_RL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_LEFT</name></expr>, <expr><name>nv_bck_word</name></expr>, <expr><name>NV_SS</name><operator>|</operator><name>NV_RL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_C_LEFT</name></expr>, <expr><name>nv_bck_word</name></expr>, <expr><name>NV_SSS</name><operator>|</operator><name>NV_RL</name><operator>|</operator><name>NV_STS</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_RIGHT</name></expr>, <expr><name>nv_right</name></expr>, <expr><name>NV_SSS</name><operator>|</operator><name>NV_STS</name><operator>|</operator><name>NV_RL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_RIGHT</name></expr>, <expr><name>nv_wordcmd</name></expr>, <expr><name>NV_SS</name><operator>|</operator><name>NV_RL</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><name>K_C_RIGHT</name></expr>, <expr><name>nv_wordcmd</name></expr>, <expr><name>NV_SSS</name><operator>|</operator><name>NV_RL</name><operator>|</operator><name>NV_STS</name></expr>, <expr><name>TRUE</name></expr>}</block></expr>,

<expr><block>{<expr><name>K_PAGEUP</name></expr>, <expr><name>nv_page</name></expr>, <expr><name>NV_SSS</name><operator>|</operator><name>NV_STS</name></expr>, <expr><name>BACKWARD</name></expr>}</block></expr>,

<expr><block>{<expr><name>K_KPAGEUP</name></expr>, <expr><name>nv_page</name></expr>, <expr><name>NV_SSS</name><operator>|</operator><name>NV_STS</name></expr>, <expr><name>BACKWARD</name></expr>}</block></expr>,

<expr><block>{<expr><name>K_PAGEDOWN</name></expr>, <expr><name>nv_page</name></expr>, <expr><name>NV_SSS</name><operator>|</operator><name>NV_STS</name></expr>, <expr><name>FORWARD</name></expr>}</block></expr>,

<expr><block>{<expr><name>K_KPAGEDOWN</name></expr>, <expr><name>nv_page</name></expr>, <expr><name>NV_SSS</name><operator>|</operator><name>NV_STS</name></expr>, <expr><name>FORWARD</name></expr>}</block></expr>,

<expr><block>{<expr><name>K_END</name></expr>, <expr><name>nv_end</name></expr>, <expr><name>NV_SSS</name><operator>|</operator><name>NV_STS</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><name>K_KEND</name></expr>, <expr><name>nv_end</name></expr>, <expr><name>NV_SSS</name><operator>|</operator><name>NV_STS</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_END</name></expr>, <expr><name>nv_end</name></expr>, <expr><name>NV_SS</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><name>K_C_END</name></expr>, <expr><name>nv_end</name></expr>, <expr><name>NV_SSS</name><operator>|</operator><name>NV_STS</name></expr>, <expr><name>TRUE</name></expr>}</block></expr>,

<expr><block>{<expr><name>K_HOME</name></expr>, <expr><name>nv_home</name></expr>, <expr><name>NV_SSS</name><operator>|</operator><name>NV_STS</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_KHOME</name></expr>, <expr><name>nv_home</name></expr>, <expr><name>NV_SSS</name><operator>|</operator><name>NV_STS</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_S_HOME</name></expr>, <expr><name>nv_home</name></expr>, <expr><name>NV_SS</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_C_HOME</name></expr>, <expr><name>nv_goto</name></expr>, <expr><name>NV_SSS</name><operator>|</operator><name>NV_STS</name></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><name>K_DEL</name></expr>, <expr><name>nv_abbrev</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_KDEL</name></expr>, <expr><name>nv_abbrev</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_UNDO</name></expr>, <expr><name>nv_kundo</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_HELP</name></expr>, <expr><name>nv_help</name></expr>, <expr><name>NV_NCW</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_F1</name></expr>, <expr><name>nv_help</name></expr>, <expr><name>NV_NCW</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_XF1</name></expr>, <expr><name>nv_help</name></expr>, <expr><name>NV_NCW</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_SELECT</name></expr>, <expr><name>nv_select</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>K_VER_SCROLLBAR</name></expr>, <expr><name>nv_ver_scrollbar</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_HOR_SCROLLBAR</name></expr>, <expr><name>nv_hor_scrollbar</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>K_TABLINE</name></expr>, <expr><name>nv_tabline</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_TABMENU</name></expr>, <expr><name>nv_tabmenu</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>K_F21</name></expr>, <expr><name>nv_nbcmd</name></expr>, <expr><name>NV_NCH_ALW</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>K_DROP</name></expr>, <expr><name>nv_drop</name></expr>, <expr><name>NV_STS</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><name>K_CURSORHOLD</name></expr>, <expr><name>nv_cursorhold</name></expr>, <expr><name>NV_KEEPREG</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>K_PS</name></expr>, <expr><name>nv_edit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV_CMDS_SIZE</name></cpp:macro> <cpp:value>(sizeof(nv_cmds) / sizeof(struct nv_cmd))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>short</name></type> <name><name>nv_cmd_idx</name><index>[<expr><name>NV_CMDS_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nv_max_linear</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>nv_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>nv_cmds</name><index>[<expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>short</name> <operator>*</operator><operator>)</operator><name>s1</name></expr>]</index></name><operator>.</operator><name>cmd_char</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>nv_cmds</name><index>[<expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>short</name> <operator>*</operator><operator>)</operator><name>s2</name></expr>]</index></name><operator>.</operator><name>cmd_char</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>-</operator><name>c1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>-</operator><name>c2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>c1</name> <operator>-</operator> <name>c2</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>init_normal_cmds</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>NV_CMDS_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nv_cmd_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nv_cmd_idx</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>NV_CMDS_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nv_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>NV_CMDS_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>nv_cmds</name><index>[<expr><name><name>nv_cmd_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>cmd_char</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>nv_max_linear</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>find_command</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cmdchar</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>top</name></decl>, <decl><type ref="prev"/><name>bot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdchar</name> <operator>&gt;=</operator> <literal type="number">0x100</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdchar</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cmdchar</name> <operator>=</operator> <operator>-</operator><name>cmdchar</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdchar</name> <operator>&lt;=</operator> <name>nv_max_linear</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>nv_cmd_idx</name><index>[<expr><name>cmdchar</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bot</name> <operator>=</operator> <name>nv_max_linear</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>NV_CMDS_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>bot</name> <operator>&lt;=</operator> <name>top</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>top</name> <operator>+</operator> <name>bot</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>nv_cmds</name><index>[<expr><name><name>nv_cmd_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>cmd_char</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdchar</name> <operator>==</operator> <name>c</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>nv_cmd_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdchar</name> <operator>&gt;</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bot</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>idx</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>normal_cmd</name><parameter_list>(

<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>toplevel</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>cmdarg_T</name></type> <name>ca</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctrl_w</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>old_col</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>need_flushbuf</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>pos_T</name></type> <name>old_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mapped_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_mapped_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>set_prevcount</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ca</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ca</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>oap</name></name> <operator>=</operator> <name>oap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>opcount</name></name> <operator>=</operator> <name>opcount</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURSOR_SHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>finish_op</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>finish_op</name> <operator>=</operator> <operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURSOR_SHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>finish_op</name> <operator>!=</operator> <name>c</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ui_cursor_shape</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>update_mouseshape</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>finish_op</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>opcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>set_prevcount</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>prev_opcount</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>oap</name><operator>-&gt;</operator><name>prev_count0</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>opcount</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>prev_opcount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>count0</name></name> <operator>=</operator> <name><name>oap</name><operator>-&gt;</operator><name>prev_count0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>prev_opcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>prev_count0</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mapped_len</name> <operator>=</operator> <call><name>typebuf_maplen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>NORMAL_BUSY</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ON_FLY_SCROLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dont_scroll</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>toplevel</name> <operator>&amp;&amp;</operator> <call><name>readbuf1_empty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_vcount_ca</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ca</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set_prevcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>safe_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LANGMAP_ADJUST</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>get_real_state</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>SELECTMODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>old_mapped_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>old_mapped_len</name>

<operator>||</operator> <operator>(</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>mapped_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>typebuf_maplen</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>old_mapped_len</name> <operator>=</operator> <call><name>typebuf_maplen</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_ZERO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name>

<operator>&amp;&amp;</operator> <name>VIsual_select</name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_isprintc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <name>NL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>CAR</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_KENTER</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ins_char_typebuf</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>msg_nowait</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>old_mapped_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_flushbuf</name> <operator>=</operator> <call><name>add_to_showcmd</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>getcount</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>VIsual_select</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<while>while <condition>( <expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'1'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>ca</name><operator>.</operator><name>count0</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <name>K_DEL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_KDEL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_DEL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_KDEL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>count0</name></name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>del_from_showcmd</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>count0</name></name> <operator>=</operator> <name><name>ca</name><operator>.</operator><name>count0</name></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>.</operator><name>count0</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>count0</name></name> <operator>=</operator> <literal type="number">999999999L</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>toplevel</name> <operator>&amp;&amp;</operator> <call><name>readbuf1_empty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_vcount_ca</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ca</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set_prevcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ctrl_w</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>allow_keys</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>no_zero_mapping</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>plain_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LANGMAP_ADJUST</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>no_zero_mapping</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ctrl_w</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>allow_keys</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_flushbuf</name> <operator>|=</operator> <call><name>add_to_showcmd</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_W</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ctrl_w</name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ctrl_w</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>opcount</name></name> <operator>=</operator> <name><name>ca</name><operator>.</operator><name>count0</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>count0</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>allow_keys</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>plain_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>LANGMAP_ADJUST</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>allow_keys</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_flushbuf</name> <operator>|=</operator> <call><name>add_to_showcmd</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<goto>goto <name>getcount</name>;</goto> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_CURSORHOLD</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>prev_opcount</name></name> <operator>=</operator> <name><name>ca</name><operator>.</operator><name>opcount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>prev_count0</name></name> <operator>=</operator> <name><name>ca</name><operator>.</operator><name>count0</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>ca</name><operator>.</operator><name>opcount</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>.</operator><name>count0</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>count0</name></name> <operator>*=</operator> <name><name>ca</name><operator>.</operator><name>opcount</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>count0</name></name> <operator>=</operator> <name><name>ca</name><operator>.</operator><name>opcount</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>opcount</name></name> <operator>=</operator> <name><name>ca</name><operator>.</operator><name>count0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>count1</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>ca</name><operator>.</operator><name>count0</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>ca</name><operator>.</operator><name>count0</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>toplevel</name> <operator>&amp;&amp;</operator> <call><name>readbuf1_empty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_vcount</name><argument_list>(<argument><expr><name><name>ca</name><operator>.</operator><name>count0</name></name></expr></argument>, <argument><expr><name><name>ca</name><operator>.</operator><name>count1</name></name></expr></argument>, <argument><expr><name>set_prevcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ctrl_w</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>nchar</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>=</operator> <name>Ctrl_W</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>find_command</name><argument_list>(<argument><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>normal_end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>text_locked</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>nv_cmds</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>cmd_flags</name> <operator>&amp;</operator> <name>NV_NCW</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>text_locked_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>normal_end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>nv_cmds</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>cmd_flags</name> <operator>&amp;</operator> <name>NV_NCW</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>curbuf_locked</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>normal_end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>km_stopsel</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>nv_cmds</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>cmd_flags</name> <operator>&amp;</operator> <name>NV_STS</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_SHIFT</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>end_visual_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>km_startsel</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>nv_cmds</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>cmd_flags</name> <operator>&amp;</operator> <name>NV_SS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>unshift_special</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>find_command</name><argument_list>(<argument><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>normal_end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>nv_cmds</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>cmd_flags</name> <operator>&amp;</operator> <name>NV_SSS</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_SHIFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mod_mask</name> <operator>&amp;=</operator> <operator>~</operator><name>MOD_MASK_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name> <operator>&amp;&amp;</operator> <name>KeyTyped</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>KeyStuffed</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>nv_cmds</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>cmd_flags</name> <operator>&amp;</operator> <name>NV_RL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'l'</literal></expr>:</case> <expr_stmt><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>=</operator> <literal type="char">'h'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_RIGHT</name></expr>:</case> <expr_stmt><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>=</operator> <name>K_LEFT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_S_RIGHT</name></expr>:</case> <expr_stmt><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>=</operator> <name>K_S_LEFT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_C_RIGHT</name></expr>:</case> <expr_stmt><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>=</operator> <name>K_C_LEFT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'h'</literal></expr>:</case> <expr_stmt><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>=</operator> <literal type="char">'l'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_LEFT</name></expr>:</case> <expr_stmt><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>=</operator> <name>K_RIGHT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_S_LEFT</name></expr>:</case> <expr_stmt><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>=</operator> <name>K_S_RIGHT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_C_LEFT</name></expr>:</case> <expr_stmt><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>=</operator> <name>K_C_RIGHT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <expr_stmt><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> <expr_stmt><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>find_command</name><argument_list>(<argument><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>nv_cmds</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>cmd_flags</name> <operator>&amp;</operator> <name>NV_NCH</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>nv_cmds</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>cmd_flags</name> <operator>&amp;</operator> <name>NV_NCH_NOP</name><operator>)</operator> <operator>==</operator> <name>NV_NCH_NOP</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>nv_cmds</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>cmd_flags</name> <operator>&amp;</operator> <name>NV_NCH_ALW</name><operator>)</operator> <operator>==</operator> <name>NV_NCH_ALW</name>

<operator>||</operator> <operator>(</operator><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'q'</literal>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name>

<operator>&amp;&amp;</operator> <name>reg_recording</name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>reg_executing</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'a'</literal> <operator>||</operator> <name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'i'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name> <operator>||</operator> <name>VIsual_active</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>repl</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>lit</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>langmap_active</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>lang</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INPUT_METHOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>save_smd</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>++</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>allow_keys</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>did_cursorhold</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>nchar</name></name> <operator>=</operator> <call><name>plain_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LANGMAP_ADJUST</name><argument_list>(<argument><expr><name><name>ca</name><operator>.</operator><name>nchar</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_flushbuf</name> <operator>|=</operator> <call><name>add_to_showcmd</name><argument_list>(<argument><expr><name><name>ca</name><operator>.</operator><name>nchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>.</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'r'</literal> <operator>||</operator> <name><name>ca</name><operator>.</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <name><name>ca</name><operator>.</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'`'</literal>

<operator>||</operator> <name><name>ca</name><operator>.</operator><name>nchar</name></name> <operator>==</operator> <name>Ctrl_BSL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <operator>&amp;</operator><name><name>ca</name><operator>.</operator><name>extra_char</name></name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>.</operator><name>nchar</name></name> <operator>!=</operator> <literal type="char">'r'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>repl</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>repl</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <operator>&amp;</operator><name><name>ca</name><operator>.</operator><name>nchar</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>lang</name> <operator>=</operator> <operator>(</operator><name>repl</name> <operator>||</operator> <operator>(</operator><name><name>nv_cmds</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>cmd_flags</name> <operator>&amp;</operator> <name>NV_LANG</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>repl</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>REPLACE</name></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURSOR_SHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ui_cursor_shape</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lang</name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>==</operator> <name>B_IMODE_LMAP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>allow_keys</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>repl</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>LREPLACE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>LANGMAP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>langmap_active</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INPUT_METHOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>save_smd</name> <operator>=</operator> <name>p_smd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_smd</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>lang</name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>==</operator> <name>B_IMODE_IM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>im_set_active</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <call><name>plain_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>langmap_active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>allow_keys</name></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>NORMAL_BUSY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INPUT_METHOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>lang</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>!=</operator> <name>B_IMODE_LMAP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>im_save_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_iminsert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>im_set_active</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_smd</name> <operator>=</operator> <name>save_smd</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>NORMAL_BUSY</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_flushbuf</name> <operator>|=</operator> <call><name>add_to_showcmd</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lit</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIGRAPHS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <name>Ctrl_K</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>nv_cmds</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>cmd_flags</name> <operator>&amp;</operator> <name>NV_LANG</name><operator>)</operator>

<operator>||</operator> <name>cp</name> <operator>==</operator> <operator>&amp;</operator><name><name>ca</name><operator>.</operator><name>extra_char</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_DIGRAPH</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_digraph</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>del_from_showcmd</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_flushbuf</name> <operator>|=</operator> <call><name>add_to_showcmd</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>LANGMAP_ADJUST</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>, <argument><expr><operator>!</operator><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_hkmap</name> <operator>&amp;&amp;</operator> <name>lang</name> <operator>&amp;&amp;</operator> <name>KeyTyped</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <call><name>hkmap</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <operator>&amp;</operator><name><name>ca</name><operator>.</operator><name>extra_char</name></name>

<operator>&amp;&amp;</operator> <name><name>ca</name><operator>.</operator><name>nchar</name></name> <operator>==</operator> <name>Ctrl_BSL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ca</name><operator>.</operator><name>extra_char</name></name> <operator>==</operator> <name>Ctrl_N</name> <operator>||</operator> <name><name>ca</name><operator>.</operator><name>extra_char</name></name> <operator>==</operator> <name>Ctrl_G</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>=</operator> <name>Ctrl_BSL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>nchar</name></name> <operator>=</operator> <name><name>ca</name><operator>.</operator><name>extra_char</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>find_command</name><argument_list>(<argument><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>ca</name><operator>.</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <name><name>ca</name><operator>.</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'N'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>=</operator> <call><name>get_op_type</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <name>Ctrl_BSL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>towait</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>p_ttm</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>p_ttm</name></expr> </then><else>: <expr><name>p_tm</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>vpeekc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>towait</name> <operator>&gt;</operator> <literal type="number">0L</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>do_sleep</name><argument_list>(<argument><expr><ternary><condition><expr><name>towait</name> <operator>&gt;</operator> <literal type="number">50L</literal></expr> ?</condition><then> <expr><literal type="number">50L</literal></expr> </then><else>: <expr><name>towait</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>towait</name> <operator>-=</operator> <literal type="number">50L</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>plain_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>Ctrl_N</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>Ctrl_G</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>=</operator> <name>Ctrl_BSL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>nchar</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>find_command</name><argument_list>(<argument><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>no_mapping</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>lang</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>=</operator> <call><name>vpeekc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal> <operator>||</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><call><name>vpeekc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>plain_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>ca</name><operator>.</operator><name>ncharC1</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>ncharC1</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>ncharC2</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>++</operator><name>no_mapping</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>allow_keys</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>need_flushbuf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>!=</operator> <name>K_IGNORE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>did_cursorhold</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>.</operator><name>nchar</name></name> <operator>==</operator> <name>ESC</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>goto_im</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>normal_end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>!=</operator> <name>K_IGNORE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>km_startsel</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>nv_cmds</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>cmd_flags</name> <operator>&amp;</operator> <name>NV_SS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>start_selection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unshift_special</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>find_command</name><argument_list>(<argument><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>nv_cmds</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>cmd_flags</name> <operator>&amp;</operator> <name>NV_SSS</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_SHIFT</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>start_selection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mod_mask</name> <operator>&amp;=</operator> <operator>~</operator><name>MOD_MASK_SHIFT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <name><name>nv_cmds</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>cmd_arg</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name><name>nv_cmds</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>cmd_func</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>ca</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>finish_op</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>nv_cmds</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>cmd_flags</name> <operator>&amp;</operator> <name>NV_KEEPREG</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>regname</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>adjust_clip_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>set_reg_var</name><argument_list>(<argument><expr><name>regname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_mapped_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>old_mapped_len</name> <operator>=</operator> <call><name>typebuf_maplen</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>!=</operator> <name>K_IGNORE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_pending_operator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ca</name></expr></argument>, <argument><expr><name>old_col</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>(</operator><name>p_smd</name>

<operator>&amp;&amp;</operator> <name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>restart_edit</name> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><name>VIsual_active</name>

<operator>&amp;&amp;</operator> <name><name>old_pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name><name>old_pos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name><operator>)</operator>

<operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>clear_cmdline</name>

<operator>||</operator> <name>redraw_cmdline</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>msg_didout</name> <operator>||</operator> <operator>(</operator><name>msg_didany</name> <operator>&amp;&amp;</operator> <name>msg_scroll</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name>msg_nowait</name>

<operator>&amp;&amp;</operator> <name>KeyTyped</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>restart_edit</name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><name>VIsual_active</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>msg_scroll</name>

<operator>||</operator> <name>emsg_on_display</name><operator>)</operator><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ca</name><operator>.</operator><name>retval</name></name> <operator>&amp;</operator> <name>CA_COMMAND_BUSY</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>stuff_empty</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>typebuf_typed</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <name>emsg_silent</name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><name>did_wait_return</name>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_State</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>INSERT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>must_redraw</name> <operator>&amp;&amp;</operator> <name>keep_msg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>emsg_on_display</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>kmsg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>kmsg</name> <operator>=</operator> <name>keep_msg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>keep_msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keep_msg</name> <operator>=</operator> <name>kmsg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>kmsg</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>keep_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kmsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_attr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>kmsg</name></expr></argument>, <argument><expr><name>keep_msg_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>kmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURSOR_SHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ui_cursor_shape</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>cursor_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_scroll</name> <operator>||</operator> <name>emsg_on_display</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ui_delay</name><argument_list>(<argument><expr><literal type="number">1003L</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>ui_delay</name><argument_list>(<argument><expr><literal type="number">3003L</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>save_State</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>emsg_on_display</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>normal_end</name>:</label>

<expr_stmt><expr><name>msg_nowait</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURSOR_SHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>finish_op</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>finish_op</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURSOR_SHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>||</operator> <name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ui_cursor_shape</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>update_mouseshape</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>!=</operator> <name>K_CURSORHOLD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_showcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>checkpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>ca</name><operator>.</operator><name>searchbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mb_adjust_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scb</name></name> <operator>&amp;&amp;</operator> <name>toplevel</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>do_check_scrollbind</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_crb</name></name> <operator>&amp;&amp;</operator> <name>toplevel</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>do_check_cursorbind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>term_job_running</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_term</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>( <expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>restart_edit</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>old_mapped_len</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>

<operator>||</operator> <name>restart_VIsual_select</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ca</name><operator>.</operator><name>retval</name></name> <operator>&amp;</operator> <name>CA_COMMAND_BUSY</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>stuff_empty</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>restart_VIsual_select</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>VIsual_select</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>restart_VIsual_select</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>old_mapped_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>edit</name><argument_list>(<argument><expr><name>restart_edit</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>restart_VIsual_select</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>restart_VIsual_select</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>opcount</name> <operator>=</operator> <name><name>ca</name><operator>.</operator><name>opcount</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_vcount_ca</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>set_prevcount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>opcount</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>opcount</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>count</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_vcount</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><ternary><condition><expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>count</name></expr></else></ternary></expr></argument>, <argument><expr><operator>*</operator><name>set_prevcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>set_prevcount</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>check_visual_highlight</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>did_check</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>full_screen</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_check</name> <operator>&amp;&amp;</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_V</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Warning: terminal cannot highlight"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>did_check</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>end_visual_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>clip_star</name><operator>.</operator><name>available</name></name> <operator>&amp;&amp;</operator> <name><name>clip_star</name><operator>.</operator><name>owned</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clip_auto_select</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_dragging</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_mode</name></name> <operator>=</operator> <name>VIsual_mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_start</name></name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_end</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_curswant</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual_mode_eval</name></name> <operator>=</operator> <name>VIsual_mode</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>virtual_active</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>may_clear_cmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adjust_cursor_eol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>reset_VIsual_and_resel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>end_visual_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>reset_VIsual</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>end_visual_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>restore_visual_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode_orig</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_mode</name></name> <operator>=</operator> <name>VIsual_mode_orig</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_mode_orig</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>find_is_eval_item</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>colp</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bnp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">']'</literal> <operator>&amp;&amp;</operator> <name>dir</name> <operator>==</operator> <name>BACKWARD</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <name>dir</name> <operator>==</operator> <name>FORWARD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><operator>*</operator><name>bnp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bnp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <name>dir</name> <operator>==</operator> <name>BACKWARD</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">']'</literal> <operator>&amp;&amp;</operator> <name>dir</name> <operator>==</operator> <name>FORWARD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><operator>*</operator><name>bnp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><ternary><condition><expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal>

<operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><ternary><condition><expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>colp</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>find_ident_under_cursor</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>find_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>find_ident_at_pos</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>find_type</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>find_ident_at_pos</name><parameter_list>(

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>colnr_T</name></type> <name>startcol</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>text</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>textcol</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>find_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>this_class</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prevcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>find_type</name> <operator>&amp;</operator> <name>FIND_IDENT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>startcol</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>find_type</name> <operator>&amp;</operator> <name>FIND_EVAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>this_class</name> <operator>=</operator> <call><name>mb_get_class</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>this_class</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>this_class</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<while>while <condition>(<expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>!</operator><call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>find_type</name> <operator>&amp;</operator> <name>FIND_EVAL</name><operator>)</operator> <operator>||</operator> <name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>!=</operator> <literal type="char">']'</literal><operator>)</operator></expr>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>

<expr_stmt><expr><name>bn</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>find_type</name> <operator>&amp;</operator> <name>FIND_EVAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>this_class</name> <operator>=</operator> <call><name>mb_get_class</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>this_class</name> <operator>=</operator> <call><name>mb_get_class</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>this_class</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>prevcol</name> <operator>=</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_class</name> <operator>=</operator> <call><name>mb_get_class</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>prevcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>this_class</name> <operator>!=</operator> <name>prev_class</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name>prev_class</name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><name>find_type</name> <operator>&amp;</operator> <name>FIND_IDENT</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>find_type</name> <operator>&amp;</operator> <name>FIND_EVAL</name><operator>)</operator>

<operator>||</operator> <name>prevcol</name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>!</operator><call><name>find_is_eval_item</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>prevcol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prevcol</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bn</name></expr></argument>, <argument><expr><name>BACKWARD</name></expr></argument>)</argument_list></call><operator>)</operator></expr>

)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>prevcol</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>this_class</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>this_class</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>find_type</name> <operator>&amp;</operator> <name>FIND_STRING</name><operator>)</operator> <operator>||</operator> <name>this_class</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<while>while <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><operator>(</operator><operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>find_type</name> <operator>&amp;</operator> <name>FIND_IDENT</name><operator>)</operator>

<operator>||</operator> <operator>!</operator><call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>find_type</name> <operator>&amp;</operator> <name>FIND_EVAL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <call><name>find_is_eval_item</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bn</name></expr></argument>, <argument><expr><name>BACKWARD</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>col</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>find_type</name> <operator>&amp;</operator> <name>FIND_STRING</name><operator>)</operator> <operator>||</operator> <call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>has_mbyte</name></expr> ?</condition><then> <expr><name>this_class</name> <operator>!=</operator> <literal type="number">2</literal></expr> </then><else>: <expr><operator>!</operator><call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>find_type</name> <operator>&amp;</operator> <name>FIND_NOERROR</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>find_type</name> <operator>&amp;</operator> <name>FIND_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E348: No string under cursor"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noident</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>text</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textcol</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>textcol</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>startcol</name> <operator>-=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>this_class</name> <operator>=</operator> <call><name>mb_get_class</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>mb_get_class</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>this_class</name></expr>

</then><else>: <expr><call><name>mb_get_class</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>find_type</name> <operator>&amp;</operator> <name>FIND_EVAL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>startcol</name>

<operator>&amp;&amp;</operator> <call><name>find_is_eval_item</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bn</name></expr></argument>, <argument><expr><name>FORWARD</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<while>while <condition>(<expr><operator>(</operator><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><operator>(</operator><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></else></ternary><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>find_type</name> <operator>&amp;</operator> <name>FIND_EVAL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>startcol</name>

<operator>&amp;&amp;</operator> <call><name>find_is_eval_item</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bn</name></expr></argument>, <argument><expr><name>FORWARD</name></expr></argument>)</argument_list></call><operator>)</operator></expr>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>

<return>return <expr><name>col</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>prep_redo_cmd</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>prep_redo</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr></argument>,

<argument><expr><name>NUL</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>prep_redo</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>regname</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>num</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>cmd1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>cmd2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>cmd3</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>cmd4</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>cmd5</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ResetRedobuff</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>AppendCharToRedobuff</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AppendCharToRedobuff</name><argument_list>(<argument><expr><name>regname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AppendNumberToRedobuff</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd1</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AppendCharToRedobuff</name><argument_list>(<argument><expr><name>cmd1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd2</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AppendCharToRedobuff</name><argument_list>(<argument><expr><name>cmd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd3</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AppendCharToRedobuff</name><argument_list>(<argument><expr><name>cmd3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd4</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AppendCharToRedobuff</name><argument_list>(<argument><expr><name>cmd4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd5</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AppendCharToRedobuff</name><argument_list>(<argument><expr><name>cmd5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>checkclearop</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>checkclearopq</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>clearop</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>=</operator> <name>OP_NOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_force</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>use_reg_one</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>clearopbeep</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>unshift_special</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>K_S_RIGHT</name></expr>:</case> <expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <name>K_RIGHT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_S_LEFT</name></expr>:</case> <expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <name>K_LEFT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_S_UP</name></expr>:</case> <expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <name>K_UP</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_S_DOWN</name></expr>:</case> <expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <name>K_DOWN</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_S_HOME</name></expr>:</case> <expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <name>K_HOME</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_S_END</name></expr>:</case> <expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <name>K_END</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <call><name>simplify_key</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mod_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>may_clear_cmdline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mode_displayed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_showcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHOWCMD_BUFLEN</name></cpp:macro> <cpp:value>SHOWCMD_COLS + 1 + 30</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>showcmd_buf</name><index>[<expr><name>SHOWCMD_BUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>old_showcmd_buf</name><index>[<expr><name>SHOWCMD_BUFLEN</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>showcmd_is_clear</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>showcmd_visual</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>display_showcmd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>

<name>clear_showcmd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_sc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>char_avail</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cursor_bot</name> <init>= <expr><call><name>LT_POS</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>leftcol</name></decl>, <decl><type ref="prev"/><name>rightcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>top</name></decl>, <decl><type ref="prev"/><name>bot</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cursor_bot</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bot</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bot</name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name>bot</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>lines</name> <operator>=</operator> <name>bot</name> <operator>-</operator> <name>top</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>saved_sbr</name> <init>= <expr><name>p_sbr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>saved_w_sbr</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_sbr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_sbr</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_sbr</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>getvcols</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>VIsual</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>leftcol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rightcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p_sbr</name> <operator>=</operator> <name>saved_sbr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_sbr</name></name> <operator>=</operator> <name>saved_w_sbr</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>showcmd_buf</name></expr></argument>, <argument><expr><literal type="string">"%ldx%ld"</literal></expr></argument>, <argument><expr><name>lines</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>rightcol</name> <operator>-</operator> <name>leftcol</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <literal type="char">'V'</literal> <operator>||</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>showcmd_buf</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cursor_bot</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ml_get_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>VIsual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>ml_get_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ml_get_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>ml_get_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>VIsual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>p_sel</name> <operator>!=</operator> <literal type="char">'e'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>s</name> <operator>&lt;=</operator> <name>e</name></expr> </then><else>: <expr><name>s</name> <operator>&lt;</operator> <name>e</name></expr></else></ternary></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>chars</name></expr>;</expr_stmt>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytes</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>chars</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <name>chars</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>showcmd_buf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>showcmd_buf</name></expr></argument>, <argument><expr><literal type="string">"%d-%d"</literal></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>showcmd_buf</name><index>[<expr><name>SHOWCMD_COLS</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>showcmd_visual</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>showcmd_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>showcmd_visual</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>showcmd_is_clear</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>display_showcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>add_to_showcmd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extra_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>overflow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>ignore</name><index>[]</index></name> <init>=

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>K_VER_SCROLLBAR</name></expr>, <expr><name>K_HOR_SCROLLBAR</name></expr>,

<expr><name>K_LEFTMOUSE_NM</name></expr>, <expr><name>K_LEFTRELEASE_NM</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>K_IGNORE</name></expr>, <expr><name>K_PS</name></expr>,

<expr><name>K_LEFTMOUSE</name></expr>, <expr><name>K_LEFTDRAG</name></expr>, <expr><name>K_LEFTRELEASE</name></expr>, <expr><name>K_MOUSEMOVE</name></expr>,

<expr><name>K_MIDDLEMOUSE</name></expr>, <expr><name>K_MIDDLEDRAG</name></expr>, <expr><name>K_MIDDLERELEASE</name></expr>,

<expr><name>K_RIGHTMOUSE</name></expr>, <expr><name>K_RIGHTDRAG</name></expr>, <expr><name>K_RIGHTRELEASE</name></expr>,

<expr><name>K_MOUSEDOWN</name></expr>, <expr><name>K_MOUSEUP</name></expr>, <expr><name>K_MOUSELEFT</name></expr>, <expr><name>K_MOUSERIGHT</name></expr>,

<expr><name>K_X1MOUSE</name></expr>, <expr><name>K_X1DRAG</name></expr>, <expr><name>K_X1RELEASE</name></expr>, <expr><name>K_X2MOUSE</name></expr>, <expr><name>K_X2DRAG</name></expr>, <expr><name>K_X2RELEASE</name></expr>,

<expr><name>K_CURSORHOLD</name></expr>,

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_sc</name> <operator>||</operator> <name>msg_silent</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>showcmd_visual</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>showcmd_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>showcmd_visual</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ignore</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ignore</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>transchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"&lt;20&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>showcmd_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>extra_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>overflow</name> <operator>=</operator> <name>old_len</name> <operator>+</operator> <name>extra_len</name> <operator>-</operator> <name>SHOWCMD_COLS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>overflow</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>showcmd_buf</name></expr></argument>, <argument><expr><name>showcmd_buf</name> <operator>+</operator> <name>overflow</name></expr></argument>,

<argument><expr><name>old_len</name> <operator>-</operator> <name>overflow</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>showcmd_buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>char_avail</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>display_showcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>add_to_showcmd_c</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>add_to_showcmd</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>del_from_showcmd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>old_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_sc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>showcmd_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>old_len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>old_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>showcmd_buf</name><index>[<expr><name>old_len</name> <operator>-</operator> <name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>char_avail</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>display_showcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>push_showcmd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_sc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>old_showcmd_buf</name></expr></argument>, <argument><expr><name>showcmd_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>pop_showcmd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_sc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>showcmd_buf</name></expr></argument>, <argument><expr><name>old_showcmd_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>display_showcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>display_showcmd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cursor_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>showcmd_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>showcmd_is_clear</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>screen_puts</name><argument_list>(<argument><expr><name>showcmd_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sc_col</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>showcmd_is_clear</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>screen_puts</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sc_col</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>do_check_scrollbind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>check</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>win_T</name> <modifier>*</modifier></type><name>old_curwin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>old_topline</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_topfill</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>buf_T</name> <modifier>*</modifier></type><name>old_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>colnr_T</name></type> <name>old_leftcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>check</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_scb</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>did_syncbind</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>did_syncbind</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>curwin</name> <operator>==</operator> <name>old_curwin</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>old_buf</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_diff</name></name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>!=</operator> <name>old_topline</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>!=</operator> <name>old_topfill</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>!=</operator> <name>old_leftcol</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>check_scrollbind</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>-</operator> <name>old_topline</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>-</operator> <name>old_leftcol</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_sbo</name></expr></argument>, <argument><expr><literal type="char">'j'</literal></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>check_scrollbind</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_scbind_pos</name></name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_scbind_pos</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old_curwin</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_topline</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>old_topfill</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>old_buf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_leftcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>check_scrollbind</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>topline_diff</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>leftcol_diff</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>want_ver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>want_hor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>old_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>old_curbuf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_VIsual_select</name> <init>= <expr><name>VIsual_select</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_VIsual_active</name> <init>= <expr><name>VIsual_active</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>tgt_leftcol</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>topline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>want_ver</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_sbo</name></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>topline_diff</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>want_ver</name> <operator>|=</operator> <name><name>old_curwin</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>want_hor</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_sbo</name></expr></argument>, <argument><expr><literal type="char">'h'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>leftcol_diff</name> <operator>||</operator> <name>topline_diff</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_select</name> <operator>=</operator> <name>VIsual_active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>curwin</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>!=</operator> <name>old_curwin</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_scb</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>want_ver</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>old_curwin</name><operator>-&gt;</operator><name>w_p_diff</name></name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>diff_set_topline</name><argument_list>(<argument><expr><name>old_curwin</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_scbind_pos</name></name> <operator>+=</operator> <name>topline_diff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>topline</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_scbind_pos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>topline</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>topline</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>topline</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>topline</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>topline</name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>scrollup</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>scrolldown</name><argument_list>(<argument><expr><operator>-</operator><name>y</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cursor_correct</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>want_hor</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>!=</operator> <name>tgt_leftcol</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>=</operator> <name>tgt_leftcol</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>leftcol_changed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name>VIsual_select</name> <operator>=</operator> <name>old_VIsual_select</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>old_VIsual_active</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>old_curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>old_curbuf</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_ignore</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>retval</name></name> <operator>|=</operator> <name>CA_COMMAND_BUSY</name></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_nop</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier><name>cap</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_error</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_help</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkclearopq</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ex_help</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_addsub</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>bt_prompt</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>prompt_curpos_editable</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><operator>!</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>prep_redo_cmd</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>=</operator> <ternary><condition><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <name>Ctrl_A</name></expr> ?</condition><then> <expr><name>OP_NR_ADD</name></expr> </then><else>: <expr><name>OP_NR_SUB</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>op_addsub</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>=</operator> <name>OP_NOP</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_page</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkclearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_CTRL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <name>BACKWARD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>goto_tabpage</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>goto_tabpage</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>onepage</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_gd</name><parameter_list>(

<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nchar</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>thisblock</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>find_ident_under_cursor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>FIND_IDENT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>find_decl</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>nchar</name> <operator>==</operator> <literal type="char">'d'</literal></expr></argument>, <argument><expr><name>thisblock</name></expr></argument>, <argument><expr><name>SEARCH_START</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_SEARCH</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>KeyTyped</name> <operator>&amp;&amp;</operator> <name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>is_ident</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>incomment</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>instring</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>offset</name> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>instring</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>instring</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>instring</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>incomment</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>instring</name> <operator>=</operator> <name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>incomment</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>incomment</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>prev</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>incomment</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>prev</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>incomment</name> <operator>==</operator> <name>FALSE</name> <operator>&amp;&amp;</operator> <name>instring</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>find_decl</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>locally</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>thisblock</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags_arg</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>old_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>par_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>found_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_p_ws</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_p_scs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>incll</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>searchflags</name> <init>= <expr><name>flags_arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>valid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pat</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pat</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>vim_iswordp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"\\V\\&lt;%.*s\\&gt;"</literal></expr> </then><else>: <expr><literal type="string">"\\V%.*s"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>len</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_p_ws</name> <operator>=</operator> <name>p_ws</name></expr>;</expr_stmt>

<expr_stmt><expr><name>save_p_scs</name> <operator>=</operator> <name>p_scs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ws</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_scs</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>locally</name> <operator>||</operator> <operator>!</operator><call><name>findpar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>incll</name></expr></argument>, <argument><expr><name>BACKWARD</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>par_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>par_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR_POS</name><argument_list>(<argument><expr><operator>&amp;</operator><name>found_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>searchit</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FORWARD</name></expr></argument>,

<argument><expr><name>pat</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>searchflags</name></expr></argument>, <argument><expr><name>RE_LAST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name><name>old_pos</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>thisblock</name> <operator>&amp;&amp;</operator> <name>t</name> <operator>!=</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pos</name> <operator>=</operator> <call><name>findmatchlimit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>, <argument><expr><name>FM_FORWARD</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>old_pos</name><operator>.</operator><name>lnum</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>old_pos</name><operator>.</operator><name>lnum</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>found_pos</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>found_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_leader_len</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>is_ident</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid</name> <operator>&amp;&amp;</operator> <name><name>found_pos</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>found_pos</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>valid</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>locally</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>valid</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name><name>par_pos</name><operator>.</operator><name>lnum</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>found_pos</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>found_pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CLEAR_POS</name><argument_list>(<argument><expr><operator>&amp;</operator><name>found_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>found_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>searchflags</name> <operator>&amp;=</operator> <operator>~</operator><name>SEARCH_START</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>old_pos</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_search_dir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_ws</name> <operator>=</operator> <name>save_p_ws</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_scs</name> <operator>=</operator> <name>save_p_scs</name></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>nv_screengo</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>dist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>linelen</name> <init>= <expr><call><name>linetabsize</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>atend</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col_off1</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>col_off2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>width1</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>width2</name></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>==</operator> <name>MAXCOL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>col_off1</name> <operator>=</operator> <call><name>curwin_col_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col_off2</name> <operator>=</operator> <name>col_off1</name> <operator>-</operator> <call><name>curwin_col_off2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>width1</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>col_off1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>width2</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>col_off2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>atend</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>validate_virtcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width1</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>width1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name>

<operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>width2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>width2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>linelen</name> <operator>&gt;</operator> <name>width1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>linelen</name> <operator>-</operator> <name>width1</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>width2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>width2</name> <operator>+</operator> <name>width1</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>width1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>&gt;=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name>dist</name><operator>--</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>&gt;=</operator> <name>width1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>-=</operator> <name>width2</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_ALL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>linelen</name> <operator>=</operator> <call><name>linetabsize</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>linelen</name> <operator>&gt;</operator> <name>width1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>linelen</name> <operator>-</operator> <name>width1</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>width2</name><operator>)</operator>

<operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>width2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>linelen</name> <operator>&gt;</operator> <name>width1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>linelen</name> <operator>-</operator> <name>width1</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>width2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>width2</name> <operator>+</operator> <name>width1</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>width1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>+</operator> <name>width2</name> <operator>&lt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>+=</operator> <name>width2</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>%=</operator> <name>width2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>&gt;=</operator> <name>width1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>-=</operator> <name>width2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>linelen</name> <operator>=</operator> <call><name>linetabsize</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>virtual_active</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>atend</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name>MAXCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>virtcol</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>validate_virtcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>virtcol</name> <operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>width1</name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>get_showbreak_value</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>virtcol</name> <operator>-=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><call><name>get_showbreak_value</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>virtcol</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>&lt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>width1</name></expr>

?</condition><then> <expr><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>width1</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>-</operator> <name>width1</name><operator>)</operator> <operator>%</operator> <name>width2</name>

<operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>width2</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>atend</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>nv_scroll_line</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkclearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>scroll_redraw</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>scroll_redraw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>up</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>prev_topline</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>prev_topfill</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>prev_lnum</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>up</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>scrollup</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>scrolldown</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_scrolloff_value</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>cursor_correct</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor_moved</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_TOPLINE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>==</operator> <name>prev_topline</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>==</operator> <name>prev_topfill</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>up</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name>prev_lnum</name>

<operator>||</operator> <call><name>cursor_down</name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name>prev_lnum</name>

<operator>||</operator> <name>prev_topline</name> <operator>==</operator> <literal type="number">1L</literal>

<operator>||</operator> <call><name>cursor_up</name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>check_cursor_moved</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_TOPLINE</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name>prev_lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_zet</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nchar</name> <init>= <expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>long</name></type> <name>old_fdl</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_fen</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>undo</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>long</name></type> <name>siso</name> <init>= <expr><call><name>get_sidescrolloff_value</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><name>nchar</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>checkclearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>nchar</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ON_FLY_SCROLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dont_scroll</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>++</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>allow_keys</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>nchar</name> <operator>=</operator> <call><name>plain_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LANGMAP_ADJUST</name><argument_list>(<argument><expr><name>nchar</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>allow_keys</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>add_to_showcmd</name><argument_list>(<argument><expr><name>nchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>nchar</name> <operator>==</operator> <name>K_DEL</name> <operator>||</operator> <name>nchar</name> <operator>==</operator> <name>K_KDEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><name>nchar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>nchar</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>nchar</name> <operator>==</operator> <name>CAR</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>win_setheight</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>nchar</name> <operator>==</operator> <literal type="char">'l'</literal>

<operator>||</operator> <name>nchar</name> <operator>==</operator> <literal type="char">'h'</literal>

<operator>||</operator> <name>nchar</name> <operator>==</operator> <name>K_LEFT</name>

<operator>||</operator> <name>nchar</name> <operator>==</operator> <name>K_RIGHT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>=</operator> <ternary><condition><expr><name>n</name></expr> ?</condition><then> <expr><name>n</name> <operator>*</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr> </then><else>: <expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></else></ternary></expr>;</expr_stmt>

<goto>goto <name>dozet</name>;</goto>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>=</operator> <name>OP_NOP</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<label><name>dozet</name>:</label>

<if_stmt><if>if <condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>!=</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>!=</operator> <literal type="char">'F'</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"dcCoO"</literal></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>!=</operator> <literal type="char">'j'</literal> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>!=</operator> <literal type="char">'k'</literal>

<operator>&amp;&amp;</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<call><name>checkclearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"+\r\nt.z^-b"</literal></expr></argument>, <argument><expr><name>nchar</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>count0</name></name>

<operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>nchar</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>validate_botline</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<case>case <expr><name>NL</name></expr>:</case>

<case>case <expr><name>CAR</name></expr>:</case>

<case>case <expr><name>K_KENTER</name></expr>:</case>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><call><name>scroll_cursor_top</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_fraction</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'.'</literal></expr>:</case> <expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="char">'z'</literal></expr>:</case> <expr_stmt><expr><call><name>scroll_cursor_halfway</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_fraction</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'^'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>scroll_cursor_bot</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><call><name>scroll_cursor_bot</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_fraction</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'H'</literal></expr>:</case>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>*=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<case>case <expr><name>K_LEFT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>-=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>leftcol_changed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case> <expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>*=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<case>case <expr><name>K_RIGHT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>+=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>leftcol_changed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name>col</name> <operator>&gt;</operator> <name>siso</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>-=</operator> <name>siso</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>!=</operator> <name>col</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <call><name>curwin_col_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name>col</name> <operator>+</operator> <name>siso</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>col</name> <operator>+</operator> <name>siso</name> <operator>-</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>!=</operator> <name>col</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><call><name>foldManualAllowed</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>=</operator> <literal type="char">'f'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nchar</name> <operator>==</operator> <literal type="char">'F'</literal> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_FOLD</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>finish_op</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<case>case <expr><literal type="char">'D'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><call><name>foldManualAllowed</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>deleteFold</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>nchar</name> <operator>==</operator> <literal type="char">'D'</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'E'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><call><name>foldmethodIsManual</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearFolding</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_window_setting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>foldmethodIsMarker</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>deleteFold</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E352: Cannot erase folds with current 'foldmethod'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'N'</literal></expr>:</case> <expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> <expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name> <operator>=</operator> <operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>openFold</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>closeFold</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'A'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>openFoldRecurse</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>closeFoldRecurse</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'o'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>openFold</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'O'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>openFoldRecurse</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>closeFold</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>closeFoldRecurse</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case> <expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case> <expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_foldinvalid</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>newFoldLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'X'</literal></expr>:</case> <expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_foldinvalid</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>old_fdl</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name> <operator>-=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old_fdl</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'M'</literal></expr>:</case> <expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>old_fdl</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name> <operator>+=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>getDeepestNesting</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name> <operator>&gt;=</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'R'</literal></expr>:</case> <expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name> <operator>=</operator> <call><name>getDeepestNesting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_fdl</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case> 

<case>case <expr><literal type="char">'k'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><name>foldMoveTo</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><ternary><condition><expr><name>nchar</name> <operator>==</operator> <literal type="char">'j'</literal></expr> ?</condition><then> <expr><name>FORWARD</name></expr> </then><else>: <expr><name>BACKWARD</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'u'</literal></expr>:</case> 

<expr_stmt><expr><operator>++</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>allow_keys</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>nchar</name> <operator>=</operator> <call><name>plain_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LANGMAP_ADJUST</name><argument_list>(<argument><expr><name>nchar</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>no_mapping</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>allow_keys</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>add_to_showcmd</name><argument_list>(<argument><expr><name>nchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"gGwW"</literal></expr></argument>, <argument><expr><name>nchar</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>undo</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<case>case <expr><literal type="char">'g'</literal></expr>:</case> 

<case>case <expr><literal type="char">'w'</literal></expr>:</case> 

<case>case <expr><literal type="char">'G'</literal></expr>:</case> 

<case>case <expr><literal type="char">'W'</literal></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>checkclearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <call><name>get_visual_text</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>emsg_off</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>spell_move_to</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>FORWARD</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>emsg_off</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&lt;=</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>=</operator> <call><name>find_ident_under_cursor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>,

<argument><expr><name>FIND_IDENT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>spell_add_word</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><ternary><condition><expr><name>nchar</name> <operator>==</operator> <literal type="char">'w'</literal> <operator>||</operator> <name>nchar</name> <operator>==</operator> <literal type="char">'W'</literal></expr>

?</condition><then> <expr><name>SPELL_ADD_BAD</name></expr> </then><else>: <expr><name>SPELL_ADD_GOOD</name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>nchar</name> <operator>==</operator> <literal type="char">'G'</literal> <operator>||</operator> <name>nchar</name> <operator>==</operator> <literal type="char">'W'</literal><operator>)</operator></expr>

?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></else></ternary></expr></argument>,

<argument><expr><name>undo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'='</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkclearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>spell_suggest</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default> <expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>old_fen</name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>foldmethodIsDiff</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_scb</name></name></expr>)</condition>

<block>{<block_content>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <call><name>foldmethodIsDiff</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_scb</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fen</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_fen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_window_setting_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>changed_window_setting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_fdl</name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_fdl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>newFoldLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_ver_scrollbar</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_do_scroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_hor_scrollbar</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_do_horiz_scroll</name><argument_list>(<argument><expr><name>scrollbar_value</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_tabline</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>goto_tabpage</name><argument_list>(<argument><expr><name>current_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_tabmenu</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>handle_tabmenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>handle_tabmenu</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>current_tabmenu</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>TABLINE_MENU_CLOSE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>current_tab</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"tabclose"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><literal type="string">"tabclose %d"</literal></expr></argument>,

<argument><expr><name>current_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>TABLINE_MENU_NEW</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>current_tab</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"$tabnew"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><literal type="string">"%dtabnew"</literal></expr></argument>,

<argument><expr><name>current_tab</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>TABLINE_MENU_OPEN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>current_tab</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"browse $tabnew"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><literal type="string">"browse %dtabnew"</literal></expr></argument>,

<argument><expr><name>current_tab</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_exmode</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_beep</name><argument_list>(<argument><expr><name>BO_EX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>checkclearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_exmode</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_colon</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>old_p_im</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmd_result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>stuffReadbuff</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">",.+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stuffnumReadbuff</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>-</operator> <literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>KeyTyped</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>compute_cmdrow</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_p_im</name> <operator>=</operator> <name>p_im</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd_result</name> <operator>=</operator> <call><name>do_cmdline</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>getexline</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name></expr> ?</condition><then> <expr><name>DOCMD_KEEPLINE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_im</name> <operator>!=</operator> <name>old_p_im</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_im</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd_result</name> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator>

<operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

<operator>||</operator> <name>did_emsg</name>

<operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_ctrlg</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>VIsual_select</name> <operator>=</operator> <operator>!</operator><name>VIsual_select</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>checkclearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fileinfo</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_ctrlh</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>VIsual_select</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>v_visop</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nv_left</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_clear</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkclearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BEOS__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>USE_THREAD_FOR_INPUT_WITH_TIMEOUT</name></expr></cpp:if>

<expr_stmt><expr><call><name>ui_get_shellsize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>syn_stack_free_all</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_slow</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>resize_console_buf</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_ctrlo</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>VIsual_select</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>VIsual_select</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>restart_VIsual_select</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>=</operator> <operator>-</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_pcmark</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_hat</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkclearopq</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>buflist_getfile</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>,

<argument><expr><name>GETF_SETMARK</name><operator>|</operator><name>GETF_ALT</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_Zet</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkclearopq</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case> <expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case> <expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"q!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>do_nv_ident</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>oparg_T</name></type> <name>oa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cmdarg_T</name></type> <name>ca</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clear_oparg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ca</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ca</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>oap</name></name> <operator>=</operator> <operator>&amp;</operator><name>oa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>cmdchar</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>nchar</name></name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_ident</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_ident</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>buflen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>kp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>kp_help</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>kp_ex</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cmdchar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>g_cmd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tag_cmd</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>aux_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>isman</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>isman_s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>cmdchar</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g_cmd</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>cmdchar</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g_cmd</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdchar</name> <operator>==</operator> <name>POUND</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>cmdchar</name> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdchar</name> <operator>==</operator> <literal type="char">']'</literal> <operator>||</operator> <name>cmdchar</name> <operator>==</operator> <name>Ctrl_RSB</name> <operator>||</operator> <name>cmdchar</name> <operator>==</operator> <literal type="char">'K'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <call><name>get_visual_text</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>checkclearopq</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>n</name> <operator>=</operator> <call><name>find_ident_under_cursor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>cmdchar</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <name>cmdchar</name> <operator>==</operator> <literal type="char">'#'</literal><operator>)</operator></expr>

?</condition><then> <expr><name>FIND_IDENT</name><operator>|</operator><name>FIND_STRING</name></expr> </then><else>: <expr><name>FIND_IDENT</name></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>kp</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_kp</name></name> <operator>==</operator> <name>NUL</name></expr> ?</condition><then> <expr><name>p_kp</name></expr> </then><else>: <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_kp</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>kp_help</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>kp</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>kp</name></expr></argument>, <argument><expr><literal type="string">":he"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>kp</name></expr></argument>, <argument><expr><literal type="string">":help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kp_help</name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noident</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>kp_ex</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>kp</name> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>kp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>cmdchar</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <call><name>ml_get_curline</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_cmd</name> <operator>&amp;&amp;</operator> <call><name>vim_iswordp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>no_smartcase</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><literal type="char">'K'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>kp_help</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"he! "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>kp_ex</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%s %ld"</literal></expr></argument>,

<argument><expr><name>kp</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_noident</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>isman</name> <operator>=</operator> <operator>(</operator><call><name>STRCMP</name><argument_list>(<argument><expr><name>kp</name></expr></argument>, <argument><expr><literal type="string">"man"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>isman_s</name> <operator>=</operator> <operator>(</operator><call><name>STRCMP</name><argument_list>(<argument><expr><name>kp</name></expr></argument>, <argument><expr><literal type="string">"man -s"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>isman</name> <operator>||</operator> <name>isman_s</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">".,.+%ld"</literal></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"! "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>isman_s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"man"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>kp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>isman</name> <operator>||</operator> <name>isman_s</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">']'</literal></expr>:</case>

<expr_stmt><expr><name>tag_cmd</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CSCOPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_cst</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cstag "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"ts "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>tag_cmd</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_help</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"he! "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>g_cmd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"tj "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ldta "</literal></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>cmdchar</name> <operator>==</operator> <literal type="char">'K'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>kp_help</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>kp_ex</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave_fnameescape</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave_shellescape</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>newbuf</name> <operator>=</operator> <call><name>vim_realloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>newbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cmdchar</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>aux_ptr</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>p_magic</name></expr> ?</condition><then> <expr><literal type="string">"/.*~[^$\\"</literal></expr> </then><else>: <expr><literal type="string">"/^$\\"</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>cmdchar</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>aux_ptr</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>p_magic</name></expr> ?</condition><then> <expr><literal type="string">"/?.*~[^$\\"</literal></expr> </then><else>: <expr><literal type="string">"/?^$\\"</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>tag_cmd</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_help</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>aux_ptr</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>aux_ptr</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\|\"\n["</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>aux_ptr</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\|\"\n*?["</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>aux_ptr</name></expr></argument>, <argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>--</operator><name>n</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdchar</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <name>cmdchar</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_cmd</name> <operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>has_mbyte</name></expr>

?</condition><then> <expr><call><name>vim_iswordp</name><argument_list>(<argument><expr><call><name>mb_prevptr</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_history</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_history</name><argument_list>(<argument><expr><name>HIST_SEARCH</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>normal_search</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><ternary><condition><expr><name>cmdchar</name> <operator>==</operator> <literal type="char">'*'</literal></expr> ?</condition><then> <expr><literal type="char">'/'</literal></expr> </then><else>: <expr><literal type="char">'?'</literal></expr></else></ternary></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>g_tag_at_cursor</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g_tag_at_cursor</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>get_visual_text</name><parameter_list>(

<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>!=</operator> <literal type="char">'V'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>unadjust_for_sel</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>VIsual</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cap</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>LT_POS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>VIsual</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <call><name>ml_get_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <call><name>ml_get_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>VIsual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name><name>VIsual</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><operator>*</operator><name>pp</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>lenp</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>reset_VIsual_and_resel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_tagpop</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkclearopq</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_tag</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><name>DT_POP</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_scroll</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>used</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>half</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MLINE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>validate_botline</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</condition> <incr><expr><operator>--</operator><name>n</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>used</name> <operator>-=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call>

<operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>validate_botline</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>half</name> <operator>=</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_empty_rows</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>+</operator> <name>n</name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>used</name> <operator>+</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name>

<operator>+</operator> <name>n</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>half</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>used</name> <operator>+=</operator> <call><name>plines</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>used</name> <operator>&gt;=</operator> <name>half</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>lnum</name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>used</name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>lnum</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>lnum</name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cursor_correct</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_SOL</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_right</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>past_line</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <operator>(</operator><name>MOD_MASK_SHIFT</name> <operator>|</operator> <name>MOD_MASK_CTRL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_CTRL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>nv_wordcmd</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>past_line</name> <operator>=</operator> <operator>(</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_sel</name> <operator>!=</operator> <literal type="char">'o'</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>virtual_active</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>past_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>n</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>past_line</name> <operator>&amp;&amp;</operator> <call><name>oneright</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>past_line</name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>ml_get_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>

)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">' '</literal>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_ww</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'l'</literal>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_ww</name></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <name>K_RIGHT</name>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_ww</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>LINEEMPTY</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LINEEMPTY</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>past_line</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>virtual_active</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oneright</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><call><name>ml_get_cursor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_HOR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>KeyTyped</name>

<operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_left</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <operator>(</operator><name>MOD_MASK_SHIFT</name> <operator>|</operator> <name>MOD_MASK_CTRL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_CTRL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>nv_bck_word</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>n</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>oneleft</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <name>K_BS</name>

<operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <name>Ctrl_H</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_ww</name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'h'</literal>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_ww</name></expr></argument>, <argument><expr><literal type="char">'h'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <name>K_LEFT</name>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_ww</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>MAXCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_DELETE</name>

<operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_CHANGE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>LINEEMPTY</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>ml_get_cursor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>retval</name></name> <operator>|=</operator> <name>CA_NO_ADJ_OP_END</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_HOR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>KeyTyped</name>

<operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_up</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_SHIFT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>BACKWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_page</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MLINE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cursor_up</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_down</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_SHIFT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>FORWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_page</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><call><name>bt_quickfix</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <name>CAR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>qf_view_result</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <name>CAR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cmdwin_result</name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><call><name>bt_prompt</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <name>CAR</name>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>invoke_prompt_callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MLINE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cursor_down</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_gotofile</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>text_locked</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>text_locked_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>curbuf_locked</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>grab_file_name</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>curbufIsChanged</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>buf_hide</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>autowrite</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>do_ecmd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ECMD_LAST</name></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>buf_hide</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ECMD_HIDE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name>

<operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'F'</literal> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor_lnum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_SOL</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_end</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name> <operator>||</operator> <operator>(</operator><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_CTRL</name><operator>)</operator></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_goto</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>nv_dollar</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_dollar</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>virtual_active</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name>

<operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>cursor_down</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_HOR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>KeyTyped</name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_search</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name> <init>= <expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>save_cursor</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'?'</literal> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_ROT13</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <literal type="char">'g'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>searchbuf</name></name> <operator>=</operator> <call><name>getcmdline</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>searchbuf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>normal_search</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>searchbuf</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name> <operator>||</operator> <operator>!</operator><call><name>EQUAL_POS</name><argument_list>(<argument><expr><name>save_cursor</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>

?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>SEARCH_MARK</name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_next</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>old</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wrapped</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>normal_search</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SEARCH_MARK</name> <operator>|</operator> <name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wrapped</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>wrapped</name> <operator>&amp;&amp;</operator> <call><name>EQUAL_POS</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>normal_search</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SEARCH_MARK</name> <operator>|</operator> <name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>normal_search</name><parameter_list>(

<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>wrapped</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>searchit_arg_T</name></type> <name>sia</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>use_reg_one</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sia</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sia</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>do_search</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>,

<argument><expr><name>opt</name> <operator>|</operator> <name>SEARCH_OPT</name> <operator>|</operator> <name>SEARCH_ECHO</name> <operator>|</operator> <name>SEARCH_MSG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sia</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wrapped</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>wrapped</name> <operator>=</operator> <name><name>sia</name><operator>.</operator><name>sa_wrapped</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MLINE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_SEARCH</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>KeyTyped</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_csearch</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t_cmd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'T'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>t_cmd</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>t_cmd</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>searchc</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><name>t_cmd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>TAB</name> <operator>&amp;&amp;</operator> <call><name>virtual_active</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <name>FORWARD</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>t_cmd</name> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>scol</name></decl>, <decl><type ref="prev"/><name>ecol</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <name>ecol</name> <operator>-</operator> <name>scol</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>adjust_for_sel</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_HOR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>KeyTyped</name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_brackets</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>new_pos</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>prev_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pos_T</name></type> <name>old_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>findc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nv_gotofile</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"iI\005dD\067"</literal></expr></argument>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<argument><expr><literal type="string">"iI\011dD\004"</literal></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>find_ident_under_cursor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>FIND_IDENT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>find_pattern_in_path</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>!</operator><call><name>isupper</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><literal type="char">'d'</literal> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>FIND_DEFINE</name></expr> </then><else>: <expr><name>FIND_ANY</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>isupper</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ACTION_SHOW_ALL</name></expr> </then><else>:

<expr><ternary><condition><expr><call><name>islower</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ACTION_SHOW</name></expr> </then><else>: <expr><name>ACTION_GOTO</name></expr></else></ternary></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">']'</literal></expr> ?</condition><then> <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>MAXLNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>( <expr><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'['</literal>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"{(*/#mM"</literal></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">']'</literal>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"})*/#mM"</literal></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>prev_pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>findc</name> <operator>=</operator> <literal type="char">'{'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>findc</name> <operator>=</operator> <literal type="char">'}'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">9999</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>findc</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>n</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pos</name> <operator>=</operator> <call><name>findmatchlimit</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>, <argument><expr><name>findc</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'['</literal><operator>)</operator></expr> ?</condition><then> <expr><name>FM_BACKWARD</name></expr> </then><else>: <expr><name>FM_FORWARD</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>new_pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>!=</operator> <literal type="char">'m'</literal> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>!=</operator> <literal type="char">'M'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>&amp;</operator><name>new_pos</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_pos</name> <operator>=</operator> <name>new_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_pos</name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>old_pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>norm</name> <init>= <expr><operator>(</operator><operator>(</operator><name>findc</name> <operator>==</operator> <literal type="char">'{'</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'m'</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prev_pos</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>&amp;</operator><name>prev_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>prev_pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>norm</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><name>findc</name> <operator>==</operator> <literal type="char">'{'</literal></expr> ?</condition><then> <expr><call><name>dec_cursor</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>inc_cursor</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'{'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <name>findc</name> <operator>&amp;&amp;</operator> <name>norm</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>n</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>norm</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>new_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>&amp;</operator><name>new_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>new_pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>new_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>&amp;</operator><name>new_pos</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>pos</name> <operator>=</operator> <call><name>findmatchlimit</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>, <argument><expr><name>findc</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'['</literal><operator>)</operator></expr> ?</condition><then> <expr><name>FM_BACKWARD</name></expr> </then><else>: <expr><name>FM_FORWARD</name></expr></else></ternary></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>old_pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>new_pos</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_BLOCK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>KeyTyped</name>

<operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'['</literal> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="char">'{'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="char">'}'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>findpar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name>

<operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <name>FORWARD</name> <operator>&amp;&amp;</operator> <name>flag</name> <operator>==</operator> <literal type="char">'{'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_BLOCK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>KeyTyped</name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'p'</literal> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>nv_put_opt</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'`'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>n</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>prev_pos</name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>getnextmark</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'['</literal></expr> ?</condition><then> <expr><name>BACKWARD</name></expr> </then><else>: <expr><name>FORWARD</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>&amp;</operator><name>prev_pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>nv_cursormark</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'\''</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>&gt;=</operator> <name>K_RIGHTRELEASE</name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>&lt;=</operator> <name>K_LEFTMOUSE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_mouse</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">']'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>FORWARD</name></expr> </then><else>: <expr><name>BACKWARD</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name>PUT_FIXINDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'z'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>foldMoveTo</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">']'</literal></expr> ?</condition><then> <expr><name>FORWARD</name></expr> </then><else>: <expr><name>BACKWARD</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>diff_move_to</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">']'</literal></expr> ?</condition><then> <expr><name>FORWARD</name></expr> </then><else>: <expr><name>BACKWARD</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>spell_move_to</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">']'</literal></expr> ?</condition><then> <expr><name>FORWARD</name></expr> </then><else>: <expr><name>BACKWARD</name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'s'</literal></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_SEARCH</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>KeyTyped</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_percent</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MLINE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>&gt;</operator> <literal type="number">1000000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">99L</literal><operator>)</operator>

<operator>/</operator> <literal type="number">100L</literal> <operator>*</operator> <name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>*</operator>

<name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>+</operator> <literal type="number">99L</literal><operator>)</operator> <operator>/</operator> <literal type="number">100L</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_SOL</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>use_reg_one</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pos</name> <operator>=</operator> <call><name>findmatch</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adjust_for_sel</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name>

<operator>&amp;&amp;</operator> <name>lnum</name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_PERCENT</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>KeyTyped</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_brace</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>use_reg_one</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>findsent</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>adjust_cursor</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_BLOCK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>KeyTyped</name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_mark</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkclearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>setmark</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_findpar</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>use_reg_one</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>findpar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_BLOCK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>KeyTyped</name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_undo</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_LOWER</name> <operator>||</operator> <name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <literal type="char">'g'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>=</operator> <literal type="char">'u'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nv_kundo</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_kundo</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkclearopq</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>bt_prompt</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>u_undo</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_replace</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>had_ctrl_v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>checkclearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>bt_prompt</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>prompt_curpos_editable</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>had_ctrl_v</name> <operator>=</operator> <name>Ctrl_V</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>=</operator> <call><name>get_literal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>&gt;</operator> <name>DEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>had_ctrl_v</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>had_ctrl_v</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>reset_VIsual</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>had_ctrl_v</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <name>CAR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>=</operator> <name>REPLACE_CR_NCHAR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <name>NL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>=</operator> <name>REPLACE_NL_NCHAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>virtual_active</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>coladvance_force</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><call><name>getviscol</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>TAB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>coladvance_force</name><argument_list>(<argument><expr><call><name>getviscol</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name>

<operator>||</operator> <operator>(</operator><name>has_mbyte</name> <operator>&amp;&amp;</operator> <call><name>mb_charlen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>had_ctrl_v</name> <operator>!=</operator> <name>Ctrl_V</name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_et</name></name> <operator>||</operator> <name>p_sta</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>stuffnumReadbuff</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>had_ctrl_v</name> <operator>!=</operator> <name>Ctrl_V</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>del_chars</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invoke_edit</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>prep_redo</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>,

<argument><expr><name>NUL</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>had_ctrl_v</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>old_State</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>ncharC1</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AppendCharToRedobuff</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>ncharC1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>ncharC2</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AppendCharToRedobuff</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>ncharC2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>n</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>REPLACE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <name>Ctrl_E</name> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <name>Ctrl_Y</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>ins_copychar</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <name>Ctrl_Y</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_char</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>old_State</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>ncharC1</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_char</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>ncharC1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>ncharC2</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ins_char</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>ncharC2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>n</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <name>Ctrl_E</name> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <name>Ctrl_Y</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>ins_copychar</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <name>Ctrl_Y</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>]</index></name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_sm</name> <operator>&amp;&amp;</operator> <name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>showmatch</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>netbeans_active</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>start</name> <init>= <expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>netbeans_removed</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>netbeans_inserted</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ptr</name><index>[<expr><name>start</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>changed_bytes</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mb_adjust_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_last_insert</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>v_swap_corners</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cmdchar</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>old_cursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmdchar</name> <operator>==</operator> <literal type="char">'O'</literal> <operator>&amp;&amp;</operator> <name>VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>old_cursor</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getvcols</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>VIsual</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>old_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>old_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name><name>old_cursor</name><operator>.</operator><name>col</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>virtual_active</name><argument_list>()</argument_list></call>

<operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>==</operator> <name><name>old_cursor</name><operator>.</operator><name>coladd</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>old_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>right</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>old_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>old_cursor</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name>old_cursor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_Replace</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_mode_orig</name> <operator>=</operator> <name>VIsual_mode</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <literal type="char">'V'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>checkclearopq</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_modifiable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>virtual_active</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><call><name>getviscol</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>invoke_edit</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr> ?</condition><then> <expr><literal type="char">'V'</literal></expr> </then><else>: <expr><literal type="char">'R'</literal></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_vreplace</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>extra_char</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_replace</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>checkclearopq</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_modifiable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>extra_char</name></name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>extra_char</name></name> <operator>=</operator> <call><name>get_literal</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>extra_char</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>virtual_active</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><call><name>getviscol</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>invoke_edit</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>n_swapchar</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>startpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_change</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>checkclearopq</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LINEEMPTY</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_ww</name></expr></argument>, <argument><expr><literal type="char">'~'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prep_redo_cmd</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>u_save_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>startpos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>startpos</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>n</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>did_change</name> <operator>|=</operator> <call><name>swapchar</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>inc_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_ww</name></expr></argument>, <argument><expr><literal type="char">'~'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>netbeans_active</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>did_change</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>netbeans_removed</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>netbeans_inserted</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ptr</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>u_savesub</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>u_clearline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>did_change</name> <operator>&amp;&amp;</operator> <call><name>netbeans_active</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>netbeans_removed</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>netbeans_inserted</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><index>[<expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>did_change</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name><name>startpos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name><name>startpos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name> <operator>=</operator> <name>startpos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_cursormark</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_mark</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'\''</literal>

<operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'`'</literal>

<operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'['</literal>

<operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <ternary><condition><expr><name>flag</name></expr> ?</condition><then> <expr><name>MLINE</name></expr> </then><else>: <expr><name>MCHAR</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'`'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>use_reg_one</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>v_visop</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>trans</name><index>[]</index></name> <init>= <expr><literal type="string">"YyDdCcxdXdAAIIrr"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isupper</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>!=</operator> <name>Ctrl_V</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>VIsual_mode_orig</name> <operator>=</operator> <name>VIsual_mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <literal type="char">'V'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'C'</literal> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'D'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_subst</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>term_swap_diff</name><argument_list>()</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>bt_prompt</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>prompt_curpos_editable</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>VIsual_mode_orig</name> <operator>=</operator> <name>VIsual_mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <literal type="char">'V'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nv_optrans</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_abbrev</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <name>K_DEL</name> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <name>K_KDEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>v_visop</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nv_optrans</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_optrans</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><specifier>static</specifier> <name>char_u</name> <operator>*</operator><operator>(</operator><name><name>ar</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>)</operator> <operator>=</operator> <block>{<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"dl"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"dh"</literal></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"d$"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"c$"</literal></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"cl"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"cc"</literal></expr>,

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"yy"</literal></expr>, <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">":s\r"</literal></expr>}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"xXDCsSY&amp;"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkclearopq</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'D'</literal> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_HASH</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>=</operator> <name>OP_DELETE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_op_var</name><argument_list>(<argument><expr><name>OP_DELETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_dollar</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>finish_op</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ResetRedobuff</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AppendCharToRedobuff</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stuffnumReadbuff</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stuffReadbuff</name><argument_list>(<argument><expr><name><name>ar</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>str</name><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>opcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_gomark</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>pos_T</name></type> <name>old_cursor</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_KeyTyped</name> <init>= <expr><name>KeyTyped</name></expr></init></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>extra_char</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>getmark</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <operator>(</operator><name>pos_T</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>check_cursor_lnum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nv_cursormark</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>virtual_active</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name>

<operator>&amp;&amp;</operator> <name>pos</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>pos</name> <operator>==</operator> <operator>(</operator><name>pos_T</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>EQUAL_POS</name><argument_list>(<argument><expr><name>old_cursor</name></expr></argument>, <argument><expr><operator>*</operator><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_MARK</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>old_KeyTyped</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_pcmark</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JUMPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_KeyTyped</name> <init>= <expr><name>KeyTyped</name></expr></init></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkclearopq</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>movechangelist</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>movemark</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <operator>(</operator><name>pos_T</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>pos</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>nv_cursormark</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_changelistlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E664: changelist is empty"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E662: At start of changelist"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E663: At end of changelist"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>pos</name> <operator>==</operator> <operator>(</operator><name>pos_T</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>lnum</name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_MARK</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>old_KeyTyped</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_regname</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>checkclearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>=</operator> <call><name>get_expr_register</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <call><name>valid_yank_reg</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>opcount</name></name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_reg_var</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_visual</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <name>Ctrl_Q</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <name>Ctrl_V</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>motion_force</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_force</name></name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>finish_op</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>VIsual_select</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>end_visual_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else 

<block>{<block_content> 

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><call><name>check_visual_highlight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>resel_VIsual_mode</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>may_start_select</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_smd</name> <operator>&amp;&amp;</operator> <name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>resel_VIsual_mode</name> <operator>!=</operator> <literal type="char">'v'</literal> <operator>||</operator> <name>resel_VIsual_line_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+=</operator>

<name>resel_VIsual_line_count</name> <operator>*</operator> <name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <name>resel_VIsual_mode</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>resel_VIsual_line_count</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>validate_virtcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name>

<operator>+</operator> <name>resel_VIsual_vcol</name> <operator>*</operator> <name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>resel_VIsual_vcol</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>resel_VIsual_vcol</name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>MAXCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>validate_virtcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name>

<operator>+</operator> <name>resel_VIsual_vcol</name> <operator>*</operator> <name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>may_start_select</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>n_start_visual_mode</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>!=</operator> <literal type="char">'V'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>--</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <literal type="char">'v'</literal> <operator>||</operator> <name>VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nv_right</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nv_down</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>start_selection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>may_start_select</name><argument_list>(<argument><expr><literal type="char">'k'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>n_start_visual_mode</name><argument_list>(<argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>may_start_select</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>VIsual_select</name> <operator>=</operator> <operator>(</operator><call><name>stuff_empty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>typebuf_typed</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_slm</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>n_start_visual_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>conceal_check_cursor_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_V</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ve_flags</name> <operator>&amp;</operator> <name>VE_BLOCK</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>TAB</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>validate_virtcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>foldAdjustVisual</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>conceal_check_cursor_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>p_smd</name> <operator>&amp;&amp;</operator> <name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>clip_star</name><operator>.</operator><name>vmode</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>&lt;</operator> <name>INVERTED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_window</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_colon</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>checkclearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_window</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_suspend</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>end_visual_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"st"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_g_cmd</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name> <init>= <expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>tpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>Ctrl_A</name></expr>:</case>

<case>case <expr><name>Ctrl_X</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MEM_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <name>Ctrl_A</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_mem_profile_dump</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_addsub</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'R'</literal></expr>:</case>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_Replace</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<expr_stmt><expr><call><name>nv_vreplace</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"%s//~/&amp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>checkclearop</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_start</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_start</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>||</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_end</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>VIsual_mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_mode</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual_mode_eval</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_curswant</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_curswant</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tpos</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_end</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_end</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_start</name></name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_curswant</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tpos</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_end</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_start</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>tpos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>VIsual_select</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>may_start_select</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>setmouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>clip_star</name><operator>.</operator><name>vmode</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'V'</literal></expr>:</case>

<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>K_BS</name></expr>:</case>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>=</operator> <name>Ctrl_H</name></expr>;</expr_stmt>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<case>case <expr><literal type="char">'H'</literal></expr>:</case>

<case>case <expr><name>Ctrl_H</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <name>Ctrl_H</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <name>Ctrl_V</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>+</operator> <operator>(</operator><literal type="char">'v'</literal> <operator>-</operator> <literal type="char">'h'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_visual</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'N'</literal></expr>:</case>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>current_search</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<case>case <expr><name>K_DOWN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MLINE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cursor_down</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>nv_screengo</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>FORWARD</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'k'</literal></expr>:</case>

<case>case <expr><name>K_UP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MLINE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cursor_up</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>nv_screengo</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>BACKWARD</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'J'</literal></expr>:</case>

<expr_stmt><expr><call><name>nv_join</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'^'</literal></expr>:</case>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<case>case <expr><name>K_HOME</name></expr>:</case>

<case>case <expr><name>K_KHOME</name></expr>:</case>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width1</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <call><name>curwin_col_off</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width2</name> <init>= <expr><name>width1</name> <operator>+</operator> <call><name>curwin_col_off2</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>validate_virtcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>&gt;=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>width1</name> <operator>&amp;&amp;</operator> <name>width2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>-</operator> <name>width1</name><operator>)</operator> <operator>/</operator> <name>width2</name> <operator>*</operator> <name>width2</name> <operator>+</operator> <name>width1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <call><name>curwin_col_off</name><argument_list>()</argument_list></call>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>

?</condition><then> <expr><call><name>curwin_col_off2</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition>

<block>{<block_content>

<do>do<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block>

while <condition>(<expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>oneright</name><argument_list>()</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VALID_WCOL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'M'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>mb_string2cells</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>&lt;=</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>i</name> <operator>*</operator> <name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'_'</literal></expr>:</case>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cursor_down</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adjust_for_sel</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'$'</literal></expr>:</case>

<case>case <expr><name>K_END</name></expr>:</case>

<case>case <expr><name>K_KEND</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col_off</name> <init>= <expr><call><name>curwin_col_off</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width1</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>col_off</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width2</name> <init>= <expr><name>width1</name> <operator>+</operator> <call><name>curwin_col_off2</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>validate_virtcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>width1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>&gt;=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>width1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>-</operator> <name>width1</name><operator>)</operator> <operator>/</operator> <name>width2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator>

<operator>*</operator> <name>width2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>validate_virtcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>nv_screengo</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name>FORWARD</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>cursor_down</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>col_off</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>validate_virtcol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>POUND</name> <operator>!=</operator> <literal type="char">'#'</literal></expr></cpp:if>

<case>case <expr><name>POUND</name></expr>:</case> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>Ctrl_RSB</name></expr>:</case> 

<case>case <expr><literal type="char">']'</literal></expr>:</case> 

<expr_stmt><expr><call><name>nv_ident</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<case>case <expr><literal type="char">'E'</literal></expr>:</case>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bckend_word</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'E'</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>Ctrl_G</name></expr>:</case>

<expr_stmt><expr><call><name>cursor_pos_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_last_insert</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_last_insert</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor_lnum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get_curline</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>i</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>virtual_active</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>+=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_edit</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'I'</literal></expr>:</case>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkclearopq</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>invoke_edit</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="char">'g'</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>

<expr_stmt><expr><call><name>nv_gotofile</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="char">'\''</literal></expr>:</case>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<case>case <expr><literal type="char">'`'</literal></expr>:</case>

<expr_stmt><expr><call><name>nv_gomark</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<expr_stmt><expr><call><name>do_sleep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>*</operator> <literal type="number">1000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><call><name>do_ascii</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'8'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>utf_find_illegal</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_utf8</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>

<expr_stmt><expr><call><name>show_sb_text</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_goto</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>

<case>case <expr><literal type="char">'w'</literal></expr>:</case>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>cursor_start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<case>case <expr><literal type="char">'~'</literal></expr>:</case>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<case>case <expr><literal type="char">'U'</literal></expr>:</case>

<case>case <expr><literal type="char">'?'</literal></expr>:</case>

<case>case <expr><literal type="char">'@'</literal></expr>:</case>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<case>case <expr><literal type="char">'D'</literal></expr>:</case>

<expr_stmt><expr><call><name>nv_gd</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>K_MIDDLEMOUSE</name></expr>:</case>

<case>case <expr><name>K_MIDDLEDRAG</name></expr>:</case>

<case>case <expr><name>K_MIDDLERELEASE</name></expr>:</case>

<case>case <expr><name>K_LEFTMOUSE</name></expr>:</case>

<case>case <expr><name>K_LEFTDRAG</name></expr>:</case>

<case>case <expr><name>K_LEFTRELEASE</name></expr>:</case>

<case>case <expr><name>K_MOUSEMOVE</name></expr>:</case>

<case>case <expr><name>K_RIGHTMOUSE</name></expr>:</case>

<case>case <expr><name>K_RIGHTDRAG</name></expr>:</case>

<case>case <expr><name>K_RIGHTRELEASE</name></expr>:</case>

<case>case <expr><name>K_X1MOUSE</name></expr>:</case>

<case>case <expr><name>K_X1DRAG</name></expr>:</case>

<case>case <expr><name>K_X1RELEASE</name></expr>:</case>

<case>case <expr><name>K_X2MOUSE</name></expr>:</case>

<case>case <expr><name>K_X2DRAG</name></expr>:</case>

<case>case <expr><name>K_X2RELEASE</name></expr>:</case>

<expr_stmt><expr><name>mod_mask</name> <operator>=</operator> <name>MOD_MASK_CTRL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_mouse</name><argument_list>(<argument><expr><name>oap</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>, <argument><expr><name>BACKWARD</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>K_IGNORE</name></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<case>case <expr><literal type="char">'P'</literal></expr>:</case>

<expr_stmt><expr><call><name>nv_put</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BYTEOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>

<expr_stmt><expr><call><name>goto_byte</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>text_locked</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>text_locked_msg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkclearopq</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_exmode</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JUMPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">','</literal></expr>:</case>

<expr_stmt><expr><call><name>nv_pcmark</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">';'</literal></expr>:</case>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>=</operator> <operator>-</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_pcmark</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkclearop</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>goto_tabpage</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkclearop</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>goto_tabpage</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<case>case <expr><literal type="char">'-'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkclearopq</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>undo_time</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'-'</literal></expr> ?</condition><then> <expr><operator>-</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr> </then><else>: <expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></else></ternary></expr></argument>,

<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name>oap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>n_opencmd</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>oldline</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkclearopq</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'O'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFolding</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>u_save</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>-</operator>

<operator>(</operator><ternary><condition><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'O'</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator>

<operator>(</operator><ternary><condition><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'o'</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr></argument>

)</argument_list></call> <operator>==</operator> <name>OK</name>

<operator>&amp;&amp;</operator> <call><name>open_line</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'O'</literal></expr> ?</condition><then> <expr><name>BACKWARD</name></expr> </then><else>: <expr><name>FORWARD</name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>has_format_option</name><argument_list>(<argument><expr><name>FO_OPEN_COMS</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>OPENLINE_DO_COM</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>oldline</name> <operator>!=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redrawWinline</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>oldline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cul</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VALID_CROW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_HASH</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>invoke_edit</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_dot</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkclearopq</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>start_redo</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr></argument>, <argument><expr><name>restart_edit</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>arrow_used</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_redo</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkclearopq</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>u_redo</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_Undo</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_UPPER</name> <operator>||</operator> <name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <literal type="char">'g'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>=</operator> <literal type="char">'U'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>checkclearopq</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>u_undoline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_tilde</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_to</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_TILDE</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>bt_prompt</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>prompt_curpos_editable</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>n_swapchar</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_operator</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>op_type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>op_type</name> <operator>=</operator> <call><name>get_op_type</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>bt_prompt</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>op_is_change</name><argument_list>(<argument><expr><name>op_type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>prompt_curpos_editable</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>op_type</name> <operator>==</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>nv_lineop</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>checkclearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>=</operator> <name>op_type</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_op_var</name><argument_list>(<argument><expr><name>op_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_op_var</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>optype</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>opchars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>optype</name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OP</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>opchars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_op_char</name><argument_list>(<argument><expr><name>optype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opchars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_extra_op_char</name><argument_list>(<argument><expr><name>optype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opchars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_OP</name></expr></argument>, <argument><expr><name>opchars</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_lineop</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MLINE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cursor_down</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>-</operator> <literal type="number">1L</literal></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_DELETE</name> 

<operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_force</name></name> <operator>!=</operator> <literal type="char">'v'</literal>

<operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_force</name></name> <operator>!=</operator> <name>Ctrl_V</name><operator>)</operator>

<operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_LSHIFT</name>

<operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_RSHIFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_SOL</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_YANK</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_home</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>&amp;</operator> <name>MOD_MASK_CTRL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nv_goto</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_pipe</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ins_at_eol</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_pipe</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_bck_word</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bck_word</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_HOR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>KeyTyped</name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_wordcmd</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>word_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>startpos</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>word_end</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>word_end</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>word_end</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>word_end</name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_CHANGE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_CW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>word_end</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>word_end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>end_word</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>fwd_word</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LT_POS</name><argument_list>(<argument><expr><name>startpos</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>adjust_cursor</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>FAIL</name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>adjust_for_sel</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_HOR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>KeyTyped</name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>adjust_cursor</name><parameter_list>(<parameter><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>VIsual_active</name> <operator>||</operator> <operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'o'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>virtual_active</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>ve_flags</name> <operator>&amp;</operator> <name>VE_ONEMORE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mb_adjust_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_beginline</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_HOR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>KeyTyped</name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ins_at_eol</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>adjust_for_sel</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal>

<operator>&amp;&amp;</operator> <call><name>gchar_cursor</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <call><name>LT_POS</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>inc_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>inclusive</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>unadjust_for_sel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>EQUAL_POS</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>LT_POS</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name>VIsual</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>coladd</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>pp</name><operator>-&gt;</operator><name>coladd</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>pp</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mb_adjustpos</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>pp</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_select</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>VIsual_select</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>VIsual_reselect</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_g_cmd</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_goto</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">1L</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>motion_type</name></name> <operator>=</operator> <name>MLINE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <literal type="number">1L</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">1L</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_SOL</name> <operator>|</operator> <name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fdo_flags</name> <operator>&amp;</operator> <name>FDO_JUMP</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>KeyTyped</name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldOpenCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_normal</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <name>Ctrl_N</name> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <name>Ctrl_G</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mode_displayed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cmdwin_result</name> <operator>=</operator> <name>Ctrl_C</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>end_visual_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <name>Ctrl_G</name> <operator>&amp;&amp;</operator> <name>p_im</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_esc</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>no_reason</name></decl>;</decl_stmt>

<expr_stmt><expr><name>no_reason</name> <operator>=</operator> <operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_NOP</name>

<operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>opcount</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><name>p_im</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>arg</name></name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>==</operator> <literal type="number">0</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>cmdwin_type</name> <operator>==</operator> <literal type="number">0</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>&amp;&amp;</operator> <operator>!</operator><name>VIsual_active</name>

<operator>&amp;&amp;</operator> <name>no_reason</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>anyBufIsChanged</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Type :qa! and press &lt;Enter&gt; to abandon all changes and exit Vim"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Type :qa and press &lt;Enter&gt; to exit Vim"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_im</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cmdwin_result</name> <operator>=</operator> <name>K_IGNORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>end_visual_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>check_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>no_reason</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_beep</name><argument_list>(<argument><expr><name>BO_ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>goto_im</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>ex_normal_busy</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>set_cursor_for_append_to_line</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ve_flags</name> <operator>==</operator> <name>VE_ALL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_State</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>INSERT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>MAXCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>save_State</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get_cursor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_edit</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <name>K_INS</name> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <name>K_KINS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'A'</literal> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'I'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>term_in_normal_mode</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>end_visual_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>term_enter_job_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>v_visop</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'a'</literal> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'i'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name> <operator>||</operator> <name>VIsual_active</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEXTOBJ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>nv_object</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>term_in_normal_mode</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>term_enter_job_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_im</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_modifiable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <name>K_PS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bracketed_paste</name><argument_list>(<argument><expr><name>PASTE_INSERT</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <name>K_PS</name> <operator>&amp;&amp;</operator> <name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>old_pos</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>old_visual</name> <init>= <expr><name>VIsual</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <literal type="char">'V'</literal> <operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>shift_delete_registers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_pending_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <name>K_PS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>ml_get_cursor</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <call><name>LT_POS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>old_pos</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>LT_POS</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>old_visual</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>inc_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>invoke_edit</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>checkclearopq</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'A'</literal></expr>:</case> 

<expr_stmt><expr><call><name>set_cursor_for_append_to_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'I'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_INSEND</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>beginline</name><argument_list>(<argument><expr><name>BL_WHITE</name><operator>|</operator><name>BL_FIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>K_PS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><name>virtual_active</name><argument_list>()</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>*</operator><call><name>ml_get_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name>

<operator>||</operator> <operator>*</operator><call><name>ml_get_cursor</name><argument_list>()</argument_list></call> <operator>==</operator> <name>TAB</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><call><name>ml_get_cursor</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>inc_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>!=</operator> <literal type="char">'A'</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_State</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>INSERT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><call><name>getviscol</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>save_State</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>invoke_edit</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <name>K_PS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bracketed_paste</name><argument_list>(<argument><expr><name>PASTE_INSERT</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>invoke_edit</name><parameter_list>(

<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>repl</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>startln</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>restart_edit_save</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>repl</name> <operator>||</operator> <operator>!</operator><call><name>stuff_empty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>restart_edit_save</name> <operator>=</operator> <name>restart_edit</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>restart_edit_save</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>edit</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>startln</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>retval</name></name> <operator>|=</operator> <name>CA_COMMAND_BUSY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>restart_edit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <name>restart_edit_save</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEXTOBJ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_object</name><parameter_list>(

<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>include</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mps_save</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>include</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>include</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name>mps_save</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_mps</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_mps</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"(:),{:},[:],&lt;:&gt;"</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'w'</literal></expr>:</case> 

<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>current_word</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name>include</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'W'</literal></expr>:</case> 

<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>current_word</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name>include</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> 

<case>case <expr><literal type="char">'('</literal></expr>:</case>

<case>case <expr><literal type="char">')'</literal></expr>:</case>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>current_block</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name>include</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case> 

<case>case <expr><literal type="char">'{'</literal></expr>:</case>

<case>case <expr><literal type="char">'}'</literal></expr>:</case>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>current_block</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name>include</name></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'['</literal></expr>:</case> 

<case>case <expr><literal type="char">']'</literal></expr>:</case>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>current_block</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name>include</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> 

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>current_block</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name>include</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> 

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>retval</name></name> <operator>|=</operator> <name>CA_NO_ADJ_OP_END</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>current_tagblock</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name>include</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case> 

<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>current_par</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name>include</name></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> 

<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>current_sent</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name>include</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'"'</literal></expr>:</case> 

<case>case <expr><literal type="char">'\''</literal></expr>:</case> 

<case>case <expr><literal type="char">'`'</literal></expr>:</case> 

<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>current_quote</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name>include</name></expr></argument>,

<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

case 'S': 

case 'f': 

case 'u': 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_mps</name></name> <operator>=</operator> <name>mps_save</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>adjust_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_record</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_FORMAT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <literal type="char">'g'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>=</operator> <literal type="char">'q'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>checkclearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>K_CMDWIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><name>reg_executing</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>do_record</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_at</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>checkclearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_expr_register</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name><operator>--</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>do_execreg</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_halfpage</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <name>Ctrl_U</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <name>Ctrl_D</name>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>checkclearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>halfpage</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <name>Ctrl_D</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_join</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>checkclearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator>

<name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prep_redo</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr></argument>,

<argument><expr><name>NUL</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_join</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count0</name></name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <name>NUL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_put</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>nv_put_opt</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_put_opt</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fix_indent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>regname</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reg1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reg2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>empty</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>was_visual</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>!=</operator> <name>OP_NOP</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_DELETE</name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_diffgetput</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>opcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>bt_prompt</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>prompt_curpos_editable</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fix_indent</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">']'</literal> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'p'</literal><operator>)</operator></expr>

?</condition><then> <expr><name>FORWARD</name></expr> </then><else>: <expr><name>BACKWARD</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>PUT_FIXINDENT</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'P'</literal>

<operator>||</operator> <operator>(</operator><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>==</operator> <literal type="char">'P'</literal><operator>)</operator><operator>)</operator></expr>

?</condition><then> <expr><name>BACKWARD</name></expr> </then><else>: <expr><name>FORWARD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>prep_redo_cmd</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>PUT_CURSEND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>was_visual</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>regname</name> <operator>=</operator> <name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>adjust_clip_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>regname</name> <operator>==</operator> <literal type="char">'"'</literal>

<operator>||</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><name>regname</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>regname</name> <operator>==</operator> <literal type="char">'-'</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><name>clip_unnamed</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>regname</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <name>regname</name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name>reg1</name> <operator>=</operator> <call><name>get_register</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>msg_silent</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_pending_operator</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>empty</name> <operator>=</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>msg_silent</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>regname</name></name> <operator>=</operator> <name>regname</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg1</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>reg2</name> <operator>=</operator> <call><name>get_register</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_register</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>PUT_LINE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>PUT_LINE_SPLIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name> <operator>&amp;&amp;</operator> <name>dir</name> <operator>==</operator> <name>FORWARD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>PUT_LINE_FORWARD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>BACKWARD</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>VIsual_mode</name> <operator>!=</operator> <literal type="char">'V'</literal>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>col</name></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>VIsual_mode</name> <operator>==</operator> <literal type="char">'V'</literal>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name><operator>.</operator><name>lnum</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>FORWARD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>do_put</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>regname</name></name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>count1</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reg2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_register</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>was_visual</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_start</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_end</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_op_end</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>empty</name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>ml_get</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>deleted_lines</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>MAXCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>auto_format</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_open</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>OP_DELETE</name> <operator>&amp;&amp;</operator> <name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name> <operator>==</operator> <literal type="char">'o'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clearop</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nv_diffgetput</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>cap</name><operator>-&gt;</operator><name>opcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>v_swap_corners</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>cmdchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>bt_prompt</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clearopbeep</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>oap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>n_opencmd</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_nbcmd</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>netbeans_keycommand</name><argument_list>(<argument><expr><name><name>cap</name><operator>-&gt;</operator><name>nchar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_drop</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier><name>cap</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>do_put</name><argument_list>(<argument><expr><literal type="char">'~'</literal></expr></argument>, <argument><expr><name>BACKWARD</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>PUT_CURSEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nv_cursorhold</name><parameter_list>(<parameter><decl><type><name>cmdarg_T</name> <modifier>*</modifier></type><name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_CURSORHOLD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_cursorhold</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cap</name><operator>-&gt;</operator><name>retval</name></name> <operator>|=</operator> <name>CA_COMMAND_BUSY</name></expr>;</expr_stmt> 

</block_content>}</block></function>

</unit>
