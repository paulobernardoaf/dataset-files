<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\channel.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CH_HAS_GUI</name></cpp:macro> <cpp:value>(gui.in_use || gui.starting)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCK_ERRNO</name></cpp:macro> <cpp:value>errno = WSAGetLastError()</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ECONNREFUSED</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONNREFUSED</name></cpp:macro> <cpp:value>WSAECONNREFUSED</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EWOULDBLOCK</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EWOULDBLOCK</name></cpp:macro> <cpp:value>WSAEWOULDBLOCK</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EINPROGRESS</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EINPROGRESS</name></cpp:macro> <cpp:value>WSAEINPROGRESS</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EINTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EINTR</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EINTR</name></cpp:macro> <cpp:value>WSAEINTR</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sock_write</name><parameter_list>(<parameter><type><name>sd</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>send((SOCKET)sd, buf, len, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sock_read</name><parameter_list>(<parameter><type><name>sd</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>recv((SOCKET)sd, buf, len, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sock_close</name><parameter_list>(<parameter><type><name>sd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>closesocket((SOCKET)sd)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBGEN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libgen.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCK_ERRNO</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sock_write</name><parameter_list>(<parameter><type><name>sd</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>write(sd, buf, len)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sock_read</name><parameter_list>(<parameter><type><name>sd</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>read(sd, buf, len)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sock_close</name><parameter_list>(<parameter><type><name>sd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>close(sd)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fd_read</name><parameter_list>(<parameter><type><name>fd</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>read(fd, buf, len)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fd_write</name><parameter_list>(<parameter><type><name>sd</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>write(sd, buf, len)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fd_close</name><parameter_list>(<parameter><type><name>sd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>close(sd)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>channel_read</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ch_mode_T</name></type> <name>channel_get_mode</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>channel_get_timeout</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ch_part_T</name></type> <name>channel_part_send</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ch_part_T</name></type> <name>channel_part_read</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_job_options</name><parameter_list>(<parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_CHANNELS</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((ch) = first_channel; (ch) != NULL; (ch) = (ch)-&gt;ch_next)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_JOBS</name><parameter_list>(<parameter><type><name>job</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((job) = first_job; (job) != NULL; (job) = (job)-&gt;jv_next)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>channel_need_redraw</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>safe_to_invoke_callback</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>part_names</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"sock"</literal></expr>, <expr><literal type="string">"out"</literal></expr>, <expr><literal type="string">"err"</literal></expr>, <expr><literal type="string">"in"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>

<name>fd_read</name><parameter_list>(<parameter><decl><type><name>sock_T</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>fd</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>nread</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadFile</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>nread</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>fd_write</name><parameter_list>(<parameter><decl><type><name>sock_T</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>todo</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>fd</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>nwrite</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>ov</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>todo</name> <operator>&gt;</operator> <name>MAX_NAMED_PIPE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>MAX_NAMED_PIPE_SIZE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name>todo</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ov</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ov</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nwrite</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WriteFile</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>done</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nwrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ov</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>err</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_IO_PENDING</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetOverlappedResult</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ov</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nwrite</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FlushFileBuffers</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>nwrite</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>todo</name> <operator>-=</operator> <name>nwrite</name></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>+=</operator> <name>nwrite</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>done</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>fd_close</name><parameter_list>(<parameter><decl><type><name>sock_T</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>fd</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>log_fd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>proftime_T</name></type> <name>log_start</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>ch_logfile</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>log_fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fname</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"closing, opening %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"closing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fname</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>opt</name> <operator>==</operator> <literal type="char">'w'</literal></expr> ?</condition><then> <expr><literal type="string">"w"</literal></expr> </then><else>: <expr><literal type="string">"a"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notopen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>log_fd</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>log_fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"==== start log session ====\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ch_log_active</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>log_fd</name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ch_log_lead</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>, <parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>log_fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>proftime_T</name></type> <name>log_now</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>profile_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>profile_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>log_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><call><name>profile_msg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>part</name> <operator>&lt;</operator> <name>PART_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"%son %d(%s): "</literal></expr></argument>,

<argument><expr><name>what</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_id</name></name></expr></argument>, <argument><expr><name><name>part_names</name><index>[<expr><name>part</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"%son %d: "</literal></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>ch_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>

<name>ch_log</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>log_fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ch_log_lead</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>PART_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>log_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_repeated_msg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type>

<name>ch_error</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PRINTF_FORMAT_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
__attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>2<operator>,</operator> 3</function_decl>)))

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ch_error</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>log_fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ch_log_lead</name><argument_list>(<argument><expr><literal type="string">"ERR "</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>PART_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>log_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_repeated_msg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PERROR</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERROR</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)semsg("%s: %s", msg, strerror_win32(errno))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>strerror_win32</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>eno</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>LPVOID</name></type> <name>msgbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>msgbuf</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msgbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FormatMessage</name><argument_list>(

<argument><expr><name>FORMAT_MESSAGE_ALLOCATE_BUFFER</name> <operator>|</operator>

<name>FORMAT_MESSAGE_FROM_SYSTEM</name> <operator>|</operator>

<name>FORMAT_MESSAGE_IGNORE_INSERTS</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>eno</name></expr></argument>,

<argument><expr><call><name>MAKELANGID</name><argument_list>(<argument><expr><name>LANG_ENGLISH</name></expr></argument>, <argument><expr><name>SUBLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>LPTSTR</name><operator>)</operator> <operator>&amp;</operator><name>msgbuf</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msgbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>msgbuf</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch></block_content></block></for></block_content></block></if></if_stmt>

<return>return <expr><name>msgbuf</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>channel_T</name> <modifier>*</modifier></type><name>first_channel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>next_ch_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>channel_T</name> <modifier>*</modifier></type>

<name>add_channel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>channel_T</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_id</name></name> <operator>=</operator> <name>next_ch_id</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Created channel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>part</name> <operator>=</operator> <name>PART_SOCK</name></expr>;</init> <condition><expr><name>part</name> <operator>&lt;</operator> <name>PART_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>part</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_fd</name> <operator>=</operator> <name>INVALID_FD</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_inputHandler</name> <operator>=</operator> <operator>(</operator><name>XtInputId</name><operator>)</operator><name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_inputHandler</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_timeout</name> <operator>=</operator> <literal type="number">2000</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>first_channel</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>first_channel</name><operator>-&gt;</operator><name>ch_prev</name></name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_next</name></name> <operator>=</operator> <name>first_channel</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first_channel</name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>channel</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>has_any_channel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>first_channel</name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>channel_still_useful</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>has_sock_msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_out_msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_err_msg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_job_killed</name></name> <operator>&amp;&amp;</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_job</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_close_cb</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_IN</name></expr>]</index></name><operator>.</operator><name><name>ch_bufref</name><operator>.</operator><name>br_buf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>has_sock_msg</name> <operator>=</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_SOCK</name></expr>]</index></name><operator>.</operator><name>ch_fd</name> <operator>!=</operator> <name>INVALID_FD</name>

<operator>||</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_SOCK</name></expr>]</index></name><operator>.</operator><name><name>ch_head</name><operator>.</operator><name>rq_next</name></name> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_SOCK</name></expr>]</index></name><operator>.</operator><name><name>ch_json_head</name><operator>.</operator><name>jq_next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>has_out_msg</name> <operator>=</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_OUT</name></expr>]</index></name><operator>.</operator><name>ch_fd</name> <operator>!=</operator> <name>INVALID_FD</name>

<operator>||</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_OUT</name></expr>]</index></name><operator>.</operator><name><name>ch_head</name><operator>.</operator><name>rq_next</name></name> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_OUT</name></expr>]</index></name><operator>.</operator><name><name>ch_json_head</name><operator>.</operator><name>jq_next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>has_err_msg</name> <operator>=</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_ERR</name></expr>]</index></name><operator>.</operator><name>ch_fd</name> <operator>!=</operator> <name>INVALID_FD</name>

<operator>||</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_ERR</name></expr>]</index></name><operator>.</operator><name><name>ch_head</name><operator>.</operator><name>rq_next</name></name> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_ERR</name></expr>]</index></name><operator>.</operator><name><name>ch_json_head</name><operator>.</operator><name>jq_next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_callback</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>has_sock_msg</name>

<operator>||</operator> <name>has_out_msg</name> <operator>||</operator> <name>has_err_msg</name><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_OUT</name></expr>]</index></name><operator>.</operator><name><name>ch_callback</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_OUT</name></expr>]</index></name><operator>.</operator><name><name>ch_bufref</name><operator>.</operator><name>br_buf</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>has_out_msg</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_ERR</name></expr>]</index></name><operator>.</operator><name><name>ch_callback</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_ERR</name></expr>]</index></name><operator>.</operator><name><name>ch_bufref</name><operator>.</operator><name>br_buf</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>has_err_msg</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>channel_can_close</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>channel</name><operator>-&gt;</operator><name>ch_to_be_closed</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_free_contents</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_close</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_clear</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Freeing channel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_free_channel</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_next</name><operator>-&gt;</operator><name>ch_prev</name></name> <operator>=</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_prev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>first_channel</name> <operator>=</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_next</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_prev</name><operator>-&gt;</operator><name>ch_next</name></name> <operator>=</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_free</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_free_unref_items</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>safe_to_invoke_callback</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_to_be_freed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>channel_free_contents</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_free_channel</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>channel_may_free</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>channel_still_useful</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_free</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>channel_unref</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>--</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_refcount</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>channel_may_free</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>free_unused_channels_contents</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>did_free</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>safe_to_invoke_callback</name></expr>;</expr_stmt>

<macro><name>FOR_ALL_CHANNELS</name><argument_list>(<argument>ch</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>channel_still_useful</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>ch_copyID</name></name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>copyID</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_free_contents</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_free</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>safe_to_invoke_callback</name></expr>;</expr_stmt>

<return>return <expr><name>did_free</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>free_unused_channels</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>ch_next</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <name>first_channel</name></expr>;</init> <condition><expr><name>ch</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ch</name> <operator>=</operator> <name>ch_next</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>ch_next</name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>ch_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>channel_still_useful</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>ch_copyID</name></name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>copyID</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_free_channel</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>channel_T</name> <modifier>*</modifier></type>

<name>channel_fd2channel</name><parameter_list>(<parameter><decl><type><name>sock_T</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name> <modifier>*</modifier></type><name>partp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <name>INVALID_FD</name></expr>)</condition><block type="pseudo"><block_content>

<macro><name>FOR_ALL_CHANNELS</name><argument_list>(<argument>channel</argument>)</argument_list></macro>

<block>{<block_content>

<for>for <control>(<init><expr><name>part</name> <operator>=</operator> <name>PART_SOCK</name></expr>;</init> <condition><expr><name>part</name> <operator>&lt;</operator> <name>PART_IN</name></expr>;</condition> <incr><expr><operator>++</operator><name>part</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_fd</name> <operator>==</operator> <name>fd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>partp</name> <operator>=</operator> <name>part</name></expr>;</expr_stmt>

<return>return <expr><name>channel</name></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_read_fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part</name></decl>;</decl_stmt>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>channel_fd2channel</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Channel for fd %d not found"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_read</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><literal type="string">"channel_read_fd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>messageFromServerX11</name><parameter_list>(<parameter><decl><type><name>XtPointer</name></type> <name>clientData</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier><name>unused1</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtInputId</name> <modifier>*</modifier><name>unused2</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_read_fd</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>clientData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>gboolean</name></type>

<name>messageFromServerGtk3</name><parameter_list>(<parameter><decl><type><name>GIOChannel</name> <modifier>*</modifier><name>unused1</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>GIOCondition</name> <name>unused2</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name></type> <name>clientData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_read_fd</name><argument_list>(<argument><expr><call><name>GPOINTER_TO_INT</name><argument_list>(<argument><expr><name>clientData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return> 

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>messageFromServerGtk2</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>clientData</name></decl></parameter>,

<parameter><decl><type><name>gint</name> <name>unused1</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>GdkInputCondition</name> <name>unused2</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_read_fd</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>clientData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_gui_register_one</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name> <name>part</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CH_HAS_GUI</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_keep_open</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_inputHandler</name> <operator>==</operator> <operator>(</operator><name>XtInputId</name><operator>)</operator><name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Registering part %s with fd %d"</literal></expr></argument>,

<argument><expr><name><name>part_names</name><index>[<expr><name>part</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_inputHandler</name> <operator>=</operator> <call><name>XtAppAddInput</name><argument_list>(

<argument><expr><operator>(</operator><name>XtAppContext</name><operator>)</operator><name>app_context</name></expr></argument>,

<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_fd</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>(</operator><name>XtInputReadMask</name> <operator>+</operator> <name>XtInputExceptMask</name><operator>)</operator></expr></argument>,

<argument><expr><name>messageFromServerX11</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_inputHandler</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Registering part %s with fd %d"</literal></expr></argument>,

<argument><expr><name><name>part_names</name><index>[<expr><name>part</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>GIOChannel</name> <modifier>*</modifier></type><name>chnnl</name> <init>= <expr><call><name>g_io_channel_unix_new</name><argument_list>(

<argument><expr><operator>(</operator><name>gint</name><operator>)</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_inputHandler</name> <operator>=</operator> <call><name>g_io_add_watch</name><argument_list>(

<argument><expr><name>chnnl</name></expr></argument>,

<argument><expr><name>G_IO_IN</name><operator>|</operator><name>G_IO_HUP</name><operator>|</operator><name>G_IO_ERR</name><operator>|</operator><name>G_IO_PRI</name></expr></argument>,

<argument><expr><name>messageFromServerGtk3</name></expr></argument>,

<argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_io_channel_unref</name><argument_list>(<argument><expr><name>chnnl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_inputHandler</name> <operator>=</operator> <call><name>gdk_input_add</name><argument_list>(

<argument><expr><operator>(</operator><name>gint</name><operator>)</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_fd</name></expr></argument>,

<argument><expr><operator>(</operator><name>GdkInputCondition</name><operator>)</operator>

<operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>GDK_INPUT_READ</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>GDK_INPUT_EXCEPTION</name><operator>)</operator></expr></argument>,

<argument><expr><name>messageFromServerGtk2</name></expr></argument>,

<argument><expr><operator>(</operator><name>gpointer</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_gui_register</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>CH_SOCK_FD</name></name> <operator>!=</operator> <name>INVALID_FD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_gui_register_one</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>CH_OUT_FD</name></name> <operator>!=</operator> <name>INVALID_FD</name>

<operator>&amp;&amp;</operator> <name><name>channel</name><operator>-&gt;</operator><name>CH_OUT_FD</name></name> <operator>!=</operator> <name><name>channel</name><operator>-&gt;</operator><name>CH_SOCK_FD</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_gui_register_one</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>CH_ERR_FD</name></name> <operator>!=</operator> <name>INVALID_FD</name>

<operator>&amp;&amp;</operator> <name><name>channel</name><operator>-&gt;</operator><name>CH_ERR_FD</name></name> <operator>!=</operator> <name><name>channel</name><operator>-&gt;</operator><name>CH_SOCK_FD</name></name>

<operator>&amp;&amp;</operator> <name><name>channel</name><operator>-&gt;</operator><name>CH_ERR_FD</name></name> <operator>!=</operator> <name><name>channel</name><operator>-&gt;</operator><name>CH_OUT_FD</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_gui_register_one</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>channel_gui_register_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_CHANNELS</name><argument_list>(<argument>channel</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>channel_gui_register</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_gui_unregister_one</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier><name>channel</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name> <name>part</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_inputHandler</name> <operator>!=</operator> <operator>(</operator><name>XtInputId</name><operator>)</operator><name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Unregistering part %s"</literal></expr></argument>, <argument><expr><name><name>part_names</name><index>[<expr><name>part</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtRemoveInput</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_inputHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_inputHandler</name> <operator>=</operator> <operator>(</operator><name>XtInputId</name><operator>)</operator><name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_inputHandler</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Unregistering part %s"</literal></expr></argument>, <argument><expr><name><name>part_names</name><index>[<expr><name>part</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>g_source_remove</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_inputHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gdk_input_remove</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_inputHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_inputHandler</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_gui_unregister</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>part</name> <operator>=</operator> <name>PART_SOCK</name></expr>;</init> <condition><expr><name>part</name> <operator>&lt;</operator> <name>PART_IN</name></expr>;</condition> <incr><expr><operator>++</operator><name>part</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_gui_unregister_one</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>e_cannot_connect</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E902: Cannot connect to port"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><name>channel_T</name> <modifier>*</modifier></type>

<name>channel_open</name><parameter_list>(

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>port_in</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>waittime</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>nb_close_cb</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>server</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>u_short</name></type> <name>port</name> <init>= <expr><name>port_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u_long</name></type> <name>val</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><name>port_in</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>channel_init_winsock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>add_channel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Cannot allocate channel."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>server</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>server</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>host</name> <operator>=</operator> <call><name>gethostbyname</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"in gethostbyname() in channel_open()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E901: gethostbyname() in channel_open()"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_free</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>h_addr_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>server</name><operator>.</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>h_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>waittime</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>waittime</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>TRUE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>elapsed_msec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>waitnow</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"in socket() in channel_open()."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E898: socket() in channel_open()"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_free</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>waittime</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>ioctlsocket</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<call><name>fcntl</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name>SOCK_ERRNO</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,

<argument><expr><literal type="string">"channel_open: Connect failed with errno %d"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_free</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Connecting to %s port %d"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>connect</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>server</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>SOCK_ERRNO</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>waittime</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>errno</name> <operator>!=</operator> <name>EWOULDBLOCK</name>

<operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ECONNREFUSED</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EINPROGRESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EINPROGRESS</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,

<argument><expr><literal type="string">"channel_open: Connect failed with errno %d"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_cannot_connect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_free</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>waitnow</name> <operator>=</operator> <ternary><condition><expr><name>waittime</name> <operator>&gt;</operator> <literal type="number">50</literal></expr> ?</condition><then> <expr><literal type="number">50</literal></expr> </then><else>: <expr><name>waittime</name></expr></else></ternary></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ECONNREFUSED</name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name></type> <name>rfds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name></type> <name>wfds</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>so_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>so_error_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>so_error</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>start_tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>end_tv</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>waitnow</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>waitnow</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,

<argument><expr><literal type="string">"Waiting for connection (waiting %d msec)..."</literal></expr></argument>, <argument><expr><name>waitnow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>sd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>SOCK_ERRNO</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,

<argument><expr><literal type="string">"channel_open: Connect failed with errno %d"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_cannot_connect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_free</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>elapsed_msec</name> <operator>=</operator> <name>waitnow</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>waittime</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>elapsed_msec</name> <operator>&lt;</operator> <name>waittime</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>waittime</name> <operator>-=</operator> <name>elapsed_msec</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>FD_ISSET</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getsockopt</name><argument_list>(<argument><expr><name>sd</name></expr></argument>,

<argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ERROR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>so_error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>so_error_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>so_error</name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>so_error</name> <operator>!=</operator> <name>EWOULDBLOCK</name>

<operator>&amp;&amp;</operator> <name>so_error</name> <operator>!=</operator> <name>ECONNREFUSED</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EINPROGRESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>so_error</name> <operator>!=</operator> <name>EINPROGRESS</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,

<argument><expr><literal type="string">"channel_open: Connect failed with errno %d"</literal></expr></argument>,

<argument><expr><name>so_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PERROR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_cannot_connect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_free</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>so_error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end_tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>elapsed_msec</name> <operator>=</operator> <operator>(</operator><name><name>end_tv</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>start_tv</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal>

<operator>+</operator> <operator>(</operator><name><name>end_tv</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>start_tv</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>waittime</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>elapsed_msec</name> <operator>&lt;</operator> <name>waittime</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>waitnow</name> <operator>-=</operator> <name>elapsed_msec</name></expr>;</expr_stmt>

<expr_stmt><expr><name>waittime</name> <operator>-=</operator> <name>elapsed_msec</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>waitnow</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_delay</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>waitnow</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>waittime</name> <operator>-=</operator> <name>waitnow</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>waittime</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>waittime</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Connection timed out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_free</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></while>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Connection made"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>waittime</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ioctlsocket</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fcntl</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>CH_SOCK_FD</name></name> <operator>=</operator> <operator>(</operator><name>sock_T</name><operator>)</operator><name>sd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_nb_close_cb</name></name> <operator>=</operator> <name>nb_close_cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_hostname</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_port</name></name> <operator>=</operator> <name>port_in</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_to_be_closed</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>PART_SOCK</name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>channel_gui_register_one</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>channel</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>copy_callback</name><parameter_list>(<parameter><decl><type><name>callback_T</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>callback_T</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>cb_partial</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>cb_partial</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dest</name><operator>-&gt;</operator><name>cb_partial</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>cb_name</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>cb_name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>cb_free_name</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>dest</name><operator>-&gt;</operator><name>cb_partial</name><operator>-&gt;</operator><name>pt_refcount</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>cb_name</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>cb_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>cb_free_name</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>func_ref</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>cb_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>free_set_callback</name><parameter_list>(<parameter><decl><type><name>callback_T</name> <modifier>*</modifier></type><name>cbp</name></decl></parameter>, <parameter><decl><type><name>callback_T</name> <modifier>*</modifier></type><name>callback</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free_callback</name><argument_list>(<argument><expr><name>cbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>callback</name><operator>-&gt;</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>callback</name><operator>-&gt;</operator><name>cb_name</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_callback</name><argument_list>(<argument><expr><name>cbp</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cbp</name><operator>-&gt;</operator><name>cb_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>prepare_buffer</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>save_curbuf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>buf_copy_options</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BCO_ENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"bt"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"nofile"</literal></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"bh"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"hide"</literal></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_open</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>save_curbuf</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>buf_T</name> <modifier>*</modifier></type>

<name>channel_find_buffer</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>msg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>save_curbuf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_findname</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_findname_exp</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_new</name><argument_list>(<argument><expr><ternary><condition><expr><name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>name</name> <operator>==</operator> <name>NUL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>name</name></expr></else></ternary></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLN_LISTED</name> <operator>|</operator> <name>BLN_NEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prepare_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><literal type="string">"Reading from channel error..."</literal></expr>

</then><else>: <expr><literal type="string">"Reading from channel output..."</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>changed_bytes</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>save_curbuf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_set_options</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_MODE</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>part</name> <operator>=</operator> <name>PART_SOCK</name></expr>;</init> <condition><expr><name>part</name> <operator>&lt;</operator> <name>PART_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>part</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_mode</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_mode</name></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_IN_MODE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_IN</name></expr>]</index></name><operator>.</operator><name>ch_mode</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_in_mode</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_OUT_MODE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_OUT</name></expr>]</index></name><operator>.</operator><name>ch_mode</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_out_mode</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_ERR_MODE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_ERR</name></expr>]</index></name><operator>.</operator><name>ch_mode</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_err_mode</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_nonblock</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_noblock</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>part</name> <operator>=</operator> <name>PART_SOCK</name></expr>;</init> <condition><expr><name>part</name> <operator>&lt;</operator> <name>PART_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>part</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_timeout</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_timeout</name></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_OUT_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_OUT</name></expr>]</index></name><operator>.</operator><name>ch_timeout</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_out_timeout</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_ERR_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_ERR</name></expr>]</index></name><operator>.</operator><name>ch_timeout</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_err_timeout</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_BLOCK_WRITE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_IN</name></expr>]</index></name><operator>.</operator><name>ch_block_write</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_CALLBACK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_set_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_callback</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_OUT_CALLBACK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_set_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_OUT</name></expr>]</index></name><operator>.</operator><name>ch_callback</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_out_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_ERR_CALLBACK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_set_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_ERR</name></expr>]</index></name><operator>.</operator><name>ch_callback</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_err_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_CLOSE_CALLBACK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_set_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_close_cb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_close_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_drop_never</name></name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_drop_never</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_OUT_IO</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>PART_OUT</name></expr>]</index></name> <operator>==</operator> <name>JIO_BUFFER</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_OUT_MODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_OUT</name></expr>]</index></name><operator>.</operator><name>ch_mode</name> <operator>=</operator> <name>MODE_NL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_OUT_BUF</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_findnr</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io_buf</name><index>[<expr><name>PART_OUT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nobufnr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_io_buf</name><index>[<expr><name>PART_OUT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>msg</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>&amp;</operator> <name>JO2_OUT_MSG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_message</name><index>[<expr><name>PART_OUT</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>channel_find_buffer</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io_name</name><index>[<expr><name>PART_OUT</name></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_OUT_MODIFIABLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_OUT</name></expr>]</index></name><operator>.</operator><name>ch_nomodifiable</name> <operator>=</operator>

<operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_modifiable</name><index>[<expr><name>PART_OUT</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_OUT</name></expr>]</index></name><operator>.</operator><name>ch_nomodifiable</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_modifiable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"writing out to buffer '%s'"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_OUT</name></expr>]</index></name><operator>.</operator><name>ch_bufref</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prepare_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_ERR_IO</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>PART_ERR</name></expr>]</index></name> <operator>==</operator> <name>JIO_BUFFER</name>

<operator>||</operator> <operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>PART_ERR</name></expr>]</index></name> <operator>==</operator> <name>JIO_OUT</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_OUT_IO</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>PART_OUT</name></expr>]</index></name> <operator>==</operator> <name>JIO_BUFFER</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_ERR_MODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_ERR</name></expr>]</index></name><operator>.</operator><name>ch_mode</name> <operator>=</operator> <name>MODE_NL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>PART_ERR</name></expr>]</index></name> <operator>==</operator> <name>JIO_OUT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_OUT</name></expr>]</index></name><operator>.</operator><name><name>ch_bufref</name><operator>.</operator><name>br_buf</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_ERR_BUF</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_findnr</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io_buf</name><index>[<expr><name>PART_ERR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nobufnr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_io_buf</name><index>[<expr><name>PART_ERR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>msg</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>&amp;</operator> <name>JO2_ERR_MSG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_message</name><index>[<expr><name>PART_ERR</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>channel_find_buffer</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io_name</name><index>[<expr><name>PART_ERR</name></expr>]</index></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_ERR_MODIFIABLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_ERR</name></expr>]</index></name><operator>.</operator><name>ch_nomodifiable</name> <operator>=</operator>

<operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_modifiable</name><index>[<expr><name>PART_ERR</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_ERR</name></expr>]</index></name><operator>.</operator><name>ch_nomodifiable</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_modifiable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"writing err to buffer '%s'"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_ERR</name></expr>]</index></name><operator>.</operator><name>ch_bufref</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prepare_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_OUT</name></expr>]</index></name><operator>.</operator><name>ch_io</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>PART_OUT</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_ERR</name></expr>]</index></name><operator>.</operator><name>ch_io</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>PART_ERR</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_IN</name></expr>]</index></name><operator>.</operator><name>ch_io</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>PART_IN</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>channel_T</name> <modifier>*</modifier></type>

<name>channel_open_func</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>address</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobopt_T</name></type> <name>opt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_DICT</name> <operator>||</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rest</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>address</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name>port</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>rest</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>clear_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_mode</name></name> <operator>=</operator> <name>MODE_JSON</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_timeout</name></name> <operator>=</operator> <literal type="number">2000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>,

<argument><expr><name>JO_MODE_ALL</name> <operator>+</operator> <name>JO_CB_ALL</name> <operator>+</operator> <name>JO_WAITTIME</name> <operator>+</operator> <name>JO_TIMEOUT_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>jo_timeout</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>channel_open</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>jo_waittime</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_set</name></name> <operator>=</operator> <name>JO_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_set_options</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>theend</name>:</label>

<expr_stmt><expr><call><name>free_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>channel</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ch_close_part</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sock_T</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_fd</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fd</name> <operator>!=</operator> <name>INVALID_FD</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>part</name> <operator>==</operator> <name>PART_SOCK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>part</name> <operator>==</operator> <name>PART_IN</name> <operator>||</operator> <name><name>channel</name><operator>-&gt;</operator><name>CH_IN_FD</name></name> <operator>!=</operator> <operator>*</operator><name>fd</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>==</operator> <name>PART_OUT</name> <operator>||</operator> <name><name>channel</name><operator>-&gt;</operator><name>CH_OUT_FD</name></name> <operator>!=</operator> <operator>*</operator><name>fd</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>part</name> <operator>==</operator> <name>PART_ERR</name> <operator>||</operator> <name><name>channel</name><operator>-&gt;</operator><name>CH_ERR_FD</name></name> <operator>!=</operator> <operator>*</operator><name>fd</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_named_pipe</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DisconnectNamedPipe</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>fd_close</name><argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>fd</name> <operator>=</operator> <name>INVALID_FD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_to_be_closed</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>part</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>channel_set_pipes</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>sock_T</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>sock_T</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>sock_T</name></type> <name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>in</name> <operator>!=</operator> <name>INVALID_FD</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_close_part</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>CH_IN_FD</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>mch_isatty</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_to_be_closed</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>PART_IN</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>!=</operator> <name>INVALID_FD</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>channel_gui_unregister_one</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ch_close_part</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>CH_OUT_FD</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_to_be_closed</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>PART_OUT</name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>channel_gui_register_one</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>INVALID_FD</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>channel_gui_unregister_one</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ch_close_part</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>CH_ERR_FD</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_to_be_closed</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>PART_ERR</name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>channel_gui_register_one</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>channel_set_job</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_job</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_set_options</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_in_buf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>in_part</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_IN</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in_part</name><operator>-&gt;</operator><name>ch_bufref</name></name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_in_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"reading from buffer '%s'"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>in_part</name><operator>-&gt;</operator><name>ch_bufref</name><operator>.</operator><name>br_buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_IN_TOP</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>jo_in_top</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>options</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_IN_BOT</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_bufref</name><operator>.</operator><name>br_buf</name><operator>-&gt;</operator><name>b_write_to_channel</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_buf_append</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_buf_top</name></name> <operator>=</operator>

<name><name>in_part</name><operator>-&gt;</operator><name>ch_bufref</name><operator>.</operator><name>br_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_buf_top</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>jo_in_top</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_buf_top</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_IN_BOT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_buf_bot</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>jo_in_bot</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_buf_bot</name></name> <operator>=</operator> <name><name>in_part</name><operator>-&gt;</operator><name>ch_bufref</name><operator>.</operator><name>br_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_set_req_callback</name><parameter_list>(

<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>,

<parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>,

<parameter><decl><type><name>callback_T</name> <modifier>*</modifier></type><name>callback</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cbq_T</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_cb_head</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cbq_T</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>cbq_T</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>copy_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>cq_callback</name></name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>cq_seq_nr</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>cq_prev</name></name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>cq_prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>cq_prev</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>cq_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>cq_prev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>cq_next</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>cq_prev</name><operator>-&gt;</operator><name>cq_next</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>write_buf_line</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_write_text_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_send</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_IN</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"write_buf_line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>can_write_buf_line</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>in_part</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_IN</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_fd</name></name> <operator>==</operator> <name>INVALID_FD</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_block_write</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_block_write</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_block_write</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_block_write</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name></type> <name>wfds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>in_part</name><operator>-&gt;</operator><name>ch_fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tval</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tval</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>in_part</name><operator>-&gt;</operator><name>ch_fd</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EINTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>SOCK_ERRNO</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>in_part</name><operator>-&gt;</operator><name>ch_block_write</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"FAKED Input not ready for writing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Input not ready for writing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>fds</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fds</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>in_part</name><operator>-&gt;</operator><name>ch_fd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fds</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>POLLOUT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>poll</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Input not ready for writing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_block_write</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"FAKED Input not ready for writing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_write_in</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>in_part</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_IN</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_bufref</name><operator>.</operator><name>br_buf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>in_part</name><operator>-&gt;</operator><name>ch_buf_append</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in_part</name><operator>-&gt;</operator><name>ch_bufref</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"input buffer has been wiped out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_bufref</name><operator>.</operator><name>br_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name><name>in_part</name><operator>-&gt;</operator><name>ch_buf_top</name></name></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>in_part</name><operator>-&gt;</operator><name>ch_buf_bot</name></name>

<operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>can_write_buf_line</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_buf_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>written</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>written</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"written line %d to channel"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>written</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"written %d lines to channel"</literal></expr></argument>, <argument><expr><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_buf_top</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>||</operator> <name>lnum</name> <operator>&gt;</operator> <name><name>in_part</name><operator>-&gt;</operator><name>ch_buf_bot</name></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_job</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>term_send_eof</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_bufref</name><operator>.</operator><name>br_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Finished writing all lines to channel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ch_close_part</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Still %ld more lines to write"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>channel_buffer_free</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_CHANNELS</name><argument_list>(<argument>channel</argument>)</argument_list></macro>

<for>for <control>(<init><expr><name>part</name> <operator>=</operator> <name>PART_SOCK</name></expr>;</init> <condition><expr><name>part</name> <operator>&lt;</operator> <name>PART_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>part</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>ch_part</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch_part</name><operator>-&gt;</operator><name>ch_bufref</name><operator>.</operator><name>br_buf</name></name> <operator>==</operator> <name>buf</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"%s buffer has been wiped out"</literal></expr></argument>,

<argument><expr><name><name>part_names</name><index>[<expr><name>part</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch_part</name><operator>-&gt;</operator><name>ch_bufref</name><operator>.</operator><name>br_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_write_input</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>in_part</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_IN</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_writeque</name><operator>.</operator><name>wq_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_send</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_IN</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"channel_write_input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_bufref</name><operator>.</operator><name>br_buf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_buf_append</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_write_new_lines</name><argument_list>(<argument><expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_bufref</name><operator>.</operator><name>br_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_write_in</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>channel_write_any_lines</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_CHANNELS</name><argument_list>(<argument>channel</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>channel_write_input</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>channel_write_new_lines</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found_one</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<macro><name>FOR_ALL_CHANNELS</name><argument_list>(<argument>channel</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>in_part</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_IN</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_bufref</name><operator>.</operator><name>br_buf</name></name> <operator>==</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name><name>in_part</name><operator>-&gt;</operator><name>ch_buf_append</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_fd</name></name> <operator>==</operator> <name>INVALID_FD</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>found_one</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name><name>in_part</name><operator>-&gt;</operator><name>ch_buf_bot</name></name></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</condition>

<incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>can_write_buf_line</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_buf_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>written</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>written</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"written line %d to channel"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>written</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"written %d lines to channel"</literal></expr></argument>, <argument><expr><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Still %ld more lines to write"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>lnum</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_buf_bot</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_one</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_write_to_channel</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>invoke_callback</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>callback_T</name> <modifier>*</modifier></type><name>callback</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>safe_to_invoke_callback</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>iemsg</name><argument_list>(<argument><expr><literal type="string">"INTERNAL: Invoking callback when it is not safe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_CHANNEL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_channel</name></name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_callback</name><argument_list>(<argument><expr><name>callback</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>channel_need_redraw</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>readq_T</name> <modifier>*</modifier></type>

<name>channel_peek</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>readq_T</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_head</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>head</name><operator>-&gt;</operator><name>rq_next</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>channel_first_nl</name><parameter_list>(<parameter><decl><type><name>readq_T</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>rq_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_buflen</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>buffer</name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>channel_get</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>readq_T</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_head</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>readq_T</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>head</name><operator>-&gt;</operator><name>rq_next</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>outlen</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_buflen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>rq_next</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>rq_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>rq_prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>rq_next</name><operator>-&gt;</operator><name>rq_prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>channel_get_all</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>readq_T</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_head</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>readq_T</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>node</name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>rq_next</name></name></expr>;</init> <condition><expr><name>node</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_buflen</name></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>node</name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>rq_next</name></name></expr>;</init> <condition><expr><name>node</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_next</name></name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>rq_buffer</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>rq_buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_buflen</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>channel_get</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>outlen</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>res</name> <operator>+</operator> <name>len</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NL</name></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x1b</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <name>res</name> <operator>+</operator> <name>len</name>

<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'2'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>res</name> <operator>+</operator> <operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\a'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x07</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>channel_consume</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>readq_T</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_head</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>readq_T</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>head</name><operator>-&gt;</operator><name>rq_next</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>rq_buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>rq_buflen</name></name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>rq_buflen</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>rq_buffer</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>rq_buflen</name></name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>channel_collapse</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>want_nl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>readq_T</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_head</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>readq_T</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>head</name><operator>-&gt;</operator><name>rq_next</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>readq_T</name> <modifier>*</modifier></type><name>last_node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>readq_T</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_buflen</name></name> <operator>+</operator> <name><name>last_node</name><operator>-&gt;</operator><name>rq_buflen</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>want_nl</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name><name>last_node</name><operator>-&gt;</operator><name>rq_next</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>channel_first_nl</name><argument_list>(<argument><expr><name>last_node</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>last_node</name> <operator>=</operator> <name><name>last_node</name><operator>-&gt;</operator><name>rq_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name><name>last_node</name><operator>-&gt;</operator><name>rq_buflen</name></name></expr>;</expr_stmt>

</block_content>}</block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>newbuf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>rq_buffer</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>rq_buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_buflen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>rq_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>rq_buffer</name></name> <operator>=</operator> <name>newbuf</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>node</name></expr>;</init> <condition><expr><name>n</name> <operator>!=</operator> <name>last_node</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>rq_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>rq_buffer</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>rq_buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>n</name><operator>-&gt;</operator><name>rq_buflen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>rq_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>rq_buflen</name></name> <operator>=</operator> <operator>(</operator><name>long_u</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>newbuf</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_next</name></name></expr>;</init> <condition><expr><name>n</name> <operator>!=</operator> <name>last_node</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>rq_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>rq_prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>rq_next</name></name> <operator>=</operator> <name><name>last_node</name><operator>-&gt;</operator><name>rq_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>last_node</name><operator>-&gt;</operator><name>rq_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>rq_prev</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>last_node</name><operator>-&gt;</operator><name>rq_next</name><operator>-&gt;</operator><name>rq_prev</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>last_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>channel_save</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>prepend</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lead</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>readq_T</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>readq_T</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_head</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>readq_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>rq_buffer</name></name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>rq_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_mode</name> <operator>==</operator> <name>MODE_NL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_buffer</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>CAR</name> <operator>||</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>len</name> <operator>||</operator> <name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>rq_buflen</name></name> <operator>=</operator> <operator>(</operator><name>long_u</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_buffer</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>rq_buffer</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>rq_buffer</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>rq_buflen</name></name> <operator>=</operator> <operator>(</operator><name>long_u</name><operator>)</operator><name>len</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prepend</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>rq_next</name></name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>rq_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>rq_prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>head</name><operator>-&gt;</operator><name>rq_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>rq_prev</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>rq_next</name><operator>-&gt;</operator><name>rq_prev</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>rq_next</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>rq_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>rq_prev</name></name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>rq_prev</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>head</name><operator>-&gt;</operator><name>rq_prev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>rq_next</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>rq_prev</name><operator>-&gt;</operator><name>rq_next</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>rq_prev</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ch_log_active</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>lead</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log_lead</name><argument_list>(<argument><expr><name>lead</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vim_ignored</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>fwrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>log_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>channel_fill</name><parameter_list>(<parameter><decl><type><name>js_read_T</name> <modifier>*</modifier></type><name>reader</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><operator>(</operator><name>channel_T</name> <operator>*</operator><operator>)</operator><name><name>reader</name><operator>-&gt;</operator><name>js_cookie</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part</name> <init>= <expr><name><name>reader</name><operator>-&gt;</operator><name>js_cookie_arg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>channel_get</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keeplen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>addlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>keeplen</name> <operator>=</operator> <name><name>reader</name><operator>-&gt;</operator><name>js_end</name></name> <operator>-</operator> <name><name>reader</name><operator>-&gt;</operator><name>js_buf</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keeplen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>addlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>keeplen</name> <operator>+</operator> <name>addlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>js_buf</name></name></expr></argument>, <argument><expr><name>keeplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>keeplen</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>addlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>js_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>js_buf</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>channel_parse_json</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>js_read_T</name></type> <name>reader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>listtv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jsonq_T</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>chanpart</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jsonq_T</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><operator>&amp;</operator><name><name>chanpart</name><operator>-&gt;</operator><name>ch_json_head</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>channel_peek</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>reader</name><operator>.</operator><name>js_buf</name></name> <operator>=</operator> <call><name>channel_get</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reader</name><operator>.</operator><name>js_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reader</name><operator>.</operator><name>js_fill</name></name> <operator>=</operator> <name>channel_fill</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reader</name><operator>.</operator><name>js_cookie</name></name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reader</name><operator>.</operator><name>js_cookie_arg</name></name> <operator>=</operator> <name>part</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>emsg_silent</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>json_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>listtv</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>chanpart</name><operator>-&gt;</operator><name>ch_mode</name></name> <operator>==</operator> <name>MODE_JS</name></expr> ?</condition><then> <expr><name>JSON_JS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>emsg_silent</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>listtv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name> <operator>||</operator> <name><name>listtv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>listtv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Did not receive a list, discarding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Expected list with two items, got %d"</literal></expr></argument>,

<argument><expr><name><name>listtv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>listtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>jsonq_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>listtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>jq_no_callback</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>jq_value</name></name> <operator>=</operator> <call><name>alloc_tv</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>jq_value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>listtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>item</name><operator>-&gt;</operator><name>jq_value</name></name> <operator>=</operator> <name>listtv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>jq_prev</name></name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>jq_prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>jq_prev</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>jq_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>jq_prev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>jq_next</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>jq_prev</name><operator>-&gt;</operator><name>jq_next</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chanpart</name><operator>-&gt;</operator><name>ch_wait_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <name>MAYBE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>reader</name><operator>.</operator><name>js_buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chanpart</name><operator>-&gt;</operator><name>ch_wait_len</name></name> <operator>&lt;</operator> <name>buflen</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,

<argument><expr><literal type="string">"Incomplete message (%d bytes) - wait 100 msec for more"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reader</name><operator>.</operator><name>js_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chanpart</name><operator>-&gt;</operator><name>ch_wait_len</name></name> <operator>=</operator> <name>buflen</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>chanpart</name><operator>-&gt;</operator><name>ch_deadline</name></name> <operator>=</operator> <call><name>GetTickCount</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">100L</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chanpart</name><operator>-&gt;</operator><name>ch_deadline</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chanpart</name><operator>-&gt;</operator><name>ch_deadline</name><operator>.</operator><name>tv_usec</name></name> <operator>+=</operator> <literal type="number">100</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chanpart</name><operator>-&gt;</operator><name>ch_deadline</name><operator>.</operator><name>tv_usec</name></name> <operator>&gt;</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>chanpart</name><operator>-&gt;</operator><name>ch_deadline</name><operator>.</operator><name>tv_usec</name></name> <operator>-=</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>chanpart</name><operator>-&gt;</operator><name>ch_deadline</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>timeout</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>GetTickCount</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name><name>chanpart</name><operator>-&gt;</operator><name>ch_deadline</name></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now_tv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now_tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>now_tv</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;</operator> <name><name>chanpart</name><operator>-&gt;</operator><name>ch_deadline</name><operator>.</operator><name>tv_sec</name></name>

<operator>||</operator> <operator>(</operator><name><name>now_tv</name><operator>.</operator><name>tv_sec</name></name> <operator>==</operator> <name><name>chanpart</name><operator>-&gt;</operator><name>ch_deadline</name><operator>.</operator><name>tv_sec</name></name>

<operator>&amp;&amp;</operator> <name><name>now_tv</name><operator>.</operator><name>tv_usec</name></name> <operator>&gt;</operator> <name><name>chanpart</name><operator>-&gt;</operator><name>ch_deadline</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>timeout</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chanpart</name><operator>-&gt;</operator><name>ch_wait_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"timed out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>reader</name><operator>.</operator><name>js_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"still waiting on incomplete message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Decoding failed - discarding input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chanpart</name><operator>-&gt;</operator><name>ch_wait_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>reader</name><operator>.</operator><name>js_buf</name><index>[<expr><name><name>reader</name><operator>.</operator><name>js_used</name></name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_save</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name><name>reader</name><operator>.</operator><name>js_buf</name></name> <operator>+</operator> <name><name>reader</name><operator>.</operator><name>js_used</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>reader</name><operator>.</operator><name>js_end</name></name> <operator>-</operator> <name><name>reader</name><operator>.</operator><name>js_buf</name></name><operator>)</operator> <operator>-</operator> <name><name>reader</name><operator>.</operator><name>js_used</name></name></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>status</name> <operator>==</operator> <name>MAYBE</name></expr> ?</condition><then> <expr><name>FALSE</name></expr></then><else>: <expr><name>TRUE</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>reader</name><operator>.</operator><name>js_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>remove_cb_node</name><parameter_list>(<parameter><decl><type><name>cbq_T</name> <modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>cbq_T</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>cq_prev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>cq_next</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>cq_next</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>cq_prev</name><operator>-&gt;</operator><name>cq_next</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>cq_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>cq_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>cq_prev</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>cq_prev</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>cq_next</name><operator>-&gt;</operator><name>cq_prev</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>cq_prev</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>remove_json_node</name><parameter_list>(<parameter><decl><type><name>jsonq_T</name> <modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>jsonq_T</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>jq_prev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>jq_next</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>jq_next</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>jq_prev</name><operator>-&gt;</operator><name>jq_next</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>jq_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>jq_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>jq_prev</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>jq_prev</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>jq_next</name><operator>-&gt;</operator><name>jq_prev</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>jq_prev</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_add_block_id</name><parameter_list>(<parameter><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>chanpart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name> <init>= <expr><operator>&amp;</operator><name><name>chanpart</name><operator>-&gt;</operator><name>ch_block_ids</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gap</name><operator>-&gt;</operator><name>ga_growsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>]</index> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_remove_block_id</name><parameter_list>(<parameter><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>chanpart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name> <init>= <expr><operator>&amp;</operator><name><name>chanpart</name><operator>-&gt;</operator><name>ch_block_ids</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <name>id</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>siemsg</name><argument_list>(<argument><expr><literal type="string">"INTERNAL: channel_remove_block_id: cannot find id %d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>channel_has_block_id</name><parameter_list>(<parameter><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>chanpart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name> <init>= <expr><operator>&amp;</operator><name><name>chanpart</name><operator>-&gt;</operator><name>ch_block_ids</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>channel_get_json</name><parameter_list>(

<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>,

<parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>without_callback</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>jsonq_T</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_json_head</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jsonq_T</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>head</name><operator>-&gt;</operator><name>jq_next</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>jq_value</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>lv_first</name><operator>-&gt;</operator><name>li_tv</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>without_callback</name> <operator>||</operator> <operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>jq_no_callback</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name> <operator>&amp;&amp;</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>==</operator> <name>id</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>id</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_NUMBER</name>

<operator>||</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>!</operator><call><name>channel_has_block_id</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>rettv</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>jq_value</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Getting JSON message %ld"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>remove_json_node</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>jq_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_push_json</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>jsonq_T</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_json_head</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jsonq_T</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>head</name><operator>-&gt;</operator><name>jq_next</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jsonq_T</name> <modifier>*</modifier></type><name>newitem</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>head</name><operator>-&gt;</operator><name>jq_prev</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>head</name><operator>-&gt;</operator><name>jq_prev</name><operator>-&gt;</operator><name>jq_no_callback</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <while>while <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>jq_no_callback</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>jq_next</name></name></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>

<expr_stmt><expr><name>newitem</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>jsonq_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newitem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>jq_value</name></name> <operator>=</operator> <call><name>alloc_tv</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>newitem</name><operator>-&gt;</operator><name>jq_value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>newitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>jq_no_callback</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>newitem</name><operator>-&gt;</operator><name>jq_value</name></name> <operator>=</operator> <operator>*</operator><name>rettv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>jq_prev</name></name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>jq_prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>jq_prev</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>jq_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>newitem</name><operator>-&gt;</operator><name>jq_prev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>jq_next</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>jq_prev</name><operator>-&gt;</operator><name>jq_next</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>jq_prev</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>jq_next</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>jq_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>jq_next</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>newitem</name><operator>-&gt;</operator><name>jq_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>jq_prev</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>newitem</name><operator>-&gt;</operator><name>jq_next</name><operator>-&gt;</operator><name>jq_prev</name></name> <operator>=</operator> <name>newitem</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CH_JSON_MAX_ARGS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_exe_cmd</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>options</name> <init>= <expr><ternary><condition><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_mode</name> <operator>==</operator> <name>MODE_JS</name></expr> ?</condition><then> <expr><name>JSON_JS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_STRING</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"received command with non-string argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E903: received command with non-string argument"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"ex"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>called_emsg_before</name> <init>= <expr><name>called_emsg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Executing ex command '%s'"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>emsg_silent</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>emsg_silent</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>called_emsg</name> <operator>&gt;</operator> <name>called_emsg_before</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Ex command error: '%s'"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>get_vim_var_str</name><argument_list>(<argument><expr><name>VV_ERRMSG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"normal"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>exarg_T</name></type> <name>ea</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Executing normal command '%s'"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ea</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ea</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>addr_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>forceit</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ex_normal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"redraw"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>exarg_T</name></type> <name>ea</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"redraw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ea</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ea</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>forceit</name></name> <operator>=</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ex_redraw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showruler</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"expr"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"call"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>is_call</name> <init>= <expr><name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id_idx</name> <init>= <expr><ternary><condition><expr><name>is_call</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>id_idx</name></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name>

<operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><name>id_idx</name></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_NUMBER</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"last argument for expr/call must be a number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E904: last argument for expr/call must be a number"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>is_call</name> <operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"third argument for call must be a list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E904: third argument for call must be a list"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>res_tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>err_tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>emsg_skip</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_call</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Evaluating expression '%s'"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>eval_expr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Calling '%s'"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>func_call</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res_tv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <operator>&amp;</operator><name>res_tv</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>id_idx</name></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_NUMBER</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><name><name>argv</name><index>[<expr><name>id_idx</name></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_encode_nr_expr</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>options</name> <operator>|</operator> <name>JSON_NL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>json</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>json</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>err_tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>err_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ERROR"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>json_encode_nr_expr</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err_tv</name></expr></argument>, <argument><expr><name>options</name> <operator>|</operator> <name>JSON_NL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>json</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_send</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>part</name> <operator>==</operator> <name>PART_SOCK</name></expr> ?</condition><then> <expr><name>PART_SOCK</name></expr> </then><else>: <expr><name>PART_IN</name></expr></else></ternary></expr></argument>,

<argument><expr><name>json</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>emsg_skip</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>==</operator> <operator>&amp;</operator><name>res_tv</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Received unknown command: %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E905: received unknown command: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>invoke_one_time_callback</name><parameter_list>(

<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>,

<parameter><decl><type><name>cbq_T</name> <modifier>*</modifier></type><name>cbhead</name></decl></parameter>,

<parameter><decl><type><name>cbq_T</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Invoking one-time callback %s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>cq_callback</name><operator>.</operator><name>cb_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_cb_node</name><argument_list>(<argument><expr><name>cbhead</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invoke_callback</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>cq_callback</name></name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>cq_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>append_to_buffer</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bufref_T</name></type> <name>save_curbuf</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>save_curwin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>save_curtab</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_write_to</name> <init>= <expr><name><name>buffer</name><operator>-&gt;</operator><name>b_write_to_channel</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>ch_part</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_p_ma</name> <init>= <expr><name><name>buffer</name><operator>-&gt;</operator><name>b_p_ma</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>empty</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buffer</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ch_part</name><operator>-&gt;</operator><name>ch_nomodifiable</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ch_part</name><operator>-&gt;</operator><name>ch_nomod_error</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Buffer is not modifiable, cannot append"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch_part</name><operator>-&gt;</operator><name>ch_nomod_error</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>save_write_to</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>b_write_to_channel</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"appending line %d to buffer"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>lnum</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>switch_to_win_for_buf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curtab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u_sync</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vim_ignored</name> <operator>=</operator> <call><name>u_save</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <name>empty</name></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>empty</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ml_replace</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>appended_lines_mark</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_win_for_buf</name><argument_list>(<argument><expr><name>save_curwin</name></expr></argument>, <argument><expr><name>save_curtab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch_part</name><operator>-&gt;</operator><name>ch_nomodifiable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>=</operator> <name>save_p_ma</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buffer</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>move_cursor</name> <init>= <expr><ternary><condition><expr><name>save_write_to</name></expr>

?</condition><then> <expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>

</then><else>: <expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name>lnum</name>

<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>move_cursor</name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;</operator> <name><name>buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>move_cursor</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>save_curwin</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scroll_cursor_bot</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>save_curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>redraw_buf_and_status_later</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>channel_need_redraw</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>save_write_to</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>b_write_to_channel</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<macro><name>FOR_ALL_CHANNELS</name><argument_list>(<argument>ch</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>in_part</name> <init>= <expr><operator>&amp;</operator><name><name>ch</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_IN</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_bufref</name><operator>.</operator><name>br_buf</name></name> <operator>==</operator> <name>buffer</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_buf_bot</name></name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>drop_messages</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>msg</name> <operator>=</operator> <call><name>channel_get</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Dropping message '%s'"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>may_invoke_callback</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>listtv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><name>CH_JSON_MAX_ARGS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seq_nr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>ch_part</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_mode_T</name></type> <name>ch_mode</name> <init>= <expr><name><name>ch_part</name><operator>-&gt;</operator><name>ch_mode</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cbq_T</name> <modifier>*</modifier></type><name>cbhead</name> <init>= <expr><operator>&amp;</operator><name><name>ch_part</name><operator>-&gt;</operator><name>ch_cb_head</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cbq_T</name> <modifier>*</modifier></type><name>cbitem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>callback_T</name> <modifier>*</modifier></type><name>callback</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_nb_close_cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>cbitem</name> <operator>=</operator> <name><name>cbhead</name><operator>-&gt;</operator><name>cq_next</name></name></expr>;</init> <condition><expr><name>cbitem</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cbitem</name> <operator>=</operator> <name><name>cbitem</name><operator>-&gt;</operator><name>cq_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>cbitem</name><operator>-&gt;</operator><name>cq_seq_nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>cbitem</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>callback</name> <operator>=</operator> <operator>&amp;</operator><name><name>cbitem</name><operator>-&gt;</operator><name>cq_callback</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>ch_part</name><operator>-&gt;</operator><name>ch_callback</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>callback</name> <operator>=</operator> <operator>&amp;</operator><name><name>ch_part</name><operator>-&gt;</operator><name>ch_callback</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_callback</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>callback</name> <operator>=</operator> <operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_callback</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name><name>ch_part</name><operator>-&gt;</operator><name>ch_bufref</name><operator>.</operator><name>br_buf</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ch_part</name><operator>-&gt;</operator><name>ch_bufref</name></name></expr></argument>)</argument_list></call>

<operator>||</operator> <name><name>buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"%s buffer has been wiped out"</literal></expr></argument>, <argument><expr><name><name>part_names</name><index>[<expr><name>part</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch_part</name><operator>-&gt;</operator><name>ch_bufref</name><operator>.</operator><name>br_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch_mode</name> <operator>==</operator> <name>MODE_JSON</name> <operator>||</operator> <name>ch_mode</name> <operator>==</operator> <name>MODE_JS</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>channel_get_json</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>listtv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_parse_json</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>channel_get_json</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>listtv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>item</name> <operator>=</operator> <name><name>listtv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</init>

<condition><expr><name>item</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>argc</name> <operator>&lt;</operator> <name>CH_JSON_MAX_ARGS</name></expr>;</condition>

<incr><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>li_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>li_tv</name></name></expr>;</expr_stmt></block_content></block></for>

<while>while <condition>(<expr><name>argc</name> <operator>&lt;</operator> <name>CH_JSON_MAX_ARGS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_exe_cmd</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_tv</name><argument_list>(<argument><expr><name>listtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_NUMBER</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,

<argument><expr><literal type="string">"Dropping message with invalid sequence number type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_tv</name><argument_list>(<argument><expr><name>listtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>seq_nr</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>channel_peek</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>callback</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_close_cb</name><operator>.</operator><name>cb_name</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_drop_never</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>drop_messages</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch_mode</name> <operator>==</operator> <name>MODE_NL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>nl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>readq_T</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>TRUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>channel_peek</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nl</name> <operator>=</operator> <call><name>channel_first_nl</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nl</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>channel_collapse</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ch_part</name><operator>-&gt;</operator><name>ch_fd</name></name> <operator>==</operator> <name>INVALID_FD</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_buflen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_buffer</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</init> <condition><expr><operator>(</operator><name>nl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>p</name> <operator>&lt;</operator> <name>nl</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>buf</name> <operator>+</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_buflen</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NL</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>nl</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>channel_get</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>nl</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>buf</name> <operator>+</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_buflen</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>channel_get</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>nl</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>nl</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_consume</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>nl</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>channel_get_all</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>seq_nr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cbitem</name> <operator>=</operator> <name><name>cbhead</name><operator>-&gt;</operator><name>cq_next</name></name></expr>;</init> <condition><expr><name>cbitem</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cbitem</name> <operator>=</operator> <name><name>cbitem</name><operator>-&gt;</operator><name>cq_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>cbitem</name><operator>-&gt;</operator><name>cq_seq_nr</name></name> <operator>==</operator> <name>seq_nr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>invoke_one_time_callback</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>cbhead</name></expr></argument>, <argument><expr><name>cbitem</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_drop_never</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_push_json</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>listtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>listtv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Dropping message %d without callback"</literal></expr></argument>,

<argument><expr><name>seq_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>callback</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>buffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>json_encode</name><argument_list>(<argument><expr><name>listtv</name></expr></argument>, <argument><expr><name>ch_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>b_term</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_to_term</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>append_to_buffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>callback</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cbitem</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>invoke_one_time_callback</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>cbhead</name></expr></argument>, <argument><expr><name>cbitem</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Invoking channel callback %s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>callback</name><operator>-&gt;</operator><name>cb_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>invoke_callback</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Dropping message %d"</literal></expr></argument>, <argument><expr><name>seq_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>listtv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_tv</name><argument_list>(<argument><expr><name>listtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>channel_can_write_to</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>channel</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>channel</name><operator>-&gt;</operator><name>CH_SOCK_FD</name></name> <operator>!=</operator> <name>INVALID_FD</name>

<operator>||</operator> <name><name>channel</name><operator>-&gt;</operator><name>CH_IN_FD</name></name> <operator>!=</operator> <name>INVALID_FD</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>channel_is_open</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>channel</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>channel</name><operator>-&gt;</operator><name>CH_SOCK_FD</name></name> <operator>!=</operator> <name>INVALID_FD</name>

<operator>||</operator> <name><name>channel</name><operator>-&gt;</operator><name>CH_IN_FD</name></name> <operator>!=</operator> <name>INVALID_FD</name>

<operator>||</operator> <name><name>channel</name><operator>-&gt;</operator><name>CH_OUT_FD</name></name> <operator>!=</operator> <name>INVALID_FD</name>

<operator>||</operator> <name><name>channel</name><operator>-&gt;</operator><name>CH_ERR_FD</name></name> <operator>!=</operator> <name>INVALID_FD</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>channel_has_readahead</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ch_mode_T</name></type> <name>ch_mode</name> <init>= <expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_mode</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch_mode</name> <operator>==</operator> <name>MODE_JSON</name> <operator>||</operator> <name>ch_mode</name> <operator>==</operator> <name>MODE_JS</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>jsonq_T</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_json_head</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>head</name><operator>-&gt;</operator><name>jq_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_parse_json</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>head</name><operator>-&gt;</operator><name>jq_next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>channel_peek</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>channel_status</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_part</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_readahead</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"fail"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>req_part</name> <operator>==</operator> <name>PART_OUT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>CH_OUT_FD</name></name> <operator>!=</operator> <name>INVALID_FD</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"open"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>channel_has_readahead</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_OUT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>has_readahead</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>req_part</name> <operator>==</operator> <name>PART_ERR</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>CH_ERR_FD</name></name> <operator>!=</operator> <name>INVALID_FD</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"open"</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>channel_has_readahead</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_ERR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>has_readahead</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>channel_is_open</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"open"</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>part</name> <operator>=</operator> <name>PART_SOCK</name></expr>;</init> <condition><expr><name>part</name> <operator>&lt;</operator> <name>PART_IN</name></expr>;</condition> <incr><expr><operator>++</operator><name>part</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>channel_has_readahead</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>has_readahead</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_readahead</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"buffered"</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="string">"closed"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_part_info</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>chanpart</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>namebuf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>namebuf</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>, <argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>namebuf</name> <operator>+</operator> <name>tail</name></expr></argument>, <argument><expr><literal type="string">"status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chanpart</name><operator>-&gt;</operator><name>ch_fd</name></name> <operator>!=</operator> <name>INVALID_FD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="string">"open"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>channel_has_readahead</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="string">"buffered"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="string">"closed"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>namebuf</name> <operator>+</operator> <name>tail</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>chanpart</name><operator>-&gt;</operator><name>ch_mode</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>MODE_NL</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"NL"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>MODE_RAW</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"RAW"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>MODE_JSON</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"JSON"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>MODE_JS</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"JS"</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>namebuf</name> <operator>+</operator> <name>tail</name></expr></argument>, <argument><expr><literal type="string">"io"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>part</name> <operator>==</operator> <name>PART_SOCK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"socket"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <switch>switch <condition>(<expr><name><name>chanpart</name><operator>-&gt;</operator><name>ch_io</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>JIO_NULL</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"null"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>JIO_PIPE</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"pipe"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>JIO_FILE</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"file"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>JIO_BUFFER</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"buffer"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>JIO_OUT</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"out"</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>namebuf</name> <operator>+</operator> <name>tail</name></expr></argument>, <argument><expr><literal type="string">"timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>, <argument><expr><name><name>chanpart</name><operator>-&gt;</operator><name>ch_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_info</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"status"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>channel_status</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_hostname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"hostname"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"port"</literal></expr></argument>, <argument><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_part_info</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"sock"</literal></expr></argument>, <argument><expr><name>PART_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>channel_part_info</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"out"</literal></expr></argument>, <argument><expr><name>PART_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_part_info</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"err"</literal></expr></argument>, <argument><expr><name>PART_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_part_info</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"in"</literal></expr></argument>, <argument><expr><name>PART_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>channel_close</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>invoke_close_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Closing channel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>channel_gui_unregister</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ch_close_part</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ch_close_part</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ch_close_part</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ch_close_part</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>invoke_close_cb</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_close_cb</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,

<argument><expr><literal type="string">"Invoking callbacks and flushing buffers before closing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>part</name> <operator>=</operator> <name>PART_SOCK</name></expr>;</init> <condition><expr><name>part</name> <operator>&lt;</operator> <name>PART_IN</name></expr>;</condition> <incr><expr><operator>++</operator><name>part</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_close_cb</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name><name>ch_bufref</name><operator>.</operator><name>br_buf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_refcount</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_close_cb</name><operator>.</operator><name>cb_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"flushing %s buffers before closing"</literal></expr></argument>,

<argument><expr><name><name>part_names</name><index>[<expr><name>part</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>may_invoke_callback</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><operator>--</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_refcount</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_close_cb</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_refcount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Invoking close callback %s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_close_cb</name><operator>.</operator><name>cb_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_CHANNEL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_channel</name></name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_close_cb</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>channel_need_redraw</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_close_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channel_need_redraw</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>channel_need_redraw</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_after_callback</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_drop_never</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>part</name> <operator>=</operator> <name>PART_SOCK</name></expr>;</init> <condition><expr><name>part</name> <operator>&lt;</operator> <name>PART_IN</name></expr>;</condition> <incr><expr><operator>++</operator><name>part</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>drop_messages</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_refcount</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_nb_close_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>term_channel_closed</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_close_in</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_close_part</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>remove_from_writeque</name><parameter_list>(<parameter><decl><type><name>writeq_T</name> <modifier>*</modifier></type><name>wq</name></decl></parameter>, <parameter><decl><type><name>writeq_T</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>wq_ga</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wq</name><operator>-&gt;</operator><name>wq_next</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>wq_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wq</name><operator>-&gt;</operator><name>wq_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wq</name><operator>-&gt;</operator><name>wq_prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wq</name><operator>-&gt;</operator><name>wq_next</name><operator>-&gt;</operator><name>wq_prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_clear_one</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>ch_part</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jsonq_T</name> <modifier>*</modifier></type><name>json_head</name> <init>= <expr><operator>&amp;</operator><name><name>ch_part</name><operator>-&gt;</operator><name>ch_json_head</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cbq_T</name> <modifier>*</modifier></type><name>cb_head</name> <init>= <expr><operator>&amp;</operator><name><name>ch_part</name><operator>-&gt;</operator><name>ch_cb_head</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>channel_peek</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><call><name>channel_get</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name><name>cb_head</name><operator>-&gt;</operator><name>cq_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>cbq_T</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>cb_head</name><operator>-&gt;</operator><name>cq_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>remove_cb_node</name><argument_list>(<argument><expr><name>cb_head</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>cq_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name><name>json_head</name><operator>-&gt;</operator><name>jq_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_tv</name><argument_list>(<argument><expr><name><name>json_head</name><operator>-&gt;</operator><name>jq_next</name><operator>-&gt;</operator><name>jq_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_json_node</name><argument_list>(<argument><expr><name>json_head</name></expr></argument>, <argument><expr><name><name>json_head</name><operator>-&gt;</operator><name>jq_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ch_part</name><operator>-&gt;</operator><name>ch_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ch_part</name><operator>-&gt;</operator><name>ch_block_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>ch_part</name><operator>-&gt;</operator><name>ch_writeque</name><operator>.</operator><name>wq_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>remove_from_writeque</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ch_part</name><operator>-&gt;</operator><name>ch_writeque</name></name></expr></argument>,

<argument><expr><name><name>ch_part</name><operator>-&gt;</operator><name>ch_writeque</name><operator>.</operator><name>wq_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>channel_clear</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Clearing channel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_clear_one</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_clear_one</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_clear_one</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_clear_one</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_close_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>channel_free_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"channel_free_all()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR_ALL_CHANNELS</name><argument_list>(<argument>channel</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>channel_clear</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DETACH_MSG_RAW</name></cpp:macro> <cpp:value>"DETACH\n"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXMSGSIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>channel_fill_wfds</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxfd_arg</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>wfds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>maxfd</name> <init>= <expr><name>maxfd_arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>ch</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_CHANNELS</name><argument_list>(<argument>ch</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>in_part</name> <init>= <expr><operator>&amp;</operator><name><name>ch</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_IN</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_fd</name></name> <operator>!=</operator> <name>INVALID_FD</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>in_part</name><operator>-&gt;</operator><name>ch_bufref</name><operator>.</operator><name>br_buf</name></name> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <name><name>in_part</name><operator>-&gt;</operator><name>ch_writeque</name><operator>.</operator><name>wq_next</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>in_part</name><operator>-&gt;</operator><name>ch_fd</name></name></expr></argument>, <argument><expr><name>wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>in_part</name><operator>-&gt;</operator><name>ch_fd</name></name> <operator>&gt;=</operator> <name>maxfd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxfd</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>in_part</name><operator>-&gt;</operator><name>ch_fd</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>maxfd</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>channel_fill_poll_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nfd_in</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nfd</name> <init>= <expr><name>nfd_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>ch</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_CHANNELS</name><argument_list>(<argument>ch</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>in_part</name> <init>= <expr><operator>&amp;</operator><name><name>ch</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_IN</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_fd</name></name> <operator>!=</operator> <name>INVALID_FD</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>in_part</name><operator>-&gt;</operator><name>ch_bufref</name><operator>.</operator><name>br_buf</name></name> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <name><name>in_part</name><operator>-&gt;</operator><name>ch_writeque</name><operator>.</operator><name>wq_next</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_poll_idx</name></name> <operator>=</operator> <name>nfd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fds</name><index>[<expr><name>nfd</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>in_part</name><operator>-&gt;</operator><name>ch_fd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fds</name><index>[<expr><name>nfd</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLOUT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>nfd</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_poll_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block>

<return>return <expr><name>nfd</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <block>{

<decl><name>CW_READY</name></decl>,

<decl><name>CW_NOT_READY</name></decl>,

<decl><name>CW_ERROR</name></decl>

}</block></enum></type> <name>channel_wait_result</name>;</typedef>

<function><type><specifier>static</specifier> <name>channel_wait_result</name></type>

<name>channel_wait</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>sock_T</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Waiting for up to %d msec"</literal></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <name><name>channel</name><operator>-&gt;</operator><name>CH_SOCK_FD</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>nread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sleep_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>deadline</name> <init>= <expr><call><name>GetTickCount</name><argument_list>()</argument_list></call> <operator>+</operator> <name>timeout</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delay</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>TRUE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>PeekNamedPipe</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;&amp;</operator> <name>nread</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CW_READY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_named_pipe</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DisconnectNamedPipe</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ConnectNamedPipe</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CW_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>channel_write_any_lines</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sleep_time</name> <operator>=</operator> <name>deadline</name> <operator>-</operator> <call><name>GetTickCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sleep_time</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sleep_time</name> <operator>&gt;</operator> <name>delay</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sleep_time</name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>sleep_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <name>delay</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SELECT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name></type> <name>rfds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name></type> <name>wfds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxfd</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tval</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>timeout</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tval</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>timeout</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxfd</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>fd</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxfd</name> <operator>=</operator> <call><name>channel_fill_wfds</name><argument_list>(<argument><expr><name>maxfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name>maxfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EINTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>SOCK_ERRNO</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CW_READY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>channel_write_any_lines</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>fds</name><index>[<expr><name>MAX_OPEN_CHANNELS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nfd</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nfd</name> <operator>=</operator> <call><name>channel_fill_poll_write</name><argument_list>(<argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>poll</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CW_READY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>channel_write_any_lines</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>CW_NOT_READY</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ch_close_part_on_error</name><parameter_list>(

<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[]</index></name> <init>= <expr><literal type="string">"%s(): Read %s from ch_part[%d], closing"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_err</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><literal type="string">"EOF"</literal></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_nb_close_cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_save</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_SOCK</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DETACH_MSG_RAW</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>DETACH_MSG_RAW</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="string">"PUT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>part</name> <operator>==</operator> <name>PART_OUT</name> <operator>||</operator> <name>part</name> <operator>==</operator> <name>PART_ERR</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>other</name> <init>= <expr><ternary><condition><expr><name>part</name> <operator>==</operator> <name>PART_OUT</name></expr> ?</condition><then> <expr><name>PART_ERR</name></expr> </then><else>: <expr><name>PART_OUT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_fd</name> <operator>==</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>other</name></expr>]</index></name><operator>.</operator><name>ch_fd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_close_part</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ch_close_part</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>channel_gui_unregister_one</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_close_now</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Closing channel because all readable fds are closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_nb_close_cb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>channel</name><operator>-&gt;</operator><name>ch_nb_close_cb</name></name>)<argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>channel_close</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_read</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>readlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sock_T</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_socket</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_fd</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>INVALID_FD</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"channel_read() called while %s part is closed"</literal></expr></argument>,

<argument><expr><name><name>part_names</name><index>[<expr><name>part</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>use_socket</name> <operator>=</operator> <name>fd</name> <operator>==</operator> <name><name>channel</name><operator>-&gt;</operator><name>CH_SOCK_FD</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>MAXMSGSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>channel_wait</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CW_READY</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_socket</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sock_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>MAXMSGSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>fd_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>MAXMSGSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>channel_save</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="string">"RECV "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>readlen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>MAXMSGSIZE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>readlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_keep_open</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_close_part_on_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><operator>(</operator><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CH_HAS_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>CH_HAS_GUI</name> <operator>&amp;&amp;</operator> <call><name>gtk_main_level</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_main_quit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>channel_read_block</name><parameter_list>(

<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_mode_T</name></type> <name>mode</name> <init>= <expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_mode</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sock_T</name></type> <name>fd</name> <init>= <expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_fd</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>nl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>readq_T</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Blocking %s read, timeout: %d msec"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>mode</name> <operator>==</operator> <name>MODE_RAW</name></expr> ?</condition><then> <expr><literal type="string">"RAW"</literal></expr> </then><else>: <expr><literal type="string">"NL"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>TRUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>channel_peek</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_RAW</name> <operator>||</operator> <operator>(</operator><name>mode</name> <operator>==</operator> <name>MODE_NL</name>

<operator>&amp;&amp;</operator> <call><name>channel_first_nl</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>channel_collapse</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>mode</name> <operator>==</operator> <name>MODE_NL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>raw</name> <operator>||</operator> <name>fd</name> <operator>==</operator> <name>INVALID_FD</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>INVALID_FD</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>channel_wait</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CW_READY</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Timed out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>channel_read</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><literal type="string">"channel_read_block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_RAW</name> <operator>||</operator> <name>outlen</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>channel_get_all</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nl</name> <operator>=</operator> <call><name>channel_first_nl</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</init> <condition><expr><operator>(</operator><name>nl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>p</name> <operator>&lt;</operator> <name>nl</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>buf</name> <operator>+</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_buflen</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NL</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>nl</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>channel_get</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>nl</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>buf</name> <operator>+</operator> <name><name>node</name><operator>-&gt;</operator><name>rq_buflen</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>channel_get</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>nl</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>nl</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_consume</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>nl</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ch_log_active</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Returning %d bytes"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>msg</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>channel_blocking_wait</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>

<name>channel_in_blocking_wait</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>channel_blocking_wait</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>channel_read_json_block</name><parameter_list>(

<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>,

<parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>timeout_arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>more</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sock_T</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>chanpart</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FAIL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Blocking read JSON for id %d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>channel_blocking_wait</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_add_block_id</name><argument_list>(<argument><expr><name>chanpart</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>more</name> <operator>=</operator> <call><name>channel_parse_json</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>channel_get_json</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Received JSON for id %d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>more</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>channel_parse_messages</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>timeout_arg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chanpart</name><operator>-&gt;</operator><name>ch_wait_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>chanpart</name><operator>-&gt;</operator><name>ch_deadline</name></name> <operator>-</operator> <call><name>GetTickCount</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now_tv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now_tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <operator>(</operator><name><name>chanpart</name><operator>-&gt;</operator><name>ch_deadline</name><operator>.</operator><name>tv_sec</name></name>

<operator>-</operator> <name><name>now_tv</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal>

<operator>+</operator> <operator>(</operator><name><name>chanpart</name><operator>-&gt;</operator><name>ch_deadline</name><operator>.</operator><name>tv_usec</name></name>

<operator>-</operator> <name><name>now_tv</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal>

<operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>chanpart</name><operator>-&gt;</operator><name>ch_wait_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>timeout_arg</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <name>timeout_arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>timeout_arg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <name><name>chanpart</name><operator>-&gt;</operator><name>ch_fd</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>INVALID_FD</name>

<operator>||</operator> <call><name>channel_wait</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CW_READY</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>==</operator> <name>timeout_arg</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <name>INVALID_FD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Timed out on id %d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_read</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><literal type="string">"channel_read_json_block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_remove_block_id</name><argument_list>(<argument><expr><name>chanpart</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>channel_blocking_wait</name></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>channel_T</name> <modifier>*</modifier></type>

<name>get_channel_arg</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>check_open</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reading</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_readahead</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_JOB</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_job</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_CHANNEL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_channel</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>reading</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>has_readahead</name> <operator>=</operator> <call><name>channel_has_readahead</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>part</name> <operator>!=</operator> <name>PART_COUNT</name></expr> ?</condition><then> <expr><name>part</name></expr> </then><else>: <expr><call><name>channel_part_read</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>check_open</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>channel</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>channel_is_open</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>reading</name> <operator>&amp;&amp;</operator> <name>has_readahead</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E906: not an open channel"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>channel</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>common_channel_read</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blob</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part</name> <init>= <expr><name>PART_COUNT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobopt_T</name></type> <name>opt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>listtv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name>JO_TIMEOUT</name> <operator>+</operator> <name>JO_PART</name> <operator>+</operator> <name>JO_ID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_PART</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>part</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>jo_part</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>get_channel_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>part</name> <operator>==</operator> <name>PART_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>part</name> <operator>=</operator> <call><name>channel_part_read</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>channel_get_mode</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>channel_get_timeout</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>jo_timeout</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>blob</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>outlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>channel_read_block</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>,

<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>blob_T</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>blob_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>bv_ga</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <name>outlen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>bv_ga</name></name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>blob_free</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>bv_ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rettv_blob_set</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>raw</name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>MODE_RAW</name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>MODE_NL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>channel_read_block</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>,

<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>raw</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_ID</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>jo_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>channel_read_json_block</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>listtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>listtv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>rettv</name> <operator>=</operator> <operator>*</operator><name>listtv</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>listtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>VVAL_NONE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>theend</name>:</label>

<expr_stmt><expr><call><name>free_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>channel_handle_events</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>only_keep_open</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sock_T</name></type> <name>fd</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_CHANNELS</name><argument_list>(<argument>channel</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>only_keep_open</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_keep_open</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>part</name> <operator>=</operator> <name>PART_SOCK</name></expr>;</init> <condition><expr><name>part</name> <operator>&lt;</operator> <name>PART_IN</name></expr>;</condition> <incr><expr><operator>++</operator><name>part</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_fd</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <name>INVALID_FD</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>channel_wait</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>CW_READY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_read</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><literal type="string">"channel_handle_events"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>r</name> <operator>==</operator> <name>CW_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_close_part_on_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,

<argument><expr><literal type="string">"channel_handle_events"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>channel_any_keep_open</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_CHANNELS</name><argument_list>(<argument>channel</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_keep_open</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>channel_set_nonblock</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>ch_part</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>ch_part</name><operator>-&gt;</operator><name>ch_fd</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <name>INVALID_FD</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>u_long</name></type> <name>val</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ioctlsocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ch_part</name><operator>-&gt;</operator><name>ch_nonblocking</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>channel_send</name><parameter_list>(

<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>,

<parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf_arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len_arg</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fun</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sock_T</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>ch_part</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_use_queue</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <name><name>ch_part</name><operator>-&gt;</operator><name>ch_fd</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>INVALID_FD</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_error</name></name> <operator>&amp;&amp;</operator> <name>fun</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"%s(): write while not connected"</literal></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E630: %s(): write while not connected"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_error</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_nonblock</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ch_part</name><operator>-&gt;</operator><name>ch_nonblocking</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_set_nonblock</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ch_log_active</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log_lead</name><argument_list>(<argument><expr><literal type="string">"SEND "</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vim_ignored</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>fwrite</name><argument_list>(<argument><expr><name>buf_arg</name></expr></argument>, <argument><expr><name>len_arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>log_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_repeated_msg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>writeq_T</name> <modifier>*</modifier></type><name>wq</name> <init>= <expr><operator>&amp;</operator><name><name>ch_part</name><operator>-&gt;</operator><name>ch_writeque</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wq</name><operator>-&gt;</operator><name>wq_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>wq</name><operator>-&gt;</operator><name>wq_next</name><operator>-&gt;</operator><name>wq_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>wq</name><operator>-&gt;</operator><name>wq_next</name><operator>-&gt;</operator><name>wq_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_use_queue</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len_arg</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>buf_arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>len_arg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>part</name> <operator>==</operator> <name>PART_SOCK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sock_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>fd_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_named_pipe</name></name> <operator>&amp;&amp;</operator> <name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DisconnectNamedPipe</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ConnectNamedPipe</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>errno</name> <operator>==</operator> <name>EAGAIN</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ch_part</name><operator>-&gt;</operator><name>ch_nonblocking</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>writeq_T</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>wq</name><operator>-&gt;</operator><name>wq_next</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>did_use_queue</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Sent %d bytes now"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>len</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>remove_from_writeque</name><argument_list>(<argument><expr><name>wq</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>did_use_queue</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Write queue empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>wq_ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>wq_ga</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name>res</name></expr></argument>,

<argument><expr><name>len</name> <operator>-</operator> <name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>wq_ga</name><operator>.</operator><name>ga_len</name></name> <operator>-=</operator> <name>res</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>buf_arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>len_arg</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>res</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"Adding %d bytes to the write queue"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wq</name><operator>-&gt;</operator><name>wq_prev</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>wq</name><operator>-&gt;</operator><name>wq_prev</name><operator>-&gt;</operator><name>wq_ga</name><operator>.</operator><name>ga_len</name></name> <operator>+</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">4000</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>writeq_T</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><name><name>wq</name><operator>-&gt;</operator><name>wq_prev</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>last</name><operator>-&gt;</operator><name>wq_ga</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>last</name><operator>-&gt;</operator><name>wq_ga</name><operator>.</operator><name>ga_data</name></name>

<operator>+</operator> <name><name>last</name><operator>-&gt;</operator><name>wq_ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>,

<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>wq_ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>writeq_T</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>writeq_T</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>wq_prev</name></name> <operator>=</operator> <name><name>wq</name><operator>-&gt;</operator><name>wq_prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>wq_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wq</name><operator>-&gt;</operator><name>wq_prev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wq</name><operator>-&gt;</operator><name>wq_next</name></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wq</name><operator>-&gt;</operator><name>wq_prev</name><operator>-&gt;</operator><name>wq_next</name></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>wq</name><operator>-&gt;</operator><name>wq_prev</name></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>last</name><operator>-&gt;</operator><name>wq_ga</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>last</name><operator>-&gt;</operator><name>wq_ga</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>last</name><operator>-&gt;</operator><name>wq_ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>wq_ga</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>res</name> <operator>!=</operator> <name>len</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_error</name></name> <operator>&amp;&amp;</operator> <name>fun</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"%s(): write failed"</literal></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E631: %s(): write failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_error</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_error</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>channel_T</name> <modifier>*</modifier></type>

<name>send_common</name><parameter_list>(

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>eval</name></decl></parameter>,

<parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fun</name></decl></parameter>,

<parameter><decl><type><name>ch_part_T</name> <modifier>*</modifier></type><name>part_read</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part_send</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clear_job_options</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>get_channel_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>part_send</name> <operator>=</operator> <call><name>channel_part_send</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>part_read</name> <operator>=</operator> <call><name>channel_part_read</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>JO_CALLBACK</name> <operator>+</operator> <name>JO_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_callback</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_callback</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>eval</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E917: Cannot use a callback with %s()"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>channel_set_req_callback</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><operator>*</operator><name>part_read</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_callback</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>channel_send</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part_send</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name>

<operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_callback</name><operator>.</operator><name>cb_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>channel</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ch_expr_common</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>listtv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_mode_T</name></type> <name>ch_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part_send</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part_read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobopt_T</name></type> <name>opt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>timeout</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>get_channel_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>part_send</name> <operator>=</operator> <call><name>channel_part_send</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ch_mode</name> <operator>=</operator> <call><name>channel_get_mode</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part_send</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch_mode</name> <operator>==</operator> <name>MODE_RAW</name> <operator>||</operator> <name>ch_mode</name> <operator>==</operator> <name>MODE_NL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E912: cannot use ch_evalexpr()/ch_sendexpr() with a raw or nl channel"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>++</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_last_msg_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>json_encode_nr_expr</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>ch_mode</name> <operator>==</operator> <name>MODE_JS</name></expr> ?</condition><then> <expr><name>JSON_JS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <name>JSON_NL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>send_common</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>eval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>eval</name></expr> ?</condition><then> <expr><literal type="string">"ch_evalexpr"</literal></expr> </then><else>: <expr><literal type="string">"ch_sendexpr"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>part_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>eval</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>jo_timeout</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>channel_get_timeout</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>channel_read_json_block</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part_read</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>listtv</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>listtv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>rettv</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>lv_u</name><operator>.</operator><name>mat</name><operator>.</operator><name>lv_last</name><operator>-&gt;</operator><name>li_tv</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>lv_u</name><operator>.</operator><name>mat</name><operator>.</operator><name>lv_last</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_tv</name><argument_list>(<argument><expr><name>listtv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ch_raw_common</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part_read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobopt_T</name></type> <name>opt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>timeout</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_BLOB</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_blob</name><operator>-&gt;</operator><name>bv_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_blob</name><operator>-&gt;</operator><name>bv_ga</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>send_common</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>eval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>eval</name></expr> ?</condition><then> <expr><literal type="string">"ch_evalraw"</literal></expr> </then><else>: <expr><literal type="string">"ch_sendraw"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>part_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>eval</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>jo_timeout</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>channel_get_timeout</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>channel_read_block</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part_read</name></expr></argument>,

<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEEP_OPEN_TIME</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SELECT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>channel_poll_setup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nfd_in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fds_in</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>towait</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nfd</name> <init>= <expr><name>nfd_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name> <init>= <expr><name>fds_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_CHANNELS</name><argument_list>(<argument>channel</argument>)</argument_list></macro>

<block>{<block_content>

<for>for <control>(<init><expr><name>part</name> <operator>=</operator> <name>PART_SOCK</name></expr>;</init> <condition><expr><name>part</name> <operator>&lt;</operator> <name>PART_IN</name></expr>;</condition> <incr><expr><operator>++</operator><name>part</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>ch_part</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch_part</name><operator>-&gt;</operator><name>ch_fd</name></name> <operator>!=</operator> <name>INVALID_FD</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_keep_open</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>towait</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>towait</name></expr></argument> &gt;</argument_list></name> <name>KEEP_OPEN_TIME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>towait</name> <operator>=</operator> <name>KEEP_OPEN_TIME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>ch_part</name><operator>-&gt;</operator><name>ch_poll_idx</name></name> <operator>=</operator> <name>nfd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fds</name><index>[<expr><name>nfd</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>ch_part</name><operator>-&gt;</operator><name>ch_fd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fds</name><index>[<expr><name>nfd</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nfd</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_poll_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block>

<expr_stmt><expr><name>nfd</name> <operator>=</operator> <call><name>channel_fill_poll_write</name><argument_list>(<argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>nfd</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>channel_poll_check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ret_in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fds_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ret_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name> <init>= <expr><name>fds_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>in_part</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_CHANNELS</name><argument_list>(<argument>channel</argument>)</argument_list></macro>

<block>{<block_content>

<for>for <control>(<init><expr><name>part</name> <operator>=</operator> <name>PART_SOCK</name></expr>;</init> <condition><expr><name>part</name> <operator>&lt;</operator> <name>PART_IN</name></expr>;</condition> <incr><expr><operator>++</operator><name>part</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_poll_idx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fds</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_read</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><literal type="string">"channel_poll_check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>ret</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_fd</name> <operator>!=</operator> <name>INVALID_FD</name>

<operator>&amp;&amp;</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_keep_open</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_read</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><literal type="string">"channel_poll_check_keep_open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>in_part</name> <operator>=</operator> <operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_IN</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>in_part</name><operator>-&gt;</operator><name>ch_poll_idx</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fds</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLOUT</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_write_input</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>ret</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SELECT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>channel_select_setup</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>maxfd_in</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>rfds_in</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>wfds_in</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>tvp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>maxfd</name> <init>= <expr><name>maxfd_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>rfds</name> <init>= <expr><name>rfds_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>wfds</name> <init>= <expr><name>wfds_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_CHANNELS</name><argument_list>(<argument>channel</argument>)</argument_list></macro>

<block>{<block_content>

<for>for <control>(<init><expr><name>part</name> <operator>=</operator> <name>PART_SOCK</name></expr>;</init> <condition><expr><name>part</name> <operator>&lt;</operator> <name>PART_IN</name></expr>;</condition> <incr><expr><operator>++</operator><name>part</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>sock_T</name></type> <name>fd</name> <init>= <expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_fd</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <name>INVALID_FD</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_keep_open</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tvp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&gt;</operator> <name>KEEP_OPEN_TIME</name> <operator>*</operator> <literal type="number">1000</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>tvp</name> <operator>=</operator> <name>tv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <name>KEEP_OPEN_TIME</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>fd</name></expr></argument>, <argument><expr><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>maxfd</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>fd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxfd</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>fd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block>

<expr_stmt><expr><name>maxfd</name> <operator>=</operator> <call><name>channel_fill_wfds</name><argument_list>(<argument><expr><name>maxfd</name></expr></argument>, <argument><expr><name>wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>maxfd</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>channel_select_check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ret_in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>rfds_in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>wfds_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>ret_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>rfds</name> <init>= <expr><name>rfds_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>wfds</name> <init>= <expr><name>wfds_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chanpart_T</name> <modifier>*</modifier></type><name>in_part</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_CHANNELS</name><argument_list>(<argument>channel</argument>)</argument_list></macro>

<block>{<block_content>

<for>for <control>(<init><expr><name>part</name> <operator>=</operator> <name>PART_SOCK</name></expr>;</init> <condition><expr><name>part</name> <operator>&lt;</operator> <name>PART_IN</name></expr>;</condition> <incr><expr><operator>++</operator><name>part</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>sock_T</name></type> <name>fd</name> <init>= <expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_fd</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>fd</name> <operator>!=</operator> <name>INVALID_FD</name> <operator>&amp;&amp;</operator> <call><name>FD_ISSET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>rfds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_read</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><literal type="string">"channel_select_check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_CLR</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>ret</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>fd</name> <operator>!=</operator> <name>INVALID_FD</name> <operator>&amp;&amp;</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_keep_open</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_read</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><literal type="string">"channel_select_check_keep_open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>in_part</name> <operator>=</operator> <operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>PART_IN</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>in_part</name><operator>-&gt;</operator><name>ch_fd</name></name> <operator>!=</operator> <name>INVALID_FD</name>

<operator>&amp;&amp;</operator> <call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_fd</name></name></expr></argument>, <argument><expr><name>wfds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FD_CLR</name><argument_list>(<argument><expr><name><name>in_part</name><operator>-&gt;</operator><name>ch_fd</name></name></expr></argument>, <argument><expr><name>wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_write_input</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>ret</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>int</name></type>

<name>channel_parse_messages</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>first_channel</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part</name> <init>= <expr><name>PART_SOCK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recursive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ELAPSED_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>elapsed_T</name></type> <name>start_tv</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>++</operator><name>recursive</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>safe_to_invoke_callback</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ELAPSED_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ELAPSED_INIT</name><argument_list>(<argument><expr><name>start_tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>did_repeated_msg</name> <operator>&amp;</operator> <name>REPEATED_MSG_LOOKING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"looking for messages on channels"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_repeated_msg</name> <operator>=</operator> <name>REPEATED_MSG_LOOKING</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>channel</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>recursive</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>channel_can_close</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_to_be_closed</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>PART_COUNT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_close_now</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <name>first_channel</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_to_be_freed</name></name> <operator>||</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_killing</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_free_contents</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_job</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>ch_job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>channel_free_channel</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <name>first_channel</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_refcount</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>channel_still_useful</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_free</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <name>first_channel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>part</name> <operator>=</operator> <name>PART_SOCK</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_fd</name> <operator>!=</operator> <name>INVALID_FD</name>

<operator>||</operator> <call><name>channel_has_readahead</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_refcount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>may_invoke_callback</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>channel_unref</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>r</name> <operator>==</operator> <name>OK</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ELAPSED_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <call><name>ELAPSED_FUNC</name><argument_list>(<argument><expr><name>start_tv</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">100L</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <name>first_channel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>part</name> <operator>=</operator> <name>PART_SOCK</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>part</name> <operator>&lt;</operator> <name>PART_ERR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>part</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>part</name> <operator>=</operator> <name>PART_SOCK</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>channel_need_redraw</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>channel_need_redraw</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_after_callback</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>safe_to_invoke_callback</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>recursive</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>channel_any_readahead</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>first_channel</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part</name> <init>= <expr><name>PART_SOCK</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>channel</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>channel_has_readahead</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>part</name> <operator>&lt;</operator> <name>PART_ERR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>part</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>part</name> <operator>=</operator> <name>PART_SOCK</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>set_ref_in_channel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>abort</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <name>first_channel</name></expr>;</init> <condition><expr><operator>!</operator><name>abort</name> <operator>&amp;&amp;</operator> <name>channel</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>channel</name> <operator>=</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>channel_still_useful</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_CHANNEL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_channel</name></name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>abort</name> <operator>=</operator> <name>abort</name> <operator>||</operator> <call><name>set_ref_in_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<return>return <expr><name>abort</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ch_part_T</name></type>

<name>channel_part_send</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>CH_SOCK_FD</name></name> <operator>==</operator> <name>INVALID_FD</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PART_IN</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>PART_SOCK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ch_part_T</name></type>

<name>channel_part_read</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>CH_SOCK_FD</name></name> <operator>==</operator> <name>INVALID_FD</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PART_OUT</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>PART_SOCK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ch_mode_T</name></type>

<name>channel_get_mode</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MODE_JSON</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_mode</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>channel_get_timeout</name><parameter_list>(<parameter><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name>ch_timeout</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>handle_mode</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>ch_mode_T</name> <modifier>*</modifier></type><name>modep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>jo</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"nl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>modep</name> <operator>=</operator> <name>MODE_NL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"raw"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>modep</name> <operator>=</operator> <name>MODE_RAW</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"js"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>modep</name> <operator>=</operator> <name>MODE_JS</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"json"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>modep</name> <operator>=</operator> <name>MODE_JSON</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>handle_io</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>ch_part_T</name></type> <name>part</name></decl></parameter>, <parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_OUT_IO</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>part</name> <operator>-</operator> <name>PART_OUT</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>part</name></expr>]</index></name> <operator>=</operator> <name>JIO_NULL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"pipe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>part</name></expr>]</index></name> <operator>=</operator> <name>JIO_PIPE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>part</name></expr>]</index></name> <operator>=</operator> <name>JIO_FILE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"buffer"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>part</name></expr>]</index></name> <operator>=</operator> <name>JIO_BUFFER</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"out"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>part</name> <operator>==</operator> <name>PART_ERR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io</name><index>[<expr><name>part</name></expr>]</index></name> <operator>=</operator> <name>JIO_OUT</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>clear_job_options</name><parameter_list>(<parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jobopt_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>free_job_options</name><parameter_list>(<parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_callback</name><operator>.</operator><name>cb_partial</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>partial_unref</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_callback</name><operator>.</operator><name>cb_partial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_callback</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>func_unref</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_callback</name><operator>.</operator><name>cb_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_out_cb</name><operator>.</operator><name>cb_partial</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>partial_unref</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_out_cb</name><operator>.</operator><name>cb_partial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_out_cb</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>func_unref</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_out_cb</name><operator>.</operator><name>cb_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_err_cb</name><operator>.</operator><name>cb_partial</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>partial_unref</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_err_cb</name><operator>.</operator><name>cb_partial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_err_cb</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>func_unref</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_err_cb</name><operator>.</operator><name>cb_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_close_cb</name><operator>.</operator><name>cb_partial</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>partial_unref</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_close_cb</name><operator>.</operator><name>cb_partial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_close_cb</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>func_unref</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_close_cb</name><operator>.</operator><name>cb_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_exit_cb</name><operator>.</operator><name>cb_partial</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>partial_unref</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_exit_cb</name><operator>.</operator><name>cb_partial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_exit_cb</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>func_unref</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_exit_cb</name><operator>.</operator><name>cb_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_env</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dict_unref</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>part_from_char</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="char">'i'</literal></expr> ?</condition><then> <expr><name>PART_IN</name></expr> </then><else>: <expr><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="char">'o'</literal></expr> ?</condition><then> <expr><name>PART_OUT</name></expr></then><else>: <expr><name>PART_ERR</name></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>get_job_options</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>supported</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>supported2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_DICT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dict</name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_used</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>dict</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>&amp;</operator><call><name>dict_lookup</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>di_tv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_MODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>handle_mode</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_mode</name></name></expr></argument>, <argument><expr><name>JO_MODE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"in_mode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_IN_MODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>handle_mode</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_in_mode</name></name></expr></argument>, <argument><expr><name>JO_IN_MODE</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"out_mode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_OUT_MODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>handle_mode</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_out_mode</name></name></expr></argument>, <argument><expr><name>JO_OUT_MODE</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"err_mode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_ERR_MODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>handle_mode</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_err_mode</name></name></expr></argument>, <argument><expr><name>JO_ERR_MODE</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"noblock"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_MODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_noblock</name></name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"in_io"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"out_io"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"err_io"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_OUT_IO</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>handle_io</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><call><name>part_from_char</name><argument_list>(<argument><expr><operator>*</operator><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"in_name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"out_name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"err_name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>part</name> <operator>=</operator> <call><name>part_from_char</name><argument_list>(<argument><expr><operator>*</operator><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_OUT_IO</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_OUT_NAME</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>part</name> <operator>-</operator> <name>PART_OUT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io_name</name><index>[<expr><name>part</name></expr>]</index></name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><name>item</name></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io_name_buf</name><index>[<expr><name>part</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"pty"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_MODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_pty</name></name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"in_buf"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"out_buf"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"err_buf"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>part</name> <operator>=</operator> <call><name>part_from_char</name><argument_list>(<argument><expr><operator>*</operator><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_OUT_IO</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_OUT_BUF</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>part</name> <operator>-</operator> <name>PART_OUT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io_buf</name><index>[<expr><name>part</name></expr>]</index></name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io_buf</name><index>[<expr><name>part</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargNval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>buflist_findnr</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_io_buf</name><index>[<expr><name>part</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nobufnr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_io_buf</name><index>[<expr><name>part</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"out_modifiable"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"err_modifiable"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>part</name> <operator>=</operator> <call><name>part_from_char</name><argument_list>(<argument><expr><operator>*</operator><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_OUT_IO</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_OUT_MODIFIABLE</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>part</name> <operator>-</operator> <name>PART_OUT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_modifiable</name><index>[<expr><name>part</name></expr>]</index></name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"out_msg"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"err_msg"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>part</name> <operator>=</operator> <call><name>part_from_char</name><argument_list>(<argument><expr><operator>*</operator><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_OUT_IO</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_OUT_MSG</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>part</name> <operator>-</operator> <name>PART_OUT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_message</name><index>[<expr><name>part</name></expr>]</index></name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"in_top"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"in_bot"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name> <modifier>*</modifier></type><name>lp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_OUT_IO</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lp</name> <operator>=</operator> <operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_in_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_IN_TOP</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>lp</name> <operator>=</operator> <operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_in_bot</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_IN_BOT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>lp</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>lp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargNval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"channel"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_OUT_IO</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_CHANNEL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_CHANNEL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"channel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_channel</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_channel</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"callback"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_CALLBACK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_CALLBACK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_callback</name></name> <operator>=</operator> <call><name>get_callback</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_callback</name><operator>.</operator><name>cb_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"out_cb"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_OUT_CALLBACK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_OUT_CALLBACK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_out_cb</name></name> <operator>=</operator> <call><name>get_callback</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_out_cb</name><operator>.</operator><name>cb_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"out_cb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"err_cb"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_ERR_CALLBACK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_ERR_CALLBACK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_err_cb</name></name> <operator>=</operator> <call><name>get_callback</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_err_cb</name><operator>.</operator><name>cb_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"err_cb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"close_cb"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_CLOSE_CALLBACK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_CLOSE_CALLBACK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_close_cb</name></name> <operator>=</operator> <call><name>get_callback</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_close_cb</name><operator>.</operator><name>cb_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"close_cb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"drop"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>never</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"never"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>never</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargNval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"drop"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_drop_never</name></name> <operator>=</operator> <name>never</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"exit_cb"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_EXIT_CB</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_EXIT_CB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_exit_cb</name></name> <operator>=</operator> <call><name>get_callback</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_exit_cb</name><operator>.</operator><name>cb_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"exit_cb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"term_name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported2</name> <operator>&amp;</operator> <name>JO2_TERM_NAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_TERM_NAME</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_name</name></name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><name>item</name></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_name_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"term_name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"term_finish"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported2</name> <operator>&amp;</operator> <name>JO2_TERM_FINISH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"open"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargNval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"term_finish"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_TERM_FINISH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_finish</name></name> <operator>=</operator> <operator>*</operator><name>val</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"term_opencmd"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported2</name> <operator>&amp;</operator> <name>JO2_TERM_OPENCMD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_TERM_OPENCMD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_term_opencmd</name></name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><name>item</name></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_opencmd_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'d'</literal>

<operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"term_opencmd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"eof_chars"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported2</name> <operator>&amp;</operator> <name>JO2_EOF_CHARS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_EOF_CHARS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_eof_chars</name></name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><name>item</name></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_eof_chars_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_eof_chars</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"eof_chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"term_rows"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported2</name> <operator>&amp;</operator> <name>JO2_TERM_ROWS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_TERM_ROWS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_rows</name></name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"term_cols"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported2</name> <operator>&amp;</operator> <name>JO2_TERM_COLS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_TERM_COLS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_cols</name></name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"vertical"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported2</name> <operator>&amp;</operator> <name>JO2_VERTICAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_VERTICAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_vertical</name></name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"curwin"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported2</name> <operator>&amp;</operator> <name>JO2_CURWIN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_CURWIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_curwin</name></name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"bufnr"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported2</name> <operator>&amp;</operator> <name>JO2_CURWIN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_BUFNR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargNval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_bufnr_buf</name></name> <operator>=</operator> <call><name>buflist_findnr</name><argument_list>(<argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_bufnr_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nobufnr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_bufnr_buf</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>jo_bufnr_buf</name><operator>-&gt;</operator><name>b_term</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"bufnr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"hidden"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported2</name> <operator>&amp;</operator> <name>JO2_HIDDEN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_HIDDEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_hidden</name></name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"norestore"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported2</name> <operator>&amp;</operator> <name>JO2_NORESTORE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_NORESTORE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_norestore</name></name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"term_kill"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported2</name> <operator>&amp;</operator> <name>JO2_TERM_KILL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_TERM_KILL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_kill</name></name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><name>item</name></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_kill_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_kill</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"term_kill"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"tty_type"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported2</name> <operator>&amp;</operator> <name>JO2_TTY_TYPE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_TTY_TYPE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"tty_type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"winpty"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"conpty"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"tty_type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_tty_type</name></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"ansi_colors"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name><name>rgb</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported2</name> <operator>&amp;</operator> <name>JO2_ANSI_COLORS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>item</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_LIST</name>

<operator>||</operator> <name><name>item</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ansi_colors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>li</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr><operator>,</operator> <expr><name>n</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>color_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guicolor_T</name></type> <name>guicolor</name></decl>;</decl_stmt>

<expr_stmt><expr><name>color_name</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>guicolor</name> <operator>=</operator> <call><name>GUI_GET_COLOR</name><argument_list>(<argument><expr><name>color_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>guicolor</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rgb</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>GUI_MCH_GET_RGB</name><argument_list>(<argument><expr><name>guicolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">16</literal> <operator>||</operator> <name>li</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ansi_colors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_ANSI_COLORS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_ansi_colors</name></name></expr></argument>, <argument><expr><name>rgb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rgb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"term_highlight"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported2</name> <operator>&amp;</operator> <name>JO2_TERM_HIGHLIGHT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_TERM_HIGHLIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_highlight_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"term_highlight"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_highlight</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"term_api"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported2</name> <operator>&amp;</operator> <name>JO2_TERM_API</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_TERM_API</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_api</name></name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><name>item</name></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_api_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_term_api</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"term_api"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"env"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported2</name> <operator>&amp;</operator> <name>JO2_ENV</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_DICT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"env"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_ENV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_env</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_env</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_env</name><operator>-&gt;</operator><name>dv_refcount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"cwd"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported2</name> <operator>&amp;</operator> <name>JO2_CWD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_cwd</name></name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_cwd_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_cwd</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>mch_isdir</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_cwd</name></name></expr></argument>)</argument_list></call>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <call><name>mch_access</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_cwd</name></name></expr></argument>, <argument><expr><name>X_OK</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"cwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set2</name></name> <operator>|=</operator> <name>JO2_CWD</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"waittime"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_WAITTIME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_WAITTIME</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_waittime</name></name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"timeout"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_TIMEOUT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_TIMEOUT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_timeout</name></name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"out_timeout"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_OUT_TIMEOUT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_OUT_TIMEOUT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_out_timeout</name></name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"err_timeout"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_ERR_TIMEOUT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_ERR_TIMEOUT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_err_timeout</name></name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"part"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_PART</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_PART</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"err"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_part</name></name> <operator>=</operator> <name>PART_ERR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"out"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_part</name></name> <operator>=</operator> <name>PART_OUT</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargNval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"part"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_ID</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_ID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_id</name></name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"stoponexit"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_STOPONEXIT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_STOPONEXIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_stoponexit</name></name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><name>item</name></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_stoponexit_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_stoponexit</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invargval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stoponexit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>, <argument><expr><literal type="string">"block_write"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>supported</name> <operator>&amp;</operator> <name>JO_BLOCK_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>|=</operator> <name>JO_BLOCK_WRITE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_block_write</name></name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>hi</name><operator>-&gt;</operator><name>hi_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>job_T</name> <modifier>*</modifier></type><name>first_job</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>job_free_contents</name><parameter_list>(<parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>, <argument><expr><literal type="string">"Freeing job"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name><operator>-&gt;</operator><name>ch_job</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_unref</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mch_clear_job</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_tty_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_tty_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_stoponexit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_termsig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_tty_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>job</name><operator>-&gt;</operator><name>jv_exit_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_argv</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>job</name><operator>-&gt;</operator><name>jv_argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>job_unlink</name><parameter_list>(<parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_next</name><operator>-&gt;</operator><name>jv_prev</name></name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>jv_prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_prev</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>first_job</name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>jv_next</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_prev</name><operator>-&gt;</operator><name>jv_next</name></name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>jv_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>job_free_job</name><parameter_list>(<parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>job_unlink</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>job_free</name><parameter_list>(<parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_free_unref_items</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>job_free_contents</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>job_free_job</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>job_T</name> <modifier>*</modifier></type><name>jobs_to_free</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>job_free_later</name><parameter_list>(<parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>job_unlink</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_next</name></name> <operator>=</operator> <name>jobs_to_free</name></expr>;</expr_stmt>

<expr_stmt><expr><name>jobs_to_free</name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>free_jobs_to_free_later</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>jobs_to_free</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>job</name> <operator>=</operator> <name>jobs_to_free</name></expr>;</expr_stmt>

<expr_stmt><expr><name>jobs_to_free</name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>jv_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>job_free_contents</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>job_free_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>first_job</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>job_free</name><argument_list>(<argument><expr><name>first_job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>free_jobs_to_free_later</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free_unused_terminals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>job_need_end_check</name><parameter_list>(<parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>==</operator> <name>JOB_STARTED</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>jv_stoponexit</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>job</name><operator>-&gt;</operator><name>jv_exit_cb</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>job_channel_still_useful</name><parameter_list>(<parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>channel_still_useful</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>job_channel_can_close</name><parameter_list>(<parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>channel_can_close</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>job_still_useful</name><parameter_list>(<parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>job_need_end_check</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>job_channel_still_useful</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GUI_MAY_FORK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GUI_MAY_SPAWN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>job_any_running</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_JOBS</name><argument_list>(<argument>job</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><call><name>job_still_useful</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"GUI not forking because a job is running"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_ARGV</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>win32_escape_arg</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>slen</name></decl>, <decl><type ref="prev"/><name>dlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>escaping</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>escaped_arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_spaces</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dlen</name> <operator>=</operator> <name>slen</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>dlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>has_spaces</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>has_spaces</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dlen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>==</operator> <name>slen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>escaped_arg</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>dlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>escaped_arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>escaped_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dlen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>escaped_arg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_spaces</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition><incr/>)</control>

<block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>escaping</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>escaping</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<expr_stmt><expr><name>escaping</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>escaping</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MB_COPY_CHAR</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>has_spaces</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>escaping</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<return>return <expr><name>escaped_arg</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>win32_build_cmd</name><parameter_list>(<parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR_ALL_LIST_ITEMS</name><argument_list>(<argument>l</argument>, <argument>li</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>win32_escape_arg</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>li_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>job_cleanup</name><parameter_list>(<parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>!=</operator> <name>JOB_ENDED</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>=</operator> <name>JOB_FINISHED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ch_close_part</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>, <argument><expr><name>PART_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_exit_cb</name><operator>.</operator><name>cb_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>, <argument><expr><literal type="string">"Invoking exit callback %s"</literal></expr></argument>,

<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_exit_cb</name><operator>.</operator><name>cb_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>job</name><operator>-&gt;</operator><name>jv_refcount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_JOB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_job</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>jv_exitval</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>job</name><operator>-&gt;</operator><name>jv_exit_cb</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>job</name><operator>-&gt;</operator><name>jv_refcount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>channel_need_redraw</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>job</name><operator>-&gt;</operator><name>jv_channel</name><operator>-&gt;</operator><name>ch_anonymous_pipe</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name><operator>-&gt;</operator><name>ch_killing</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_refcount</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>job_channel_still_useful</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>job_free_later</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>set_ref_in_job</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>abort</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>job</name> <operator>=</operator> <name>first_job</name></expr>;</init> <condition><expr><operator>!</operator><name>abort</name> <operator>&amp;&amp;</operator> <name>job</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>job</name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>jv_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>job_still_useful</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_JOB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_job</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>

<expr_stmt><expr><name>abort</name> <operator>=</operator> <name>abort</name> <operator>||</operator> <call><name>set_ref_in_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>copyID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<return>return <expr><name>abort</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>job_unref</name><parameter_list>(<parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>job</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>--</operator><name><name>job</name><operator>-&gt;</operator><name>jv_refcount</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>job_channel_still_useful</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>job_need_end_check</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>job_free</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>, <argument><expr><literal type="string">"detaching channel from job"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name><operator>-&gt;</operator><name>ch_job</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_unref</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>free_unused_jobs_contents</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>did_free</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_JOBS</name><argument_list>(<argument>job</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>jv_copyID</name></name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>copyID</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>job_still_useful</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>job_free_contents</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_free</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>did_free</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>free_unused_jobs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>copyID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job_next</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>job</name> <operator>=</operator> <name>first_job</name></expr>;</init> <condition><expr><name>job</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>job</name> <operator>=</operator> <name>job_next</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>job_next</name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>jv_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>jv_copyID</name></name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>copyID</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>job_still_useful</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>job_free_job</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>job_T</name> <modifier>*</modifier></type>

<name>job_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>

<expr_stmt><expr><name>job</name> <operator>=</operator> <call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>job_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>job</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_stoponexit</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"term"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first_job</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>first_job</name><operator>-&gt;</operator><name>jv_prev</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_next</name></name> <operator>=</operator> <name>first_job</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first_job</name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>job</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>job_set_options</name><parameter_list>(<parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_STOPONEXIT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_stoponexit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_stoponexit</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_stoponexit</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_stoponexit</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_stoponexit</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>jo_stoponexit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_EXIT_CB</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>job</name><operator>-&gt;</operator><name>jv_exit_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>jo_exit_cb</name><operator>.</operator><name>cb_name</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_exit_cb</name><operator>.</operator><name>cb_name</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_exit_cb</name><operator>.</operator><name>cb_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_exit_cb</name><operator>.</operator><name>cb_partial</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>job</name><operator>-&gt;</operator><name>jv_exit_cb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>jo_exit_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>job_stop_on_exit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_JOBS</name><argument_list>(<argument>job</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>==</operator> <name>JOB_STARTED</name> <operator>&amp;&amp;</operator> <name><name>job</name><operator>-&gt;</operator><name>jv_stoponexit</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_signal_job</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_stoponexit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>has_pending_job</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_JOBS</name><argument_list>(<argument>job</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>==</operator> <name>JOB_STARTED</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>job_channel_still_useful</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>==</operator> <name>JOB_FINISHED</name>

<operator>&amp;&amp;</operator> <call><name>job_channel_can_close</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CHECK_ENDED</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<function><type><name>int</name></type>

<name>job_check_ended</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_end</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>first_job</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>did_end</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_CHECK_ENDED</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><call><name>mch_detect_ended_job</name><argument_list>(<argument><expr><name>first_job</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>job</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>did_end</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>job_cleanup</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><call><name>free_jobs_to_free_later</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channel_need_redraw</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>channel_need_redraw</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_after_callback</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>did_end</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>job_T</name> <modifier>*</modifier></type>

<name>job_start</name><parameter_list>(

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv_arg</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>jobopt_T</name> <modifier>*</modifier></type><name>opt_arg</name></decl></parameter>,

<parameter><decl><type><name>job_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>term_job</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_ARGV</name></cpp:macro></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>jobopt_T</name></type> <name>opt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ch_part_T</name></type> <name>part</name></decl>;</decl_stmt>

<expr_stmt><expr><name>job</name> <operator>=</operator> <call><name>job_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>job</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>=</operator> <name>JOB_FAILED</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_ARGV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>opt_arg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>opt</name> <operator>=</operator> <operator>*</operator><name>opt_arg</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>clear_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>jo_mode</name></name> <operator>=</operator> <name>MODE_NL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>,

<argument><expr><name>JO_MODE_ALL</name> <operator>+</operator> <name>JO_CB_ALL</name> <operator>+</operator> <name>JO_TIMEOUT_ALL</name> <operator>+</operator> <name>JO_STOPONEXIT</name>

<operator>+</operator> <name>JO_EXIT_CB</name> <operator>+</operator> <name>JO_OUT_IO</name> <operator>+</operator> <name>JO_BLOCK_WRITE</name></expr></argument>,

<argument><expr><name>JO2_ENV</name> <operator>+</operator> <name>JO2_CWD</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>part</name> <operator>=</operator> <name>PART_OUT</name></expr>;</init> <condition><expr><name>part</name> <operator>&lt;</operator> <name>PART_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>part</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opt</name><operator>.</operator><name>jo_set</name></name> <operator>&amp;</operator> <operator>(</operator><name>JO_OUT_IO</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>part</name> <operator>-</operator> <name>PART_OUT</name><operator>)</operator><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>opt</name><operator>.</operator><name>jo_io</name><index>[<expr><name>part</name></expr>]</index></name> <operator>==</operator> <name>JIO_FILE</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>opt</name><operator>.</operator><name>jo_set</name></name> <operator>&amp;</operator> <operator>(</operator><name>JO_OUT_NAME</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>part</name> <operator>-</operator> <name>PART_OUT</name><operator>)</operator><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>*</operator><name><name>opt</name><operator>.</operator><name>jo_io_name</name><index>[<expr><name>part</name></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E920: _io file requires _name to be set"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opt</name><operator>.</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_IN_IO</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>.</operator><name>jo_io</name><index>[<expr><name>PART_IN</name></expr>]</index></name> <operator>==</operator> <name>JIO_BUFFER</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_IN_BUF</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_findnr</name><argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>jo_io_buf</name><index>[<expr><name>PART_IN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nobufnr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>opt</name><operator>.</operator><name>jo_io_buf</name><index>[<expr><name>PART_IN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opt</name><operator>.</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_IN_NAME</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E915: in_io buffer requires in_buf or in_name to be set"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_find_by_name</name><argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>jo_io_name</name><index>[<expr><name>PART_IN</name></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>numbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_IN_BUF</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>numbuf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>jo_io_buf</name><index>[<expr><name>PART_IN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>numbuf</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>jo_io_name</name><index>[<expr><name>PART_IN</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E918: buffer must be loaded: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_in_buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>job_set_options</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ARGV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>argv_arg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>argv_arg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>argc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>argc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>argv_arg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>build_argv_from_string</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_LIST</name>

<operator>||</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>build_argv_from_list</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_ARGV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>win32_build_cmd</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>term_job</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>term_job</name> <operator>=</operator> <name>job</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ARGV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ch_log_active</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Starting job: %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mch_job_start</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>job</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name>term_job</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Starting job: %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_job_start</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr></argument>, <argument><expr><name>job</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_write_in</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>theend</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_ARGV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>argv</name> <operator>!=</operator> <name><name>job</name><operator>-&gt;</operator><name>jv_argv</name></name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>job</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>job_status</name><parameter_list>(<parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>&gt;=</operator> <name>JOB_ENDED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="string">"dead"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>==</operator> <name>JOB_FAILED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="string">"fail"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>mch_job_status</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>==</operator> <name>JOB_ENDED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>job_cleanup</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>job_stop</name><parameter_list>(<parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>type</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>==</operator> <name>JOB_FAILED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>, <argument><expr><literal type="string">"Job failed to start, job_stop() skipped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>==</operator> <name>JOB_ENDED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>, <argument><expr><literal type="string">"Job has already ended, job_stop() skipped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr></argument>, <argument><expr><literal type="string">"Stopping job with '%s'"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_signal_job</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"kill"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name><operator>-&gt;</operator><name>ch_job_killed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>invoke_prompt_callback</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>prompt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_prompt_callback</name><operator>.</operator><name>cb_name</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_prompt_callback</name><operator>.</operator><name>cb_name</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prompt</name> <operator>=</operator> <call><name>prompt_text</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>text</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_prompt_callback</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>invoke_prompt_interrupt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_prompt_interrupt</name><operator>.</operator><name>cb_name</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_prompt_interrupt</name><operator>.</operator><name>cb_name</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>call_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_prompt_interrupt</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_prompt_setcallback</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>callback_T</name></type> <name>callback</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>tv_get_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>callback</name> <operator>=</operator> <call><name>get_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>callback</name><operator>.</operator><name>cb_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_prompt_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_prompt_callback</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_prompt_setinterrupt</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>callback_T</name></type> <name>callback</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>tv_get_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>callback</name> <operator>=</operator> <call><name>get_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>callback</name><operator>.</operator><name>cb_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_prompt_interrupt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_prompt_interrupt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_prompt_setprompt</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>tv_get_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_prompt_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_prompt_text</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_ch_canread</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><call><name>get_channel_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>channel_has_readahead</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_SOCK</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>channel_has_readahead</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_OUT</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>channel_has_readahead</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>PART_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_ch_close</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><call><name>get_channel_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_close</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_clear</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_ch_close_in</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><call><name>get_channel_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_close_in</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_ch_getbufnr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><call><name>get_channel_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>what</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>part</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="string">"err"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>part</name> <operator>=</operator> <name>PART_ERR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="string">"out"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>part</name> <operator>=</operator> <name>PART_OUT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="string">"in"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>part</name> <operator>=</operator> <name>PART_IN</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>part</name> <operator>=</operator> <name>PART_SOCK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name><name>ch_bufref</name><operator>.</operator><name>br_buf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator>

<name><name>channel</name><operator>-&gt;</operator><name>ch_part</name><index>[<expr><name>part</name></expr>]</index></name><operator>.</operator><name><name>ch_bufref</name><operator>.</operator><name>br_buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_ch_getjob</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><call><name>get_channel_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_JOB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_job</name></name> <operator>=</operator> <name><name>channel</name><operator>-&gt;</operator><name>ch_job</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>ch_job</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>channel</name><operator>-&gt;</operator><name>ch_job</name><operator>-&gt;</operator><name>jv_refcount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_ch_info</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><call><name>get_channel_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>rettv_dict_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_info</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_ch_log</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>get_channel_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ch_log</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_ch_logfile</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_restricted</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ch_logfile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_ch_open</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_CHANNEL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_restricted</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_channel</name></name> <operator>=</operator> <call><name>channel_open_func</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_ch_read</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>common_channel_read</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_ch_readblob</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>common_channel_read</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_ch_readraw</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>common_channel_read</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_ch_evalexpr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_expr_common</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_ch_sendexpr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_expr_common</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_ch_evalraw</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_raw_common</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_ch_sendraw</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ch_raw_common</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_ch_setoptions</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobopt_T</name></type> <name>opt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>get_channel_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>clear_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>,

<argument><expr><name>JO_CB_ALL</name> <operator>+</operator> <name>JO_TIMEOUT_ALL</name> <operator>+</operator> <name>JO_MODE_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_set_options</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_ch_status</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>channel_T</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobopt_T</name></type> <name>opt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>part</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <call><name>get_channel_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>clear_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name>JO_PART</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>opt</name><operator>.</operator><name>jo_set</name></name> <operator>&amp;</operator> <name>JO_PART</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>part</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>jo_part</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>channel_status</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>job_T</name> <modifier>*</modifier></type>

<name>get_job_arg</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_JOB</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>job</name> <operator>=</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_job</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>job</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E916: not a valid job"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>job</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_job_getchannel</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><call><name>get_job_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>job</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_CHANNEL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_channel</name></name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name><operator>-&gt;</operator><name>ch_refcount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>job_info</name><parameter_list>(<parameter><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"status"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>job_status</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>dictitem_alloc</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"channel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_CHANNEL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_channel</name></name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>job</name><operator>-&gt;</operator><name>jv_channel</name><operator>-&gt;</operator><name>ch_refcount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dict_add</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dictitem_free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>jv_pid</name></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>jv_proc_info</name><operator>.</operator><name>dwProcessId</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"process"</literal></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"tty_in"</literal></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_tty_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"tty_out"</literal></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_tty_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"exitval"</literal></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_exitval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"exit_cb"</literal></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_exit_cb</name><operator>.</operator><name>cb_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"stoponexit"</literal></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_stoponexit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"termsig"</literal></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_termsig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"tty_type"</literal></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>jv_tty_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>list_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dict_add_list</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"cmd"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>jv_argv</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>job</name><operator>-&gt;</operator><name>jv_argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_append_string</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>job</name><operator>-&gt;</operator><name>jv_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>job_info_all</name><parameter_list>(<parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_JOBS</name><argument_list>(<argument>job</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_JOB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_job</name></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>list_append_tv</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_job_info</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><call><name>get_job_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>job</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>rettv_dict_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>job_info</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>job_info_all</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_job_setoptions</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><call><name>get_job_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobopt_T</name></type> <name>opt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>job</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>clear_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name>JO_STOPONEXIT</name> <operator>+</operator> <name>JO_EXIT_CB</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>job_set_options</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free_job_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_job_start</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_JOB</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_restricted</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_job</name></name> <operator>=</operator> <call><name>job_start</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_job_status</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><call><name>get_job_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>job</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>job_status</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_job_stop</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>job_T</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><call><name>get_job_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>job</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>job_stop</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
